<Project Sdk="Microsoft.NET.Sdk">
  <!--<PropertyGroup Condition="'$(BuildingInsideVisualStudio)' == 'true'">
    <TargetFrameworks>netstandard2.0;</TargetFrameworks>
  </PropertyGroup>
  <PropertyGroup Condition="'$(BuildingInsideVisualStudio)' != 'true'">
    <TargetFrameworks>net9.0;</TargetFrameworks>
  </PropertyGroup>-->

  <PropertyGroup>
    <TargetFramework>net9.0</TargetFramework>
    <Platforms>x64</Platforms>
    <LangVersion>12.0</LangVersion>      
    <EmitCompilerGeneratedFiles>false</EmitCompilerGeneratedFiles>
    <CompilerGeneratedFilesOutputPath>Generated</CompilerGeneratedFilesOutputPath>
    <BaseOutputPath>..\lib\RealmPropsAssembly</BaseOutputPath>
    <RunAnalyzersDuringLiveAnalysis>False</RunAnalyzersDuringLiveAnalysis>
    <EnableNETAnalyzers>False</EnableNETAnalyzers>
    <RunAnalyzersDuringBuild>True</RunAnalyzersDuringBuild>
    <ProduceReferenceAssembly>False</ProduceReferenceAssembly>
    <AssemblyName>$(MSBuildProjectName)</AssemblyName>
    <RunPostBuildEvent>OnOutputUpdated</RunPostBuildEvent>
  </PropertyGroup>

  <!-- YOU MUST TARGET NET STANDARD WHEN BUILDING FROM VS, AND NET9 FROM DOTNET BUILD -->
  <ItemGroup Condition="'$(BuildingInsideVisualStudio)' == 'true'">
    <ProjectReference Include="..\ACRealms.Roslyn.RealmProps\ACRealms.Roslyn.RealmProps.csproj" OutputItemType="Analyzer" ReferenceOutputAssembly="false" SetTargetFramework="TargetFramework=netstandard2.0" />   
  </ItemGroup>
  <ItemGroup Condition="'$(BuildingInsideVisualStudio)' != 'true'">
    <ProjectReference Include="..\ACRealms.Roslyn.RealmProps\ACRealms.Roslyn.RealmProps.csproj" OutputItemType="Analyzer" ReferenceOutputAssembly="false" SetTargetFramework="TargetFramework=net9.0" />
  </ItemGroup>  

  <ItemGroup>
    <AdditionalFiles Include="PropDefs\json\**\*.jsonc" />
    <Compile Remove="Generated\**" />
    <EmbeddedResource Remove="Generated\**" />
    <None Remove="Generated\**" />
    <None Remove="PropDefs\json-schema\**" />
    <AdditionalFiles Include="PropDefs\json-schema\realm-property-schema.json" />
  </ItemGroup>

  <ItemGroup>
   <!--<PackageReference Include="System.Collections.Immutable" Version="9.0.0" />-->
   <!--<PackageReference Include="System.IO.Pipelines" Version="9.0.0" />-->
   <PackageReference Include="System.Text.Json" Version="9.0.0" />    
   <!--<PackageReference Include="NodaTime" Version="3.2.0" />
   <PackageReference Include="Microsoft.Bcl.AsyncInterfaces" Version="9.0.0" />-->
   <!--<PackageReference Include="Microsoft.Bcl.HashCode" Version="1.1.1" />-->
  </ItemGroup>

  <ItemGroup Condition="'$(TargetFramework)'=='netstandard2.0'">
    <PackageReference Include="PolySharp" Version="1.15.0">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
  
  </ItemGroup>

  <Target Name="ExcludeGeneratedFiles" BeforeTargets="CoreCompile">
    <ItemGroup Condition="'$(CompilerGeneratedFilesOutputPath)' != '' And '$(EmitCompilerGeneratedFiles)' == 'true'">
      <!-- Don't include the output from a previous source generator execution into future runs; -->
      <!-- the */** trick here ensures that there's at least one subdirectory, which is our key  -->
      <!-- that it's coming from a source generator as opposed to something that is coming from  -->
      <!-- some other tool. -->
      <Compile Remove="$(CompilerGeneratedFilesOutputPath)/ACRealms.Roslyn.RealmProps/*/**/*.g.cs" />
      <None Include="$(CompilerGeneratedFilesOutputPath)/ACRealms.Roslyn.RealmProps/**" />
    </ItemGroup>
    <ItemGroup Condition="'$(CompilerGeneratedFilesOutputPath)' != '' And '$(EmitCompilerGeneratedFiles)' == 'false'">
      <Compile Remove="$(CompilerGeneratedFilesOutputPath)/ACRealms.Roslyn.RealmProps/*/**/*.g.cs" />
      <None Remove="$(CompilerGeneratedFilesOutputPath)/ACRealms.Roslyn.RealmProps/*/**/*.g.cs" />
    </ItemGroup>
   </Target>

  <Target Name="PostBuild" AfterTargets="PostBuildEvent">
    <Exec Command="mv -fuT $(AssemblyName).dll $(AssemblyName)Assembly.dll&#xD;&#xA;mv -fuT $(AssemblyName).pdb $(AssemblyName)Assembly.pdb&#xD;&#xA;mv -fuT $(AssemblyName).deps.json $(AssemblyName)INVALID.deps.json" WorkingDirectory="$(OutDir)" />
  </Target>
</Project>
