//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System.Collections.Immutable;
using System.Runtime.CompilerServices;
using System.Text.Json;
using Corvus.Json;
using Corvus.Json.Internal;

namespace ACRealms.RealmProps.IntermediateModels;
public readonly partial struct RealmPropertySchema
{
    /// <summary>
    /// Generated from JSON Schema.
    /// </summary>
    public readonly partial struct PropertytypeEntity
    {
        /// <summary>
        /// Matches the value against each of the enumeration values, and returns the result of calling the provided match function for the first match found.
        /// </summary>
        /// <param name = "context">The context to pass to the match function.</param>
        /// <param name = "matchInteger">The function to call if the value matches the JSON value "\"integer\"".</param>
        /// <param name = "matchBoolean">The function to call if the value matches the JSON value "\"boolean\"".</param>
        /// <param name = "matchFloat">The function to call if the value matches the JSON value "\"float\"".</param>
        /// <param name = "matchInt64">The function to call if the value matches the JSON value "\"int64\"".</param>
        /// <param name = "matchString">The function to call if the value matches the JSON value "\"string\"".</param>
        /// <param name = "matchEnum">The function to call if the value matches the JSON value "\"enum\"".</param>
        /// <param name = "defaultMatch">The fallback match.</param>
        public TOut Match<TIn, TOut>(in TIn context, Func<TIn, TOut> matchInteger, Func<TIn, TOut> matchBoolean, Func<TIn, TOut> matchFloat, Func<TIn, TOut> matchInt64, Func<TIn, TOut> matchString, Func<TIn, TOut> matchEnum, Func<TIn, TOut> defaultMatch)
        {
            if (this.ValueKind == JsonValueKind.String)
            {
                if (this.HasJsonElementBacking)
                {
                    if (this.jsonElementBacking.ValueEquals(EnumValues.IntegerUtf8))
                    {
                        return matchInteger(context);
                    }

                    if (this.jsonElementBacking.ValueEquals(EnumValues.BooleanUtf8))
                    {
                        return matchBoolean(context);
                    }

                    if (this.jsonElementBacking.ValueEquals(EnumValues.FloatUtf8))
                    {
                        return matchFloat(context);
                    }

                    if (this.jsonElementBacking.ValueEquals(EnumValues.Int64Utf8))
                    {
                        return matchInt64(context);
                    }

                    if (this.jsonElementBacking.ValueEquals(EnumValues.StringUtf8))
                    {
                        return matchString(context);
                    }

                    if (this.jsonElementBacking.ValueEquals(EnumValues.EnumUtf8))
                    {
                        return matchEnum(context);
                    }
                }
                else
                {
                    switch (this.stringBacking)
                    {
                        case "integer":
                            return matchInteger(context);
                        case "boolean":
                            return matchBoolean(context);
                        case "float":
                            return matchFloat(context);
                        case "int64":
                            return matchInt64(context);
                        case "string":
                            return matchString(context);
                        case "enum":
                            return matchEnum(context);
                        default:
                            break;
                    }
                }
            }

            return defaultMatch(context);
        }

        /// <summary>
        /// Matches the value against each of the enumeration values, and returns the result of calling the provided match function for the first match found.
        /// </summary>
        /// <param name = "matchInteger">The function to call if the value matches the JSON value "\"integer\"".</param>
        /// <param name = "matchBoolean">The function to call if the value matches the JSON value "\"boolean\"".</param>
        /// <param name = "matchFloat">The function to call if the value matches the JSON value "\"float\"".</param>
        /// <param name = "matchInt64">The function to call if the value matches the JSON value "\"int64\"".</param>
        /// <param name = "matchString">The function to call if the value matches the JSON value "\"string\"".</param>
        /// <param name = "matchEnum">The function to call if the value matches the JSON value "\"enum\"".</param>
        /// <param name = "defaultMatch">The fallback match.</param>
        public TOut Match<TOut>(Func<TOut> matchInteger, Func<TOut> matchBoolean, Func<TOut> matchFloat, Func<TOut> matchInt64, Func<TOut> matchString, Func<TOut> matchEnum, Func<TOut> defaultMatch)
        {
            if (this.ValueKind == JsonValueKind.String)
            {
                if (this.HasJsonElementBacking)
                {
                    if (this.jsonElementBacking.ValueEquals(EnumValues.IntegerUtf8))
                    {
                        return matchInteger();
                    }

                    if (this.jsonElementBacking.ValueEquals(EnumValues.BooleanUtf8))
                    {
                        return matchBoolean();
                    }

                    if (this.jsonElementBacking.ValueEquals(EnumValues.FloatUtf8))
                    {
                        return matchFloat();
                    }

                    if (this.jsonElementBacking.ValueEquals(EnumValues.Int64Utf8))
                    {
                        return matchInt64();
                    }

                    if (this.jsonElementBacking.ValueEquals(EnumValues.StringUtf8))
                    {
                        return matchString();
                    }

                    if (this.jsonElementBacking.ValueEquals(EnumValues.EnumUtf8))
                    {
                        return matchEnum();
                    }
                }
                else
                {
                    switch (this.stringBacking)
                    {
                        case "integer":
                            return matchInteger();
                        case "boolean":
                            return matchBoolean();
                        case "float":
                            return matchFloat();
                        case "int64":
                            return matchInt64();
                        case "string":
                            return matchString();
                        case "enum":
                            return matchEnum();
                        default:
                            break;
                    }
                }
            }

            return defaultMatch();
        }

        /// <summary>
        /// Permitted values.
        /// </summary>
        public static class EnumValues
        {
            /// <summary>
            /// Gets "integer" as a JSON value.
            /// </summary>
            public static readonly PropertytypeEntity Integer = PropertytypeEntity.Parse("\"integer\"");
            /// <summary>
            /// Gets "integer" as a UTF8 string.
            /// </summary>
            public static ReadOnlySpan<byte> IntegerUtf8 => "integer"u8;

            /// <summary>
            /// Gets "boolean" as a JSON value.
            /// </summary>
            public static readonly PropertytypeEntity Boolean = PropertytypeEntity.Parse("\"boolean\"");
            /// <summary>
            /// Gets "boolean" as a UTF8 string.
            /// </summary>
            public static ReadOnlySpan<byte> BooleanUtf8 => "boolean"u8;

            /// <summary>
            /// Gets "float" as a JSON value.
            /// </summary>
            public static readonly PropertytypeEntity Float = PropertytypeEntity.Parse("\"float\"");
            /// <summary>
            /// Gets "float" as a UTF8 string.
            /// </summary>
            public static ReadOnlySpan<byte> FloatUtf8 => "float"u8;

            /// <summary>
            /// Gets "int64" as a JSON value.
            /// </summary>
            public static readonly PropertytypeEntity Int64 = PropertytypeEntity.Parse("\"int64\"");
            /// <summary>
            /// Gets "int64" as a UTF8 string.
            /// </summary>
            public static ReadOnlySpan<byte> Int64Utf8 => "int64"u8;

            /// <summary>
            /// Gets "string" as a JSON value.
            /// </summary>
            public static readonly PropertytypeEntity String = PropertytypeEntity.Parse("\"string\"");
            /// <summary>
            /// Gets "string" as a UTF8 string.
            /// </summary>
            public static ReadOnlySpan<byte> StringUtf8 => "string"u8;

            /// <summary>
            /// Gets "enum" as a JSON value.
            /// </summary>
            public static readonly PropertytypeEntity Enum = PropertytypeEntity.Parse("\"enum\"");
            /// <summary>
            /// Gets "enum" as a UTF8 string.
            /// </summary>
            public static ReadOnlySpan<byte> EnumUtf8 => "enum"u8;

            /// <summary>
            /// Gets "integer" as a JSON value.
            /// </summary>
            internal static readonly PropertytypeEntity Item0 = PropertytypeEntity.Parse("\"integer\"");
            /// <summary>
            /// Gets "boolean" as a JSON value.
            /// </summary>
            internal static readonly PropertytypeEntity Item1 = PropertytypeEntity.Parse("\"boolean\"");
            /// <summary>
            /// Gets "float" as a JSON value.
            /// </summary>
            internal static readonly PropertytypeEntity Item2 = PropertytypeEntity.Parse("\"float\"");
            /// <summary>
            /// Gets "int64" as a JSON value.
            /// </summary>
            internal static readonly PropertytypeEntity Item3 = PropertytypeEntity.Parse("\"int64\"");
            /// <summary>
            /// Gets "string" as a JSON value.
            /// </summary>
            internal static readonly PropertytypeEntity Item4 = PropertytypeEntity.Parse("\"string\"");
            /// <summary>
            /// Gets "enum" as a JSON value.
            /// </summary>
            internal static readonly PropertytypeEntity Item5 = PropertytypeEntity.Parse("\"enum\"");
        }
    }
}