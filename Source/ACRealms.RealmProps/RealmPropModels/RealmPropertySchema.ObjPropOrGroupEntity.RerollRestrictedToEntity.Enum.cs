//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System.Collections.Immutable;
using System.Runtime.CompilerServices;
using System.Text.Json;
using Corvus.Json;
using Corvus.Json.Internal;

namespace ACRealms.RealmProps.IntermediateModels;
public readonly partial struct RealmPropertySchema
{
    public readonly partial struct ObjPropOrGroupEntity
    {
        /// <summary>
        /// Generated from JSON Schema.
        /// </summary>
        public readonly partial struct RerollRestrictedToEntity
        {
            /// <summary>
            /// Matches the value against each of the enumeration values, and returns the result of calling the provided match function for the first match found.
            /// </summary>
            /// <param name = "context">The context to pass to the match function.</param>
            /// <param name = "matchNever">The function to call if the value matches the JSON value "\"never\"".</param>
            /// <param name = "matchManual">The function to call if the value matches the JSON value "\"manual\"".</param>
            /// <param name = "matchLandblock">The function to call if the value matches the JSON value "\"landblock\"".</param>
            /// <param name = "matchAlways">The function to call if the value matches the JSON value "\"always\"".</param>
            /// <param name = "defaultMatch">The fallback match.</param>
            public TOut Match<TIn, TOut>(in TIn context, Func<TIn, TOut> matchNever, Func<TIn, TOut> matchManual, Func<TIn, TOut> matchLandblock, Func<TIn, TOut> matchAlways, Func<TIn, TOut> defaultMatch)
            {
                if (this.ValueKind == JsonValueKind.String)
                {
                    if (this.HasJsonElementBacking)
                    {
                        if (this.jsonElementBacking.ValueEquals(EnumValues.NeverUtf8))
                        {
                            return matchNever(context);
                        }

                        if (this.jsonElementBacking.ValueEquals(EnumValues.ManualUtf8))
                        {
                            return matchManual(context);
                        }

                        if (this.jsonElementBacking.ValueEquals(EnumValues.LandblockUtf8))
                        {
                            return matchLandblock(context);
                        }

                        if (this.jsonElementBacking.ValueEquals(EnumValues.AlwaysUtf8))
                        {
                            return matchAlways(context);
                        }
                    }
                    else
                    {
                        switch (this.stringBacking)
                        {
                            case "never":
                                return matchNever(context);
                            case "manual":
                                return matchManual(context);
                            case "landblock":
                                return matchLandblock(context);
                            case "always":
                                return matchAlways(context);
                            default:
                                break;
                        }
                    }
                }

                return defaultMatch(context);
            }

            /// <summary>
            /// Matches the value against each of the enumeration values, and returns the result of calling the provided match function for the first match found.
            /// </summary>
            /// <param name = "matchNever">The function to call if the value matches the JSON value "\"never\"".</param>
            /// <param name = "matchManual">The function to call if the value matches the JSON value "\"manual\"".</param>
            /// <param name = "matchLandblock">The function to call if the value matches the JSON value "\"landblock\"".</param>
            /// <param name = "matchAlways">The function to call if the value matches the JSON value "\"always\"".</param>
            /// <param name = "defaultMatch">The fallback match.</param>
            public TOut Match<TOut>(Func<TOut> matchNever, Func<TOut> matchManual, Func<TOut> matchLandblock, Func<TOut> matchAlways, Func<TOut> defaultMatch)
            {
                if (this.ValueKind == JsonValueKind.String)
                {
                    if (this.HasJsonElementBacking)
                    {
                        if (this.jsonElementBacking.ValueEquals(EnumValues.NeverUtf8))
                        {
                            return matchNever();
                        }

                        if (this.jsonElementBacking.ValueEquals(EnumValues.ManualUtf8))
                        {
                            return matchManual();
                        }

                        if (this.jsonElementBacking.ValueEquals(EnumValues.LandblockUtf8))
                        {
                            return matchLandblock();
                        }

                        if (this.jsonElementBacking.ValueEquals(EnumValues.AlwaysUtf8))
                        {
                            return matchAlways();
                        }
                    }
                    else
                    {
                        switch (this.stringBacking)
                        {
                            case "never":
                                return matchNever();
                            case "manual":
                                return matchManual();
                            case "landblock":
                                return matchLandblock();
                            case "always":
                                return matchAlways();
                            default:
                                break;
                        }
                    }
                }

                return defaultMatch();
            }

            /// <summary>
            /// Permitted values.
            /// </summary>
            public static class EnumValues
            {
                /// <summary>
                /// Gets "never" as a JSON value.
                /// </summary>
                public static readonly RerollRestrictedToEntity Never = RerollRestrictedToEntity.Parse("\"never\"");
                /// <summary>
                /// Gets "never" as a UTF8 string.
                /// </summary>
                public static ReadOnlySpan<byte> NeverUtf8 => "never"u8;

                /// <summary>
                /// Gets "manual" as a JSON value.
                /// </summary>
                public static readonly RerollRestrictedToEntity Manual = RerollRestrictedToEntity.Parse("\"manual\"");
                /// <summary>
                /// Gets "manual" as a UTF8 string.
                /// </summary>
                public static ReadOnlySpan<byte> ManualUtf8 => "manual"u8;

                /// <summary>
                /// Gets "landblock" as a JSON value.
                /// </summary>
                public static readonly RerollRestrictedToEntity Landblock = RerollRestrictedToEntity.Parse("\"landblock\"");
                /// <summary>
                /// Gets "landblock" as a UTF8 string.
                /// </summary>
                public static ReadOnlySpan<byte> LandblockUtf8 => "landblock"u8;

                /// <summary>
                /// Gets "always" as a JSON value.
                /// </summary>
                public static readonly RerollRestrictedToEntity Always = RerollRestrictedToEntity.Parse("\"always\"");
                /// <summary>
                /// Gets "always" as a UTF8 string.
                /// </summary>
                public static ReadOnlySpan<byte> AlwaysUtf8 => "always"u8;

                /// <summary>
                /// Gets "never" as a JSON value.
                /// </summary>
                internal static readonly RerollRestrictedToEntity Item0 = RerollRestrictedToEntity.Parse("\"never\"");
                /// <summary>
                /// Gets "manual" as a JSON value.
                /// </summary>
                internal static readonly RerollRestrictedToEntity Item1 = RerollRestrictedToEntity.Parse("\"manual\"");
                /// <summary>
                /// Gets "landblock" as a JSON value.
                /// </summary>
                internal static readonly RerollRestrictedToEntity Item2 = RerollRestrictedToEntity.Parse("\"landblock\"");
                /// <summary>
                /// Gets "always" as a JSON value.
                /// </summary>
                internal static readonly RerollRestrictedToEntity Item3 = RerollRestrictedToEntity.Parse("\"always\"");
            }
        }
    }
}