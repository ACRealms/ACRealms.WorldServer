//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System.Collections.Immutable;
using System.Text.Json;
using Corvus.Json;
using Corvus.Json.Internal;

namespace ACRealms.RealmProps.IntermediateModels;
public readonly partial struct RealmPropertySchema
{
    /// <summary>
    /// Generated from JSON Schema.
    /// </summary>
    public readonly partial struct ValDescriptionEntity
    {
        /// <summary>
        /// Conversion to <see cref = "ACRealms.RealmProps.IntermediateModels.RealmPropertySchema.ValDescriptionEntity.OneOf0Entity"/>.
        /// </summary>
        /// <param name = "value">The value from which to convert.</param>
        public static explicit operator ACRealms.RealmProps.IntermediateModels.RealmPropertySchema.ValDescriptionEntity.OneOf0Entity(ValDescriptionEntity value)
        {
            if ((value.backing & Backing.JsonElement) != 0)
            {
                return new(value.AsJsonElement);
            }

            return ACRealms.RealmProps.IntermediateModels.RealmPropertySchema.ValDescriptionEntity.OneOf0Entity.Undefined;
        }

        /// <summary>
        /// Conversion from <see cref = "ACRealms.RealmProps.IntermediateModels.RealmPropertySchema.ValDescriptionEntity.OneOf0Entity"/>.
        /// </summary>
        /// <param name = "value">The value from which to convert.</param>
        public static implicit operator ValDescriptionEntity(ACRealms.RealmProps.IntermediateModels.RealmPropertySchema.ValDescriptionEntity.OneOf0Entity value)
        {
            if (value.HasJsonElementBacking)
            {
                return new(value.AsJsonElement);
            }

            return value.ValueKind switch
            {
                _ => Undefined
            };
        }

        /// <summary>
        /// Conversion to <see cref = "ACRealms.RealmProps.IntermediateModels.RealmPropertySchema.ValStringSimpleEntity"/>.
        /// </summary>
        /// <param name = "value">The value from which to convert.</param>
        public static implicit operator ACRealms.RealmProps.IntermediateModels.RealmPropertySchema.ValStringSimpleEntity(ValDescriptionEntity value)
        {
            if ((value.backing & Backing.JsonElement) != 0)
            {
                return new(value.AsJsonElement);
            }

            if ((value.backing & Backing.String) != 0)
            {
                return new(value.stringBacking);
            }

            return ACRealms.RealmProps.IntermediateModels.RealmPropertySchema.ValStringSimpleEntity.Undefined;
        }

        /// <summary>
        /// Conversion from <see cref = "ACRealms.RealmProps.IntermediateModels.RealmPropertySchema.ValStringSimpleEntity"/>.
        /// </summary>
        /// <param name = "value">The value from which to convert.</param>
        public static explicit operator ValDescriptionEntity(ACRealms.RealmProps.IntermediateModels.RealmPropertySchema.ValStringSimpleEntity value)
        {
            if (value.HasJsonElementBacking)
            {
                return new(value.AsJsonElement);
            }

            return value.ValueKind switch
            {
                JsonValueKind.String => new((string)value),
                _ => Undefined
            };
        }

        /// <summary>
        /// Conversion to <see cref = "ACRealms.RealmProps.IntermediateModels.RealmPropertySchema.DescriptionPatternEntity"/>.
        /// </summary>
        /// <param name = "value">The value from which to convert.</param>
        public static implicit operator ACRealms.RealmProps.IntermediateModels.RealmPropertySchema.DescriptionPatternEntity(ValDescriptionEntity value)
        {
            if ((value.backing & Backing.JsonElement) != 0)
            {
                return new(value.AsJsonElement);
            }

            if ((value.backing & Backing.String) != 0)
            {
                return new(value.stringBacking);
            }

            return ACRealms.RealmProps.IntermediateModels.RealmPropertySchema.DescriptionPatternEntity.Undefined;
        }

        /// <summary>
        /// Conversion from <see cref = "ACRealms.RealmProps.IntermediateModels.RealmPropertySchema.DescriptionPatternEntity"/>.
        /// </summary>
        /// <param name = "value">The value from which to convert.</param>
        public static explicit operator ValDescriptionEntity(ACRealms.RealmProps.IntermediateModels.RealmPropertySchema.DescriptionPatternEntity value)
        {
            if (value.HasJsonElementBacking)
            {
                return new(value.AsJsonElement);
            }

            return value.ValueKind switch
            {
                JsonValueKind.String => new((string)value),
                _ => Undefined
            };
        }

        /// <summary>
        /// Conversion to <see cref = "ACRealms.RealmProps.IntermediateModels.RealmPropertySchema.DescriptionArrayEntity"/>.
        /// </summary>
        /// <param name = "value">The value from which to convert.</param>
        public static explicit operator ACRealms.RealmProps.IntermediateModels.RealmPropertySchema.DescriptionArrayEntity(ValDescriptionEntity value)
        {
            if ((value.backing & Backing.JsonElement) != 0)
            {
                return new(value.AsJsonElement);
            }

            if ((value.backing & Backing.Array) != 0)
            {
                return new(value.arrayBacking);
            }

            return ACRealms.RealmProps.IntermediateModels.RealmPropertySchema.DescriptionArrayEntity.Undefined;
        }

        /// <summary>
        /// Conversion from <see cref = "ACRealms.RealmProps.IntermediateModels.RealmPropertySchema.DescriptionArrayEntity"/>.
        /// </summary>
        /// <param name = "value">The value from which to convert.</param>
        public static implicit operator ValDescriptionEntity(ACRealms.RealmProps.IntermediateModels.RealmPropertySchema.DescriptionArrayEntity value)
        {
            if (value.HasJsonElementBacking)
            {
                return new(value.AsJsonElement);
            }

            return value.ValueKind switch
            {
                JsonValueKind.Array => new(value.AsImmutableList()),
                _ => Undefined
            };
        }

        /// <summary>
        /// Conversion to <see cref = "ACRealms.RealmProps.IntermediateModels.RealmPropertySchema.ValStringArrayValStringArrayEntityArray"/>.
        /// </summary>
        /// <param name = "value">The value from which to convert.</param>
        public static implicit operator ACRealms.RealmProps.IntermediateModels.RealmPropertySchema.ValStringArrayValStringArrayEntityArray(ValDescriptionEntity value)
        {
            if ((value.backing & Backing.JsonElement) != 0)
            {
                return new(value.AsJsonElement);
            }

            if ((value.backing & Backing.Array) != 0)
            {
                return new(value.arrayBacking);
            }

            return ACRealms.RealmProps.IntermediateModels.RealmPropertySchema.ValStringArrayValStringArrayEntityArray.Undefined;
        }

        /// <summary>
        /// Conversion from <see cref = "ACRealms.RealmProps.IntermediateModels.RealmPropertySchema.ValStringArrayValStringArrayEntityArray"/>.
        /// </summary>
        /// <param name = "value">The value from which to convert.</param>
        public static explicit operator ValDescriptionEntity(ACRealms.RealmProps.IntermediateModels.RealmPropertySchema.ValStringArrayValStringArrayEntityArray value)
        {
            if (value.HasJsonElementBacking)
            {
                return new(value.AsJsonElement);
            }

            return value.ValueKind switch
            {
                JsonValueKind.Array => new(value.AsImmutableList()),
                _ => Undefined
            };
        }
    }
}