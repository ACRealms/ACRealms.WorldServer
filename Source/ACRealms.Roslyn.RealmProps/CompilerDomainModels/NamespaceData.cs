using ACRealms.Roslyn.RealmProps.CompilerDomainModels;

namespace ACRealms.Roslyn.RealmProps
{
    record NamespaceData
    {
        public string OriginalPath { get; private init; }
        public ImmutableArrayWrapper<ObjPropInfo> ObjProps { get; private init; }
        public string NamespaceFull { get; private init; }
        public ImmutableArray<string> NestedClassNames { get; private init; }
        public NamespaceData(string originalPath, string namespaceFull, ImmutableArrayWrapper<ObjPropInfo> objProps)
        {
            OriginalPath = originalPath;
            NamespaceFull = namespaceFull;
            ObjProps = objProps;

            string[]? parts = namespaceFull.Split('.');

            NestedClassNames = parts.ToImmutableArray();
        }

        internal string ToCompilationSource()
        {
            string newline =
            $$"""

            
            """;
            string declSpacer = new string(' ', (NestedClassNames.Length + 1) * 4);
            IEnumerable<string> declarations = ObjProps.Array.Select(p => p.ToNamespacedAliasDeclaration(declSpacer));
            string declarationsText = string.Join(newline, declarations);

            string nestedClassDecl = GetNestedClassDecl(declarationsText, new Queue<string>(NestedClassNames), 1);

            return $$"""
            // THIS FILE IS AUTOMATICALLY GENERATED

            namespace ACRealms;

            public static partial class Props
            {
            {{nestedClassDecl}}
            }
            """;
        }

        private string GetNestedClassDecl(string declarationsText, Queue<string> classNameQueue, int depth)
        {
            string className = classNameQueue.Dequeue();
            bool isLast = classNameQueue.Count == 0;

            // Could optimize this to not allocate duplicate strings, but I don't think it adds up to much
            string spacer1 = new string(' ', 4);
            string spacer2 = new string(' ', 4 * depth);
            string spacer3 = new string(' ', 4 * (depth > 2 ? (depth - 1) : 1));
            string spacer4 = new string(' ', isLast ? 4 * depth : 4);
            string decl =
            $$""""
            {{spacer3}}public static{{(isLast ? " " : " partial ")}}class {{className}}
            {{spacer2}}{
            {{(isLast ? $"{declarationsText}" : $"{spacer1}{GetNestedClassDecl(declarationsText, classNameQueue, depth + 1)}")}}
            {{spacer2}}}
            """";
            return decl;
        }
    }
}
