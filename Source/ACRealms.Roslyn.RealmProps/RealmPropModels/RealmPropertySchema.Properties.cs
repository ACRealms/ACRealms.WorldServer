//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System.Collections.Immutable;
using System.Diagnostics.CodeAnalysis;
using System.Runtime.CompilerServices;
using System.Text.Json;
using Corvus.Json;
using Corvus.Json.Internal;

namespace ACRealms.RealmProps.IntermediateModels;
/// <summary>
/// Generated from JSON Schema.
/// </summary>
public readonly partial struct RealmPropertySchema
{
    /// <summary>
    /// The well-known property names in the JSON object.
    /// </summary>
    public static class JsonPropertyNames
    {
        /// <summary>
        /// JSON property name for <see cref = "AdditionalProperties"/>.
        /// </summary>
        public static ReadOnlySpan<byte> AdditionalPropertiesUtf8 => "additionalProperties"u8;

        /// <summary>
        /// JSON property name for <see cref = "AdditionalProperties"/>.
        /// </summary>
        public const string AdditionalProperties = "additionalProperties";
        /// <summary>
        /// JSON property name for <see cref = "Groups"/>.
        /// </summary>
        public static ReadOnlySpan<byte> GroupsUtf8 => "groups"u8;

        /// <summary>
        /// JSON property name for <see cref = "Groups"/>.
        /// </summary>
        public const string Groups = "groups";
        /// <summary>
        /// JSON property name for <see cref = "Namespace"/>.
        /// </summary>
        public static ReadOnlySpan<byte> NamespaceUtf8 => "namespace"u8;

        /// <summary>
        /// JSON property name for <see cref = "Namespace"/>.
        /// </summary>
        public const string Namespace = "namespace";
        /// <summary>
        /// JSON property name for <see cref = "Properties"/>.
        /// </summary>
        public static ReadOnlySpan<byte> PropertiesUtf8 => "properties"u8;

        /// <summary>
        /// JSON property name for <see cref = "Properties"/>.
        /// </summary>
        public const string Properties = "properties";
        /// <summary>
        /// JSON property name for <see cref = "SchemaVersion"/>.
        /// </summary>
        public static ReadOnlySpan<byte> SchemaVersionUtf8 => "$schema_version"u8;

        /// <summary>
        /// JSON property name for <see cref = "SchemaVersion"/>.
        /// </summary>
        public const string SchemaVersion = "$schema_version";
    }

    /// <summary>
    /// Gets the (optional) <c>additionalProperties</c> property.
    /// </summary>
    public Corvus.Json.JsonNotAny AdditionalProperties
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.AdditionalPropertiesUtf8, out JsonElement result))
                {
                    return new Corvus.Json.JsonNotAny(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.AdditionalProperties, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonNotAny>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the (optional) <c>groups</c> property.
    /// </summary>
    /// <remarks>
    /// <para>
    /// A group of properties that can share the same set of defaults.
    /// </para>
    /// </remarks>
    public ACRealms.RealmProps.IntermediateModels.RealmPropertySchema.GroupEntityArray Groups
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.GroupsUtf8, out JsonElement result))
                {
                    return new ACRealms.RealmProps.IntermediateModels.RealmPropertySchema.GroupEntityArray(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.Groups, out JsonAny result))
                {
                    return result.As<ACRealms.RealmProps.IntermediateModels.RealmPropertySchema.GroupEntityArray>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the <c>namespace</c> property. If the instance is valid, this property will be not be <c>undefined</c>.
    /// </summary>
    public Corvus.Json.JsonString Namespace
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.NamespaceUtf8, out JsonElement result))
                {
                    return new Corvus.Json.JsonString(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.Namespace, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonString>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the (optional) <c>properties</c> property.
    /// </summary>
    public ACRealms.RealmProps.IntermediateModels.RealmPropertySchema.ObjPropListEntity Properties
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.PropertiesUtf8, out JsonElement result))
                {
                    return new ACRealms.RealmProps.IntermediateModels.RealmPropertySchema.ObjPropListEntity(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.Properties, out JsonAny result))
                {
                    return result.As<ACRealms.RealmProps.IntermediateModels.RealmPropertySchema.ObjPropListEntity>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the <c>$schema_version</c> property. If the instance is valid, this property will be not be <c>undefined</c>.
    /// </summary>
    public ACRealms.RealmProps.IntermediateModels.RealmPropertySchema.SchemaVersionEntity SchemaVersion
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.SchemaVersionUtf8, out JsonElement result))
                {
                    return new ACRealms.RealmProps.IntermediateModels.RealmPropertySchema.SchemaVersionEntity(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.SchemaVersion, out JsonAny result))
                {
                    return result.As<ACRealms.RealmProps.IntermediateModels.RealmPropertySchema.SchemaVersionEntity>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Creates an instance of a <see cref = "RealmPropertySchema"/>.
    /// </summary>
    public static RealmPropertySchema Create(Corvus.Json.JsonString @namespace, Corvus.Json.JsonNotAny? additionalProperties = null, ACRealms.RealmProps.IntermediateModels.RealmPropertySchema.GroupEntityArray? groups = null, ACRealms.RealmProps.IntermediateModels.RealmPropertySchema.ObjPropListEntity? properties = null)
    {
        var builder = ImmutableList.CreateBuilder<JsonObjectProperty>();
        builder.Add(JsonPropertyNames.Namespace, @namespace.AsAny);
        builder.Add(JsonPropertyNames.SchemaVersion, new ACRealms.RealmProps.IntermediateModels.RealmPropertySchema.SchemaVersionEntity().AsAny);
        if (additionalProperties is Corvus.Json.JsonNotAny additionalProperties__)
        {
            builder.Add(JsonPropertyNames.AdditionalProperties, additionalProperties__.AsAny);
        }

        if (groups is ACRealms.RealmProps.IntermediateModels.RealmPropertySchema.GroupEntityArray groups__)
        {
            builder.Add(JsonPropertyNames.Groups, groups__.AsAny);
        }

        if (properties is ACRealms.RealmProps.IntermediateModels.RealmPropertySchema.ObjPropListEntity properties__)
        {
            builder.Add(JsonPropertyNames.Properties, properties__.AsAny);
        }

        return new(builder.ToImmutable());
    }

    /// <summary>
    /// Sets additionalProperties.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public RealmPropertySchema WithAdditionalProperties(in Corvus.Json.JsonNotAny value)
    {
        return this.SetProperty(JsonPropertyNames.AdditionalProperties, value);
    }

    /// <summary>
    /// Sets groups.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public RealmPropertySchema WithGroups(in ACRealms.RealmProps.IntermediateModels.RealmPropertySchema.GroupEntityArray value)
    {
        return this.SetProperty(JsonPropertyNames.Groups, value);
    }

    /// <summary>
    /// Sets namespace.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public RealmPropertySchema WithNamespace(in Corvus.Json.JsonString value)
    {
        return this.SetProperty(JsonPropertyNames.Namespace, value);
    }

    /// <summary>
    /// Sets properties.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public RealmPropertySchema WithProperties(in ACRealms.RealmProps.IntermediateModels.RealmPropertySchema.ObjPropListEntity value)
    {
        return this.SetProperty(JsonPropertyNames.Properties, value);
    }

    private static ValidationContext __CorvusValidateSchemaVersion(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<ACRealms.RealmProps.IntermediateModels.RealmPropertySchema.SchemaVersionEntity>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateNamespace(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonString>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateGroups(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<ACRealms.RealmProps.IntermediateModels.RealmPropertySchema.GroupEntityArray>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateProperties(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<ACRealms.RealmProps.IntermediateModels.RealmPropertySchema.ObjPropListEntity>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateAdditionalProperties(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonNotAny>().Validate(validationContext, level);
    }

    /// <summary>
    /// Tries to get the validator for the given property.
    /// </summary>
    /// <param name = "property">The property for which to get the validator.</param>
    /// <param name = "hasJsonElementBacking"><c>True</c> if the object containing the property has a JsonElement backing.</param>
    /// <param name = "propertyValidator">The validator for the property, if provided by this schema.</param>
    /// <returns><c>True</c> if the validator was found.</returns>
    private bool __TryGetCorvusLocalPropertiesValidator(in JsonObjectProperty property, bool hasJsonElementBacking, [NotNullWhen(true)] out ObjectPropertyValidator? propertyValidator)
    {
        if (hasJsonElementBacking)
        {
            if (property.NameEquals(JsonPropertyNames.SchemaVersionUtf8))
            {
                propertyValidator = __CorvusValidateSchemaVersion;
                return true;
            }
            else if (property.NameEquals(JsonPropertyNames.NamespaceUtf8))
            {
                propertyValidator = __CorvusValidateNamespace;
                return true;
            }
            else if (property.NameEquals(JsonPropertyNames.GroupsUtf8))
            {
                propertyValidator = __CorvusValidateGroups;
                return true;
            }
            else if (property.NameEquals(JsonPropertyNames.PropertiesUtf8))
            {
                propertyValidator = __CorvusValidateProperties;
                return true;
            }
            else if (property.NameEquals(JsonPropertyNames.AdditionalPropertiesUtf8))
            {
                propertyValidator = __CorvusValidateAdditionalProperties;
                return true;
            }
        }
        else
        {
            if (property.NameEquals(JsonPropertyNames.SchemaVersion))
            {
                propertyValidator = __CorvusValidateSchemaVersion;
                return true;
            }
            else if (property.NameEquals(JsonPropertyNames.Namespace))
            {
                propertyValidator = __CorvusValidateNamespace;
                return true;
            }
            else if (property.NameEquals(JsonPropertyNames.Groups))
            {
                propertyValidator = __CorvusValidateGroups;
                return true;
            }
            else if (property.NameEquals(JsonPropertyNames.Properties))
            {
                propertyValidator = __CorvusValidateProperties;
                return true;
            }
            else if (property.NameEquals(JsonPropertyNames.AdditionalProperties))
            {
                propertyValidator = __CorvusValidateAdditionalProperties;
                return true;
            }
        }

        propertyValidator = null;
        return false;
    }
}