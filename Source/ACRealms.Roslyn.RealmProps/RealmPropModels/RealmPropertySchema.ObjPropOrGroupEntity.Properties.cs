//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System.Collections.Immutable;
using System.Diagnostics.CodeAnalysis;
using System.Runtime.CompilerServices;
using System.Text.Json;
using Corvus.Json;
using Corvus.Json.Internal;

namespace ACRealms.RealmProps.IntermediateModels;
public readonly partial struct RealmPropertySchema
{
    /// <summary>
    /// Generated from JSON Schema.
    /// </summary>
    public readonly partial struct ObjPropOrGroupEntity
    {
        /// <summary>
        /// The well-known property names in the JSON object.
        /// </summary>
        public static class JsonPropertyNames
        {
            /// <summary>
            /// JSON property name for <see cref = "Default"/>.
            /// </summary>
            public static ReadOnlySpan<byte> DefaultUtf8 => "default"u8;

            /// <summary>
            /// JSON property name for <see cref = "Default"/>.
            /// </summary>
            public const string Default = "default";
            /// <summary>
            /// JSON property name for <see cref = "DefaultFromServerProperty"/>.
            /// </summary>
            public static ReadOnlySpan<byte> DefaultFromServerPropertyUtf8 => "default_from_server_property"u8;

            /// <summary>
            /// JSON property name for <see cref = "DefaultFromServerProperty"/>.
            /// </summary>
            public const string DefaultFromServerProperty = "default_from_server_property";
            /// <summary>
            /// JSON property name for <see cref = "Enum"/>.
            /// </summary>
            public static ReadOnlySpan<byte> EnumUtf8 => "enum"u8;

            /// <summary>
            /// JSON property name for <see cref = "Enum"/>.
            /// </summary>
            public const string Enum = "enum";
            /// <summary>
            /// JSON property name for <see cref = "MaxValue"/>.
            /// </summary>
            public static ReadOnlySpan<byte> MaxValueUtf8 => "max_value"u8;

            /// <summary>
            /// JSON property name for <see cref = "MaxValue"/>.
            /// </summary>
            public const string MaxValue = "max_value";
            /// <summary>
            /// JSON property name for <see cref = "MinValue"/>.
            /// </summary>
            public static ReadOnlySpan<byte> MinValueUtf8 => "min_value"u8;

            /// <summary>
            /// JSON property name for <see cref = "MinValue"/>.
            /// </summary>
            public const string MinValue = "min_value";
            /// <summary>
            /// JSON property name for <see cref = "Obsolete"/>.
            /// </summary>
            public static ReadOnlySpan<byte> ObsoleteUtf8 => "obsolete"u8;

            /// <summary>
            /// JSON property name for <see cref = "Obsolete"/>.
            /// </summary>
            public const string Obsolete = "obsolete";
            /// <summary>
            /// JSON property name for <see cref = "RerollRestrictedTo"/>.
            /// </summary>
            public static ReadOnlySpan<byte> RerollRestrictedToUtf8 => "reroll_restricted_to"u8;

            /// <summary>
            /// JSON property name for <see cref = "RerollRestrictedTo"/>.
            /// </summary>
            public const string RerollRestrictedTo = "reroll_restricted_to";
            /// <summary>
            /// JSON property name for <see cref = "Type"/>.
            /// </summary>
            public static ReadOnlySpan<byte> TypeUtf8 => "type"u8;

            /// <summary>
            /// JSON property name for <see cref = "Type"/>.
            /// </summary>
            public const string Type = "type";
        }

        /// <summary>
        /// Gets the (optional) <c>default</c> property.
        /// </summary>
        /// <remarks>
        /// <para>
        /// The hard default value for the realm property (ultimate fallback)
        /// </para>
        /// </remarks>
        public ACRealms.RealmProps.IntermediateModels.RealmPropertySchema.ObjPropOrGroupEntity.DefaultEntity Default
        {
            get
            {
                if ((this.backing & Backing.JsonElement) != 0)
                {
                    if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                    {
                        return default;
                    }

                    if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.DefaultUtf8, out JsonElement result))
                    {
                        return new ACRealms.RealmProps.IntermediateModels.RealmPropertySchema.ObjPropOrGroupEntity.DefaultEntity(result);
                    }
                }

                if ((this.backing & Backing.Object) != 0)
                {
                    if (this.objectBacking.TryGetValue(JsonPropertyNames.Default, out JsonAny result))
                    {
                        return result.As<ACRealms.RealmProps.IntermediateModels.RealmPropertySchema.ObjPropOrGroupEntity.DefaultEntity>();
                    }
                }

                return default;
            }
        }

        /// <summary>
        /// Gets the (optional) <c>default_from_server_property</c> property.
        /// </summary>
        public Corvus.Json.JsonString DefaultFromServerProperty
        {
            get
            {
                if ((this.backing & Backing.JsonElement) != 0)
                {
                    if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                    {
                        return default;
                    }

                    if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.DefaultFromServerPropertyUtf8, out JsonElement result))
                    {
                        return new Corvus.Json.JsonString(result);
                    }
                }

                if ((this.backing & Backing.Object) != 0)
                {
                    if (this.objectBacking.TryGetValue(JsonPropertyNames.DefaultFromServerProperty, out JsonAny result))
                    {
                        return result.As<Corvus.Json.JsonString>();
                    }
                }

                return default;
            }
        }

        /// <summary>
        /// Gets the (optional) <c>enum</c> property.
        /// </summary>
        /// <remarks>
        /// <para>
        /// The exact name of the C# Enum class.
        /// </para>
        /// </remarks>
        public Corvus.Json.JsonString Enum
        {
            get
            {
                if ((this.backing & Backing.JsonElement) != 0)
                {
                    if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                    {
                        return default;
                    }

                    if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.EnumUtf8, out JsonElement result))
                    {
                        return new Corvus.Json.JsonString(result);
                    }
                }

                if ((this.backing & Backing.Object) != 0)
                {
                    if (this.objectBacking.TryGetValue(JsonPropertyNames.Enum, out JsonAny result))
                    {
                        return result.As<Corvus.Json.JsonString>();
                    }
                }

                return default;
            }
        }

        /// <summary>
        /// Gets the (optional) <c>max_value</c> property.
        /// </summary>
        public ACRealms.RealmProps.IntermediateModels.RealmPropertySchema.ValFloatEntity MaxValue
        {
            get
            {
                if ((this.backing & Backing.JsonElement) != 0)
                {
                    if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                    {
                        return default;
                    }

                    if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.MaxValueUtf8, out JsonElement result))
                    {
                        return new ACRealms.RealmProps.IntermediateModels.RealmPropertySchema.ValFloatEntity(result);
                    }
                }

                if ((this.backing & Backing.Object) != 0)
                {
                    if (this.objectBacking.TryGetValue(JsonPropertyNames.MaxValue, out JsonAny result))
                    {
                        return result.As<ACRealms.RealmProps.IntermediateModels.RealmPropertySchema.ValFloatEntity>();
                    }
                }

                return default;
            }
        }

        /// <summary>
        /// Gets the (optional) <c>min_value</c> property.
        /// </summary>
        public ACRealms.RealmProps.IntermediateModels.RealmPropertySchema.ValFloatEntity MinValue
        {
            get
            {
                if ((this.backing & Backing.JsonElement) != 0)
                {
                    if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                    {
                        return default;
                    }

                    if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.MinValueUtf8, out JsonElement result))
                    {
                        return new ACRealms.RealmProps.IntermediateModels.RealmPropertySchema.ValFloatEntity(result);
                    }
                }

                if ((this.backing & Backing.Object) != 0)
                {
                    if (this.objectBacking.TryGetValue(JsonPropertyNames.MinValue, out JsonAny result))
                    {
                        return result.As<ACRealms.RealmProps.IntermediateModels.RealmPropertySchema.ValFloatEntity>();
                    }
                }

                return default;
            }
        }

        /// <summary>
        /// Gets the (optional) <c>obsolete</c> property.
        /// </summary>
        public Corvus.Json.JsonString Obsolete
        {
            get
            {
                if ((this.backing & Backing.JsonElement) != 0)
                {
                    if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                    {
                        return default;
                    }

                    if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.ObsoleteUtf8, out JsonElement result))
                    {
                        return new Corvus.Json.JsonString(result);
                    }
                }

                if ((this.backing & Backing.Object) != 0)
                {
                    if (this.objectBacking.TryGetValue(JsonPropertyNames.Obsolete, out JsonAny result))
                    {
                        return result.As<Corvus.Json.JsonString>();
                    }
                }

                return default;
            }
        }

        /// <summary>
        /// Gets the (optional) <c>reroll_restricted_to</c> property.
        /// </summary>
        public ACRealms.RealmProps.IntermediateModels.RealmPropertySchema.ObjPropOrGroupEntity.RerollRestrictedToEntity RerollRestrictedTo
        {
            get
            {
                if ((this.backing & Backing.JsonElement) != 0)
                {
                    if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                    {
                        return default;
                    }

                    if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.RerollRestrictedToUtf8, out JsonElement result))
                    {
                        return new ACRealms.RealmProps.IntermediateModels.RealmPropertySchema.ObjPropOrGroupEntity.RerollRestrictedToEntity(result);
                    }
                }

                if ((this.backing & Backing.Object) != 0)
                {
                    if (this.objectBacking.TryGetValue(JsonPropertyNames.RerollRestrictedTo, out JsonAny result))
                    {
                        return result.As<ACRealms.RealmProps.IntermediateModels.RealmPropertySchema.ObjPropOrGroupEntity.RerollRestrictedToEntity>();
                    }
                }

                return default;
            }
        }

        /// <summary>
        /// Gets the (optional) <c>type</c> property.
        /// </summary>
        public ACRealms.RealmProps.IntermediateModels.RealmPropertySchema.PropertytypeEntity Type
        {
            get
            {
                if ((this.backing & Backing.JsonElement) != 0)
                {
                    if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                    {
                        return default;
                    }

                    if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.TypeUtf8, out JsonElement result))
                    {
                        return new ACRealms.RealmProps.IntermediateModels.RealmPropertySchema.PropertytypeEntity(result);
                    }
                }

                if ((this.backing & Backing.Object) != 0)
                {
                    if (this.objectBacking.TryGetValue(JsonPropertyNames.Type, out JsonAny result))
                    {
                        return result.As<ACRealms.RealmProps.IntermediateModels.RealmPropertySchema.PropertytypeEntity>();
                    }
                }

                return default;
            }
        }

        /// <summary>
        /// Creates an instance of a <see cref = "ObjPropOrGroupEntity"/>.
        /// </summary>
        public static ObjPropOrGroupEntity Create(ACRealms.RealmProps.IntermediateModels.RealmPropertySchema.ObjPropOrGroupEntity.DefaultEntity? @default = null, Corvus.Json.JsonString? defaultFromServerProperty = null, Corvus.Json.JsonString? @enum = null, ACRealms.RealmProps.IntermediateModels.RealmPropertySchema.ValFloatEntity? maxValue = null, ACRealms.RealmProps.IntermediateModels.RealmPropertySchema.ValFloatEntity? minValue = null, Corvus.Json.JsonString? obsolete = null, ACRealms.RealmProps.IntermediateModels.RealmPropertySchema.ObjPropOrGroupEntity.RerollRestrictedToEntity? rerollRestrictedTo = null, ACRealms.RealmProps.IntermediateModels.RealmPropertySchema.PropertytypeEntity? type = null)
        {
            var builder = ImmutableList.CreateBuilder<JsonObjectProperty>();
            if (@default is ACRealms.RealmProps.IntermediateModels.RealmPropertySchema.ObjPropOrGroupEntity.DefaultEntity @default__)
            {
                builder.Add(JsonPropertyNames.Default, @default__.AsAny);
            }

            if (defaultFromServerProperty is Corvus.Json.JsonString defaultFromServerProperty__)
            {
                builder.Add(JsonPropertyNames.DefaultFromServerProperty, defaultFromServerProperty__.AsAny);
            }

            if (@enum is Corvus.Json.JsonString @enum__)
            {
                builder.Add(JsonPropertyNames.Enum, @enum__.AsAny);
            }

            if (maxValue is ACRealms.RealmProps.IntermediateModels.RealmPropertySchema.ValFloatEntity maxValue__)
            {
                builder.Add(JsonPropertyNames.MaxValue, maxValue__.AsAny);
            }

            if (minValue is ACRealms.RealmProps.IntermediateModels.RealmPropertySchema.ValFloatEntity minValue__)
            {
                builder.Add(JsonPropertyNames.MinValue, minValue__.AsAny);
            }

            if (obsolete is Corvus.Json.JsonString obsolete__)
            {
                builder.Add(JsonPropertyNames.Obsolete, obsolete__.AsAny);
            }

            if (rerollRestrictedTo is ACRealms.RealmProps.IntermediateModels.RealmPropertySchema.ObjPropOrGroupEntity.RerollRestrictedToEntity rerollRestrictedTo__)
            {
                builder.Add(JsonPropertyNames.RerollRestrictedTo, rerollRestrictedTo__.AsAny);
            }

            if (type is ACRealms.RealmProps.IntermediateModels.RealmPropertySchema.PropertytypeEntity type__)
            {
                builder.Add(JsonPropertyNames.Type, type__.AsAny);
            }

            return new(builder.ToImmutable());
        }

        /// <summary>
        /// Sets default.
        /// </summary>
        /// <param name = "value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public ObjPropOrGroupEntity WithDefault(in ACRealms.RealmProps.IntermediateModels.RealmPropertySchema.ObjPropOrGroupEntity.DefaultEntity value)
        {
            return this.SetProperty(JsonPropertyNames.Default, value);
        }

        /// <summary>
        /// Sets default_from_server_property.
        /// </summary>
        /// <param name = "value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public ObjPropOrGroupEntity WithDefaultFromServerProperty(in Corvus.Json.JsonString value)
        {
            return this.SetProperty(JsonPropertyNames.DefaultFromServerProperty, value);
        }

        /// <summary>
        /// Sets enum.
        /// </summary>
        /// <param name = "value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public ObjPropOrGroupEntity WithEnum(in Corvus.Json.JsonString value)
        {
            return this.SetProperty(JsonPropertyNames.Enum, value);
        }

        /// <summary>
        /// Sets max_value.
        /// </summary>
        /// <param name = "value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public ObjPropOrGroupEntity WithMaxValue(in ACRealms.RealmProps.IntermediateModels.RealmPropertySchema.ValFloatEntity value)
        {
            return this.SetProperty(JsonPropertyNames.MaxValue, value);
        }

        /// <summary>
        /// Sets min_value.
        /// </summary>
        /// <param name = "value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public ObjPropOrGroupEntity WithMinValue(in ACRealms.RealmProps.IntermediateModels.RealmPropertySchema.ValFloatEntity value)
        {
            return this.SetProperty(JsonPropertyNames.MinValue, value);
        }

        /// <summary>
        /// Sets obsolete.
        /// </summary>
        /// <param name = "value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public ObjPropOrGroupEntity WithObsolete(in Corvus.Json.JsonString value)
        {
            return this.SetProperty(JsonPropertyNames.Obsolete, value);
        }

        /// <summary>
        /// Sets reroll_restricted_to.
        /// </summary>
        /// <param name = "value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public ObjPropOrGroupEntity WithRerollRestrictedTo(in ACRealms.RealmProps.IntermediateModels.RealmPropertySchema.ObjPropOrGroupEntity.RerollRestrictedToEntity value)
        {
            return this.SetProperty(JsonPropertyNames.RerollRestrictedTo, value);
        }

        /// <summary>
        /// Sets type.
        /// </summary>
        /// <param name = "value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public ObjPropOrGroupEntity WithType(in ACRealms.RealmProps.IntermediateModels.RealmPropertySchema.PropertytypeEntity value)
        {
            return this.SetProperty(JsonPropertyNames.Type, value);
        }

        private static ValidationContext __CorvusValidateType(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
        {
            return property.ValueAs<ACRealms.RealmProps.IntermediateModels.RealmPropertySchema.PropertytypeEntity>().Validate(validationContext, level);
        }

        private static ValidationContext __CorvusValidateEnum(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
        {
            return property.ValueAs<Corvus.Json.JsonString>().Validate(validationContext, level);
        }

        private static ValidationContext __CorvusValidateDefault(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
        {
            return property.ValueAs<ACRealms.RealmProps.IntermediateModels.RealmPropertySchema.ObjPropOrGroupEntity.DefaultEntity>().Validate(validationContext, level);
        }

        private static ValidationContext __CorvusValidateRerollRestrictedTo(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
        {
            return property.ValueAs<ACRealms.RealmProps.IntermediateModels.RealmPropertySchema.ObjPropOrGroupEntity.RerollRestrictedToEntity>().Validate(validationContext, level);
        }

        private static ValidationContext __CorvusValidateObsolete(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
        {
            return property.ValueAs<Corvus.Json.JsonString>().Validate(validationContext, level);
        }

        private static ValidationContext __CorvusValidateDefaultFromServerProperty(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
        {
            return property.ValueAs<Corvus.Json.JsonString>().Validate(validationContext, level);
        }

        /// <summary>
        /// Tries to get the validator for the given property.
        /// </summary>
        /// <param name = "property">The property for which to get the validator.</param>
        /// <param name = "hasJsonElementBacking"><c>True</c> if the object containing the property has a JsonElement backing.</param>
        /// <param name = "propertyValidator">The validator for the property, if provided by this schema.</param>
        /// <returns><c>True</c> if the validator was found.</returns>
        private bool __TryGetCorvusLocalPropertiesValidator(in JsonObjectProperty property, bool hasJsonElementBacking, [NotNullWhen(true)] out ObjectPropertyValidator? propertyValidator)
        {
            if (hasJsonElementBacking)
            {
                if (property.NameEquals(JsonPropertyNames.TypeUtf8))
                {
                    propertyValidator = __CorvusValidateType;
                    return true;
                }
                else if (property.NameEquals(JsonPropertyNames.EnumUtf8))
                {
                    propertyValidator = __CorvusValidateEnum;
                    return true;
                }
                else if (property.NameEquals(JsonPropertyNames.DefaultUtf8))
                {
                    propertyValidator = __CorvusValidateDefault;
                    return true;
                }
                else if (property.NameEquals(JsonPropertyNames.RerollRestrictedToUtf8))
                {
                    propertyValidator = __CorvusValidateRerollRestrictedTo;
                    return true;
                }
                else if (property.NameEquals(JsonPropertyNames.ObsoleteUtf8))
                {
                    propertyValidator = __CorvusValidateObsolete;
                    return true;
                }
                else if (property.NameEquals(JsonPropertyNames.DefaultFromServerPropertyUtf8))
                {
                    propertyValidator = __CorvusValidateDefaultFromServerProperty;
                    return true;
                }
            }
            else
            {
                if (property.NameEquals(JsonPropertyNames.Type))
                {
                    propertyValidator = __CorvusValidateType;
                    return true;
                }
                else if (property.NameEquals(JsonPropertyNames.Enum))
                {
                    propertyValidator = __CorvusValidateEnum;
                    return true;
                }
                else if (property.NameEquals(JsonPropertyNames.Default))
                {
                    propertyValidator = __CorvusValidateDefault;
                    return true;
                }
                else if (property.NameEquals(JsonPropertyNames.RerollRestrictedTo))
                {
                    propertyValidator = __CorvusValidateRerollRestrictedTo;
                    return true;
                }
                else if (property.NameEquals(JsonPropertyNames.Obsolete))
                {
                    propertyValidator = __CorvusValidateObsolete;
                    return true;
                }
                else if (property.NameEquals(JsonPropertyNames.DefaultFromServerProperty))
                {
                    propertyValidator = __CorvusValidateDefaultFromServerProperty;
                    return true;
                }
            }

            propertyValidator = null;
            return false;
        }
    }
}