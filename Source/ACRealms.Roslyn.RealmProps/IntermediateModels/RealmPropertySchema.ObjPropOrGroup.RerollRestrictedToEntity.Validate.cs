//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable

using System.Runtime.CompilerServices;
using System.Text.Json;
using Corvus.Json;

namespace ACRealms.Roslyn.RealmProps.IntermediateModels;

/// <summary>
/// Generated from JSON Schema.
/// </summary>
public readonly partial struct RealmPropertySchema
{
    /// <summary>
    /// Generated from JSON Schema.
    /// </summary>
    public readonly partial struct ObjPropOrGroup
    {
        /// <summary>
        /// Generated from JSON Schema.
        /// </summary>
        public readonly partial struct RerollRestrictedToEntity
        {
            /// <inheritdoc/>
            public ValidationContext Validate(in ValidationContext validationContext, ValidationLevel level = ValidationLevel.Flag)
            {
                ValidationContext result = validationContext;
                if (level > ValidationLevel.Flag && !result.IsUsingResults)
                {
                    result = result.UsingResults();
                }

                if (level > ValidationLevel.Basic)
                {
                    if (!result.IsUsingStack)
                    {
                        result = result.UsingStack();
                    }

                    result = result.PushSchemaLocation("https://realm.ac/schema/v1/realm-property-schema.json#/definitions/objPropOrGroup/properties/reroll_restricted_to");
                }

                result = CorvusValidation.CompositionAnyOfValidationHandler(this, result, level);

                if (level == ValidationLevel.Flag && !result.IsValid)
                {
                    return result;
                }

                if (level > ValidationLevel.Basic)
                {
                    result = result.PopLocation();
                }

                return result;
            }

            /// <summary>
            /// Constant values for the enum keyword.
            /// </summary>
            public static class EnumValues
            {
                /// <summary>
                /// Gets the string 'never'
                /// as a <see cref="ACRealms.Roslyn.RealmProps.IntermediateModels.RealmPropertySchema.ObjPropOrGroup.RerollRestrictedToEntity"/>.
                /// </summary>
                public static RerollRestrictedToEntity Never { get; } = CorvusValidation.Enum1.As<RerollRestrictedToEntity>();

                /// <summary>
                /// Gets the string 'never'
                /// as a UTF8 byte array.
                /// </summary>
                public static ReadOnlySpan<byte> NeverUtf8 => CorvusValidation.Enum1Utf8;

                /// <summary>
                /// Gets the string 'manual'
                /// as a <see cref="ACRealms.Roslyn.RealmProps.IntermediateModels.RealmPropertySchema.ObjPropOrGroup.RerollRestrictedToEntity"/>.
                /// </summary>
                public static RerollRestrictedToEntity Manual { get; } = CorvusValidation.Enum2.As<RerollRestrictedToEntity>();

                /// <summary>
                /// Gets the string 'manual'
                /// as a UTF8 byte array.
                /// </summary>
                public static ReadOnlySpan<byte> ManualUtf8 => CorvusValidation.Enum2Utf8;

                /// <summary>
                /// Gets the string 'landblock'
                /// as a <see cref="ACRealms.Roslyn.RealmProps.IntermediateModels.RealmPropertySchema.ObjPropOrGroup.RerollRestrictedToEntity"/>.
                /// </summary>
                public static RerollRestrictedToEntity Landblock { get; } = CorvusValidation.Enum3.As<RerollRestrictedToEntity>();

                /// <summary>
                /// Gets the string 'landblock'
                /// as a UTF8 byte array.
                /// </summary>
                public static ReadOnlySpan<byte> LandblockUtf8 => CorvusValidation.Enum3Utf8;

                /// <summary>
                /// Gets the string 'always'
                /// as a <see cref="ACRealms.Roslyn.RealmProps.IntermediateModels.RealmPropertySchema.ObjPropOrGroup.RerollRestrictedToEntity"/>.
                /// </summary>
                public static RerollRestrictedToEntity Always { get; } = CorvusValidation.Enum4.As<RerollRestrictedToEntity>();

                /// <summary>
                /// Gets the string 'always'
                /// as a UTF8 byte array.
                /// </summary>
                public static ReadOnlySpan<byte> AlwaysUtf8 => CorvusValidation.Enum4Utf8;
            }

            /// <summary>
            /// Validation constants for the type.
            /// </summary>
            public static partial class CorvusValidation
            {
                /// <summary>
                /// A constant for the <c>enum</c> keyword.
                /// </summary>
                public static readonly JsonString Enum1 = JsonString.ParseValue("\"never\"");
                /// <summary>
                /// A constant for the <c>enum</c> keyword.
                /// </summary>
                public static readonly JsonString Enum2 = JsonString.ParseValue("\"manual\"");
                /// <summary>
                /// A constant for the <c>enum</c> keyword.
                /// </summary>
                public static readonly JsonString Enum3 = JsonString.ParseValue("\"landblock\"");
                /// <summary>
                /// A constant for the <c>enum</c> keyword.
                /// </summary>
                public static readonly JsonString Enum4 = JsonString.ParseValue("\"always\"");

                /// <summary>
                /// A constant for the <c>enum</c> keyword.
                /// </summary>
                public static ReadOnlySpan<byte> Enum1Utf8 => "\"never\""u8;
                /// <summary>
                /// A constant for the <c>enum</c> keyword.
                /// </summary>
                public static ReadOnlySpan<byte> Enum2Utf8 => "\"manual\""u8;
                /// <summary>
                /// A constant for the <c>enum</c> keyword.
                /// </summary>
                public static ReadOnlySpan<byte> Enum3Utf8 => "\"landblock\""u8;
                /// <summary>
                /// A constant for the <c>enum</c> keyword.
                /// </summary>
                public static ReadOnlySpan<byte> Enum4Utf8 => "\"always\""u8;

                /// <summary>
                /// Composition validation (any-of).
                /// </summary>
                /// <param name="value">The value to validate.</param>
                /// <param name="validationContext">The current validation context.</param>
                /// <param name="level">The current validation level.</param>
                /// <returns>The resulting validation context after validation.</returns>
                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                internal static ValidationContext CompositionAnyOfValidationHandler(
                    in RerollRestrictedToEntity value,
                    in ValidationContext validationContext,
                    ValidationLevel level = ValidationLevel.Flag)
                {
                    ValidationContext result = validationContext;

                    result = ValidateEnum(value, result, level);
                    if (!result.IsValid && level == ValidationLevel.Flag)
                    {
                        return result;
                    }

                    [MethodImpl(MethodImplOptions.AggressiveInlining)]
                    static ValidationContext ValidateEnum(in RerollRestrictedToEntity value, in ValidationContext validationContext, ValidationLevel level)
                    {
                        ValidationContext result = validationContext;
                        bool enumFoundValid = false;

                        enumFoundValid = value.Equals(CorvusValidation.Enum1);
                        if (!enumFoundValid)
                        {
                            enumFoundValid = value.Equals(CorvusValidation.Enum2);
                        }
                        if (!enumFoundValid)
                        {
                            enumFoundValid = value.Equals(CorvusValidation.Enum3);
                        }
                        if (!enumFoundValid)
                        {
                            enumFoundValid = value.Equals(CorvusValidation.Enum4);
                        }

                        if (enumFoundValid)
                        {
                            if (level >= ValidationLevel.Verbose)
                            {
                                result = result.WithResult(isValid: true, "Validation enum - validated against the enumeration.", "enum");
                            }
                        }
                        else
                        {
                            if (level == ValidationLevel.Flag)
                            {
                                result = result.WithResult(isValid: false);
                            }
                            else
                            {
                                result = result.WithResult(isValid: false, "Validation enum - did not validate against the enumeration.", "enum");
                            }
                        }

                        return result;
                    }

                    return result;
                }
            }
        }
    }
}
