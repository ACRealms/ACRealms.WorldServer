//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable

using System.Runtime.CompilerServices;
using System.Text.Json;
using Corvus.Json;

namespace ACRealms.Roslyn.RealmProps.IntermediateModels;

/// <summary>
/// Generated from JSON Schema.
/// </summary>
/// <remarks>
/// <para>
/// A set of contexts for this property. Each context requires an entity type to pass into the property when fetching it. The entities can be filtered with a scope in the ruleset definitions.
/// </para>
/// </remarks>
public readonly partial struct Contexts
{
    /// <summary>
    /// Generated from JSON Schema.
    /// </summary>
    public readonly partial struct EntityVal
    {
        /// <inheritdoc/>
        public ValidationContext Validate(in ValidationContext validationContext, ValidationLevel level = ValidationLevel.Flag)
        {
            ValidationContext result = validationContext;
            if (level > ValidationLevel.Flag && !result.IsUsingResults)
            {
                result = result.UsingResults();
            }

            if (level > ValidationLevel.Basic)
            {
                if (!result.IsUsingStack)
                {
                    result = result.UsingStack();
                }

                result = result.PushSchemaLocation("contexts.json#/definitions/entityVal");
            }

            JsonValueKind valueKind = this.ValueKind;

            result = CorvusValidation.TypeValidationHandler(valueKind, result, level);

            if (level == ValidationLevel.Flag && !result.IsValid)
            {
                return result;
            }

            result = CorvusValidation.CompositionOneOfValidationHandler(this, result, level);

            if (level == ValidationLevel.Flag && !result.IsValid)
            {
                return result;
            }

            if (level > ValidationLevel.Basic)
            {
                result = result.PopLocation();
            }

            return result;
        }

        /// <summary>
        /// Validation constants for the type.
        /// </summary>
        public static partial class CorvusValidation
        {
            /// <summary>
            /// Core type validation.
            /// </summary>
            /// <param name="valueKind">The <see cref="JsonValueKind" /> of the value to validate.</param>
            /// <param name="validationContext">The current validation context.</param>
            /// <param name="level">The current validation level.</param>
            /// <returns>The resulting validation context after validation.</returns>
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            internal static ValidationContext TypeValidationHandler(
                JsonValueKind valueKind,
                in ValidationContext validationContext,
                ValidationLevel level = ValidationLevel.Flag)
            {
                return Corvus.Json.ValidateWithoutCoreType.TypeString(valueKind, validationContext, level, "type");
            }

            /// <summary>
            /// Composition validation (one-of).
            /// </summary>
            /// <param name="value">The value to validate.</param>
            /// <param name="validationContext">The current validation context.</param>
            /// <param name="level">The current validation level.</param>
            /// <returns>The resulting validation context after validation.</returns>
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            internal static ValidationContext CompositionOneOfValidationHandler(
                in EntityVal value,
                in ValidationContext validationContext,
                ValidationLevel level = ValidationLevel.Flag)
            {
                ValidationContext result = validationContext;

                int oneOfFoundValid = 0;

                ValidationContext oneOfChildContext0 = validationContext.CreateChildContext();
                if (level > ValidationLevel.Basic)
                {
                    oneOfChildContext0 = oneOfChildContext0.PushValidationLocationReducedPathModifier(new("#/oneOf/0/$ref"));
                }

                ValidationContext oneOfResult0 = value.As<ACRealms.Roslyn.RealmProps.IntermediateModels.Contexts.WeenieEntity>().Validate(oneOfChildContext0, level);

                if (oneOfResult0.IsValid)
                {
                    result = result.MergeChildContext(oneOfResult0, level >= ValidationLevel.Verbose);
                    oneOfFoundValid++;
                }
                else
                {
                    if (level >= ValidationLevel.Verbose)
                    {
                        result = result.MergeResults(result.IsValid, level, oneOfResult0);
                    }
                }

                ValidationContext oneOfChildContext1 = validationContext.CreateChildContext();
                if (level > ValidationLevel.Basic)
                {
                    oneOfChildContext1 = oneOfChildContext1.PushValidationLocationReducedPathModifier(new("#/oneOf/1/$ref"));
                }

                ValidationContext oneOfResult1 = value.As<ACRealms.Roslyn.RealmProps.IntermediateModels.Contexts.WeeniePropertyIntEntity>().Validate(oneOfChildContext1, level);

                if (oneOfResult1.IsValid)
                {
                    result = result.MergeChildContext(oneOfResult1, level >= ValidationLevel.Verbose);
                    oneOfFoundValid++;
                }
                else
                {
                    if (level >= ValidationLevel.Verbose)
                    {
                        result = result.MergeResults(result.IsValid, level, oneOfResult1);
                    }
                }

                ValidationContext oneOfChildContext2 = validationContext.CreateChildContext();
                if (level > ValidationLevel.Basic)
                {
                    oneOfChildContext2 = oneOfChildContext2.PushValidationLocationReducedPathModifier(new("#/oneOf/2/$ref"));
                }

                ValidationContext oneOfResult2 = value.As<ACRealms.Roslyn.RealmProps.IntermediateModels.Contexts.WeeniePropertyInt64Entity>().Validate(oneOfChildContext2, level);

                if (oneOfResult2.IsValid)
                {
                    result = result.MergeChildContext(oneOfResult2, level >= ValidationLevel.Verbose);
                    oneOfFoundValid++;
                }
                else
                {
                    if (level >= ValidationLevel.Verbose)
                    {
                        result = result.MergeResults(result.IsValid, level, oneOfResult2);
                    }
                }

                ValidationContext oneOfChildContext3 = validationContext.CreateChildContext();
                if (level > ValidationLevel.Basic)
                {
                    oneOfChildContext3 = oneOfChildContext3.PushValidationLocationReducedPathModifier(new("#/oneOf/3/$ref"));
                }

                ValidationContext oneOfResult3 = value.As<ACRealms.Roslyn.RealmProps.IntermediateModels.Contexts.WeeniePropertyFloatEntity>().Validate(oneOfChildContext3, level);

                if (oneOfResult3.IsValid)
                {
                    result = result.MergeChildContext(oneOfResult3, level >= ValidationLevel.Verbose);
                    oneOfFoundValid++;
                }
                else
                {
                    if (level >= ValidationLevel.Verbose)
                    {
                        result = result.MergeResults(result.IsValid, level, oneOfResult3);
                    }
                }

                ValidationContext oneOfChildContext4 = validationContext.CreateChildContext();
                if (level > ValidationLevel.Basic)
                {
                    oneOfChildContext4 = oneOfChildContext4.PushValidationLocationReducedPathModifier(new("#/oneOf/4/$ref"));
                }

                ValidationContext oneOfResult4 = value.As<ACRealms.Roslyn.RealmProps.IntermediateModels.Contexts.WeeniePropertyBoolEntity>().Validate(oneOfChildContext4, level);

                if (oneOfResult4.IsValid)
                {
                    result = result.MergeChildContext(oneOfResult4, level >= ValidationLevel.Verbose);
                    oneOfFoundValid++;
                }
                else
                {
                    if (level >= ValidationLevel.Verbose)
                    {
                        result = result.MergeResults(result.IsValid, level, oneOfResult4);
                    }
                }

                ValidationContext oneOfChildContext5 = validationContext.CreateChildContext();
                if (level > ValidationLevel.Basic)
                {
                    oneOfChildContext5 = oneOfChildContext5.PushValidationLocationReducedPathModifier(new("#/oneOf/5/$ref"));
                }

                ValidationContext oneOfResult5 = value.As<ACRealms.Roslyn.RealmProps.IntermediateModels.Contexts.WeeniePropertyStringEntity>().Validate(oneOfChildContext5, level);

                if (oneOfResult5.IsValid)
                {
                    result = result.MergeChildContext(oneOfResult5, level >= ValidationLevel.Verbose);
                    oneOfFoundValid++;
                }
                else
                {
                    if (level >= ValidationLevel.Verbose)
                    {
                        result = result.MergeResults(result.IsValid, level, oneOfResult5);
                    }
                }

                ValidationContext oneOfChildContext6 = validationContext.CreateChildContext();
                if (level > ValidationLevel.Basic)
                {
                    oneOfChildContext6 = oneOfChildContext6.PushValidationLocationReducedPathModifier(new("#/oneOf/6/$ref"));
                }

                ValidationContext oneOfResult6 = value.As<ACRealms.Roslyn.RealmProps.IntermediateModels.Contexts.WorldObjectEntity>().Validate(oneOfChildContext6, level);

                if (oneOfResult6.IsValid)
                {
                    result = result.MergeChildContext(oneOfResult6, level >= ValidationLevel.Verbose);
                    oneOfFoundValid++;
                }
                else
                {
                    if (level >= ValidationLevel.Verbose)
                    {
                        result = result.MergeResults(result.IsValid, level, oneOfResult6);
                    }
                }

                if (oneOfFoundValid == 1)
                {
                    if (level >= ValidationLevel.Verbose)
                    {
                        result = result.WithResult(isValid: true, "Validation oneOf - validated against the schema.", "oneOf");
                    }
                }
                else if (oneOfFoundValid > 1)
                {
                    if (level >= ValidationLevel.Basic)
                    {
                        result = result.WithResult(isValid: false, "Validation oneOf - validated against more than 1 of the schema.", "oneOf");
                    }
                    else
                    {
                        result = result.WithResult(isValid: false);
                    }
                }
                else
                {
                    if (level >= ValidationLevel.Basic)
                    {
                        result = result.WithResult(isValid: false, "Validation oneOf - did not validate against any of the schema.", "oneOf");
                    }
                    else
                    {
                        result = result.WithResult(isValid: false);
                    }
                }

                return result;
            }
        }
    }
}
