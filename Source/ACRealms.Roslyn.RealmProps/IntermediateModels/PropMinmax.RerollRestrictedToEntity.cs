//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable

using System.Buffers;
using System.Runtime.CompilerServices;
using System.Text.Json;
using Corvus.Json;
using Corvus.Json.Internal;

namespace ACRealms.Roslyn.RealmProps.IntermediateModels;

/// <summary>
/// Generated from JSON Schema.
/// </summary>
public readonly partial struct PropMinmax
{
    /// <summary>
    /// Generated from JSON Schema.
    /// </summary>
    /// <remarks>
    /// <para>
    /// Restricts the property from randomizing to **At Most** the frequency specified here. For no restrictions, omit this attribute
    /// </para>
    /// </remarks>
    [System.Text.Json.Serialization.JsonConverter(typeof(Corvus.Json.Internal.JsonValueConverter<RerollRestrictedToEntity>))]
    public readonly partial struct RerollRestrictedToEntity

    {
        private readonly Backing backing;
        private readonly JsonElement jsonElementBacking;
        private readonly string stringBacking;

        /// <summary>
        /// Initializes a new instance of the <see cref="RerollRestrictedToEntity"/> struct.
        /// </summary>
        public RerollRestrictedToEntity()
        {
            this.jsonElementBacking = default;
            this.backing = Backing.JsonElement;
            this.stringBacking = string.Empty;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RerollRestrictedToEntity"/> struct.
        /// </summary>
        /// <param name="value">The value from which to construct the instance.</param>
        public RerollRestrictedToEntity(in JsonElement value)
        {
            this.jsonElementBacking = value;
            this.backing = Backing.JsonElement;
            this.stringBacking = string.Empty;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RerollRestrictedToEntity"/> struct.
        /// </summary>
        /// <param name="value">The value from which to construct the instance.</param>
        public RerollRestrictedToEntity(string value)
        {
            this.backing = Backing.String;
            this.jsonElementBacking = default;
            this.stringBacking = value;
        }

        /// <summary>
        /// Gets the schema location from which this type was generated.
        /// </summary>
        public static string SchemaLocation { get; } = "realm-props/common/prop-minmax.json#/properties/reroll_restricted_to";

        /// <summary>
        /// Gets a Null instance.
        /// </summary>
        public static RerollRestrictedToEntity Null { get; } = new(JsonValueHelpers.NullElement);

        /// <summary>
        /// Gets an Undefined instance.
        /// </summary>
        public static RerollRestrictedToEntity Undefined { get; }

        /// <summary>
        /// Gets the default instance.
        /// </summary>
        public static RerollRestrictedToEntity DefaultInstance { get; }

        /// <inheritdoc/>
        public JsonAny AsAny
        {
            get
            {
                if ((this.backing & Backing.JsonElement) != 0)
                {
                    return new(this.jsonElementBacking);
                }

                if ((this.backing & Backing.String) != 0)
                {
                    return new(this.stringBacking);
                }

                if ((this.backing & Backing.Null) != 0)
                {
                    return JsonAny.Null;
                }

                return JsonAny.Undefined;
            }
        }

        /// <inheritdoc/>
        public JsonElement AsJsonElement
        {
            get
            {
                if ((this.backing & Backing.JsonElement) != 0)
                {
                    return this.jsonElementBacking;
                }

                if ((this.backing & Backing.String) != 0)
                {
                    return JsonValueHelpers.StringToJsonElement(this.stringBacking);
                }

                if ((this.backing & Backing.Null) != 0)
                {
                    return JsonValueHelpers.NullElement;
                }

                return default;
            }
        }

        /// <inheritdoc/>
        public JsonString AsString
        {
            get
            {
                if ((this.backing & Backing.JsonElement) != 0)
                {
                    return new(this.jsonElementBacking);
                }

                if ((this.backing & Backing.String) != 0)
                {
                    return new(this.stringBacking);
                }

                throw new InvalidOperationException();
            }
        }

        /// <inheritdoc/>
        JsonBoolean IJsonValue.AsBoolean
        {
            get
            {
                if ((this.backing & Backing.JsonElement) != 0)
                {
                    return new(this.jsonElementBacking);
                }

                throw new InvalidOperationException();
            }
        }

        /// <inheritdoc/>
        JsonNumber IJsonValue.AsNumber
        {
            get
            {
                if ((this.backing & Backing.JsonElement) != 0)
                {
                    return new(this.jsonElementBacking);
                }

                throw new InvalidOperationException();
            }
        }

        /// <inheritdoc/>
        JsonObject IJsonValue.AsObject
        {
            get
            {
                if ((this.backing & Backing.JsonElement) != 0)
                {
                    return new(this.jsonElementBacking);
                }

                throw new InvalidOperationException();
            }
        }

        /// <inheritdoc/>
        JsonArray IJsonValue.AsArray
        {
            get
            {
                if ((this.backing & Backing.JsonElement) != 0)
                {
                    return new(this.jsonElementBacking);
                }

                throw new InvalidOperationException();
            }
        }

        /// <summary>
        /// Gets the instance as a <see cref="ACRealms.Roslyn.RealmProps.IntermediateModels.PropMinmax.RerollRestrictedToEntity.DisablesRandomizationUsesTheDefaultValue" />.
        /// </summary>
        public ACRealms.Roslyn.RealmProps.IntermediateModels.PropMinmax.RerollRestrictedToEntity.DisablesRandomizationUsesTheDefaultValue AsDisablesRandomizationUsesTheDefaultValue
        {
            get
            {
                return this.As<ACRealms.Roslyn.RealmProps.IntermediateModels.PropMinmax.RerollRestrictedToEntity.DisablesRandomizationUsesTheDefaultValue>();
            }
        }

        /// <summary>
        /// Gets a value indicating whether the instance is a <see cref="ACRealms.Roslyn.RealmProps.IntermediateModels.PropMinmax.RerollRestrictedToEntity.DisablesRandomizationUsesTheDefaultValue" />.
        /// </summary>
        public bool IsDisablesRandomizationUsesTheDefaultValue
        {
            get
            {
                return this.As<ACRealms.Roslyn.RealmProps.IntermediateModels.PropMinmax.RerollRestrictedToEntity.DisablesRandomizationUsesTheDefaultValue>().IsValid();
            }
        }

        /// <summary>
        /// Gets the instance as a <see cref="ACRealms.Roslyn.RealmProps.IntermediateModels.PropMinmax.RerollRestrictedToEntity.OneOf1Entity" />.
        /// </summary>
        public ACRealms.Roslyn.RealmProps.IntermediateModels.PropMinmax.RerollRestrictedToEntity.OneOf1Entity AsOneOf1Entity
        {
            get
            {
                return this.As<ACRealms.Roslyn.RealmProps.IntermediateModels.PropMinmax.RerollRestrictedToEntity.OneOf1Entity>();
            }
        }

        /// <summary>
        /// Gets a value indicating whether the instance is a <see cref="ACRealms.Roslyn.RealmProps.IntermediateModels.PropMinmax.RerollRestrictedToEntity.OneOf1Entity" />.
        /// </summary>
        public bool IsOneOf1Entity
        {
            get
            {
                return this.As<ACRealms.Roslyn.RealmProps.IntermediateModels.PropMinmax.RerollRestrictedToEntity.OneOf1Entity>().IsValid();
            }
        }

        /// <summary>
        /// Gets the instance as a <see cref="ACRealms.Roslyn.RealmProps.IntermediateModels.PropMinmax.RerollRestrictedToEntity.OneOf2Entity" />.
        /// </summary>
        public ACRealms.Roslyn.RealmProps.IntermediateModels.PropMinmax.RerollRestrictedToEntity.OneOf2Entity AsOneOf2Entity
        {
            get
            {
                return this.As<ACRealms.Roslyn.RealmProps.IntermediateModels.PropMinmax.RerollRestrictedToEntity.OneOf2Entity>();
            }
        }

        /// <summary>
        /// Gets a value indicating whether the instance is a <see cref="ACRealms.Roslyn.RealmProps.IntermediateModels.PropMinmax.RerollRestrictedToEntity.OneOf2Entity" />.
        /// </summary>
        public bool IsOneOf2Entity
        {
            get
            {
                return this.As<ACRealms.Roslyn.RealmProps.IntermediateModels.PropMinmax.RerollRestrictedToEntity.OneOf2Entity>().IsValid();
            }
        }

        /// <inheritdoc/>
        public bool HasJsonElementBacking
        {
            get
            {
                return (this.backing & Backing.JsonElement) != 0;
            }
        }

        /// <inheritdoc/>
        public bool HasDotnetBacking
        {
            get
            {
                return (this.backing & Backing.Dotnet) != 0;
            }
        }

        /// <inheritdoc/>
        public JsonValueKind ValueKind
        {
            get
            {
                if ((this.backing & Backing.JsonElement) != 0)
                {
                    return this.jsonElementBacking.ValueKind;
                }

                if ((this.backing & Backing.String) != 0)
                {
                    return JsonValueKind.String;
                }

                return JsonValueKind.Undefined;
            }
        }

        /// <summary>
        /// Conversion from JsonAny.
        /// </summary>
        /// <param name="value">The value from which to convert.</param>
        public static implicit operator RerollRestrictedToEntity(JsonAny value)
        {
            return value.As<RerollRestrictedToEntity>();
        }

        /// <summary>
        /// Conversion to JsonAny.
        /// </summary>
        /// <param name="value">The value from which to convert.</param>
        public static implicit operator JsonAny(RerollRestrictedToEntity value)
        {
            return value.AsAny;
        }

        /// <summary>
        /// Conversion to <see cref="ACRealms.Roslyn.RealmProps.IntermediateModels.PropMinmax.RerollRestrictedToEntity.DisablesRandomizationUsesTheDefaultValue"/>.
        /// </summary>
        /// <param name="value">The value from which to convert.</param>
        public static explicit operator ACRealms.Roslyn.RealmProps.IntermediateModels.PropMinmax.RerollRestrictedToEntity.DisablesRandomizationUsesTheDefaultValue(RerollRestrictedToEntity value)
        {
            return value.As<ACRealms.Roslyn.RealmProps.IntermediateModels.PropMinmax.RerollRestrictedToEntity.DisablesRandomizationUsesTheDefaultValue>();
        }

        /// <summary>
        /// Conversion from <see cref="ACRealms.Roslyn.RealmProps.IntermediateModels.PropMinmax.RerollRestrictedToEntity.DisablesRandomizationUsesTheDefaultValue"/>.
        /// </summary>
        /// <param name="value">The value from which to convert.</param>
        public static implicit operator RerollRestrictedToEntity(ACRealms.Roslyn.RealmProps.IntermediateModels.PropMinmax.RerollRestrictedToEntity.DisablesRandomizationUsesTheDefaultValue value)
        {
            return value.As<RerollRestrictedToEntity>();
        }

        /// <summary>
        /// Conversion to <see cref="ACRealms.Roslyn.RealmProps.IntermediateModels.PropMinmax.RerollRestrictedToEntity.OneOf1Entity"/>.
        /// </summary>
        /// <param name="value">The value from which to convert.</param>
        public static explicit operator ACRealms.Roslyn.RealmProps.IntermediateModels.PropMinmax.RerollRestrictedToEntity.OneOf1Entity(RerollRestrictedToEntity value)
        {
            return value.As<ACRealms.Roslyn.RealmProps.IntermediateModels.PropMinmax.RerollRestrictedToEntity.OneOf1Entity>();
        }

        /// <summary>
        /// Conversion from <see cref="ACRealms.Roslyn.RealmProps.IntermediateModels.PropMinmax.RerollRestrictedToEntity.OneOf1Entity"/>.
        /// </summary>
        /// <param name="value">The value from which to convert.</param>
        public static implicit operator RerollRestrictedToEntity(ACRealms.Roslyn.RealmProps.IntermediateModels.PropMinmax.RerollRestrictedToEntity.OneOf1Entity value)
        {
            return value.As<RerollRestrictedToEntity>();
        }

        /// <summary>
        /// Conversion to <see cref="ACRealms.Roslyn.RealmProps.IntermediateModels.PropMinmax.RerollRestrictedToEntity.OneOf2Entity"/>.
        /// </summary>
        /// <param name="value">The value from which to convert.</param>
        public static explicit operator ACRealms.Roslyn.RealmProps.IntermediateModels.PropMinmax.RerollRestrictedToEntity.OneOf2Entity(RerollRestrictedToEntity value)
        {
            return value.As<ACRealms.Roslyn.RealmProps.IntermediateModels.PropMinmax.RerollRestrictedToEntity.OneOf2Entity>();
        }

        /// <summary>
        /// Conversion from <see cref="ACRealms.Roslyn.RealmProps.IntermediateModels.PropMinmax.RerollRestrictedToEntity.OneOf2Entity"/>.
        /// </summary>
        /// <param name="value">The value from which to convert.</param>
        public static implicit operator RerollRestrictedToEntity(ACRealms.Roslyn.RealmProps.IntermediateModels.PropMinmax.RerollRestrictedToEntity.OneOf2Entity value)
        {
            return value.As<RerollRestrictedToEntity>();
        }

        /// <summary>
        /// Operator ==.
        /// </summary>
        /// <param name="left">The lhs of the operator.</param>
        /// <param name="right">The rhs of the operator.</param>
        /// <returns>
        /// <c>True</c> if the values are equal.
        /// </returns>
        public static bool operator ==(in RerollRestrictedToEntity left, in RerollRestrictedToEntity right)
        {
            return left.Equals(right);
        }

        /// <summary>
        /// Operator !=.
        /// </summary>
        /// <param name="left">The lhs of the operator.</param>
        /// <param name="right">The rhs of the operator.</param>
        /// <returns>
        /// <c>True</c> if the values are not equal.
        /// </returns>
        public static bool operator !=(in RerollRestrictedToEntity left, in RerollRestrictedToEntity right)
        {
            return !left.Equals(right);
        }

        /// <summary>
        /// Gets an instance of the JSON value from a <see cref="JsonElement"/> value.
        /// </summary>
        /// <param name="value">The <see cref="JsonElement"/> value from which to instantiate the instance.</param>
        /// <returns>An instance of this type, initialized from the <see cref="JsonElement"/>.</returns>
        /// <remarks>The returned value will have a <see cref = "IJsonValue.ValueKind"/> of <see cref = "JsonValueKind.Undefined"/> if the
        /// value cannot be constructed from the given instance (e.g. because they have an incompatible .NET backing type).
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static RerollRestrictedToEntity FromJson(in JsonElement value)
        {
            return new(value);
        }

        /// <summary>
        /// Gets an instance of the JSON value from a <see cref="JsonAny"/> value.
        /// </summary>
        /// <param name="value">The <see cref="JsonAny"/> value from which to instantiate the instance.</param>
        /// <returns>An instance of this type, initialized from the <see cref="JsonAny"/> value.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static RerollRestrictedToEntity FromAny(in JsonAny value)
        {
            if (value.HasJsonElementBacking)
            {
                return new(value.AsJsonElement);
            }

            return value.ValueKind switch
            {
                JsonValueKind.String => new(value.AsString.GetString()!),
                JsonValueKind.Null => Null,
                _ => Undefined,
            };
        }

#if NET8_0_OR_GREATER
        /// <summary>
        /// Gets an instance of the JSON value from the provided value.
        /// </summary>
        /// <typeparam name="TValue">The type of the value.</typeparam>
        /// <param name="value">The value from which to instantiate the instance.</param>
        /// <returns>An instance of this type, initialized from the provided value.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static RerollRestrictedToEntity IJsonValue<RerollRestrictedToEntity>.FromBoolean<TValue>(in TValue value)
        {
            if (value.HasJsonElementBacking)
            {
                return new(value.AsJsonElement);
            }

            return Undefined;
        }
#endif

        /// <summary>
        /// Gets an instance of the JSON value from the provided value.
        /// </summary>
        /// <typeparam name="TValue">The type of the value.</typeparam>
        /// <param name="value">The value from which to instantiate the instance.</param>
        /// <returns>An instance of this type, initialized from the provided value.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static RerollRestrictedToEntity FromString<TValue>(in TValue value)
            where TValue : struct, IJsonString<TValue>
        {
            if (value.HasJsonElementBacking)
            {
                return new(value.AsJsonElement);
            }

            return value.ValueKind switch
            {
                JsonValueKind.String => new(value.GetString()!),
                JsonValueKind.Null => Null,
                _ => Undefined,
            };
        }

#if NET8_0_OR_GREATER
        /// <summary>
        /// Gets an instance of the JSON value from the provided value.
        /// </summary>
        /// <typeparam name="TValue">The type of the value.</typeparam>
        /// <param name="value">The value from which to instantiate the instance.</param>
        /// <returns>An instance of this type, initialized from the provided value.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static RerollRestrictedToEntity IJsonValue<RerollRestrictedToEntity>.FromNumber<TValue>(in TValue value)
        {
            if (value.HasJsonElementBacking)
            {
                return new(value.AsJsonElement);
            }

            return Undefined;
        }
#endif

#if NET8_0_OR_GREATER
        /// <summary>
        /// Gets an instance of the JSON value from the provided value.
        /// </summary>
        /// <typeparam name="TValue">The type of the value.</typeparam>
        /// <param name="value">The value from which to instantiate the instance.</param>
        /// <returns>An instance of this type, initialized from the provided value.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static RerollRestrictedToEntity IJsonValue<RerollRestrictedToEntity>.FromObject<TValue>(in TValue value)
        {
            if (value.HasJsonElementBacking)
            {
                return new(value.AsJsonElement);
            }

            return Undefined;
        }
#endif

#if NET8_0_OR_GREATER
        /// <summary>
        /// Gets an instance of the JSON value from the provided value.
        /// </summary>
        /// <typeparam name="TValue">The type of the value.</typeparam>
        /// <param name="value">The value from which to instantiate the instance.</param>
        /// <returns>An instance of this type, initialized from the provided value.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static RerollRestrictedToEntity IJsonValue<RerollRestrictedToEntity>.FromArray<TValue>(in TValue value)
        {
            if (value.HasJsonElementBacking)
            {
                return new(value.AsJsonElement);
            }

            return Undefined;
        }
#endif

        /// <summary>
        /// Parses the RerollRestrictedToEntity.
        /// </summary>
        /// <param name="source">The source of the JSON string to parse.</param>
        /// <param name="options">The (optional) JsonDocumentOptions.</param>
        public static RerollRestrictedToEntity Parse(string source, JsonDocumentOptions options = default)
        {
            using var jsonDocument = JsonDocument.Parse(source, options);
            return new(jsonDocument.RootElement.Clone());
        }

        /// <summary>
        /// Parses the RerollRestrictedToEntity.
        /// </summary>
        /// <param name="source">The source of the JSON string to parse.</param>
        /// <param name="options">The (optional) JsonDocumentOptions.</param>
        public static RerollRestrictedToEntity Parse(Stream source, JsonDocumentOptions options = default)
        {
            using var jsonDocument = JsonDocument.Parse(source, options);
            return new(jsonDocument.RootElement.Clone());
        }

        /// <summary>
        /// Parses the RerollRestrictedToEntity.
        /// </summary>
        /// <param name="source">The source of the JSON string to parse.</param>
        /// <param name="options">The (optional) JsonDocumentOptions.</param>
        public static RerollRestrictedToEntity Parse(ReadOnlyMemory<byte> source, JsonDocumentOptions options = default)
        {
            using var jsonDocument = JsonDocument.Parse(source, options);
            return new(jsonDocument.RootElement.Clone());
        }

        /// <summary>
        /// Parses the RerollRestrictedToEntity.
        /// </summary>
        /// <param name="source">The source of the JSON string to parse.</param>
        /// <param name="options">The (optional) JsonDocumentOptions.</param>
        public static RerollRestrictedToEntity Parse(ReadOnlyMemory<char> source, JsonDocumentOptions options = default)
        {
            using var jsonDocument = JsonDocument.Parse(source, options);
            return new(jsonDocument.RootElement.Clone());
        }

        /// <summary>
        /// Parses the RerollRestrictedToEntity.
        /// </summary>
        /// <param name="source">The source of the JSON string to parse.</param>
        /// <param name="options">The (optional) JsonDocumentOptions.</param>
        public static RerollRestrictedToEntity Parse(ReadOnlySequence<byte> source, JsonDocumentOptions options = default)
        {
            using var jsonDocument = JsonDocument.Parse(source, options);
            return new(jsonDocument.RootElement.Clone());
        }

        /// <summary>
        /// Parses the RerollRestrictedToEntity.
        /// </summary>
        /// <param name="source">The source of the JSON string to parse.</param>
        public static RerollRestrictedToEntity ParseValue(string source)
        {
#if NET8_0_OR_GREATER
            return IJsonValue<RerollRestrictedToEntity>.ParseValue(source);
#else
            return JsonValueHelpers.ParseValue<RerollRestrictedToEntity>(source.AsSpan());
#endif
        }

        /// <summary>
        /// Parses the RerollRestrictedToEntity.
        /// </summary>
        /// <param name="source">The source of the JSON string to parse.</param>
        public static RerollRestrictedToEntity ParseValue(ReadOnlySpan<char> source)
        {
#if NET8_0_OR_GREATER
            return IJsonValue<RerollRestrictedToEntity>.ParseValue(source);
#else
            return JsonValueHelpers.ParseValue<RerollRestrictedToEntity>(source);
#endif
        }

        /// <summary>
        /// Parses the RerollRestrictedToEntity.
        /// </summary>
        /// <param name="source">The source of the JSON string to parse.</param>
        public static RerollRestrictedToEntity ParseValue(ReadOnlySpan<byte> source)
        {
#if NET8_0_OR_GREATER
            return IJsonValue<RerollRestrictedToEntity>.ParseValue(source);
#else
            return JsonValueHelpers.ParseValue<RerollRestrictedToEntity>(source);
#endif
        }

        /// <summary>
        /// Parses the RerollRestrictedToEntity.
        /// </summary>
        /// <param name="source">The source of the JSON string to parse.</param>
        public static RerollRestrictedToEntity ParseValue(ref Utf8JsonReader source)
        {
#if NET8_0_OR_GREATER
            return IJsonValue<RerollRestrictedToEntity>.ParseValue(ref source);
#else
            return JsonValueHelpers.ParseValue<RerollRestrictedToEntity>(ref source);
#endif
        }

        /// <summary>
        /// Gets the value as an instance of the target value.
        /// </summary>
        /// <typeparam name="TTarget">The type of the target.</typeparam>
        /// <returns>An instance of the target type.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public TTarget As<TTarget>()
            where TTarget : struct, IJsonValue<TTarget>
        {
#if NET8_0_OR_GREATER
            if ((this.backing & Backing.JsonElement) != 0)
            {
                return TTarget.FromJson(this.jsonElementBacking);
            }

            if ((this.backing & Backing.String) != 0)
            {
                return TTarget.FromString(this);
            }

            if ((this.backing & Backing.Null) != 0)
            {
                return TTarget.Null;
            }

            return TTarget.Undefined;
#else
            return this.As<RerollRestrictedToEntity, TTarget>();
#endif
        }

        /// <inheritdoc/>
        public override bool Equals(object? obj)
        {
            return
                (obj is IJsonValue jv && this.Equals(jv.As<RerollRestrictedToEntity>())) ||
                (obj is null && this.IsNull());
        }

        /// <inheritdoc/>
        public bool Equals<T>(in T other)
            where T : struct, IJsonValue<T>
        {
            return this.Equals(other.As<RerollRestrictedToEntity>());
        }

        /// <summary>
        /// Equality comparison.
        /// </summary>
        /// <param name="other">The other item with which to compare.</param>
        /// <returns><see langword="true"/> if the values were equal.</returns>
        public bool Equals(in RerollRestrictedToEntity other)
        {
            JsonValueKind thisKind = this.ValueKind;
            JsonValueKind otherKind = other.ValueKind;
            if (thisKind != otherKind)
            {
                return false;
            }

            if (thisKind == JsonValueKind.Null || thisKind == JsonValueKind.Undefined)
            {
                return true;
            }

            if (thisKind == JsonValueKind.String)
            {
                if (this.backing == Backing.JsonElement)
                {
                    if (other.backing == Backing.String)
                    {
                        return this.jsonElementBacking.ValueEquals(other.stringBacking);
                    }
                    else
                    {
                        other.jsonElementBacking.TryGetValue(CompareValues, this.jsonElementBacking, out bool areEqual);
                        return areEqual;
                    }

                }

                if (other.backing == Backing.JsonElement)
                {
                    return other.jsonElementBacking.ValueEquals(this.stringBacking);
                }

                return this.stringBacking.Equals(other.stringBacking);

                static bool CompareValues(ReadOnlySpan<byte> span, in JsonElement firstItem, out bool value)
                {
                    value = firstItem.ValueEquals(span);
                    return true;
                }
            }

            return false;
        }

        /// <inheritdoc/>
        public void WriteTo(Utf8JsonWriter writer)
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                {
                    this.jsonElementBacking.WriteTo(writer);
                }

                return;
            }

            if ((this.backing & Backing.String) != 0)
            {
                writer.WriteStringValue(this.stringBacking);

                return;
            }

            if ((this.backing & Backing.Null) != 0)
            {
                writer.WriteNullValue();

                return;
            }
        }

        /// <inheritdoc/>
        public override int GetHashCode()
        {
            return this.ValueKind switch
            {
                JsonValueKind.Array => JsonValueHelpers.GetArrayHashCode(((IJsonValue)this).AsArray),
                JsonValueKind.Object => JsonValueHelpers.GetObjectHashCode(((IJsonValue)this).AsObject),
                JsonValueKind.Number => JsonValueHelpers.GetHashCodeForNumber(((IJsonValue)this).AsNumber),
                JsonValueKind.String => JsonValueHelpers.GetHashCodeForString(this),
                JsonValueKind.True => true.GetHashCode(),
                JsonValueKind.False => false.GetHashCode(),
                JsonValueKind.Null => JsonValueHelpers.NullHashCode,
                _ => JsonValueHelpers.UndefinedHashCode,
            };
        }

        /// <inheritdoc/>
        public override string ToString()
        {
            return this.Serialize();
        }

        /// <summary>
        /// Matches the value against the composed values, and returns the result of calling the provided match function for the first match found.
        /// </summary>
        /// <typeparam name="TIn">The immutable context to pass in to the match function.</typeparam>
        /// <typeparam name="TOut">The result of calling the match function.</typeparam>
        /// <param name="context">The context to pass to the match function.</param>
        /// <param name="matchDisablesRandomizationUsesTheDefaultValue">Match a <see cref="ACRealms.Roslyn.RealmProps.IntermediateModels.PropMinmax.RerollRestrictedToEntity.DisablesRandomizationUsesTheDefaultValue"/>.</param>
        /// <param name="matchOneOf1Entity">Match a <see cref="ACRealms.Roslyn.RealmProps.IntermediateModels.PropMinmax.RerollRestrictedToEntity.OneOf1Entity"/>.</param>
        /// <param name="matchOneOf2Entity">Match a <see cref="ACRealms.Roslyn.RealmProps.IntermediateModels.PropMinmax.RerollRestrictedToEntity.OneOf2Entity"/>.</param>
        /// <param name="defaultMatch">Match any other value.</param>
        /// <returns>An instance of the value returned by the match function.</returns>
        public TOut Match<TIn, TOut>(
            in TIn context,
            Matcher<ACRealms.Roslyn.RealmProps.IntermediateModels.PropMinmax.RerollRestrictedToEntity.DisablesRandomizationUsesTheDefaultValue, TIn, TOut> matchDisablesRandomizationUsesTheDefaultValue,
            Matcher<ACRealms.Roslyn.RealmProps.IntermediateModels.PropMinmax.RerollRestrictedToEntity.OneOf1Entity, TIn, TOut> matchOneOf1Entity,
            Matcher<ACRealms.Roslyn.RealmProps.IntermediateModels.PropMinmax.RerollRestrictedToEntity.OneOf2Entity, TIn, TOut> matchOneOf2Entity,
            Matcher<ACRealms.Roslyn.RealmProps.IntermediateModels.PropMinmax.RerollRestrictedToEntity, TIn, TOut> defaultMatch)
        {
            ACRealms.Roslyn.RealmProps.IntermediateModels.PropMinmax.RerollRestrictedToEntity.DisablesRandomizationUsesTheDefaultValue matchDisablesRandomizationUsesTheDefaultValueValue = this.As<ACRealms.Roslyn.RealmProps.IntermediateModels.PropMinmax.RerollRestrictedToEntity.DisablesRandomizationUsesTheDefaultValue>();
            if (matchDisablesRandomizationUsesTheDefaultValueValue.IsValid())
            {
                return matchDisablesRandomizationUsesTheDefaultValue(matchDisablesRandomizationUsesTheDefaultValueValue, context);
            }

            ACRealms.Roslyn.RealmProps.IntermediateModels.PropMinmax.RerollRestrictedToEntity.OneOf1Entity matchOneOf1EntityValue = this.As<ACRealms.Roslyn.RealmProps.IntermediateModels.PropMinmax.RerollRestrictedToEntity.OneOf1Entity>();
            if (matchOneOf1EntityValue.IsValid())
            {
                return matchOneOf1Entity(matchOneOf1EntityValue, context);
            }

            ACRealms.Roslyn.RealmProps.IntermediateModels.PropMinmax.RerollRestrictedToEntity.OneOf2Entity matchOneOf2EntityValue = this.As<ACRealms.Roslyn.RealmProps.IntermediateModels.PropMinmax.RerollRestrictedToEntity.OneOf2Entity>();
            if (matchOneOf2EntityValue.IsValid())
            {
                return matchOneOf2Entity(matchOneOf2EntityValue, context);
            }

            return defaultMatch(this, context);
        }

        /// <summary>
        /// Matches the value against the composed values, and returns the result of calling the provided match function for the first match found.
        /// </summary>
        /// <typeparam name="TOut">The result of calling the match function.</typeparam>
        /// <param name="matchDisablesRandomizationUsesTheDefaultValue">Match a <see cref="ACRealms.Roslyn.RealmProps.IntermediateModels.PropMinmax.RerollRestrictedToEntity.DisablesRandomizationUsesTheDefaultValue"/>.</param>
        /// <param name="matchOneOf1Entity">Match a <see cref="ACRealms.Roslyn.RealmProps.IntermediateModels.PropMinmax.RerollRestrictedToEntity.OneOf1Entity"/>.</param>
        /// <param name="matchOneOf2Entity">Match a <see cref="ACRealms.Roslyn.RealmProps.IntermediateModels.PropMinmax.RerollRestrictedToEntity.OneOf2Entity"/>.</param>
        /// <param name="defaultMatch">Match any other value.</param>
        /// <returns>An instance of the value returned by the match function.</returns>
        public TOut Match<TOut>(
            Matcher<ACRealms.Roslyn.RealmProps.IntermediateModels.PropMinmax.RerollRestrictedToEntity.DisablesRandomizationUsesTheDefaultValue, TOut> matchDisablesRandomizationUsesTheDefaultValue,
            Matcher<ACRealms.Roslyn.RealmProps.IntermediateModels.PropMinmax.RerollRestrictedToEntity.OneOf1Entity, TOut> matchOneOf1Entity,
            Matcher<ACRealms.Roslyn.RealmProps.IntermediateModels.PropMinmax.RerollRestrictedToEntity.OneOf2Entity, TOut> matchOneOf2Entity,
            Matcher<ACRealms.Roslyn.RealmProps.IntermediateModels.PropMinmax.RerollRestrictedToEntity, TOut> defaultMatch)
        {
            ACRealms.Roslyn.RealmProps.IntermediateModels.PropMinmax.RerollRestrictedToEntity.DisablesRandomizationUsesTheDefaultValue matchDisablesRandomizationUsesTheDefaultValueValue = this.As<ACRealms.Roslyn.RealmProps.IntermediateModels.PropMinmax.RerollRestrictedToEntity.DisablesRandomizationUsesTheDefaultValue>();
            if (matchDisablesRandomizationUsesTheDefaultValueValue.IsValid())
            {
                return matchDisablesRandomizationUsesTheDefaultValue(matchDisablesRandomizationUsesTheDefaultValueValue);
            }

            ACRealms.Roslyn.RealmProps.IntermediateModels.PropMinmax.RerollRestrictedToEntity.OneOf1Entity matchOneOf1EntityValue = this.As<ACRealms.Roslyn.RealmProps.IntermediateModels.PropMinmax.RerollRestrictedToEntity.OneOf1Entity>();
            if (matchOneOf1EntityValue.IsValid())
            {
                return matchOneOf1Entity(matchOneOf1EntityValue);
            }

            ACRealms.Roslyn.RealmProps.IntermediateModels.PropMinmax.RerollRestrictedToEntity.OneOf2Entity matchOneOf2EntityValue = this.As<ACRealms.Roslyn.RealmProps.IntermediateModels.PropMinmax.RerollRestrictedToEntity.OneOf2Entity>();
            if (matchOneOf2EntityValue.IsValid())
            {
                return matchOneOf2Entity(matchOneOf2EntityValue);
            }

            return defaultMatch(this);
        }

        /// <summary>
        /// Gets the value as a <see cref="ACRealms.Roslyn.RealmProps.IntermediateModels.PropMinmax.RerollRestrictedToEntity.DisablesRandomizationUsesTheDefaultValue" />.
        /// </summary>
        /// <param name="result">The result of the conversions.</param>
        /// <returns><see langword="true" /> if the conversion was valid.</returns>
        public bool TryGetAsDisablesRandomizationUsesTheDefaultValue(out ACRealms.Roslyn.RealmProps.IntermediateModels.PropMinmax.RerollRestrictedToEntity.DisablesRandomizationUsesTheDefaultValue result)
        {
            result = this.As<ACRealms.Roslyn.RealmProps.IntermediateModels.PropMinmax.RerollRestrictedToEntity.DisablesRandomizationUsesTheDefaultValue>();
            return result.IsValid();
        }

        /// <summary>
        /// Gets the value as a <see cref="ACRealms.Roslyn.RealmProps.IntermediateModels.PropMinmax.RerollRestrictedToEntity.OneOf1Entity" />.
        /// </summary>
        /// <param name="result">The result of the conversions.</param>
        /// <returns><see langword="true" /> if the conversion was valid.</returns>
        public bool TryGetAsOneOf1Entity(out ACRealms.Roslyn.RealmProps.IntermediateModels.PropMinmax.RerollRestrictedToEntity.OneOf1Entity result)
        {
            result = this.As<ACRealms.Roslyn.RealmProps.IntermediateModels.PropMinmax.RerollRestrictedToEntity.OneOf1Entity>();
            return result.IsValid();
        }

        /// <summary>
        /// Gets the value as a <see cref="ACRealms.Roslyn.RealmProps.IntermediateModels.PropMinmax.RerollRestrictedToEntity.OneOf2Entity" />.
        /// </summary>
        /// <param name="result">The result of the conversions.</param>
        /// <returns><see langword="true" /> if the conversion was valid.</returns>
        public bool TryGetAsOneOf2Entity(out ACRealms.Roslyn.RealmProps.IntermediateModels.PropMinmax.RerollRestrictedToEntity.OneOf2Entity result)
        {
            result = this.As<ACRealms.Roslyn.RealmProps.IntermediateModels.PropMinmax.RerollRestrictedToEntity.OneOf2Entity>();
            return result.IsValid();
        }
    }
}
