//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable

using System.Runtime.CompilerServices;
using System.Text.Json;
using Corvus.Json;

namespace ACRealms.Roslyn.RealmProps.IntermediateModels;

/// <summary>
/// Generated from JSON Schema.
/// </summary>
/// <remarks>
/// <para>
/// Examples:
/// <example>
/// <code>
/// { }
/// </code>
/// </example>
/// </para>
/// </remarks>
public readonly partial struct Group
{
    /// <summary>
    /// Generated from JSON Schema.
    /// </summary>
    public readonly partial struct TypedPropDefs
    {
        /// <inheritdoc/>
        public ValidationContext Validate(in ValidationContext validationContext, ValidationLevel level = ValidationLevel.Flag)
        {
            ValidationContext result = validationContext;
            if (level > ValidationLevel.Flag && !result.IsUsingResults)
            {
                result = result.UsingResults();
            }

            if (level > ValidationLevel.Basic)
            {
                if (!result.IsUsingStack)
                {
                    result = result.UsingStack();
                }

                result = result.PushSchemaLocation("realm-props/group.json#/definitions/typedPropDefs");
            }

            result = CorvusValidation.CompositionAllOfValidationHandler(this, result, level);

            if (level == ValidationLevel.Flag && !result.IsValid)
            {
                return result;
            }

            if (level > ValidationLevel.Basic)
            {
                result = result.PopLocation();
            }

            return result;
        }

        /// <summary>
        /// Validation constants for the type.
        /// </summary>
        public static partial class CorvusValidation
        {
            /// <summary>
            /// Composition validation (all-of).
            /// </summary>
            /// <param name="value">The value to validate.</param>
            /// <param name="validationContext">The current validation context.</param>
            /// <param name="level">The current validation level.</param>
            /// <returns>The resulting validation context after validation.</returns>
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            internal static ValidationContext CompositionAllOfValidationHandler(
                in TypedPropDefs value,
                in ValidationContext validationContext,
                ValidationLevel level = ValidationLevel.Flag)
            {
                ValidationContext result = validationContext;
                ValidationContext childContextBase = result;

                ValidationContext allOfResult0 = childContextBase.CreateChildContext();
                if (level > ValidationLevel.Basic)
                {
                    allOfResult0 = allOfResult0.PushValidationLocationReducedPathModifier(new("#/allOf/0"));
                }

                allOfResult0 = value.As<ACRealms.Roslyn.RealmProps.IntermediateModels.Group.TypedPropDefs.MaybeEnum>().Validate(allOfResult0, level);

                if (!allOfResult0.IsValid)
                {
                    if (level >= ValidationLevel.Basic)
                    {
                        result = result.MergeChildContext(allOfResult0, true).PushValidationLocationProperty("allOf").WithResult(isValid: false, "Validation - allOf failed to validate against the schema.").PopLocation();
                    }
                    else
                    {
                        result = result.MergeChildContext(allOfResult0, false).WithResult(isValid: false);
                        return result;
                    }
                }
                else
                {
                    result = result.MergeChildContext(allOfResult0, level >= ValidationLevel.Detailed);
                }

                ValidationContext allOfResult1 = childContextBase.CreateChildContext();
                if (level > ValidationLevel.Basic)
                {
                    allOfResult1 = allOfResult1.PushValidationLocationReducedPathModifier(new("#/allOf/1"));
                }

                allOfResult1 = value.As<ACRealms.Roslyn.RealmProps.IntermediateModels.Group.TypedPropDefs.MaybeInt>().Validate(allOfResult1, level);

                if (!allOfResult1.IsValid)
                {
                    if (level >= ValidationLevel.Basic)
                    {
                        result = result.MergeChildContext(allOfResult1, true).PushValidationLocationProperty("allOf").WithResult(isValid: false, "Validation - allOf failed to validate against the schema.").PopLocation();
                    }
                    else
                    {
                        result = result.MergeChildContext(allOfResult1, false).WithResult(isValid: false);
                        return result;
                    }
                }
                else
                {
                    result = result.MergeChildContext(allOfResult1, level >= ValidationLevel.Detailed);
                }

                ValidationContext allOfResult2 = childContextBase.CreateChildContext();
                if (level > ValidationLevel.Basic)
                {
                    allOfResult2 = allOfResult2.PushValidationLocationReducedPathModifier(new("#/allOf/2"));
                }

                allOfResult2 = value.As<ACRealms.Roslyn.RealmProps.IntermediateModels.Group.TypedPropDefs.MaybeLong>().Validate(allOfResult2, level);

                if (!allOfResult2.IsValid)
                {
                    if (level >= ValidationLevel.Basic)
                    {
                        result = result.MergeChildContext(allOfResult2, true).PushValidationLocationProperty("allOf").WithResult(isValid: false, "Validation - allOf failed to validate against the schema.").PopLocation();
                    }
                    else
                    {
                        result = result.MergeChildContext(allOfResult2, false).WithResult(isValid: false);
                        return result;
                    }
                }
                else
                {
                    result = result.MergeChildContext(allOfResult2, level >= ValidationLevel.Detailed);
                }

                ValidationContext allOfResult3 = childContextBase.CreateChildContext();
                if (level > ValidationLevel.Basic)
                {
                    allOfResult3 = allOfResult3.PushValidationLocationReducedPathModifier(new("#/allOf/3"));
                }

                allOfResult3 = value.As<ACRealms.Roslyn.RealmProps.IntermediateModels.Group.TypedPropDefs.MaybeFloat>().Validate(allOfResult3, level);

                if (!allOfResult3.IsValid)
                {
                    if (level >= ValidationLevel.Basic)
                    {
                        result = result.MergeChildContext(allOfResult3, true).PushValidationLocationProperty("allOf").WithResult(isValid: false, "Validation - allOf failed to validate against the schema.").PopLocation();
                    }
                    else
                    {
                        result = result.MergeChildContext(allOfResult3, false).WithResult(isValid: false);
                        return result;
                    }
                }
                else
                {
                    result = result.MergeChildContext(allOfResult3, level >= ValidationLevel.Detailed);
                }

                ValidationContext allOfResult4 = childContextBase.CreateChildContext();
                if (level > ValidationLevel.Basic)
                {
                    allOfResult4 = allOfResult4.PushValidationLocationReducedPathModifier(new("#/allOf/4"));
                }

                allOfResult4 = value.As<ACRealms.Roslyn.RealmProps.IntermediateModels.Group.TypedPropDefs.MaybeString>().Validate(allOfResult4, level);

                if (!allOfResult4.IsValid)
                {
                    if (level >= ValidationLevel.Basic)
                    {
                        result = result.MergeChildContext(allOfResult4, true).PushValidationLocationProperty("allOf").WithResult(isValid: false, "Validation - allOf failed to validate against the schema.").PopLocation();
                    }
                    else
                    {
                        result = result.MergeChildContext(allOfResult4, false).WithResult(isValid: false);
                        return result;
                    }
                }
                else
                {
                    result = result.MergeChildContext(allOfResult4, level >= ValidationLevel.Detailed);
                }

                ValidationContext allOfResult5 = childContextBase.CreateChildContext();
                if (level > ValidationLevel.Basic)
                {
                    allOfResult5 = allOfResult5.PushValidationLocationReducedPathModifier(new("#/allOf/5"));
                }

                allOfResult5 = value.As<ACRealms.Roslyn.RealmProps.IntermediateModels.Group.TypedPropDefs.MaybeBool>().Validate(allOfResult5, level);

                if (!allOfResult5.IsValid)
                {
                    if (level >= ValidationLevel.Basic)
                    {
                        result = result.MergeChildContext(allOfResult5, true).PushValidationLocationProperty("allOf").WithResult(isValid: false, "Validation - allOf failed to validate against the schema.").PopLocation();
                    }
                    else
                    {
                        result = result.MergeChildContext(allOfResult5, false).WithResult(isValid: false);
                        return result;
                    }
                }
                else
                {
                    result = result.MergeChildContext(allOfResult5, level >= ValidationLevel.Detailed);
                }

                return result;
            }
        }
    }
}
