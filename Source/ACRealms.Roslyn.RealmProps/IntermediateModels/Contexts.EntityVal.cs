//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable

using System.Buffers;
using System.Runtime.CompilerServices;
using System.Text.Json;
using Corvus.Json;
using Corvus.Json.Internal;

namespace ACRealms.Roslyn.RealmProps.IntermediateModels;

/// <summary>
/// Generated from JSON Schema.
/// </summary>
/// <remarks>
/// <para>
/// A set of contexts for this property. Each context requires an entity type to pass into the property when fetching it. The entities can be filtered with a scope in the ruleset definitions.
/// </para>
/// </remarks>
public readonly partial struct Contexts
{
    /// <summary>
    /// Generated from JSON Schema.
    /// </summary>
    [System.Text.Json.Serialization.JsonConverter(typeof(Corvus.Json.Internal.JsonValueConverter<EntityVal>))]
    public readonly partial struct EntityVal

    {
        private readonly Backing backing;
        private readonly JsonElement jsonElementBacking;
        private readonly string stringBacking;

        /// <summary>
        /// Initializes a new instance of the <see cref="EntityVal"/> struct.
        /// </summary>
        public EntityVal()
        {
            this.jsonElementBacking = default;
            this.backing = Backing.JsonElement;
            this.stringBacking = string.Empty;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EntityVal"/> struct.
        /// </summary>
        /// <param name="value">The value from which to construct the instance.</param>
        public EntityVal(in JsonElement value)
        {
            this.jsonElementBacking = value;
            this.backing = Backing.JsonElement;
            this.stringBacking = string.Empty;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EntityVal"/> struct.
        /// </summary>
        /// <param name="value">The value from which to construct the instance.</param>
        public EntityVal(string value)
        {
            this.backing = Backing.String;
            this.jsonElementBacking = default;
            this.stringBacking = value;
        }

        /// <summary>
        /// Gets the schema location from which this type was generated.
        /// </summary>
        public static string SchemaLocation { get; } = "contexts.json#/definitions/entityVal";

        /// <summary>
        /// Gets a Null instance.
        /// </summary>
        public static EntityVal Null { get; } = new(JsonValueHelpers.NullElement);

        /// <summary>
        /// Gets an Undefined instance.
        /// </summary>
        public static EntityVal Undefined { get; }

        /// <summary>
        /// Gets the default instance.
        /// </summary>
        public static EntityVal DefaultInstance { get; }

        /// <inheritdoc/>
        public JsonAny AsAny
        {
            get
            {
                if ((this.backing & Backing.JsonElement) != 0)
                {
                    return new(this.jsonElementBacking);
                }

                if ((this.backing & Backing.String) != 0)
                {
                    return new(this.stringBacking);
                }

                if ((this.backing & Backing.Null) != 0)
                {
                    return JsonAny.Null;
                }

                return JsonAny.Undefined;
            }
        }

        /// <inheritdoc/>
        public JsonElement AsJsonElement
        {
            get
            {
                if ((this.backing & Backing.JsonElement) != 0)
                {
                    return this.jsonElementBacking;
                }

                if ((this.backing & Backing.String) != 0)
                {
                    return JsonValueHelpers.StringToJsonElement(this.stringBacking);
                }

                if ((this.backing & Backing.Null) != 0)
                {
                    return JsonValueHelpers.NullElement;
                }

                return default;
            }
        }

        /// <inheritdoc/>
        public JsonString AsString
        {
            get
            {
                if ((this.backing & Backing.JsonElement) != 0)
                {
                    return new(this.jsonElementBacking);
                }

                if ((this.backing & Backing.String) != 0)
                {
                    return new(this.stringBacking);
                }

                throw new InvalidOperationException();
            }
        }

        /// <inheritdoc/>
        JsonBoolean IJsonValue.AsBoolean
        {
            get
            {
                if ((this.backing & Backing.JsonElement) != 0)
                {
                    return new(this.jsonElementBacking);
                }

                throw new InvalidOperationException();
            }
        }

        /// <inheritdoc/>
        JsonNumber IJsonValue.AsNumber
        {
            get
            {
                if ((this.backing & Backing.JsonElement) != 0)
                {
                    return new(this.jsonElementBacking);
                }

                throw new InvalidOperationException();
            }
        }

        /// <inheritdoc/>
        JsonObject IJsonValue.AsObject
        {
            get
            {
                if ((this.backing & Backing.JsonElement) != 0)
                {
                    return new(this.jsonElementBacking);
                }

                throw new InvalidOperationException();
            }
        }

        /// <inheritdoc/>
        JsonArray IJsonValue.AsArray
        {
            get
            {
                if ((this.backing & Backing.JsonElement) != 0)
                {
                    return new(this.jsonElementBacking);
                }

                throw new InvalidOperationException();
            }
        }

        /// <summary>
        /// Gets the instance as a <see cref="ACRealms.Roslyn.RealmProps.IntermediateModels.Contexts.WeenieEntity" />.
        /// </summary>
        public ACRealms.Roslyn.RealmProps.IntermediateModels.Contexts.WeenieEntity AsWeenieEntity
        {
            get
            {
                return this.As<ACRealms.Roslyn.RealmProps.IntermediateModels.Contexts.WeenieEntity>();
            }
        }

        /// <summary>
        /// Gets a value indicating whether the instance is a <see cref="ACRealms.Roslyn.RealmProps.IntermediateModels.Contexts.WeenieEntity" />.
        /// </summary>
        public bool IsWeenieEntity
        {
            get
            {
                return this.As<ACRealms.Roslyn.RealmProps.IntermediateModels.Contexts.WeenieEntity>().IsValid();
            }
        }

        /// <summary>
        /// Gets the instance as a <see cref="ACRealms.Roslyn.RealmProps.IntermediateModels.Contexts.WeeniePropertyBoolEntity" />.
        /// </summary>
        public ACRealms.Roslyn.RealmProps.IntermediateModels.Contexts.WeeniePropertyBoolEntity AsWeeniePropertyBoolEntity
        {
            get
            {
                return this.As<ACRealms.Roslyn.RealmProps.IntermediateModels.Contexts.WeeniePropertyBoolEntity>();
            }
        }

        /// <summary>
        /// Gets a value indicating whether the instance is a <see cref="ACRealms.Roslyn.RealmProps.IntermediateModels.Contexts.WeeniePropertyBoolEntity" />.
        /// </summary>
        public bool IsWeeniePropertyBoolEntity
        {
            get
            {
                return this.As<ACRealms.Roslyn.RealmProps.IntermediateModels.Contexts.WeeniePropertyBoolEntity>().IsValid();
            }
        }

        /// <summary>
        /// Gets the instance as a <see cref="ACRealms.Roslyn.RealmProps.IntermediateModels.Contexts.WeeniePropertyFloatEntity" />.
        /// </summary>
        public ACRealms.Roslyn.RealmProps.IntermediateModels.Contexts.WeeniePropertyFloatEntity AsWeeniePropertyFloatEntity
        {
            get
            {
                return this.As<ACRealms.Roslyn.RealmProps.IntermediateModels.Contexts.WeeniePropertyFloatEntity>();
            }
        }

        /// <summary>
        /// Gets a value indicating whether the instance is a <see cref="ACRealms.Roslyn.RealmProps.IntermediateModels.Contexts.WeeniePropertyFloatEntity" />.
        /// </summary>
        public bool IsWeeniePropertyFloatEntity
        {
            get
            {
                return this.As<ACRealms.Roslyn.RealmProps.IntermediateModels.Contexts.WeeniePropertyFloatEntity>().IsValid();
            }
        }

        /// <summary>
        /// Gets the instance as a <see cref="ACRealms.Roslyn.RealmProps.IntermediateModels.Contexts.WeeniePropertyIntEntity" />.
        /// </summary>
        public ACRealms.Roslyn.RealmProps.IntermediateModels.Contexts.WeeniePropertyIntEntity AsWeeniePropertyIntEntity
        {
            get
            {
                return this.As<ACRealms.Roslyn.RealmProps.IntermediateModels.Contexts.WeeniePropertyIntEntity>();
            }
        }

        /// <summary>
        /// Gets a value indicating whether the instance is a <see cref="ACRealms.Roslyn.RealmProps.IntermediateModels.Contexts.WeeniePropertyIntEntity" />.
        /// </summary>
        public bool IsWeeniePropertyIntEntity
        {
            get
            {
                return this.As<ACRealms.Roslyn.RealmProps.IntermediateModels.Contexts.WeeniePropertyIntEntity>().IsValid();
            }
        }

        /// <summary>
        /// Gets the instance as a <see cref="ACRealms.Roslyn.RealmProps.IntermediateModels.Contexts.WeeniePropertyInt64Entity" />.
        /// </summary>
        public ACRealms.Roslyn.RealmProps.IntermediateModels.Contexts.WeeniePropertyInt64Entity AsWeeniePropertyInt64Entity
        {
            get
            {
                return this.As<ACRealms.Roslyn.RealmProps.IntermediateModels.Contexts.WeeniePropertyInt64Entity>();
            }
        }

        /// <summary>
        /// Gets a value indicating whether the instance is a <see cref="ACRealms.Roslyn.RealmProps.IntermediateModels.Contexts.WeeniePropertyInt64Entity" />.
        /// </summary>
        public bool IsWeeniePropertyInt64Entity
        {
            get
            {
                return this.As<ACRealms.Roslyn.RealmProps.IntermediateModels.Contexts.WeeniePropertyInt64Entity>().IsValid();
            }
        }

        /// <summary>
        /// Gets the instance as a <see cref="ACRealms.Roslyn.RealmProps.IntermediateModels.Contexts.WeeniePropertyStringEntity" />.
        /// </summary>
        public ACRealms.Roslyn.RealmProps.IntermediateModels.Contexts.WeeniePropertyStringEntity AsWeeniePropertyStringEntity
        {
            get
            {
                return this.As<ACRealms.Roslyn.RealmProps.IntermediateModels.Contexts.WeeniePropertyStringEntity>();
            }
        }

        /// <summary>
        /// Gets a value indicating whether the instance is a <see cref="ACRealms.Roslyn.RealmProps.IntermediateModels.Contexts.WeeniePropertyStringEntity" />.
        /// </summary>
        public bool IsWeeniePropertyStringEntity
        {
            get
            {
                return this.As<ACRealms.Roslyn.RealmProps.IntermediateModels.Contexts.WeeniePropertyStringEntity>().IsValid();
            }
        }

        /// <summary>
        /// Gets the instance as a <see cref="ACRealms.Roslyn.RealmProps.IntermediateModels.Contexts.WorldObjectEntity" />.
        /// </summary>
        public ACRealms.Roslyn.RealmProps.IntermediateModels.Contexts.WorldObjectEntity AsWorldObjectEntity
        {
            get
            {
                return this.As<ACRealms.Roslyn.RealmProps.IntermediateModels.Contexts.WorldObjectEntity>();
            }
        }

        /// <summary>
        /// Gets a value indicating whether the instance is a <see cref="ACRealms.Roslyn.RealmProps.IntermediateModels.Contexts.WorldObjectEntity" />.
        /// </summary>
        public bool IsWorldObjectEntity
        {
            get
            {
                return this.As<ACRealms.Roslyn.RealmProps.IntermediateModels.Contexts.WorldObjectEntity>().IsValid();
            }
        }

        /// <inheritdoc/>
        public bool HasJsonElementBacking
        {
            get
            {
                return (this.backing & Backing.JsonElement) != 0;
            }
        }

        /// <inheritdoc/>
        public bool HasDotnetBacking
        {
            get
            {
                return (this.backing & Backing.Dotnet) != 0;
            }
        }

        /// <inheritdoc/>
        public JsonValueKind ValueKind
        {
            get
            {
                if ((this.backing & Backing.JsonElement) != 0)
                {
                    return this.jsonElementBacking.ValueKind;
                }

                if ((this.backing & Backing.String) != 0)
                {
                    return JsonValueKind.String;
                }

                return JsonValueKind.Undefined;
            }
        }

        /// <summary>
        /// Conversion from JsonAny.
        /// </summary>
        /// <param name="value">The value from which to convert.</param>
        public static implicit operator EntityVal(JsonAny value)
        {
            return value.As<EntityVal>();
        }

        /// <summary>
        /// Conversion to JsonAny.
        /// </summary>
        /// <param name="value">The value from which to convert.</param>
        public static implicit operator JsonAny(EntityVal value)
        {
            return value.AsAny;
        }

        /// <summary>
        /// Conversion to <see cref="ACRealms.Roslyn.RealmProps.IntermediateModels.Contexts.WeenieEntity"/>.
        /// </summary>
        /// <param name="value">The value from which to convert.</param>
        public static explicit operator ACRealms.Roslyn.RealmProps.IntermediateModels.Contexts.WeenieEntity(EntityVal value)
        {
            return value.As<ACRealms.Roslyn.RealmProps.IntermediateModels.Contexts.WeenieEntity>();
        }

        /// <summary>
        /// Conversion from <see cref="ACRealms.Roslyn.RealmProps.IntermediateModels.Contexts.WeenieEntity"/>.
        /// </summary>
        /// <param name="value">The value from which to convert.</param>
        public static implicit operator EntityVal(ACRealms.Roslyn.RealmProps.IntermediateModels.Contexts.WeenieEntity value)
        {
            return value.As<EntityVal>();
        }

        /// <summary>
        /// Conversion to <see cref="ACRealms.Roslyn.RealmProps.IntermediateModels.Contexts.WeeniePropertyIntEntity"/>.
        /// </summary>
        /// <param name="value">The value from which to convert.</param>
        public static explicit operator ACRealms.Roslyn.RealmProps.IntermediateModels.Contexts.WeeniePropertyIntEntity(EntityVal value)
        {
            return value.As<ACRealms.Roslyn.RealmProps.IntermediateModels.Contexts.WeeniePropertyIntEntity>();
        }

        /// <summary>
        /// Conversion from <see cref="ACRealms.Roslyn.RealmProps.IntermediateModels.Contexts.WeeniePropertyIntEntity"/>.
        /// </summary>
        /// <param name="value">The value from which to convert.</param>
        public static implicit operator EntityVal(ACRealms.Roslyn.RealmProps.IntermediateModels.Contexts.WeeniePropertyIntEntity value)
        {
            return value.As<EntityVal>();
        }

        /// <summary>
        /// Conversion to <see cref="ACRealms.Roslyn.RealmProps.IntermediateModels.Contexts.WeeniePropertyInt64Entity"/>.
        /// </summary>
        /// <param name="value">The value from which to convert.</param>
        public static explicit operator ACRealms.Roslyn.RealmProps.IntermediateModels.Contexts.WeeniePropertyInt64Entity(EntityVal value)
        {
            return value.As<ACRealms.Roslyn.RealmProps.IntermediateModels.Contexts.WeeniePropertyInt64Entity>();
        }

        /// <summary>
        /// Conversion from <see cref="ACRealms.Roslyn.RealmProps.IntermediateModels.Contexts.WeeniePropertyInt64Entity"/>.
        /// </summary>
        /// <param name="value">The value from which to convert.</param>
        public static implicit operator EntityVal(ACRealms.Roslyn.RealmProps.IntermediateModels.Contexts.WeeniePropertyInt64Entity value)
        {
            return value.As<EntityVal>();
        }

        /// <summary>
        /// Conversion to <see cref="ACRealms.Roslyn.RealmProps.IntermediateModels.Contexts.WeeniePropertyFloatEntity"/>.
        /// </summary>
        /// <param name="value">The value from which to convert.</param>
        public static explicit operator ACRealms.Roslyn.RealmProps.IntermediateModels.Contexts.WeeniePropertyFloatEntity(EntityVal value)
        {
            return value.As<ACRealms.Roslyn.RealmProps.IntermediateModels.Contexts.WeeniePropertyFloatEntity>();
        }

        /// <summary>
        /// Conversion from <see cref="ACRealms.Roslyn.RealmProps.IntermediateModels.Contexts.WeeniePropertyFloatEntity"/>.
        /// </summary>
        /// <param name="value">The value from which to convert.</param>
        public static implicit operator EntityVal(ACRealms.Roslyn.RealmProps.IntermediateModels.Contexts.WeeniePropertyFloatEntity value)
        {
            return value.As<EntityVal>();
        }

        /// <summary>
        /// Conversion to <see cref="ACRealms.Roslyn.RealmProps.IntermediateModels.Contexts.WeeniePropertyBoolEntity"/>.
        /// </summary>
        /// <param name="value">The value from which to convert.</param>
        public static explicit operator ACRealms.Roslyn.RealmProps.IntermediateModels.Contexts.WeeniePropertyBoolEntity(EntityVal value)
        {
            return value.As<ACRealms.Roslyn.RealmProps.IntermediateModels.Contexts.WeeniePropertyBoolEntity>();
        }

        /// <summary>
        /// Conversion from <see cref="ACRealms.Roslyn.RealmProps.IntermediateModels.Contexts.WeeniePropertyBoolEntity"/>.
        /// </summary>
        /// <param name="value">The value from which to convert.</param>
        public static implicit operator EntityVal(ACRealms.Roslyn.RealmProps.IntermediateModels.Contexts.WeeniePropertyBoolEntity value)
        {
            return value.As<EntityVal>();
        }

        /// <summary>
        /// Conversion to <see cref="ACRealms.Roslyn.RealmProps.IntermediateModels.Contexts.WeeniePropertyStringEntity"/>.
        /// </summary>
        /// <param name="value">The value from which to convert.</param>
        public static explicit operator ACRealms.Roslyn.RealmProps.IntermediateModels.Contexts.WeeniePropertyStringEntity(EntityVal value)
        {
            return value.As<ACRealms.Roslyn.RealmProps.IntermediateModels.Contexts.WeeniePropertyStringEntity>();
        }

        /// <summary>
        /// Conversion from <see cref="ACRealms.Roslyn.RealmProps.IntermediateModels.Contexts.WeeniePropertyStringEntity"/>.
        /// </summary>
        /// <param name="value">The value from which to convert.</param>
        public static implicit operator EntityVal(ACRealms.Roslyn.RealmProps.IntermediateModels.Contexts.WeeniePropertyStringEntity value)
        {
            return value.As<EntityVal>();
        }

        /// <summary>
        /// Conversion to <see cref="ACRealms.Roslyn.RealmProps.IntermediateModels.Contexts.WorldObjectEntity"/>.
        /// </summary>
        /// <param name="value">The value from which to convert.</param>
        public static explicit operator ACRealms.Roslyn.RealmProps.IntermediateModels.Contexts.WorldObjectEntity(EntityVal value)
        {
            return value.As<ACRealms.Roslyn.RealmProps.IntermediateModels.Contexts.WorldObjectEntity>();
        }

        /// <summary>
        /// Conversion from <see cref="ACRealms.Roslyn.RealmProps.IntermediateModels.Contexts.WorldObjectEntity"/>.
        /// </summary>
        /// <param name="value">The value from which to convert.</param>
        public static implicit operator EntityVal(ACRealms.Roslyn.RealmProps.IntermediateModels.Contexts.WorldObjectEntity value)
        {
            return value.As<EntityVal>();
        }

        /// <summary>
        /// Operator ==.
        /// </summary>
        /// <param name="left">The lhs of the operator.</param>
        /// <param name="right">The rhs of the operator.</param>
        /// <returns>
        /// <c>True</c> if the values are equal.
        /// </returns>
        public static bool operator ==(in EntityVal left, in EntityVal right)
        {
            return left.Equals(right);
        }

        /// <summary>
        /// Operator !=.
        /// </summary>
        /// <param name="left">The lhs of the operator.</param>
        /// <param name="right">The rhs of the operator.</param>
        /// <returns>
        /// <c>True</c> if the values are not equal.
        /// </returns>
        public static bool operator !=(in EntityVal left, in EntityVal right)
        {
            return !left.Equals(right);
        }

        /// <summary>
        /// Gets an instance of the JSON value from a <see cref="JsonElement"/> value.
        /// </summary>
        /// <param name="value">The <see cref="JsonElement"/> value from which to instantiate the instance.</param>
        /// <returns>An instance of this type, initialized from the <see cref="JsonElement"/>.</returns>
        /// <remarks>The returned value will have a <see cref = "IJsonValue.ValueKind"/> of <see cref = "JsonValueKind.Undefined"/> if the
        /// value cannot be constructed from the given instance (e.g. because they have an incompatible .NET backing type).
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static EntityVal FromJson(in JsonElement value)
        {
            return new(value);
        }

        /// <summary>
        /// Gets an instance of the JSON value from a <see cref="JsonAny"/> value.
        /// </summary>
        /// <param name="value">The <see cref="JsonAny"/> value from which to instantiate the instance.</param>
        /// <returns>An instance of this type, initialized from the <see cref="JsonAny"/> value.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static EntityVal FromAny(in JsonAny value)
        {
            if (value.HasJsonElementBacking)
            {
                return new(value.AsJsonElement);
            }

            return value.ValueKind switch
            {
                JsonValueKind.String => new(value.AsString.GetString()!),
                JsonValueKind.Null => Null,
                _ => Undefined,
            };
        }

#if NET8_0_OR_GREATER
        /// <summary>
        /// Gets an instance of the JSON value from the provided value.
        /// </summary>
        /// <typeparam name="TValue">The type of the value.</typeparam>
        /// <param name="value">The value from which to instantiate the instance.</param>
        /// <returns>An instance of this type, initialized from the provided value.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static EntityVal IJsonValue<EntityVal>.FromBoolean<TValue>(in TValue value)
        {
            if (value.HasJsonElementBacking)
            {
                return new(value.AsJsonElement);
            }

            return Undefined;
        }
#endif

        /// <summary>
        /// Gets an instance of the JSON value from the provided value.
        /// </summary>
        /// <typeparam name="TValue">The type of the value.</typeparam>
        /// <param name="value">The value from which to instantiate the instance.</param>
        /// <returns>An instance of this type, initialized from the provided value.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static EntityVal FromString<TValue>(in TValue value)
            where TValue : struct, IJsonString<TValue>
        {
            if (value.HasJsonElementBacking)
            {
                return new(value.AsJsonElement);
            }

            return value.ValueKind switch
            {
                JsonValueKind.String => new(value.GetString()!),
                JsonValueKind.Null => Null,
                _ => Undefined,
            };
        }

#if NET8_0_OR_GREATER
        /// <summary>
        /// Gets an instance of the JSON value from the provided value.
        /// </summary>
        /// <typeparam name="TValue">The type of the value.</typeparam>
        /// <param name="value">The value from which to instantiate the instance.</param>
        /// <returns>An instance of this type, initialized from the provided value.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static EntityVal IJsonValue<EntityVal>.FromNumber<TValue>(in TValue value)
        {
            if (value.HasJsonElementBacking)
            {
                return new(value.AsJsonElement);
            }

            return Undefined;
        }
#endif

#if NET8_0_OR_GREATER
        /// <summary>
        /// Gets an instance of the JSON value from the provided value.
        /// </summary>
        /// <typeparam name="TValue">The type of the value.</typeparam>
        /// <param name="value">The value from which to instantiate the instance.</param>
        /// <returns>An instance of this type, initialized from the provided value.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static EntityVal IJsonValue<EntityVal>.FromObject<TValue>(in TValue value)
        {
            if (value.HasJsonElementBacking)
            {
                return new(value.AsJsonElement);
            }

            return Undefined;
        }
#endif

#if NET8_0_OR_GREATER
        /// <summary>
        /// Gets an instance of the JSON value from the provided value.
        /// </summary>
        /// <typeparam name="TValue">The type of the value.</typeparam>
        /// <param name="value">The value from which to instantiate the instance.</param>
        /// <returns>An instance of this type, initialized from the provided value.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static EntityVal IJsonValue<EntityVal>.FromArray<TValue>(in TValue value)
        {
            if (value.HasJsonElementBacking)
            {
                return new(value.AsJsonElement);
            }

            return Undefined;
        }
#endif

        /// <summary>
        /// Parses the EntityVal.
        /// </summary>
        /// <param name="source">The source of the JSON string to parse.</param>
        /// <param name="options">The (optional) JsonDocumentOptions.</param>
        public static EntityVal Parse(string source, JsonDocumentOptions options = default)
        {
            using var jsonDocument = JsonDocument.Parse(source, options);
            return new(jsonDocument.RootElement.Clone());
        }

        /// <summary>
        /// Parses the EntityVal.
        /// </summary>
        /// <param name="source">The source of the JSON string to parse.</param>
        /// <param name="options">The (optional) JsonDocumentOptions.</param>
        public static EntityVal Parse(Stream source, JsonDocumentOptions options = default)
        {
            using var jsonDocument = JsonDocument.Parse(source, options);
            return new(jsonDocument.RootElement.Clone());
        }

        /// <summary>
        /// Parses the EntityVal.
        /// </summary>
        /// <param name="source">The source of the JSON string to parse.</param>
        /// <param name="options">The (optional) JsonDocumentOptions.</param>
        public static EntityVal Parse(ReadOnlyMemory<byte> source, JsonDocumentOptions options = default)
        {
            using var jsonDocument = JsonDocument.Parse(source, options);
            return new(jsonDocument.RootElement.Clone());
        }

        /// <summary>
        /// Parses the EntityVal.
        /// </summary>
        /// <param name="source">The source of the JSON string to parse.</param>
        /// <param name="options">The (optional) JsonDocumentOptions.</param>
        public static EntityVal Parse(ReadOnlyMemory<char> source, JsonDocumentOptions options = default)
        {
            using var jsonDocument = JsonDocument.Parse(source, options);
            return new(jsonDocument.RootElement.Clone());
        }

        /// <summary>
        /// Parses the EntityVal.
        /// </summary>
        /// <param name="source">The source of the JSON string to parse.</param>
        /// <param name="options">The (optional) JsonDocumentOptions.</param>
        public static EntityVal Parse(ReadOnlySequence<byte> source, JsonDocumentOptions options = default)
        {
            using var jsonDocument = JsonDocument.Parse(source, options);
            return new(jsonDocument.RootElement.Clone());
        }

        /// <summary>
        /// Parses the EntityVal.
        /// </summary>
        /// <param name="source">The source of the JSON string to parse.</param>
        public static EntityVal ParseValue(string source)
        {
#if NET8_0_OR_GREATER
            return IJsonValue<EntityVal>.ParseValue(source);
#else
            return JsonValueHelpers.ParseValue<EntityVal>(source.AsSpan());
#endif
        }

        /// <summary>
        /// Parses the EntityVal.
        /// </summary>
        /// <param name="source">The source of the JSON string to parse.</param>
        public static EntityVal ParseValue(ReadOnlySpan<char> source)
        {
#if NET8_0_OR_GREATER
            return IJsonValue<EntityVal>.ParseValue(source);
#else
            return JsonValueHelpers.ParseValue<EntityVal>(source);
#endif
        }

        /// <summary>
        /// Parses the EntityVal.
        /// </summary>
        /// <param name="source">The source of the JSON string to parse.</param>
        public static EntityVal ParseValue(ReadOnlySpan<byte> source)
        {
#if NET8_0_OR_GREATER
            return IJsonValue<EntityVal>.ParseValue(source);
#else
            return JsonValueHelpers.ParseValue<EntityVal>(source);
#endif
        }

        /// <summary>
        /// Parses the EntityVal.
        /// </summary>
        /// <param name="source">The source of the JSON string to parse.</param>
        public static EntityVal ParseValue(ref Utf8JsonReader source)
        {
#if NET8_0_OR_GREATER
            return IJsonValue<EntityVal>.ParseValue(ref source);
#else
            return JsonValueHelpers.ParseValue<EntityVal>(ref source);
#endif
        }

        /// <summary>
        /// Gets the value as an instance of the target value.
        /// </summary>
        /// <typeparam name="TTarget">The type of the target.</typeparam>
        /// <returns>An instance of the target type.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public TTarget As<TTarget>()
            where TTarget : struct, IJsonValue<TTarget>
        {
#if NET8_0_OR_GREATER
            if ((this.backing & Backing.JsonElement) != 0)
            {
                return TTarget.FromJson(this.jsonElementBacking);
            }

            if ((this.backing & Backing.String) != 0)
            {
                return TTarget.FromString(this);
            }

            if ((this.backing & Backing.Null) != 0)
            {
                return TTarget.Null;
            }

            return TTarget.Undefined;
#else
            return this.As<EntityVal, TTarget>();
#endif
        }

        /// <inheritdoc/>
        public override bool Equals(object? obj)
        {
            return
                (obj is IJsonValue jv && this.Equals(jv.As<EntityVal>())) ||
                (obj is null && this.IsNull());
        }

        /// <inheritdoc/>
        public bool Equals<T>(in T other)
            where T : struct, IJsonValue<T>
        {
            return this.Equals(other.As<EntityVal>());
        }

        /// <summary>
        /// Equality comparison.
        /// </summary>
        /// <param name="other">The other item with which to compare.</param>
        /// <returns><see langword="true"/> if the values were equal.</returns>
        public bool Equals(in EntityVal other)
        {
            JsonValueKind thisKind = this.ValueKind;
            JsonValueKind otherKind = other.ValueKind;
            if (thisKind != otherKind)
            {
                return false;
            }

            if (thisKind == JsonValueKind.Null || thisKind == JsonValueKind.Undefined)
            {
                return true;
            }

            if (thisKind == JsonValueKind.String)
            {
                if (this.backing == Backing.JsonElement)
                {
                    if (other.backing == Backing.String)
                    {
                        return this.jsonElementBacking.ValueEquals(other.stringBacking);
                    }
                    else
                    {
                        other.jsonElementBacking.TryGetValue(CompareValues, this.jsonElementBacking, out bool areEqual);
                        return areEqual;
                    }

                }

                if (other.backing == Backing.JsonElement)
                {
                    return other.jsonElementBacking.ValueEquals(this.stringBacking);
                }

                return this.stringBacking.Equals(other.stringBacking);

                static bool CompareValues(ReadOnlySpan<byte> span, in JsonElement firstItem, out bool value)
                {
                    value = firstItem.ValueEquals(span);
                    return true;
                }
            }

            return false;
        }

        /// <inheritdoc/>
        public void WriteTo(Utf8JsonWriter writer)
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                {
                    this.jsonElementBacking.WriteTo(writer);
                }

                return;
            }

            if ((this.backing & Backing.String) != 0)
            {
                writer.WriteStringValue(this.stringBacking);

                return;
            }

            if ((this.backing & Backing.Null) != 0)
            {
                writer.WriteNullValue();

                return;
            }
        }

        /// <inheritdoc/>
        public override int GetHashCode()
        {
            return this.ValueKind switch
            {
                JsonValueKind.Array => JsonValueHelpers.GetArrayHashCode(((IJsonValue)this).AsArray),
                JsonValueKind.Object => JsonValueHelpers.GetObjectHashCode(((IJsonValue)this).AsObject),
                JsonValueKind.Number => JsonValueHelpers.GetHashCodeForNumber(((IJsonValue)this).AsNumber),
                JsonValueKind.String => JsonValueHelpers.GetHashCodeForString(this),
                JsonValueKind.True => true.GetHashCode(),
                JsonValueKind.False => false.GetHashCode(),
                JsonValueKind.Null => JsonValueHelpers.NullHashCode,
                _ => JsonValueHelpers.UndefinedHashCode,
            };
        }

        /// <inheritdoc/>
        public override string ToString()
        {
            return this.Serialize();
        }

        /// <summary>
        /// Matches the value against the composed values, and returns the result of calling the provided match function for the first match found.
        /// </summary>
        /// <typeparam name="TIn">The immutable context to pass in to the match function.</typeparam>
        /// <typeparam name="TOut">The result of calling the match function.</typeparam>
        /// <param name="context">The context to pass to the match function.</param>
        /// <param name="matchWeenieEntity">Match a <see cref="ACRealms.Roslyn.RealmProps.IntermediateModels.Contexts.WeenieEntity"/>.</param>
        /// <param name="matchWeeniePropertyIntEntity">Match a <see cref="ACRealms.Roslyn.RealmProps.IntermediateModels.Contexts.WeeniePropertyIntEntity"/>.</param>
        /// <param name="matchWeeniePropertyInt64Entity">Match a <see cref="ACRealms.Roslyn.RealmProps.IntermediateModels.Contexts.WeeniePropertyInt64Entity"/>.</param>
        /// <param name="matchWeeniePropertyFloatEntity">Match a <see cref="ACRealms.Roslyn.RealmProps.IntermediateModels.Contexts.WeeniePropertyFloatEntity"/>.</param>
        /// <param name="matchWeeniePropertyBoolEntity">Match a <see cref="ACRealms.Roslyn.RealmProps.IntermediateModels.Contexts.WeeniePropertyBoolEntity"/>.</param>
        /// <param name="matchWeeniePropertyStringEntity">Match a <see cref="ACRealms.Roslyn.RealmProps.IntermediateModels.Contexts.WeeniePropertyStringEntity"/>.</param>
        /// <param name="matchWorldObjectEntity">Match a <see cref="ACRealms.Roslyn.RealmProps.IntermediateModels.Contexts.WorldObjectEntity"/>.</param>
        /// <param name="defaultMatch">Match any other value.</param>
        /// <returns>An instance of the value returned by the match function.</returns>
        public TOut Match<TIn, TOut>(
            in TIn context,
            Matcher<ACRealms.Roslyn.RealmProps.IntermediateModels.Contexts.WeenieEntity, TIn, TOut> matchWeenieEntity,
            Matcher<ACRealms.Roslyn.RealmProps.IntermediateModels.Contexts.WeeniePropertyIntEntity, TIn, TOut> matchWeeniePropertyIntEntity,
            Matcher<ACRealms.Roslyn.RealmProps.IntermediateModels.Contexts.WeeniePropertyInt64Entity, TIn, TOut> matchWeeniePropertyInt64Entity,
            Matcher<ACRealms.Roslyn.RealmProps.IntermediateModels.Contexts.WeeniePropertyFloatEntity, TIn, TOut> matchWeeniePropertyFloatEntity,
            Matcher<ACRealms.Roslyn.RealmProps.IntermediateModels.Contexts.WeeniePropertyBoolEntity, TIn, TOut> matchWeeniePropertyBoolEntity,
            Matcher<ACRealms.Roslyn.RealmProps.IntermediateModels.Contexts.WeeniePropertyStringEntity, TIn, TOut> matchWeeniePropertyStringEntity,
            Matcher<ACRealms.Roslyn.RealmProps.IntermediateModels.Contexts.WorldObjectEntity, TIn, TOut> matchWorldObjectEntity,
            Matcher<ACRealms.Roslyn.RealmProps.IntermediateModels.Contexts.EntityVal, TIn, TOut> defaultMatch)
        {
            ACRealms.Roslyn.RealmProps.IntermediateModels.Contexts.WeenieEntity matchWeenieEntityValue = this.As<ACRealms.Roslyn.RealmProps.IntermediateModels.Contexts.WeenieEntity>();
            if (matchWeenieEntityValue.IsValid())
            {
                return matchWeenieEntity(matchWeenieEntityValue, context);
            }

            ACRealms.Roslyn.RealmProps.IntermediateModels.Contexts.WeeniePropertyIntEntity matchWeeniePropertyIntEntityValue = this.As<ACRealms.Roslyn.RealmProps.IntermediateModels.Contexts.WeeniePropertyIntEntity>();
            if (matchWeeniePropertyIntEntityValue.IsValid())
            {
                return matchWeeniePropertyIntEntity(matchWeeniePropertyIntEntityValue, context);
            }

            ACRealms.Roslyn.RealmProps.IntermediateModels.Contexts.WeeniePropertyInt64Entity matchWeeniePropertyInt64EntityValue = this.As<ACRealms.Roslyn.RealmProps.IntermediateModels.Contexts.WeeniePropertyInt64Entity>();
            if (matchWeeniePropertyInt64EntityValue.IsValid())
            {
                return matchWeeniePropertyInt64Entity(matchWeeniePropertyInt64EntityValue, context);
            }

            ACRealms.Roslyn.RealmProps.IntermediateModels.Contexts.WeeniePropertyFloatEntity matchWeeniePropertyFloatEntityValue = this.As<ACRealms.Roslyn.RealmProps.IntermediateModels.Contexts.WeeniePropertyFloatEntity>();
            if (matchWeeniePropertyFloatEntityValue.IsValid())
            {
                return matchWeeniePropertyFloatEntity(matchWeeniePropertyFloatEntityValue, context);
            }

            ACRealms.Roslyn.RealmProps.IntermediateModels.Contexts.WeeniePropertyBoolEntity matchWeeniePropertyBoolEntityValue = this.As<ACRealms.Roslyn.RealmProps.IntermediateModels.Contexts.WeeniePropertyBoolEntity>();
            if (matchWeeniePropertyBoolEntityValue.IsValid())
            {
                return matchWeeniePropertyBoolEntity(matchWeeniePropertyBoolEntityValue, context);
            }

            ACRealms.Roslyn.RealmProps.IntermediateModels.Contexts.WeeniePropertyStringEntity matchWeeniePropertyStringEntityValue = this.As<ACRealms.Roslyn.RealmProps.IntermediateModels.Contexts.WeeniePropertyStringEntity>();
            if (matchWeeniePropertyStringEntityValue.IsValid())
            {
                return matchWeeniePropertyStringEntity(matchWeeniePropertyStringEntityValue, context);
            }

            ACRealms.Roslyn.RealmProps.IntermediateModels.Contexts.WorldObjectEntity matchWorldObjectEntityValue = this.As<ACRealms.Roslyn.RealmProps.IntermediateModels.Contexts.WorldObjectEntity>();
            if (matchWorldObjectEntityValue.IsValid())
            {
                return matchWorldObjectEntity(matchWorldObjectEntityValue, context);
            }

            return defaultMatch(this, context);
        }

        /// <summary>
        /// Matches the value against the composed values, and returns the result of calling the provided match function for the first match found.
        /// </summary>
        /// <typeparam name="TOut">The result of calling the match function.</typeparam>
        /// <param name="matchWeenieEntity">Match a <see cref="ACRealms.Roslyn.RealmProps.IntermediateModels.Contexts.WeenieEntity"/>.</param>
        /// <param name="matchWeeniePropertyIntEntity">Match a <see cref="ACRealms.Roslyn.RealmProps.IntermediateModels.Contexts.WeeniePropertyIntEntity"/>.</param>
        /// <param name="matchWeeniePropertyInt64Entity">Match a <see cref="ACRealms.Roslyn.RealmProps.IntermediateModels.Contexts.WeeniePropertyInt64Entity"/>.</param>
        /// <param name="matchWeeniePropertyFloatEntity">Match a <see cref="ACRealms.Roslyn.RealmProps.IntermediateModels.Contexts.WeeniePropertyFloatEntity"/>.</param>
        /// <param name="matchWeeniePropertyBoolEntity">Match a <see cref="ACRealms.Roslyn.RealmProps.IntermediateModels.Contexts.WeeniePropertyBoolEntity"/>.</param>
        /// <param name="matchWeeniePropertyStringEntity">Match a <see cref="ACRealms.Roslyn.RealmProps.IntermediateModels.Contexts.WeeniePropertyStringEntity"/>.</param>
        /// <param name="matchWorldObjectEntity">Match a <see cref="ACRealms.Roslyn.RealmProps.IntermediateModels.Contexts.WorldObjectEntity"/>.</param>
        /// <param name="defaultMatch">Match any other value.</param>
        /// <returns>An instance of the value returned by the match function.</returns>
        public TOut Match<TOut>(
            Matcher<ACRealms.Roslyn.RealmProps.IntermediateModels.Contexts.WeenieEntity, TOut> matchWeenieEntity,
            Matcher<ACRealms.Roslyn.RealmProps.IntermediateModels.Contexts.WeeniePropertyIntEntity, TOut> matchWeeniePropertyIntEntity,
            Matcher<ACRealms.Roslyn.RealmProps.IntermediateModels.Contexts.WeeniePropertyInt64Entity, TOut> matchWeeniePropertyInt64Entity,
            Matcher<ACRealms.Roslyn.RealmProps.IntermediateModels.Contexts.WeeniePropertyFloatEntity, TOut> matchWeeniePropertyFloatEntity,
            Matcher<ACRealms.Roslyn.RealmProps.IntermediateModels.Contexts.WeeniePropertyBoolEntity, TOut> matchWeeniePropertyBoolEntity,
            Matcher<ACRealms.Roslyn.RealmProps.IntermediateModels.Contexts.WeeniePropertyStringEntity, TOut> matchWeeniePropertyStringEntity,
            Matcher<ACRealms.Roslyn.RealmProps.IntermediateModels.Contexts.WorldObjectEntity, TOut> matchWorldObjectEntity,
            Matcher<ACRealms.Roslyn.RealmProps.IntermediateModels.Contexts.EntityVal, TOut> defaultMatch)
        {
            ACRealms.Roslyn.RealmProps.IntermediateModels.Contexts.WeenieEntity matchWeenieEntityValue = this.As<ACRealms.Roslyn.RealmProps.IntermediateModels.Contexts.WeenieEntity>();
            if (matchWeenieEntityValue.IsValid())
            {
                return matchWeenieEntity(matchWeenieEntityValue);
            }

            ACRealms.Roslyn.RealmProps.IntermediateModels.Contexts.WeeniePropertyIntEntity matchWeeniePropertyIntEntityValue = this.As<ACRealms.Roslyn.RealmProps.IntermediateModels.Contexts.WeeniePropertyIntEntity>();
            if (matchWeeniePropertyIntEntityValue.IsValid())
            {
                return matchWeeniePropertyIntEntity(matchWeeniePropertyIntEntityValue);
            }

            ACRealms.Roslyn.RealmProps.IntermediateModels.Contexts.WeeniePropertyInt64Entity matchWeeniePropertyInt64EntityValue = this.As<ACRealms.Roslyn.RealmProps.IntermediateModels.Contexts.WeeniePropertyInt64Entity>();
            if (matchWeeniePropertyInt64EntityValue.IsValid())
            {
                return matchWeeniePropertyInt64Entity(matchWeeniePropertyInt64EntityValue);
            }

            ACRealms.Roslyn.RealmProps.IntermediateModels.Contexts.WeeniePropertyFloatEntity matchWeeniePropertyFloatEntityValue = this.As<ACRealms.Roslyn.RealmProps.IntermediateModels.Contexts.WeeniePropertyFloatEntity>();
            if (matchWeeniePropertyFloatEntityValue.IsValid())
            {
                return matchWeeniePropertyFloatEntity(matchWeeniePropertyFloatEntityValue);
            }

            ACRealms.Roslyn.RealmProps.IntermediateModels.Contexts.WeeniePropertyBoolEntity matchWeeniePropertyBoolEntityValue = this.As<ACRealms.Roslyn.RealmProps.IntermediateModels.Contexts.WeeniePropertyBoolEntity>();
            if (matchWeeniePropertyBoolEntityValue.IsValid())
            {
                return matchWeeniePropertyBoolEntity(matchWeeniePropertyBoolEntityValue);
            }

            ACRealms.Roslyn.RealmProps.IntermediateModels.Contexts.WeeniePropertyStringEntity matchWeeniePropertyStringEntityValue = this.As<ACRealms.Roslyn.RealmProps.IntermediateModels.Contexts.WeeniePropertyStringEntity>();
            if (matchWeeniePropertyStringEntityValue.IsValid())
            {
                return matchWeeniePropertyStringEntity(matchWeeniePropertyStringEntityValue);
            }

            ACRealms.Roslyn.RealmProps.IntermediateModels.Contexts.WorldObjectEntity matchWorldObjectEntityValue = this.As<ACRealms.Roslyn.RealmProps.IntermediateModels.Contexts.WorldObjectEntity>();
            if (matchWorldObjectEntityValue.IsValid())
            {
                return matchWorldObjectEntity(matchWorldObjectEntityValue);
            }

            return defaultMatch(this);
        }

        /// <summary>
        /// Gets the value as a <see cref="ACRealms.Roslyn.RealmProps.IntermediateModels.Contexts.WeenieEntity" />.
        /// </summary>
        /// <param name="result">The result of the conversions.</param>
        /// <returns><see langword="true" /> if the conversion was valid.</returns>
        public bool TryGetAsWeenieEntity(out ACRealms.Roslyn.RealmProps.IntermediateModels.Contexts.WeenieEntity result)
        {
            result = this.As<ACRealms.Roslyn.RealmProps.IntermediateModels.Contexts.WeenieEntity>();
            return result.IsValid();
        }

        /// <summary>
        /// Gets the value as a <see cref="ACRealms.Roslyn.RealmProps.IntermediateModels.Contexts.WeeniePropertyBoolEntity" />.
        /// </summary>
        /// <param name="result">The result of the conversions.</param>
        /// <returns><see langword="true" /> if the conversion was valid.</returns>
        public bool TryGetAsWeeniePropertyBoolEntity(out ACRealms.Roslyn.RealmProps.IntermediateModels.Contexts.WeeniePropertyBoolEntity result)
        {
            result = this.As<ACRealms.Roslyn.RealmProps.IntermediateModels.Contexts.WeeniePropertyBoolEntity>();
            return result.IsValid();
        }

        /// <summary>
        /// Gets the value as a <see cref="ACRealms.Roslyn.RealmProps.IntermediateModels.Contexts.WeeniePropertyFloatEntity" />.
        /// </summary>
        /// <param name="result">The result of the conversions.</param>
        /// <returns><see langword="true" /> if the conversion was valid.</returns>
        public bool TryGetAsWeeniePropertyFloatEntity(out ACRealms.Roslyn.RealmProps.IntermediateModels.Contexts.WeeniePropertyFloatEntity result)
        {
            result = this.As<ACRealms.Roslyn.RealmProps.IntermediateModels.Contexts.WeeniePropertyFloatEntity>();
            return result.IsValid();
        }

        /// <summary>
        /// Gets the value as a <see cref="ACRealms.Roslyn.RealmProps.IntermediateModels.Contexts.WeeniePropertyIntEntity" />.
        /// </summary>
        /// <param name="result">The result of the conversions.</param>
        /// <returns><see langword="true" /> if the conversion was valid.</returns>
        public bool TryGetAsWeeniePropertyIntEntity(out ACRealms.Roslyn.RealmProps.IntermediateModels.Contexts.WeeniePropertyIntEntity result)
        {
            result = this.As<ACRealms.Roslyn.RealmProps.IntermediateModels.Contexts.WeeniePropertyIntEntity>();
            return result.IsValid();
        }

        /// <summary>
        /// Gets the value as a <see cref="ACRealms.Roslyn.RealmProps.IntermediateModels.Contexts.WeeniePropertyInt64Entity" />.
        /// </summary>
        /// <param name="result">The result of the conversions.</param>
        /// <returns><see langword="true" /> if the conversion was valid.</returns>
        public bool TryGetAsWeeniePropertyInt64Entity(out ACRealms.Roslyn.RealmProps.IntermediateModels.Contexts.WeeniePropertyInt64Entity result)
        {
            result = this.As<ACRealms.Roslyn.RealmProps.IntermediateModels.Contexts.WeeniePropertyInt64Entity>();
            return result.IsValid();
        }

        /// <summary>
        /// Gets the value as a <see cref="ACRealms.Roslyn.RealmProps.IntermediateModels.Contexts.WeeniePropertyStringEntity" />.
        /// </summary>
        /// <param name="result">The result of the conversions.</param>
        /// <returns><see langword="true" /> if the conversion was valid.</returns>
        public bool TryGetAsWeeniePropertyStringEntity(out ACRealms.Roslyn.RealmProps.IntermediateModels.Contexts.WeeniePropertyStringEntity result)
        {
            result = this.As<ACRealms.Roslyn.RealmProps.IntermediateModels.Contexts.WeeniePropertyStringEntity>();
            return result.IsValid();
        }

        /// <summary>
        /// Gets the value as a <see cref="ACRealms.Roslyn.RealmProps.IntermediateModels.Contexts.WorldObjectEntity" />.
        /// </summary>
        /// <param name="result">The result of the conversions.</param>
        /// <returns><see langword="true" /> if the conversion was valid.</returns>
        public bool TryGetAsWorldObjectEntity(out ACRealms.Roslyn.RealmProps.IntermediateModels.Contexts.WorldObjectEntity result)
        {
            result = this.As<ACRealms.Roslyn.RealmProps.IntermediateModels.Contexts.WorldObjectEntity>();
            return result.IsValid();
        }
    }
}
