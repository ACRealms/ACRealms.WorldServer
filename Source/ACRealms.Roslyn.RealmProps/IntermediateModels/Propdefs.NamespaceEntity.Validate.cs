//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable

using System.Runtime.CompilerServices;
using System.Text.Json;
using System.Text.RegularExpressions;
using Corvus.Json;

namespace ACRealms.Roslyn.RealmProps.IntermediateModels;

/// <summary>
/// Generated from JSON Schema.
/// </summary>
public readonly partial struct PropDefs
{
    /// <summary>
    /// Generated from JSON Schema.
    /// </summary>
    /// <remarks>
    /// <para>
    /// The full namespace name. Use a . as a path separator.
    /// </para>
    /// <para>
    /// For example, Foo.Bar.Baz will create a C# class Props.Foo.Bar.Baz, where Foo is an inner class of Props, and so on.
    /// </para>
    /// <para>
    /// The file path of this document not factor into this.
    /// </para>
    /// </remarks>
    public readonly partial struct NamespaceEntity
    {
        /// <inheritdoc/>
        public ValidationContext Validate(in ValidationContext validationContext, ValidationLevel level = ValidationLevel.Flag)
        {
            ValidationContext result = validationContext;
            if (level > ValidationLevel.Flag && !result.IsUsingResults)
            {
                result = result.UsingResults();
            }

            if (level > ValidationLevel.Basic)
            {
                if (!result.IsUsingStack)
                {
                    result = result.UsingStack();
                }

                result = result.PushSchemaLocation("propdefs.json#/properties/namespace");
            }

            JsonValueKind valueKind = this.ValueKind;

            result = CorvusValidation.TypeValidationHandler(valueKind, result, level);

            if (level == ValidationLevel.Flag && !result.IsValid)
            {
                return result;
            }

            result = CorvusValidation.StringValidationHandler(this, valueKind, result, level);

            if (level == ValidationLevel.Flag && !result.IsValid)
            {
                return result;
            }

            if (level > ValidationLevel.Basic)
            {
                result = result.PopLocation();
            }

            return result;
        }

        /// <summary>
        /// Validation constants for the type.
        /// </summary>
        public static partial class CorvusValidation
        {
            /// <summary>
            /// A regular expression for the <c>pattern</c> keyword.
            /// </summary>
            public static readonly Regex Pattern = CreatePattern();

            /// <summary>
            /// Core type validation.
            /// </summary>
            /// <param name="valueKind">The <see cref="JsonValueKind" /> of the value to validate.</param>
            /// <param name="validationContext">The current validation context.</param>
            /// <param name="level">The current validation level.</param>
            /// <returns>The resulting validation context after validation.</returns>
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            internal static ValidationContext TypeValidationHandler(
                JsonValueKind valueKind,
                in ValidationContext validationContext,
                ValidationLevel level = ValidationLevel.Flag)
            {
                return Corvus.Json.ValidateWithoutCoreType.TypeString(valueKind, validationContext, level, "type");
            }

            /// <summary>
            /// String validation.
            /// </summary>
            /// <param name="value">The value to validate.</param>
            /// <param name="valueKind">The <see cref="JsonValueKind" /> of the value to validate.</param>
            /// <param name="validationContext">The current validation context.</param>
            /// <param name="level">The current validation level.</param>
            /// <returns>The resulting validation context after validation.</returns>
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            internal static ValidationContext StringValidationHandler(
                in NamespaceEntity value,
                JsonValueKind valueKind,
                in ValidationContext validationContext,
                ValidationLevel level = ValidationLevel.Flag)
            {
                if (valueKind != JsonValueKind.String)
                {
                    if (level == ValidationLevel.Verbose)
                    {
                        ValidationContext ignoredResult = validationContext;
                        ignoredResult = ignoredResult.WithResult(isValid: true, "Validation pattern - ignored because the value is not a string", "pattern");

                        return ignoredResult;
                    }

                    return validationContext;
                }

                ValidationContext result = validationContext;
                value.TryGetValue(StringValidator, new Corvus.Json.Validate.ValidationContextWrapper(result, level), out result);

                return result;

                static bool StringValidator(ReadOnlySpan<char> input, in Corvus.Json.Validate.ValidationContextWrapper context, out ValidationContext result)
                {
                    result = context.Context;

                    if (Pattern.IsMatch(input))
                    {
                        if (context.Level == ValidationLevel.Verbose)
                        {
                            result = result.WithResult(isValid: true, validationLocationReducedPathModifier: new JsonReference("pattern"), $"Validation pattern - {input.ToString()} matched '^[A-Z][a-zA-Z]*(?:\\.[A-Z][a-zA-Z]*)*$'");
                        }
                    }
                    else
                    {
                        if (context.Level == ValidationLevel.Flag)
                        {
                            result = context.Context.WithResult(isValid: false);
                            return true;
                        }
                        else if (context.Level >= ValidationLevel.Detailed)
                        {
                            result = result.WithResult(isValid: false, validationLocationReducedPathModifier: new JsonReference("pattern"), $"Validation pattern - {input.ToString()} did not match '^[A-Z][a-zA-Z]*(?:\\.[A-Z][a-zA-Z]*)*$'");
                        }
                        else
                        {
                            result = result.WithResult(isValid: false, validationLocationReducedPathModifier: new JsonReference("pattern"), "Validation pattern - The value did not match '^[A-Z][a-zA-Z]*(?:\\.[A-Z][a-zA-Z]*)*$'");
                        }
                    }

                    return true;
                }
            }

#if NET8_0_OR_GREATER && !DYNAMIC_BUILD
            [GeneratedRegex("^[A-Z][a-zA-Z]*(?:\\.[A-Z][a-zA-Z]*)*$")]
            private static partial Regex CreatePattern();
#else
            private static Regex CreatePattern() => new("^[A-Z][a-zA-Z]*(?:\\.[A-Z][a-zA-Z]*)*$", RegexOptions.Compiled);
#endif
        }
    }
}
