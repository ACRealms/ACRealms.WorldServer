//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable

using System.Collections.Immutable;
using System.Text.Json;
using Corvus.Json;
using Corvus.Json.Internal;

namespace ACRealms.Roslyn.RealmProps.IntermediateModels;

/// <summary>
/// Generated from JSON Schema.
/// </summary>
public readonly partial struct RealmPropertySchema
{
    /// <summary>
    /// Generated from JSON Schema.
    /// </summary>
    public readonly partial struct Group
        : IJsonObject<ACRealms.Roslyn.RealmProps.IntermediateModels.RealmPropertySchema.Group>
    {
        /// <summary>
        /// Conversion from <see cref="ImmutableList{JsonObjectProperty}"/>.
        /// </summary>
        /// <param name="value">The value from which to convert.</param>
        public static implicit operator Group(ImmutableList<JsonObjectProperty> value)
        {
            return new(value);
        }

        /// <summary>
        /// Conversion to <see cref="ImmutableList{JsonObjectProperty}"/>.
        /// </summary>
        /// <param name="value">The value from which to convert.</param>
        public static implicit operator ImmutableList<JsonObjectProperty>(Group value)
        {
            return
                __CorvusObjectHelpers.GetPropertyBacking(value);
        }

        /// <summary>
        /// Conversion from JsonObject.
        /// </summary>
        /// <param name="value">The value from which to convert.</param>
        public static implicit operator Group(JsonObject value)
        {
            if (value.HasDotnetBacking && value.ValueKind == JsonValueKind.Object)
            {
                return new(
                    __CorvusObjectHelpers.GetPropertyBacking(value));
            }

            return new(value.AsJsonElement);
        }

        /// <summary>
        /// Conversion to JsonObject.
        /// </summary>
        /// <param name="value">The value from which to convert.</param>
        public static implicit operator JsonObject(Group value)
        {
            return
                value.AsObject;
        }

        /// <inheritdoc/>
        public Corvus.Json.JsonAny this[in JsonPropertyName name]
        {
            get
            {
                if (this.TryGetProperty(name, out Corvus.Json.JsonAny result))
                {
                    return result;
                }

                throw new InvalidOperationException();
            }
        }

        /// <summary>
        /// Gets the number of properties in the object.
        /// </summary>
        public int Count
        {
            get
            {
                if ((this.backing & Backing.JsonElement) != 0)
                {
                    return this.jsonElementBacking.GetPropertyCount();
                }

                if ((this.backing & Backing.Object) != 0)
                {
                    return this.objectBacking.Count;
                }

                throw new InvalidOperationException();
            }
        }

        /// <summary>
        /// Gets the (optional) <c>default</c> property.
        /// </summary>
        /// <remarks>
        /// <para>
        /// The hard default value for the realm property (ultimate fallback)
        /// </para>
        /// </remarks>
        public Corvus.Json.JsonAny Default
        {
            get
            {
                if ((this.backing & Backing.JsonElement) != 0)
                {
                    if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                    {
                        return default;
                    }

                    if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.DefaultUtf8, out JsonElement result))
                    {
                        return new(result);
                    }
                }

                if ((this.backing & Backing.Object) != 0)
                {
                    if (this.objectBacking.TryGetValue(JsonPropertyNames.Default, out JsonAny result))
                    {
                        return result;
                    }
                }

                return default;
            }
        }

        /// <summary>
        /// Gets the (optional) <c>default_from_server_property</c> property.
        /// </summary>
        public Corvus.Json.JsonString DefaultFromServerProperty
        {
            get
            {
                if ((this.backing & Backing.JsonElement) != 0)
                {
                    if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                    {
                        return default;
                    }

                    if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.DefaultFromServerPropertyUtf8, out JsonElement result))
                    {
                        return new(result);
                    }
                }

                if ((this.backing & Backing.Object) != 0)
                {
                    if (this.objectBacking.TryGetValue(JsonPropertyNames.DefaultFromServerProperty, out JsonAny result))
                    {
                        return result.As<Corvus.Json.JsonString>();
                    }
                }

                return default;
            }
        }

        /// <summary>
        /// Gets the (optional) <c>description_format</c> property.
        /// </summary>
        public ACRealms.Roslyn.RealmProps.IntermediateModels.RealmPropertySchema.ValDescription DescriptionFormat
        {
            get
            {
                if ((this.backing & Backing.JsonElement) != 0)
                {
                    if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                    {
                        return default;
                    }

                    if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.DescriptionFormatUtf8, out JsonElement result))
                    {
                        return new(result);
                    }
                }

                if ((this.backing & Backing.Object) != 0)
                {
                    if (this.objectBacking.TryGetValue(JsonPropertyNames.DescriptionFormat, out JsonAny result))
                    {
                        return result.As<ACRealms.Roslyn.RealmProps.IntermediateModels.RealmPropertySchema.ValDescription>();
                    }
                }

                return default;
            }
        }

        /// <summary>
        /// Gets the (optional) <c>enum</c> property.
        /// </summary>
        public Corvus.Json.JsonString Enum
        {
            get
            {
                if ((this.backing & Backing.JsonElement) != 0)
                {
                    if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                    {
                        return default;
                    }

                    if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.EnumUtf8, out JsonElement result))
                    {
                        return new(result);
                    }
                }

                if ((this.backing & Backing.Object) != 0)
                {
                    if (this.objectBacking.TryGetValue(JsonPropertyNames.Enum, out JsonAny result))
                    {
                        return result.As<Corvus.Json.JsonString>();
                    }
                }

                return default;
            }
        }

        /// <summary>
        /// Gets the (optional) <c>key_prefix</c> property.
        /// </summary>
        /// <remarks>
        /// <para>
        /// Property names in this group will be prefixed with this value
        /// </para>
        /// </remarks>
        public ACRealms.Roslyn.RealmProps.IntermediateModels.RealmPropertySchema.Group.PropertyNamesInThisGroupWillBePrefixedWithThisValue KeyPrefix
        {
            get
            {
                if ((this.backing & Backing.JsonElement) != 0)
                {
                    if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                    {
                        return default;
                    }

                    if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.KeyPrefixUtf8, out JsonElement result))
                    {
                        return new(result);
                    }
                }

                if ((this.backing & Backing.Object) != 0)
                {
                    if (this.objectBacking.TryGetValue(JsonPropertyNames.KeyPrefix, out JsonAny result))
                    {
                        return result.As<ACRealms.Roslyn.RealmProps.IntermediateModels.RealmPropertySchema.Group.PropertyNamesInThisGroupWillBePrefixedWithThisValue>();
                    }
                }

                return default;
            }
        }

        /// <summary>
        /// Gets the (optional) <c>key_suffix</c> property.
        /// </summary>
        /// <remarks>
        /// <para>
        /// Property names in this group will be suffixed with this value
        /// </para>
        /// </remarks>
        public ACRealms.Roslyn.RealmProps.IntermediateModels.RealmPropertySchema.Group.PropertyNamesInThisGroupWillBeSuffixedWithThisValue KeySuffix
        {
            get
            {
                if ((this.backing & Backing.JsonElement) != 0)
                {
                    if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                    {
                        return default;
                    }

                    if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.KeySuffixUtf8, out JsonElement result))
                    {
                        return new(result);
                    }
                }

                if ((this.backing & Backing.Object) != 0)
                {
                    if (this.objectBacking.TryGetValue(JsonPropertyNames.KeySuffix, out JsonAny result))
                    {
                        return result.As<ACRealms.Roslyn.RealmProps.IntermediateModels.RealmPropertySchema.Group.PropertyNamesInThisGroupWillBeSuffixedWithThisValue>();
                    }
                }

                return default;
            }
        }

        /// <summary>
        /// Gets the (optional) <c>max_value</c> property.
        /// </summary>
        public ACRealms.Roslyn.RealmProps.IntermediateModels.RealmPropertySchema.ValFloat MaxValue
        {
            get
            {
                if ((this.backing & Backing.JsonElement) != 0)
                {
                    if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                    {
                        return default;
                    }

                    if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.MaxValueUtf8, out JsonElement result))
                    {
                        return new(result);
                    }
                }

                if ((this.backing & Backing.Object) != 0)
                {
                    if (this.objectBacking.TryGetValue(JsonPropertyNames.MaxValue, out JsonAny result))
                    {
                        return result.As<ACRealms.Roslyn.RealmProps.IntermediateModels.RealmPropertySchema.ValFloat>();
                    }
                }

                return default;
            }
        }

        /// <summary>
        /// Gets the (optional) <c>min_value</c> property.
        /// </summary>
        public ACRealms.Roslyn.RealmProps.IntermediateModels.RealmPropertySchema.ValFloat MinValue
        {
            get
            {
                if ((this.backing & Backing.JsonElement) != 0)
                {
                    if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                    {
                        return default;
                    }

                    if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.MinValueUtf8, out JsonElement result))
                    {
                        return new(result);
                    }
                }

                if ((this.backing & Backing.Object) != 0)
                {
                    if (this.objectBacking.TryGetValue(JsonPropertyNames.MinValue, out JsonAny result))
                    {
                        return result.As<ACRealms.Roslyn.RealmProps.IntermediateModels.RealmPropertySchema.ValFloat>();
                    }
                }

                return default;
            }
        }

        /// <summary>
        /// Gets the (optional) <c>obsolete</c> property.
        /// </summary>
        public Corvus.Json.JsonString Obsolete
        {
            get
            {
                if ((this.backing & Backing.JsonElement) != 0)
                {
                    if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                    {
                        return default;
                    }

                    if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.ObsoleteUtf8, out JsonElement result))
                    {
                        return new(result);
                    }
                }

                if ((this.backing & Backing.Object) != 0)
                {
                    if (this.objectBacking.TryGetValue(JsonPropertyNames.Obsolete, out JsonAny result))
                    {
                        return result.As<Corvus.Json.JsonString>();
                    }
                }

                return default;
            }
        }

        /// <summary>
        /// Gets the (optional) <c>properties</c> property.
        /// </summary>
        public ACRealms.Roslyn.RealmProps.IntermediateModels.RealmPropertySchema.ObjPropListForGroup Properties
        {
            get
            {
                if ((this.backing & Backing.JsonElement) != 0)
                {
                    if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                    {
                        return default;
                    }

                    if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.PropertiesUtf8, out JsonElement result))
                    {
                        return new(result);
                    }
                }

                if ((this.backing & Backing.Object) != 0)
                {
                    if (this.objectBacking.TryGetValue(JsonPropertyNames.Properties, out JsonAny result))
                    {
                        return result.As<ACRealms.Roslyn.RealmProps.IntermediateModels.RealmPropertySchema.ObjPropListForGroup>();
                    }
                }

                return default;
            }
        }

        /// <summary>
        /// Gets the (optional) <c>reroll_restricted_to</c> property.
        /// </summary>
        public ACRealms.Roslyn.RealmProps.IntermediateModels.RealmPropertySchema.ObjPropOrGroup.RerollRestrictedToEntity RerollRestrictedTo
        {
            get
            {
                if ((this.backing & Backing.JsonElement) != 0)
                {
                    if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                    {
                        return default;
                    }

                    if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.RerollRestrictedToUtf8, out JsonElement result))
                    {
                        return new(result);
                    }
                }

                if ((this.backing & Backing.Object) != 0)
                {
                    if (this.objectBacking.TryGetValue(JsonPropertyNames.RerollRestrictedTo, out JsonAny result))
                    {
                        return result.As<ACRealms.Roslyn.RealmProps.IntermediateModels.RealmPropertySchema.ObjPropOrGroup.RerollRestrictedToEntity>();
                    }
                }

                return default;
            }
        }

        /// <summary>
        /// Gets the (optional) <c>type</c> property.
        /// </summary>
        public ACRealms.Roslyn.RealmProps.IntermediateModels.RealmPropertySchema.Propertytype Type
        {
            get
            {
                if ((this.backing & Backing.JsonElement) != 0)
                {
                    if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                    {
                        return default;
                    }

                    if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.TypeUtf8, out JsonElement result))
                    {
                        return new(result);
                    }
                }

                if ((this.backing & Backing.Object) != 0)
                {
                    if (this.objectBacking.TryGetValue(JsonPropertyNames.Type, out JsonAny result))
                    {
                        return result.As<ACRealms.Roslyn.RealmProps.IntermediateModels.RealmPropertySchema.Propertytype>();
                    }
                }

                return default;
            }
        }

        /// <inheritdoc/>
        public static Group FromProperties(IDictionary<JsonPropertyName, JsonAny> source)
        {
            return new(source.Select(kvp => new JsonObjectProperty(kvp.Key, kvp.Value)).ToImmutableList());
        }

        /// <inheritdoc/>
        public static Group FromProperties(params (JsonPropertyName Name, JsonAny Value)[] source)
        {
            return new(source.Select(s => new JsonObjectProperty(s.Name, s.Value.AsAny)).ToImmutableList());
        }

        /// <summary>
        /// Creates an instance of the type from the given immutable list of properties.
        /// </summary>
        /// <param name="source">The list of properties.</param>
        /// <returns>An instance of the type initialized from the list of properties.</returns>
        public static Group FromProperties(ImmutableList<JsonObjectProperty> source)
        {
            return new(source);
        }

        /// <summary>
        /// Creates an instance of a <see cref="Group"/>.
        /// </summary>
        public static Group Create(
            in Corvus.Json.JsonAny? defaultValue = null,
            in Corvus.Json.JsonString? defaultFromServerProperty = null,
            in ACRealms.Roslyn.RealmProps.IntermediateModels.RealmPropertySchema.ValDescription? descriptionFormat = null,
            in Corvus.Json.JsonString? enumValue = null,
            in ACRealms.Roslyn.RealmProps.IntermediateModels.RealmPropertySchema.Group.PropertyNamesInThisGroupWillBePrefixedWithThisValue? keyPrefix = null,
            in ACRealms.Roslyn.RealmProps.IntermediateModels.RealmPropertySchema.Group.PropertyNamesInThisGroupWillBeSuffixedWithThisValue? keySuffix = null,
            in ACRealms.Roslyn.RealmProps.IntermediateModels.RealmPropertySchema.ValFloat? maxValue = null,
            in ACRealms.Roslyn.RealmProps.IntermediateModels.RealmPropertySchema.ValFloat? minValue = null,
            in Corvus.Json.JsonString? obsolete = null,
            in ACRealms.Roslyn.RealmProps.IntermediateModels.RealmPropertySchema.ObjPropListForGroup? properties = null,
            in ACRealms.Roslyn.RealmProps.IntermediateModels.RealmPropertySchema.ObjPropOrGroup.RerollRestrictedToEntity? rerollRestrictedTo = null,
            in ACRealms.Roslyn.RealmProps.IntermediateModels.RealmPropertySchema.Propertytype? type = null)
        {
            var builder = ImmutableList.CreateBuilder<JsonObjectProperty>();

            if (defaultValue is not null)
            {
                builder.Add(JsonPropertyNames.Default, defaultValue.Value.AsAny);
            }

            if (defaultFromServerProperty is not null)
            {
                builder.Add(JsonPropertyNames.DefaultFromServerProperty, defaultFromServerProperty.Value.AsAny);
            }

            if (descriptionFormat is not null)
            {
                builder.Add(JsonPropertyNames.DescriptionFormat, descriptionFormat.Value.AsAny);
            }

            if (enumValue is not null)
            {
                builder.Add(JsonPropertyNames.Enum, enumValue.Value.AsAny);
            }

            if (keyPrefix is not null)
            {
                builder.Add(JsonPropertyNames.KeyPrefix, keyPrefix.Value.AsAny);
            }

            if (keySuffix is not null)
            {
                builder.Add(JsonPropertyNames.KeySuffix, keySuffix.Value.AsAny);
            }

            if (maxValue is not null)
            {
                builder.Add(JsonPropertyNames.MaxValue, maxValue.Value.AsAny);
            }

            if (minValue is not null)
            {
                builder.Add(JsonPropertyNames.MinValue, minValue.Value.AsAny);
            }

            if (obsolete is not null)
            {
                builder.Add(JsonPropertyNames.Obsolete, obsolete.Value.AsAny);
            }

            if (properties is not null)
            {
                builder.Add(JsonPropertyNames.Properties, properties.Value.AsAny);
            }

            if (rerollRestrictedTo is not null)
            {
                builder.Add(JsonPropertyNames.RerollRestrictedTo, rerollRestrictedTo.Value.AsAny);
            }

            if (type is not null)
            {
                builder.Add(JsonPropertyNames.Type, type.Value.AsAny);
            }

            return new(builder.ToImmutable());
        }

        /// <inheritdoc/>
        public ImmutableList<JsonObjectProperty> AsPropertyBacking()
        {
            return __CorvusObjectHelpers.GetPropertyBacking(this);
        }
        /// <inheritdoc/>
        public ImmutableList<JsonObjectProperty>.Builder AsPropertyBackingBuilder()
        {
            return __CorvusObjectHelpers.GetPropertyBacking(this).ToBuilder();
        }

        /// <inheritdoc/>
        public JsonObjectEnumerator EnumerateObject()
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                return new(this.jsonElementBacking);
            }

            if ((this.backing & Backing.Object) != 0)
            {
                return new(this.objectBacking);
            }

            throw new InvalidOperationException();
        }

        /// <inheritdoc/>
        public bool HasProperties()
        {
            if ((this.backing & Backing.Object) != 0)
            {
                return this.objectBacking.Count > 0;
            }

            if ((this.backing & Backing.JsonElement) != 0)
            {
                using JsonElement.ObjectEnumerator enumerator = this.jsonElementBacking.EnumerateObject();
                return enumerator.MoveNext();
            }

            throw new InvalidOperationException();
        }

        /// <inheritdoc />
        public bool HasProperty(in JsonPropertyName name)
        {
            if ((this.backing & Backing.Object) != 0)
            {
                return this.objectBacking.ContainsKey(name);
            }

            if ((this.backing & Backing.JsonElement) != 0)
            {
                return name.TryGetProperty(this.jsonElementBacking, out JsonElement _);
            }

            throw new InvalidOperationException();
        }

        /// <inheritdoc />
        public bool HasProperty(string name)
        {
            if ((this.backing & Backing.Object) != 0)
            {
                return this.objectBacking.ContainsKey(name);
            }

            if ((this.backing & Backing.JsonElement) != 0)
            {
                return this.jsonElementBacking.TryGetProperty(name, out _);
            }

            throw new InvalidOperationException();
        }

        /// <inheritdoc />
        public bool HasProperty(ReadOnlySpan<char> name)
        {
            if ((this.backing & Backing.Object) != 0)
            {
                return this.objectBacking.ContainsKey(name);
            }

            if ((this.backing & Backing.JsonElement) != 0)
            {
                return this.jsonElementBacking.TryGetProperty(name, out _);
            }

            throw new InvalidOperationException();
        }

        /// <inheritdoc />
        public bool HasProperty(ReadOnlySpan<byte> name)
        {
            if ((this.backing & Backing.Object) != 0)
            {
                return this.objectBacking.ContainsKey(name);
            }

            if ((this.backing & Backing.JsonElement) != 0)
            {
                return this.jsonElementBacking.TryGetProperty(name, out _);
            }

            throw new InvalidOperationException();
        }

        /// <summary>
        /// Sets the (optional) <c>default</c> property.
        /// </summary>
        /// <param name="value">The new property value</param>
        /// <returns>The instance with the property set.</returns>
        /// <remarks>
        /// <para>
        /// The hard default value for the realm property (ultimate fallback)
        /// </para>
        /// </remarks>
        public Group WithDefault(in Corvus.Json.JsonAny value)
        {
            return this.SetProperty(JsonPropertyNames.Default, value);
        }

        /// <summary>
        /// Sets the (optional) <c>default_from_server_property</c> property.
        /// </summary>
        /// <param name="value">The new property value</param>
        /// <returns>The instance with the property set.</returns>
        public Group WithDefaultFromServerProperty(in Corvus.Json.JsonString value)
        {
            return this.SetProperty(JsonPropertyNames.DefaultFromServerProperty, value);
        }

        /// <summary>
        /// Sets the (optional) <c>description_format</c> property.
        /// </summary>
        /// <param name="value">The new property value</param>
        /// <returns>The instance with the property set.</returns>
        public Group WithDescriptionFormat(in ACRealms.Roslyn.RealmProps.IntermediateModels.RealmPropertySchema.ValDescription value)
        {
            return this.SetProperty(JsonPropertyNames.DescriptionFormat, value);
        }

        /// <summary>
        /// Sets the (optional) <c>enum</c> property.
        /// </summary>
        /// <param name="value">The new property value</param>
        /// <returns>The instance with the property set.</returns>
        public Group WithEnum(in Corvus.Json.JsonString value)
        {
            return this.SetProperty(JsonPropertyNames.Enum, value);
        }

        /// <summary>
        /// Sets the (optional) <c>key_prefix</c> property.
        /// </summary>
        /// <param name="value">The new property value</param>
        /// <returns>The instance with the property set.</returns>
        /// <remarks>
        /// <para>
        /// Property names in this group will be prefixed with this value
        /// </para>
        /// </remarks>
        public Group WithKeyPrefix(in ACRealms.Roslyn.RealmProps.IntermediateModels.RealmPropertySchema.Group.PropertyNamesInThisGroupWillBePrefixedWithThisValue value)
        {
            return this.SetProperty(JsonPropertyNames.KeyPrefix, value);
        }

        /// <summary>
        /// Sets the (optional) <c>key_suffix</c> property.
        /// </summary>
        /// <param name="value">The new property value</param>
        /// <returns>The instance with the property set.</returns>
        /// <remarks>
        /// <para>
        /// Property names in this group will be suffixed with this value
        /// </para>
        /// </remarks>
        public Group WithKeySuffix(in ACRealms.Roslyn.RealmProps.IntermediateModels.RealmPropertySchema.Group.PropertyNamesInThisGroupWillBeSuffixedWithThisValue value)
        {
            return this.SetProperty(JsonPropertyNames.KeySuffix, value);
        }

        /// <summary>
        /// Sets the (optional) <c>max_value</c> property.
        /// </summary>
        /// <param name="value">The new property value</param>
        /// <returns>The instance with the property set.</returns>
        public Group WithMaxValue(in ACRealms.Roslyn.RealmProps.IntermediateModels.RealmPropertySchema.ValFloat value)
        {
            return this.SetProperty(JsonPropertyNames.MaxValue, value);
        }

        /// <summary>
        /// Sets the (optional) <c>min_value</c> property.
        /// </summary>
        /// <param name="value">The new property value</param>
        /// <returns>The instance with the property set.</returns>
        public Group WithMinValue(in ACRealms.Roslyn.RealmProps.IntermediateModels.RealmPropertySchema.ValFloat value)
        {
            return this.SetProperty(JsonPropertyNames.MinValue, value);
        }

        /// <summary>
        /// Sets the (optional) <c>obsolete</c> property.
        /// </summary>
        /// <param name="value">The new property value</param>
        /// <returns>The instance with the property set.</returns>
        public Group WithObsolete(in Corvus.Json.JsonString value)
        {
            return this.SetProperty(JsonPropertyNames.Obsolete, value);
        }

        /// <summary>
        /// Sets the (optional) <c>properties</c> property.
        /// </summary>
        /// <param name="value">The new property value</param>
        /// <returns>The instance with the property set.</returns>
        public Group WithProperties(in ACRealms.Roslyn.RealmProps.IntermediateModels.RealmPropertySchema.ObjPropListForGroup value)
        {
            return this.SetProperty(JsonPropertyNames.Properties, value);
        }

        /// <summary>
        /// Sets the (optional) <c>reroll_restricted_to</c> property.
        /// </summary>
        /// <param name="value">The new property value</param>
        /// <returns>The instance with the property set.</returns>
        public Group WithRerollRestrictedTo(in ACRealms.Roslyn.RealmProps.IntermediateModels.RealmPropertySchema.ObjPropOrGroup.RerollRestrictedToEntity value)
        {
            return this.SetProperty(JsonPropertyNames.RerollRestrictedTo, value);
        }

        /// <summary>
        /// Sets the (optional) <c>type</c> property.
        /// </summary>
        /// <param name="value">The new property value</param>
        /// <returns>The instance with the property set.</returns>
        public Group WithType(in ACRealms.Roslyn.RealmProps.IntermediateModels.RealmPropertySchema.Propertytype value)
        {
            return this.SetProperty(JsonPropertyNames.Type, value);
        }

        /// <summary>
        /// Get a property.
        /// </summary>
        /// <param name="name">The name of the property.</param>
        /// <param name="value">The value of the property.</param>
        /// <returns><c>True</c> if the property was present.</returns>
        /// <exception cref="InvalidOperationException">The value is not an object.</exception>
        public bool TryGetProperty(in JsonPropertyName name, out JsonAny value)
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    value = default;
                    return false;
                }

                if (name.TryGetProperty(this.jsonElementBacking, out JsonElement element))
                {
                    value = new(element);
                    return true;
                }

                value = default;
                return false;
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(name, out JsonAny result))
                {
                    value = result;
                    return true;
                }

                value = default;
                return false;
            }

            throw new InvalidOperationException();
        }

        /// <summary>
        /// Get a property.
        /// </summary>
        /// <param name="name">The name of the property.</param>
        /// <param name="value">The value of the property.</param>
        /// <returns><c>True</c> if the property was present.</returns>
        /// <exception cref="InvalidOperationException">The value is not an object.</exception>
        public bool TryGetProperty(string name, out JsonAny value)
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    value = default;
                    return false;
                }

                if (this.jsonElementBacking.TryGetProperty(name, out JsonElement element))
                {
                    value = new(element);
                    return true;
                }

                value = default;
                return false;
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(name, out JsonAny result))
                {
                    value = result;
                    return true;
                }

                value = default;
                return false;
            }

            throw new InvalidOperationException();
        }

        /// <summary>
        /// Get a property.
        /// </summary>
        /// <param name="name">The name of the property.</param>
        /// <param name="value">The value of the property.</param>
        /// <returns><c>True</c> if the property was present.</returns>
        /// <exception cref="InvalidOperationException">The value is not an object.</exception>
        public bool TryGetProperty(ReadOnlySpan<char> name, out JsonAny value)
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    value = default;
                    return false;
                }

                if (this.jsonElementBacking.TryGetProperty(name, out JsonElement element))
                {
                    value = new(element);
                    return true;
                }

                value = default;
                return false;
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(name, out JsonAny result))
                {
                    value = result;
                    return true;
                }

                value = default;
                return false;
            }

            throw new InvalidOperationException();
        }

        /// <summary>
        /// Get a property.
        /// </summary>
        /// <param name="name">The name of the property.</param>
        /// <param name="value">The value of the property.</param>
        /// <returns><c>True</c> if the property was present.</returns>
        /// <exception cref="InvalidOperationException">The value is not an object.</exception>
        public bool TryGetProperty(ReadOnlySpan<byte> name, out JsonAny value)
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    value = default;
                    return false;
                }

                if (this.jsonElementBacking.TryGetProperty(name, out JsonElement element))
                {
                    value = new(element);
                    return true;
                }

                value = default;
                return false;
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(name, out JsonAny result))
                {
                    value = result;
                    return true;
                }

                value = default;
                return false;
            }

            throw new InvalidOperationException();
        }

        /// <inheritdoc />
        public bool TryGetProperty<TValue>(in JsonPropertyName name, out TValue value)
            where TValue : struct, IJsonValue<TValue>
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    value = default;
                    return false;
                }

                if (name.TryGetProperty(this.jsonElementBacking, out JsonElement element))
                {
#if NET8_0_OR_GREATER
                    value = TValue.FromJson(element);
#else
                    value = JsonValueNetStandard20Extensions.FromJsonElement<TValue>(element);
#endif

                    return true;
                }

                value = default;
                return false;
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(name, out JsonAny result))
                {
#if NET8_0_OR_GREATER
                    value = TValue.FromAny(result);
#else
                    value = result.As<TValue>();
#endif
                    return true;
                }

                value = default;
                return false;
            }

            throw new InvalidOperationException();
        }

        /// <inheritdoc />
        public bool TryGetProperty<TValue>(string name, out TValue value)
            where TValue : struct, IJsonValue<TValue>
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    value = default;
                    return false;
                }

                if (this.jsonElementBacking.TryGetProperty(name, out JsonElement element))
                {
#if NET8_0_OR_GREATER
                    value = TValue.FromJson(element);
#else
                    value = JsonValueNetStandard20Extensions.FromJsonElement<TValue>(element);
#endif

                    return true;
                }

                value = default;
                return false;
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(name, out JsonAny result))
                {
#if NET8_0_OR_GREATER
                    value = TValue.FromAny(result);
#else
                    value = result.As<TValue>();
#endif
                    return true;
                }

                value = default;
                return false;
            }

            throw new InvalidOperationException();
        }

        /// <inheritdoc />
        public bool TryGetProperty<TValue>(ReadOnlySpan<char> name, out TValue value)
            where TValue : struct, IJsonValue<TValue>
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    value = default;
                    return false;
                }

                if (this.jsonElementBacking.TryGetProperty(name, out JsonElement element))
                {
#if NET8_0_OR_GREATER
                    value = TValue.FromJson(element);
#else
                    value = JsonValueNetStandard20Extensions.FromJsonElement<TValue>(element);
#endif

                    return true;
                }

                value = default;
                return false;
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(name, out JsonAny result))
                {
#if NET8_0_OR_GREATER
                    value = TValue.FromAny(result);
#else
                    value = result.As<TValue>();
#endif
                    return true;
                }

                value = default;
                return false;
            }

            throw new InvalidOperationException();
        }

        /// <inheritdoc />
        public bool TryGetProperty<TValue>(ReadOnlySpan<byte> name, out TValue value)
            where TValue : struct, IJsonValue<TValue>
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    value = default;
                    return false;
                }

                if (this.jsonElementBacking.TryGetProperty(name, out JsonElement element))
                {
#if NET8_0_OR_GREATER
                    value = TValue.FromJson(element);
#else
                    value = JsonValueNetStandard20Extensions.FromJsonElement<TValue>(element);
#endif

                    return true;
                }

                value = default;
                return false;
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(name, out JsonAny result))
                {
#if NET8_0_OR_GREATER
                    value = TValue.FromAny(result);
#else
                    value = result.As<TValue>();
#endif
                    return true;
                }

                value = default;
                return false;
            }

            throw new InvalidOperationException();
        }

        /// <inheritdoc />
        public Group SetProperty<TValue>(in JsonPropertyName name, TValue value)
            where TValue : struct, IJsonValue
        {
            return new(__CorvusObjectHelpers.GetPropertyBackingWith(this, name, value.AsAny));
        }

        /// <inheritdoc />
        public Group RemoveProperty(in JsonPropertyName name)
        {
            return new(__CorvusObjectHelpers.GetPropertyBackingWithout(this, name));
        }

        /// <inheritdoc />
        public Group RemoveProperty(string name)
        {
            return new(__CorvusObjectHelpers.GetPropertyBackingWithout(this, name));
        }

        /// <inheritdoc />
        public Group RemoveProperty(ReadOnlySpan<char> name)
        {
            return new(__CorvusObjectHelpers.GetPropertyBackingWithout(this, name));
        }

        /// <inheritdoc />
        public Group RemoveProperty(ReadOnlySpan<byte> name)
        {
            return new(__CorvusObjectHelpers.GetPropertyBackingWithout(this, name));
        }

        /// <summary>
        /// Provides UTF8 and string versions of the JSON property names on the object.
        /// </summary>
        public static class JsonPropertyNames
        {
            /// <summary>
            /// Gets the JSON property name for <see cref="Default"/>.
            /// </summary>
            public const string Default = "default";

            /// <summary>
            /// Gets the JSON property name for <see cref="DefaultFromServerProperty"/>.
            /// </summary>
            public const string DefaultFromServerProperty = "default_from_server_property";

            /// <summary>
            /// Gets the JSON property name for <see cref="DescriptionFormat"/>.
            /// </summary>
            public const string DescriptionFormat = "description_format";

            /// <summary>
            /// Gets the JSON property name for <see cref="Enum"/>.
            /// </summary>
            public const string Enum = "enum";

            /// <summary>
            /// Gets the JSON property name for <see cref="KeyPrefix"/>.
            /// </summary>
            public const string KeyPrefix = "key_prefix";

            /// <summary>
            /// Gets the JSON property name for <see cref="KeySuffix"/>.
            /// </summary>
            public const string KeySuffix = "key_suffix";

            /// <summary>
            /// Gets the JSON property name for <see cref="MaxValue"/>.
            /// </summary>
            public const string MaxValue = "max_value";

            /// <summary>
            /// Gets the JSON property name for <see cref="MinValue"/>.
            /// </summary>
            public const string MinValue = "min_value";

            /// <summary>
            /// Gets the JSON property name for <see cref="Obsolete"/>.
            /// </summary>
            public const string Obsolete = "obsolete";

            /// <summary>
            /// Gets the JSON property name for <see cref="Properties"/>.
            /// </summary>
            public const string Properties = "properties";

            /// <summary>
            /// Gets the JSON property name for <see cref="RerollRestrictedTo"/>.
            /// </summary>
            public const string RerollRestrictedTo = "reroll_restricted_to";

            /// <summary>
            /// Gets the JSON property name for <see cref="Type"/>.
            /// </summary>
            public const string Type = "type";

            /// <summary>
            /// Gets the JSON property name for <see cref="Default"/>.
            /// </summary>
            public static ReadOnlySpan<byte> DefaultUtf8 => "default"u8;

            /// <summary>
            /// Gets the JSON property name for <see cref="DefaultFromServerProperty"/>.
            /// </summary>
            public static ReadOnlySpan<byte> DefaultFromServerPropertyUtf8 => "default_from_server_property"u8;

            /// <summary>
            /// Gets the JSON property name for <see cref="DescriptionFormat"/>.
            /// </summary>
            public static ReadOnlySpan<byte> DescriptionFormatUtf8 => "description_format"u8;

            /// <summary>
            /// Gets the JSON property name for <see cref="Enum"/>.
            /// </summary>
            public static ReadOnlySpan<byte> EnumUtf8 => "enum"u8;

            /// <summary>
            /// Gets the JSON property name for <see cref="KeyPrefix"/>.
            /// </summary>
            public static ReadOnlySpan<byte> KeyPrefixUtf8 => "key_prefix"u8;

            /// <summary>
            /// Gets the JSON property name for <see cref="KeySuffix"/>.
            /// </summary>
            public static ReadOnlySpan<byte> KeySuffixUtf8 => "key_suffix"u8;

            /// <summary>
            /// Gets the JSON property name for <see cref="MaxValue"/>.
            /// </summary>
            public static ReadOnlySpan<byte> MaxValueUtf8 => "max_value"u8;

            /// <summary>
            /// Gets the JSON property name for <see cref="MinValue"/>.
            /// </summary>
            public static ReadOnlySpan<byte> MinValueUtf8 => "min_value"u8;

            /// <summary>
            /// Gets the JSON property name for <see cref="Obsolete"/>.
            /// </summary>
            public static ReadOnlySpan<byte> ObsoleteUtf8 => "obsolete"u8;

            /// <summary>
            /// Gets the JSON property name for <see cref="Properties"/>.
            /// </summary>
            public static ReadOnlySpan<byte> PropertiesUtf8 => "properties"u8;

            /// <summary>
            /// Gets the JSON property name for <see cref="RerollRestrictedTo"/>.
            /// </summary>
            public static ReadOnlySpan<byte> RerollRestrictedToUtf8 => "reroll_restricted_to"u8;

            /// <summary>
            /// Gets the JSON property name for <see cref="Type"/>.
            /// </summary>
            public static ReadOnlySpan<byte> TypeUtf8 => "type"u8;
        }

        private static class __CorvusObjectHelpers
        {
            /// <summary>
            /// Builds an <see cref="ImmutableList{JsonObjectProperty}"/> from the object.
            /// </summary>
            /// <returns>An immutable list of <see cref="JsonAny"/> built from the object.</returns>
            /// <exception cref="InvalidOperationException">The value is not an object.</exception>
            public static ImmutableList<JsonObjectProperty> GetPropertyBacking(in Group that)
            {
                if ((that.backing & Backing.Object) != 0)
                {
                    return that.objectBacking;
                }

                if ((that.backing & Backing.JsonElement) != 0)
                {
                    return PropertyBackingBuilders.GetPropertyBackingBuilder(that.jsonElementBacking).ToImmutable();
                }

                throw new InvalidOperationException();
            }

            /// <summary>
            /// Builds an <see cref="ImmutableList{JsonObjectProperty}"/> from the object, without a specific property.
            /// </summary>
            /// <returns>An immutable list of <see cref="JsonObjectProperty"/>, built from the existing object, without the given property.</returns>
            /// <exception cref="InvalidOperationException">The value is not an object.</exception>
            public static ImmutableList<JsonObjectProperty> GetPropertyBackingWithout(in Group that, in JsonPropertyName name)
            {
                if ((that.backing & Backing.Object) != 0)
                {
                    return that.objectBacking.Remove(name);
                }

                if ((that.backing & Backing.JsonElement) != 0)
                {
                    return PropertyBackingBuilders.GetPropertyBackingBuilderWithout(that.jsonElementBacking, name).ToImmutable();
                }

                throw new InvalidOperationException();
            }

            /// <summary>
            /// Builds an <see cref="ImmutableList{JsonObjectProperty}"/> from the object, without a specific property.
            /// </summary>
            /// <returns>An immutable list of <see cref="JsonObjectProperty"/>, built from the existing object, without the given property.</returns>
            /// <exception cref="InvalidOperationException">The value is not an object.</exception>
            public static ImmutableList<JsonObjectProperty> GetPropertyBackingWithout(in Group that, ReadOnlySpan<char> name)
            {
                if ((that.backing & Backing.Object) != 0)
                {
                    return that.objectBacking.Remove(name);
                }

                if ((that.backing & Backing.JsonElement) != 0)
                {
                    return PropertyBackingBuilders.GetPropertyBackingBuilderWithout(that.jsonElementBacking, name).ToImmutable();
                }

                throw new InvalidOperationException();
            }

            /// <summary>
            /// Builds an <see cref="ImmutableList{JsonObjectProperty}"/> from the object, without a specific property.
            /// </summary>
            /// <returns>An immutable list of <see cref="JsonObjectProperty"/>, built from the existing object, without the given property.</returns>
            /// <exception cref="InvalidOperationException">The value is not an object.</exception>
            public static ImmutableList<JsonObjectProperty> GetPropertyBackingWithout(in Group that, ReadOnlySpan<byte> name)
            {
                if ((that.backing & Backing.Object) != 0)
                {
                    return that.objectBacking.Remove(name);
                }

                if ((that.backing & Backing.JsonElement) != 0)
                {
                    return PropertyBackingBuilders.GetPropertyBackingBuilderWithout(that.jsonElementBacking, name).ToImmutable();
                }

                throw new InvalidOperationException();
            }

            /// <summary>
            /// Builds an <see cref="ImmutableList{JsonObjectProperty}"/> from the object, without a specific property.
            /// </summary>
            /// <returns>An immutable list of <see cref="JsonObjectProperty"/>, built from the existing object, without the given property.</returns>
            /// <exception cref="InvalidOperationException">The value is not an object.</exception>
            public static ImmutableList<JsonObjectProperty> GetPropertyBackingWithout(in Group that, string name)
            {
                if ((that.backing & Backing.Object) != 0)
                {
                    return that.objectBacking.Remove(name);
                }

                if ((that.backing & Backing.JsonElement) != 0)
                {
                    return PropertyBackingBuilders.GetPropertyBackingBuilderWithout(that.jsonElementBacking, name).ToImmutable();
                }

                throw new InvalidOperationException();
            }

            /// <summary>
            /// Builds an <see cref="ImmutableList{JsonObjectProperty}"/> from the object, without a specific property.
            /// </summary>
            /// <returns>An immutable list of <see cref="JsonObjectProperty"/>, built from the existing object, with the given property.</returns>
            /// <exception cref="InvalidOperationException">The value is not an object.</exception>
            public static ImmutableList<JsonObjectProperty> GetPropertyBackingWith(in Group that, in JsonPropertyName name, in JsonAny value)
            {
                if ((that.backing & Backing.Object) != 0)
                {
                    return that.objectBacking.SetItem(name, value);
                }

                if ((that.backing & Backing.JsonElement) != 0)
                {
                    return PropertyBackingBuilders.GetPropertyBackingBuilderReplacing(that.jsonElementBacking, name, value).ToImmutable();
                }

                throw new InvalidOperationException();
            }
        }
    }
}
