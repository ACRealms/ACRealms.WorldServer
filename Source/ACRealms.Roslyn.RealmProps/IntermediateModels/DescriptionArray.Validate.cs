//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable

using System.Runtime.CompilerServices;
using System.Text.Json;
using Corvus.Json;

namespace ACRealms.Roslyn.RealmProps.IntermediateModels;
/// <summary>
/// Generated from JSON Schema.
/// </summary>
public readonly partial struct DescriptionArray
{
    /// <inheritdoc/>
    public ValidationContext Validate(in ValidationContext validationContext, ValidationLevel level = ValidationLevel.Flag)
    {
        ValidationContext result = validationContext;
        if (level > ValidationLevel.Flag && !result.IsUsingResults)
        {
            result = result.UsingResults();
        }

        if (level > ValidationLevel.Basic)
        {
            if (!result.IsUsingStack)
            {
                result = result.UsingStack();
            }

            result = result.PushSchemaLocation("components/description/description-array.json");
        }

        JsonValueKind valueKind = this.ValueKind;

        result = CorvusValidation.TypeValidationHandler(valueKind, result, level);

        if (level == ValidationLevel.Flag && !result.IsValid)
        {
            return result;
        }

        result = CorvusValidation.CompositionAllOfValidationHandler(this, result, level);

        if (level == ValidationLevel.Flag && !result.IsValid)
        {
            return result;
        }

        result = CorvusValidation.ArrayValidationHandler(this, valueKind, result, level);

        if (level == ValidationLevel.Flag && !result.IsValid)
        {
            return result;
        }

        if (level > ValidationLevel.Basic)
        {
            result = result.PopLocation();
        }

        return result;
    }

    /// <summary>
    /// Validation constants for the type.
    /// </summary>
    public static partial class CorvusValidation
    {
        /// <summary>
        /// Core type validation.
        /// </summary>
        /// <param name="valueKind">The <see cref="JsonValueKind" /> of the value to validate.</param>
        /// <param name="validationContext">The current validation context.</param>
        /// <param name="level">The current validation level.</param>
        /// <returns>The resulting validation context after validation.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static ValidationContext TypeValidationHandler(
            JsonValueKind valueKind,
            in ValidationContext validationContext,
            ValidationLevel level = ValidationLevel.Flag)
        {
            return Corvus.Json.ValidateWithoutCoreType.TypeArray(valueKind, validationContext, level, "type");
        }

        /// <summary>
        /// Composition validation (all-of).
        /// </summary>
        /// <param name="value">The value to validate.</param>
        /// <param name="validationContext">The current validation context.</param>
        /// <param name="level">The current validation level.</param>
        /// <returns>The resulting validation context after validation.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static ValidationContext CompositionAllOfValidationHandler(
            in DescriptionArray value,
            in ValidationContext validationContext,
            ValidationLevel level = ValidationLevel.Flag)
        {
            ValidationContext result = validationContext;
            ValidationContext childContextBase = result;

            ValidationContext refResult = childContextBase.CreateChildContext();
            if (level > ValidationLevel.Basic)
            {
                refResult = refResult.PushValidationLocationReducedPathModifier(new("#/$ref"));
            }

            refResult = value.As<ACRealms.Roslyn.RealmProps.IntermediateModels.StringMultilineFromArray>().Validate(refResult, level);

            if (!refResult.IsValid)
            {
                if (level >= ValidationLevel.Basic)
                {
                    result = result.MergeChildContext(refResult, true).PushValidationLocationProperty("$ref").WithResult(isValid: false, "Validation - $ref failed to validate against the schema.").PopLocation();
                }
                else
                {
                    result = result.MergeChildContext(refResult, false).WithResult(isValid: false);
                    return result;
                }
            }
            else
            {
                result = result.MergeChildContext(refResult, level >= ValidationLevel.Detailed);
            }

            return result;
        }

        /// <summary>
        /// Array validation.
        /// </summary>
        /// <param name="value">The value to validate.</param>
        /// <param name="valueKind">The <see cref="JsonValueKind" /> of the value to validate.</param>
        /// <param name="validationContext">The current validation context.</param>
        /// <param name="level">The current validation level.</param>
        /// <returns>The resulting validation context after validation.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static ValidationContext ArrayValidationHandler(
            in DescriptionArray value,
            JsonValueKind valueKind,
            in ValidationContext validationContext,
            ValidationLevel level)
        {
            ValidationContext result = validationContext;
            if (valueKind != JsonValueKind.Array)
            {
                if (level == ValidationLevel.Verbose)
                {
                    ValidationContext ignoredResult = validationContext;
                    ignoredResult = ignoredResult.WithResult(isValid: true, "Validation items - ignored because the value is not an array", "items");

                    return ignoredResult;
                }

                return validationContext;
            }

            int length = 0;
            using JsonArrayEnumerator<ACRealms.Roslyn.RealmProps.IntermediateModels.DescriptionArray.ItemsEntity> arrayEnumerator = value.EnumerateArray();
            while (arrayEnumerator.MoveNext())
            {
                if (level > ValidationLevel.Basic)
                {
                    result = result.PushDocumentArrayIndex(length);
                }
                if (level > ValidationLevel.Basic)
                {
                    result = result.PushValidationLocationReducedPathModifier(new("#/items"));
                }

                var nonTupleItemsResult = arrayEnumerator.Current.Validate(result.CreateChildContext(), level);
                if (level == ValidationLevel.Flag && !nonTupleItemsResult.IsValid)
                {
                    return nonTupleItemsResult;
                }

                result = result.MergeResults(nonTupleItemsResult.IsValid, level, nonTupleItemsResult);
                if (level > ValidationLevel.Basic)
                {
                    result = result.PopLocation();
                }

                result = result.WithLocalItemIndex(length);

                if (level > ValidationLevel.Basic)
                {
                    result = result.PopLocation();
                }

                length++;
            }

            return result;
        }
    }
}
