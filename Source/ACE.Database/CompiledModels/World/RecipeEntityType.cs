// <auto-generated />
using System;
using System.Reflection;
using ACE.Database.Models.World;
using Microsoft.EntityFrameworkCore.ChangeTracking;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage;
using Pomelo.EntityFrameworkCore.MySql.Storage.Internal;

#pragma warning disable 219, 612, 618
#nullable disable

namespace ACE.Database.CompiledModels.World
{
    internal partial class RecipeEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "ACE.Database.Models.World.Recipe",
                typeof(Recipe),
                baseEntityType);

            var id = runtimeEntityType.AddProperty(
                "Id",
                typeof(uint),
                propertyInfo: typeof(Recipe).GetProperty("Id", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Recipe).GetField("<Id>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                afterSaveBehavior: PropertySaveBehavior.Throw,
                sentinel: 0u);
            id.TypeMapping = MySqlUIntTypeMapping.Default.Clone(
                comparer: new ValueComparer<uint>(
                    (uint v1, uint v2) => v1 == v2,
                    (uint v) => (int)v,
                    (uint v) => v),
                keyComparer: new ValueComparer<uint>(
                    (uint v1, uint v2) => v1 == v2,
                    (uint v) => (int)v,
                    (uint v) => v),
                providerValueComparer: new ValueComparer<uint>(
                    (uint v1, uint v2) => v1 == v2,
                    (uint v) => (int)v,
                    (uint v) => v));
            id.AddAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.None);
            id.AddAnnotation("Relational:ColumnName", "id");

            var dataId = runtimeEntityType.AddProperty(
                "DataId",
                typeof(uint),
                propertyInfo: typeof(Recipe).GetProperty("DataId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Recipe).GetField("<DataId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0u);
            dataId.TypeMapping = MySqlUIntTypeMapping.Default.Clone(
                comparer: new ValueComparer<uint>(
                    (uint v1, uint v2) => v1 == v2,
                    (uint v) => (int)v,
                    (uint v) => v),
                keyComparer: new ValueComparer<uint>(
                    (uint v1, uint v2) => v1 == v2,
                    (uint v) => (int)v,
                    (uint v) => v),
                providerValueComparer: new ValueComparer<uint>(
                    (uint v1, uint v2) => v1 == v2,
                    (uint v) => (int)v,
                    (uint v) => v));
            dataId.AddAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.None);
            dataId.AddAnnotation("Relational:ColumnName", "data_Id");

            var difficulty = runtimeEntityType.AddProperty(
                "Difficulty",
                typeof(uint),
                propertyInfo: typeof(Recipe).GetProperty("Difficulty", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Recipe).GetField("<Difficulty>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0u);
            difficulty.TypeMapping = MySqlUIntTypeMapping.Default.Clone(
                comparer: new ValueComparer<uint>(
                    (uint v1, uint v2) => v1 == v2,
                    (uint v) => (int)v,
                    (uint v) => v),
                keyComparer: new ValueComparer<uint>(
                    (uint v1, uint v2) => v1 == v2,
                    (uint v) => (int)v,
                    (uint v) => v),
                providerValueComparer: new ValueComparer<uint>(
                    (uint v1, uint v2) => v1 == v2,
                    (uint v) => (int)v,
                    (uint v) => v));
            difficulty.AddAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.None);
            difficulty.AddAnnotation("Relational:ColumnName", "difficulty");

            var failAmount = runtimeEntityType.AddProperty(
                "FailAmount",
                typeof(uint),
                propertyInfo: typeof(Recipe).GetProperty("FailAmount", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Recipe).GetField("<FailAmount>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0u);
            failAmount.TypeMapping = MySqlUIntTypeMapping.Default.Clone(
                comparer: new ValueComparer<uint>(
                    (uint v1, uint v2) => v1 == v2,
                    (uint v) => (int)v,
                    (uint v) => v),
                keyComparer: new ValueComparer<uint>(
                    (uint v1, uint v2) => v1 == v2,
                    (uint v) => (int)v,
                    (uint v) => v),
                providerValueComparer: new ValueComparer<uint>(
                    (uint v1, uint v2) => v1 == v2,
                    (uint v) => (int)v,
                    (uint v) => v));
            failAmount.AddAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.None);
            failAmount.AddAnnotation("Relational:ColumnName", "fail_Amount");

            var failDestroySourceAmount = runtimeEntityType.AddProperty(
                "FailDestroySourceAmount",
                typeof(uint),
                propertyInfo: typeof(Recipe).GetProperty("FailDestroySourceAmount", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Recipe).GetField("<FailDestroySourceAmount>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0u);
            failDestroySourceAmount.TypeMapping = MySqlUIntTypeMapping.Default.Clone(
                comparer: new ValueComparer<uint>(
                    (uint v1, uint v2) => v1 == v2,
                    (uint v) => (int)v,
                    (uint v) => v),
                keyComparer: new ValueComparer<uint>(
                    (uint v1, uint v2) => v1 == v2,
                    (uint v) => (int)v,
                    (uint v) => v),
                providerValueComparer: new ValueComparer<uint>(
                    (uint v1, uint v2) => v1 == v2,
                    (uint v) => (int)v,
                    (uint v) => v));
            failDestroySourceAmount.AddAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.None);
            failDestroySourceAmount.AddAnnotation("Relational:ColumnName", "fail_Destroy_Source_Amount");

            var failDestroySourceChance = runtimeEntityType.AddProperty(
                "FailDestroySourceChance",
                typeof(double),
                propertyInfo: typeof(Recipe).GetProperty("FailDestroySourceChance", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Recipe).GetField("<FailDestroySourceChance>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0.0);
            failDestroySourceChance.TypeMapping = MySqlDoubleTypeMapping.Default.Clone(
                comparer: new ValueComparer<double>(
                    (double v1, double v2) => v1.Equals(v2),
                    (double v) => v.GetHashCode(),
                    (double v) => v),
                keyComparer: new ValueComparer<double>(
                    (double v1, double v2) => v1.Equals(v2),
                    (double v) => v.GetHashCode(),
                    (double v) => v),
                providerValueComparer: new ValueComparer<double>(
                    (double v1, double v2) => v1.Equals(v2),
                    (double v) => v.GetHashCode(),
                    (double v) => v));
            failDestroySourceChance.AddAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.None);
            failDestroySourceChance.AddAnnotation("Relational:ColumnName", "fail_Destroy_Source_Chance");

            var failDestroySourceMessage = runtimeEntityType.AddProperty(
                "FailDestroySourceMessage",
                typeof(string),
                propertyInfo: typeof(Recipe).GetProperty("FailDestroySourceMessage", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Recipe).GetField("<FailDestroySourceMessage>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            failDestroySourceMessage.TypeMapping = MySqlStringTypeMapping.Default.Clone(
                comparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => v.GetHashCode(),
                    (string v) => v),
                keyComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => v.GetHashCode(),
                    (string v) => v),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => v.GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "text"),
                storeTypePostfix: StoreTypePostfix.None);
            failDestroySourceMessage.AddAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.None);
            failDestroySourceMessage.AddAnnotation("Relational:ColumnName", "fail_Destroy_Source_Message");
            failDestroySourceMessage.AddAnnotation("Relational:ColumnType", "text");

            var failDestroyTargetAmount = runtimeEntityType.AddProperty(
                "FailDestroyTargetAmount",
                typeof(uint),
                propertyInfo: typeof(Recipe).GetProperty("FailDestroyTargetAmount", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Recipe).GetField("<FailDestroyTargetAmount>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0u);
            failDestroyTargetAmount.TypeMapping = MySqlUIntTypeMapping.Default.Clone(
                comparer: new ValueComparer<uint>(
                    (uint v1, uint v2) => v1 == v2,
                    (uint v) => (int)v,
                    (uint v) => v),
                keyComparer: new ValueComparer<uint>(
                    (uint v1, uint v2) => v1 == v2,
                    (uint v) => (int)v,
                    (uint v) => v),
                providerValueComparer: new ValueComparer<uint>(
                    (uint v1, uint v2) => v1 == v2,
                    (uint v) => (int)v,
                    (uint v) => v));
            failDestroyTargetAmount.AddAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.None);
            failDestroyTargetAmount.AddAnnotation("Relational:ColumnName", "fail_Destroy_Target_Amount");

            var failDestroyTargetChance = runtimeEntityType.AddProperty(
                "FailDestroyTargetChance",
                typeof(double),
                propertyInfo: typeof(Recipe).GetProperty("FailDestroyTargetChance", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Recipe).GetField("<FailDestroyTargetChance>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0.0);
            failDestroyTargetChance.TypeMapping = MySqlDoubleTypeMapping.Default.Clone(
                comparer: new ValueComparer<double>(
                    (double v1, double v2) => v1.Equals(v2),
                    (double v) => v.GetHashCode(),
                    (double v) => v),
                keyComparer: new ValueComparer<double>(
                    (double v1, double v2) => v1.Equals(v2),
                    (double v) => v.GetHashCode(),
                    (double v) => v),
                providerValueComparer: new ValueComparer<double>(
                    (double v1, double v2) => v1.Equals(v2),
                    (double v) => v.GetHashCode(),
                    (double v) => v));
            failDestroyTargetChance.AddAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.None);
            failDestroyTargetChance.AddAnnotation("Relational:ColumnName", "fail_Destroy_Target_Chance");

            var failDestroyTargetMessage = runtimeEntityType.AddProperty(
                "FailDestroyTargetMessage",
                typeof(string),
                propertyInfo: typeof(Recipe).GetProperty("FailDestroyTargetMessage", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Recipe).GetField("<FailDestroyTargetMessage>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            failDestroyTargetMessage.TypeMapping = MySqlStringTypeMapping.Default.Clone(
                comparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => v.GetHashCode(),
                    (string v) => v),
                keyComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => v.GetHashCode(),
                    (string v) => v),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => v.GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "text"),
                storeTypePostfix: StoreTypePostfix.None);
            failDestroyTargetMessage.AddAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.None);
            failDestroyTargetMessage.AddAnnotation("Relational:ColumnName", "fail_Destroy_Target_Message");
            failDestroyTargetMessage.AddAnnotation("Relational:ColumnType", "text");

            var failMessage = runtimeEntityType.AddProperty(
                "FailMessage",
                typeof(string),
                propertyInfo: typeof(Recipe).GetProperty("FailMessage", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Recipe).GetField("<FailMessage>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            failMessage.TypeMapping = MySqlStringTypeMapping.Default.Clone(
                comparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => v.GetHashCode(),
                    (string v) => v),
                keyComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => v.GetHashCode(),
                    (string v) => v),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => v.GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "text"),
                storeTypePostfix: StoreTypePostfix.None);
            failMessage.AddAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.None);
            failMessage.AddAnnotation("Relational:ColumnName", "fail_Message");
            failMessage.AddAnnotation("Relational:ColumnType", "text");

            var failWCID = runtimeEntityType.AddProperty(
                "FailWCID",
                typeof(uint),
                propertyInfo: typeof(Recipe).GetProperty("FailWCID", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Recipe).GetField("<FailWCID>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0u);
            failWCID.TypeMapping = MySqlUIntTypeMapping.Default.Clone(
                comparer: new ValueComparer<uint>(
                    (uint v1, uint v2) => v1 == v2,
                    (uint v) => (int)v,
                    (uint v) => v),
                keyComparer: new ValueComparer<uint>(
                    (uint v1, uint v2) => v1 == v2,
                    (uint v) => (int)v,
                    (uint v) => v),
                providerValueComparer: new ValueComparer<uint>(
                    (uint v1, uint v2) => v1 == v2,
                    (uint v) => (int)v,
                    (uint v) => v));
            failWCID.AddAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.None);
            failWCID.AddAnnotation("Relational:ColumnName", "fail_W_C_I_D");

            var lastModified = runtimeEntityType.AddProperty(
                "LastModified",
                typeof(DateTime),
                propertyInfo: typeof(Recipe).GetProperty("LastModified", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Recipe).GetField("<LastModified>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAddOrUpdate,
                beforeSaveBehavior: PropertySaveBehavior.Ignore,
                afterSaveBehavior: PropertySaveBehavior.Ignore,
                sentinel: new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));
            lastModified.TypeMapping = MySqlDateTimeTypeMapping.Default.Clone(
                comparer: new ValueComparer<DateTime>(
                    (DateTime v1, DateTime v2) => v1.Equals(v2),
                    (DateTime v) => v.GetHashCode(),
                    (DateTime v) => v),
                keyComparer: new ValueComparer<DateTime>(
                    (DateTime v1, DateTime v2) => v1.Equals(v2),
                    (DateTime v) => v.GetHashCode(),
                    (DateTime v) => v),
                providerValueComparer: new ValueComparer<DateTime>(
                    (DateTime v1, DateTime v2) => v1.Equals(v2),
                    (DateTime v) => v.GetHashCode(),
                    (DateTime v) => v));
            lastModified.AddAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.ComputedColumn);
            lastModified.AddAnnotation("Relational:ColumnName", "last_Modified");
            lastModified.AddAnnotation("Relational:ColumnType", "datetime");
            lastModified.AddAnnotation("Relational:DefaultValueSql", "CURRENT_TIMESTAMP");

            var salvageType = runtimeEntityType.AddProperty(
                "SalvageType",
                typeof(uint),
                propertyInfo: typeof(Recipe).GetProperty("SalvageType", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Recipe).GetField("<SalvageType>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0u);
            salvageType.TypeMapping = MySqlUIntTypeMapping.Default.Clone(
                comparer: new ValueComparer<uint>(
                    (uint v1, uint v2) => v1 == v2,
                    (uint v) => (int)v,
                    (uint v) => v),
                keyComparer: new ValueComparer<uint>(
                    (uint v1, uint v2) => v1 == v2,
                    (uint v) => (int)v,
                    (uint v) => v),
                providerValueComparer: new ValueComparer<uint>(
                    (uint v1, uint v2) => v1 == v2,
                    (uint v) => (int)v,
                    (uint v) => v));
            salvageType.AddAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.None);
            salvageType.AddAnnotation("Relational:ColumnName", "salvage_Type");

            var skill = runtimeEntityType.AddProperty(
                "Skill",
                typeof(uint),
                propertyInfo: typeof(Recipe).GetProperty("Skill", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Recipe).GetField("<Skill>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0u);
            skill.TypeMapping = MySqlUIntTypeMapping.Default.Clone(
                comparer: new ValueComparer<uint>(
                    (uint v1, uint v2) => v1 == v2,
                    (uint v) => (int)v,
                    (uint v) => v),
                keyComparer: new ValueComparer<uint>(
                    (uint v1, uint v2) => v1 == v2,
                    (uint v) => (int)v,
                    (uint v) => v),
                providerValueComparer: new ValueComparer<uint>(
                    (uint v1, uint v2) => v1 == v2,
                    (uint v) => (int)v,
                    (uint v) => v));
            skill.AddAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.None);
            skill.AddAnnotation("Relational:ColumnName", "skill");

            var successAmount = runtimeEntityType.AddProperty(
                "SuccessAmount",
                typeof(uint),
                propertyInfo: typeof(Recipe).GetProperty("SuccessAmount", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Recipe).GetField("<SuccessAmount>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0u);
            successAmount.TypeMapping = MySqlUIntTypeMapping.Default.Clone(
                comparer: new ValueComparer<uint>(
                    (uint v1, uint v2) => v1 == v2,
                    (uint v) => (int)v,
                    (uint v) => v),
                keyComparer: new ValueComparer<uint>(
                    (uint v1, uint v2) => v1 == v2,
                    (uint v) => (int)v,
                    (uint v) => v),
                providerValueComparer: new ValueComparer<uint>(
                    (uint v1, uint v2) => v1 == v2,
                    (uint v) => (int)v,
                    (uint v) => v));
            successAmount.AddAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.None);
            successAmount.AddAnnotation("Relational:ColumnName", "success_Amount");

            var successDestroySourceAmount = runtimeEntityType.AddProperty(
                "SuccessDestroySourceAmount",
                typeof(uint),
                propertyInfo: typeof(Recipe).GetProperty("SuccessDestroySourceAmount", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Recipe).GetField("<SuccessDestroySourceAmount>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0u);
            successDestroySourceAmount.TypeMapping = MySqlUIntTypeMapping.Default.Clone(
                comparer: new ValueComparer<uint>(
                    (uint v1, uint v2) => v1 == v2,
                    (uint v) => (int)v,
                    (uint v) => v),
                keyComparer: new ValueComparer<uint>(
                    (uint v1, uint v2) => v1 == v2,
                    (uint v) => (int)v,
                    (uint v) => v),
                providerValueComparer: new ValueComparer<uint>(
                    (uint v1, uint v2) => v1 == v2,
                    (uint v) => (int)v,
                    (uint v) => v));
            successDestroySourceAmount.AddAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.None);
            successDestroySourceAmount.AddAnnotation("Relational:ColumnName", "success_Destroy_Source_Amount");

            var successDestroySourceChance = runtimeEntityType.AddProperty(
                "SuccessDestroySourceChance",
                typeof(double),
                propertyInfo: typeof(Recipe).GetProperty("SuccessDestroySourceChance", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Recipe).GetField("<SuccessDestroySourceChance>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0.0);
            successDestroySourceChance.TypeMapping = MySqlDoubleTypeMapping.Default.Clone(
                comparer: new ValueComparer<double>(
                    (double v1, double v2) => v1.Equals(v2),
                    (double v) => v.GetHashCode(),
                    (double v) => v),
                keyComparer: new ValueComparer<double>(
                    (double v1, double v2) => v1.Equals(v2),
                    (double v) => v.GetHashCode(),
                    (double v) => v),
                providerValueComparer: new ValueComparer<double>(
                    (double v1, double v2) => v1.Equals(v2),
                    (double v) => v.GetHashCode(),
                    (double v) => v));
            successDestroySourceChance.AddAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.None);
            successDestroySourceChance.AddAnnotation("Relational:ColumnName", "success_Destroy_Source_Chance");

            var successDestroySourceMessage = runtimeEntityType.AddProperty(
                "SuccessDestroySourceMessage",
                typeof(string),
                propertyInfo: typeof(Recipe).GetProperty("SuccessDestroySourceMessage", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Recipe).GetField("<SuccessDestroySourceMessage>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            successDestroySourceMessage.TypeMapping = MySqlStringTypeMapping.Default.Clone(
                comparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => v.GetHashCode(),
                    (string v) => v),
                keyComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => v.GetHashCode(),
                    (string v) => v),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => v.GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "text"),
                storeTypePostfix: StoreTypePostfix.None);
            successDestroySourceMessage.AddAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.None);
            successDestroySourceMessage.AddAnnotation("Relational:ColumnName", "success_Destroy_Source_Message");
            successDestroySourceMessage.AddAnnotation("Relational:ColumnType", "text");

            var successDestroyTargetAmount = runtimeEntityType.AddProperty(
                "SuccessDestroyTargetAmount",
                typeof(uint),
                propertyInfo: typeof(Recipe).GetProperty("SuccessDestroyTargetAmount", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Recipe).GetField("<SuccessDestroyTargetAmount>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0u);
            successDestroyTargetAmount.TypeMapping = MySqlUIntTypeMapping.Default.Clone(
                comparer: new ValueComparer<uint>(
                    (uint v1, uint v2) => v1 == v2,
                    (uint v) => (int)v,
                    (uint v) => v),
                keyComparer: new ValueComparer<uint>(
                    (uint v1, uint v2) => v1 == v2,
                    (uint v) => (int)v,
                    (uint v) => v),
                providerValueComparer: new ValueComparer<uint>(
                    (uint v1, uint v2) => v1 == v2,
                    (uint v) => (int)v,
                    (uint v) => v));
            successDestroyTargetAmount.AddAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.None);
            successDestroyTargetAmount.AddAnnotation("Relational:ColumnName", "success_Destroy_Target_Amount");

            var successDestroyTargetChance = runtimeEntityType.AddProperty(
                "SuccessDestroyTargetChance",
                typeof(double),
                propertyInfo: typeof(Recipe).GetProperty("SuccessDestroyTargetChance", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Recipe).GetField("<SuccessDestroyTargetChance>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0.0);
            successDestroyTargetChance.TypeMapping = MySqlDoubleTypeMapping.Default.Clone(
                comparer: new ValueComparer<double>(
                    (double v1, double v2) => v1.Equals(v2),
                    (double v) => v.GetHashCode(),
                    (double v) => v),
                keyComparer: new ValueComparer<double>(
                    (double v1, double v2) => v1.Equals(v2),
                    (double v) => v.GetHashCode(),
                    (double v) => v),
                providerValueComparer: new ValueComparer<double>(
                    (double v1, double v2) => v1.Equals(v2),
                    (double v) => v.GetHashCode(),
                    (double v) => v));
            successDestroyTargetChance.AddAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.None);
            successDestroyTargetChance.AddAnnotation("Relational:ColumnName", "success_Destroy_Target_Chance");

            var successDestroyTargetMessage = runtimeEntityType.AddProperty(
                "SuccessDestroyTargetMessage",
                typeof(string),
                propertyInfo: typeof(Recipe).GetProperty("SuccessDestroyTargetMessage", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Recipe).GetField("<SuccessDestroyTargetMessage>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            successDestroyTargetMessage.TypeMapping = MySqlStringTypeMapping.Default.Clone(
                comparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => v.GetHashCode(),
                    (string v) => v),
                keyComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => v.GetHashCode(),
                    (string v) => v),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => v.GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "text"),
                storeTypePostfix: StoreTypePostfix.None);
            successDestroyTargetMessage.AddAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.None);
            successDestroyTargetMessage.AddAnnotation("Relational:ColumnName", "success_Destroy_Target_Message");
            successDestroyTargetMessage.AddAnnotation("Relational:ColumnType", "text");

            var successMessage = runtimeEntityType.AddProperty(
                "SuccessMessage",
                typeof(string),
                propertyInfo: typeof(Recipe).GetProperty("SuccessMessage", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Recipe).GetField("<SuccessMessage>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            successMessage.TypeMapping = MySqlStringTypeMapping.Default.Clone(
                comparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => v.GetHashCode(),
                    (string v) => v),
                keyComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => v.GetHashCode(),
                    (string v) => v),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => v.GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "text"),
                storeTypePostfix: StoreTypePostfix.None);
            successMessage.AddAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.None);
            successMessage.AddAnnotation("Relational:ColumnName", "success_Message");
            successMessage.AddAnnotation("Relational:ColumnType", "text");

            var successWCID = runtimeEntityType.AddProperty(
                "SuccessWCID",
                typeof(uint),
                propertyInfo: typeof(Recipe).GetProperty("SuccessWCID", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Recipe).GetField("<SuccessWCID>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0u);
            successWCID.TypeMapping = MySqlUIntTypeMapping.Default.Clone(
                comparer: new ValueComparer<uint>(
                    (uint v1, uint v2) => v1 == v2,
                    (uint v) => (int)v,
                    (uint v) => v),
                keyComparer: new ValueComparer<uint>(
                    (uint v1, uint v2) => v1 == v2,
                    (uint v) => (int)v,
                    (uint v) => v),
                providerValueComparer: new ValueComparer<uint>(
                    (uint v1, uint v2) => v1 == v2,
                    (uint v) => (int)v,
                    (uint v) => v));
            successWCID.AddAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.None);
            successWCID.AddAnnotation("Relational:ColumnName", "success_W_C_I_D");

            var unknown1 = runtimeEntityType.AddProperty(
                "Unknown1",
                typeof(uint),
                propertyInfo: typeof(Recipe).GetProperty("Unknown1", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Recipe).GetField("<Unknown1>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0u);
            unknown1.TypeMapping = MySqlUIntTypeMapping.Default.Clone(
                comparer: new ValueComparer<uint>(
                    (uint v1, uint v2) => v1 == v2,
                    (uint v) => (int)v,
                    (uint v) => v),
                keyComparer: new ValueComparer<uint>(
                    (uint v1, uint v2) => v1 == v2,
                    (uint v) => (int)v,
                    (uint v) => v),
                providerValueComparer: new ValueComparer<uint>(
                    (uint v1, uint v2) => v1 == v2,
                    (uint v) => (int)v,
                    (uint v) => v));
            unknown1.AddAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.None);
            unknown1.AddAnnotation("Relational:ColumnName", "unknown_1");

            var key = runtimeEntityType.AddKey(
                new[] { id });
            runtimeEntityType.SetPrimaryKey(key);

            return runtimeEntityType;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "recipe");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
