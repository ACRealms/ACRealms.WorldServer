// <auto-generated />
using System;
using System.Collections.Generic;
using System.Reflection;
using ACE.Database.Models.World;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.ChangeTracking;
using Microsoft.EntityFrameworkCore.Metadata;
using Pomelo.EntityFrameworkCore.MySql.Storage.Internal;

#pragma warning disable 219, 612, 618
#nullable disable

namespace ACE.Database.CompiledModels.World
{
    internal partial class RealmRulesetLinksEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "ACE.Database.Models.World.RealmRulesetLinks",
                typeof(RealmRulesetLinks),
                baseEntityType);

            var realmId = runtimeEntityType.AddProperty(
                "RealmId",
                typeof(ushort),
                propertyInfo: typeof(RealmRulesetLinks).GetProperty("RealmId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RealmRulesetLinks).GetField("<RealmId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                afterSaveBehavior: PropertySaveBehavior.Throw,
                sentinel: (ushort)0);
            realmId.TypeMapping = MySqlUShortTypeMapping.Default.Clone(
                comparer: new ValueComparer<ushort>(
                    (ushort v1, ushort v2) => v1 == v2,
                    (ushort v) => (int)v,
                    (ushort v) => v),
                keyComparer: new ValueComparer<ushort>(
                    (ushort v1, ushort v2) => v1 == v2,
                    (ushort v) => (int)v,
                    (ushort v) => v),
                providerValueComparer: new ValueComparer<ushort>(
                    (ushort v1, ushort v2) => v1 == v2,
                    (ushort v) => (int)v,
                    (ushort v) => v));
            realmId.AddAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.None);
            realmId.AddAnnotation("Relational:ColumnName", "realm_id");

            var order = runtimeEntityType.AddProperty(
                "Order",
                typeof(ushort),
                propertyInfo: typeof(RealmRulesetLinks).GetProperty("Order", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RealmRulesetLinks).GetField("<Order>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                afterSaveBehavior: PropertySaveBehavior.Throw,
                sentinel: (ushort)0);
            order.TypeMapping = MySqlUShortTypeMapping.Default.Clone(
                comparer: new ValueComparer<ushort>(
                    (ushort v1, ushort v2) => v1 == v2,
                    (ushort v) => (int)v,
                    (ushort v) => v),
                keyComparer: new ValueComparer<ushort>(
                    (ushort v1, ushort v2) => v1 == v2,
                    (ushort v) => (int)v,
                    (ushort v) => v),
                providerValueComparer: new ValueComparer<ushort>(
                    (ushort v1, ushort v2) => v1 == v2,
                    (ushort v) => (int)v,
                    (ushort v) => v));
            order.AddAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.None);
            order.AddAnnotation("Relational:ColumnName", "order");

            var linkType = runtimeEntityType.AddProperty(
                "LinkType",
                typeof(ushort),
                propertyInfo: typeof(RealmRulesetLinks).GetProperty("LinkType", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RealmRulesetLinks).GetField("<LinkType>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: (ushort)0);
            linkType.TypeMapping = MySqlUShortTypeMapping.Default.Clone(
                comparer: new ValueComparer<ushort>(
                    (ushort v1, ushort v2) => v1 == v2,
                    (ushort v) => (int)v,
                    (ushort v) => v),
                keyComparer: new ValueComparer<ushort>(
                    (ushort v1, ushort v2) => v1 == v2,
                    (ushort v) => (int)v,
                    (ushort v) => v),
                providerValueComparer: new ValueComparer<ushort>(
                    (ushort v1, ushort v2) => v1 == v2,
                    (ushort v) => (int)v,
                    (ushort v) => v));
            linkType.AddAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.None);
            linkType.AddAnnotation("Relational:ColumnName", "link_type");

            var linkedRealmId = runtimeEntityType.AddProperty(
                "LinkedRealmId",
                typeof(ushort),
                propertyInfo: typeof(RealmRulesetLinks).GetProperty("LinkedRealmId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RealmRulesetLinks).GetField("<LinkedRealmId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: (ushort)0);
            linkedRealmId.TypeMapping = MySqlUShortTypeMapping.Default.Clone(
                comparer: new ValueComparer<ushort>(
                    (ushort v1, ushort v2) => v1 == v2,
                    (ushort v) => (int)v,
                    (ushort v) => v),
                keyComparer: new ValueComparer<ushort>(
                    (ushort v1, ushort v2) => v1 == v2,
                    (ushort v) => (int)v,
                    (ushort v) => v),
                providerValueComparer: new ValueComparer<ushort>(
                    (ushort v1, ushort v2) => v1 == v2,
                    (ushort v) => (int)v,
                    (ushort v) => v));
            linkedRealmId.AddAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.None);
            linkedRealmId.AddAnnotation("Relational:ColumnName", "linked_realm_id");

            var probability = runtimeEntityType.AddProperty(
                "Probability",
                typeof(double?),
                propertyInfo: typeof(RealmRulesetLinks).GetProperty("Probability", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RealmRulesetLinks).GetField("<Probability>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            probability.TypeMapping = MySqlDoubleTypeMapping.Default.Clone(
                comparer: new ValueComparer<double?>(
                    (Nullable<double> v1, Nullable<double> v2) => v1.HasValue && v2.HasValue && ((double)v1).Equals((double)v2) || !v1.HasValue && !v2.HasValue,
                    (Nullable<double> v) => v.HasValue ? ((double)v).GetHashCode() : 0,
                    (Nullable<double> v) => v.HasValue ? (Nullable<double>)(double)v : default(Nullable<double>)),
                keyComparer: new ValueComparer<double?>(
                    (Nullable<double> v1, Nullable<double> v2) => v1.HasValue && v2.HasValue && ((double)v1).Equals((double)v2) || !v1.HasValue && !v2.HasValue,
                    (Nullable<double> v) => v.HasValue ? ((double)v).GetHashCode() : 0,
                    (Nullable<double> v) => v.HasValue ? (Nullable<double>)(double)v : default(Nullable<double>)),
                providerValueComparer: new ValueComparer<double?>(
                    (Nullable<double> v1, Nullable<double> v2) => v1.HasValue && v2.HasValue && ((double)v1).Equals((double)v2) || !v1.HasValue && !v2.HasValue,
                    (Nullable<double> v) => v.HasValue ? ((double)v).GetHashCode() : 0,
                    (Nullable<double> v) => v.HasValue ? (Nullable<double>)(double)v : default(Nullable<double>)));
            probability.AddAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.None);
            probability.AddAnnotation("Relational:ColumnName", "probability");

            var probabilityGroup = runtimeEntityType.AddProperty(
                "ProbabilityGroup",
                typeof(byte?),
                propertyInfo: typeof(RealmRulesetLinks).GetProperty("ProbabilityGroup", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RealmRulesetLinks).GetField("<ProbabilityGroup>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            probabilityGroup.TypeMapping = MySqlByteTypeMapping.Default.Clone(
                comparer: new ValueComparer<byte?>(
                    (Nullable<byte> v1, Nullable<byte> v2) => v1.HasValue && v2.HasValue && (byte)v1 == (byte)v2 || !v1.HasValue && !v2.HasValue,
                    (Nullable<byte> v) => v.HasValue ? (int)(byte)v : 0,
                    (Nullable<byte> v) => v.HasValue ? (Nullable<byte>)(byte)v : default(Nullable<byte>)),
                keyComparer: new ValueComparer<byte?>(
                    (Nullable<byte> v1, Nullable<byte> v2) => v1.HasValue && v2.HasValue && (byte)v1 == (byte)v2 || !v1.HasValue && !v2.HasValue,
                    (Nullable<byte> v) => v.HasValue ? (int)(byte)v : 0,
                    (Nullable<byte> v) => v.HasValue ? (Nullable<byte>)(byte)v : default(Nullable<byte>)),
                providerValueComparer: new ValueComparer<byte?>(
                    (Nullable<byte> v1, Nullable<byte> v2) => v1.HasValue && v2.HasValue && (byte)v1 == (byte)v2 || !v1.HasValue && !v2.HasValue,
                    (Nullable<byte> v) => v.HasValue ? (int)(byte)v : 0,
                    (Nullable<byte> v) => v.HasValue ? (Nullable<byte>)(byte)v : default(Nullable<byte>)));
            probabilityGroup.AddAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.None);
            probabilityGroup.AddAnnotation("Relational:ColumnName", "probability_group");

            var key = runtimeEntityType.AddKey(
                new[] { realmId, order });
            runtimeEntityType.SetPrimaryKey(key);
            key.AddAnnotation("Relational:Name", "PRIMARY");

            var index = runtimeEntityType.AddIndex(
                new[] { linkedRealmId });
            index.AddAnnotation("Relational:Name", "realm_link_child");

            return runtimeEntityType;
        }

        public static RuntimeForeignKey CreateForeignKey1(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("LinkedRealmId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("Id") }),
                principalEntityType,
                deleteBehavior: DeleteBehavior.Cascade,
                required: true);

            var linkedRealm = declaringEntityType.AddNavigation("LinkedRealm",
                runtimeForeignKey,
                onDependent: true,
                typeof(Realm),
                propertyInfo: typeof(RealmRulesetLinks).GetProperty("LinkedRealm", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RealmRulesetLinks).GetField("<LinkedRealm>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var realmRulesetLinksLinkedRealm = principalEntityType.AddNavigation("RealmRulesetLinksLinkedRealm",
                runtimeForeignKey,
                onDependent: false,
                typeof(IList<RealmRulesetLinks>),
                propertyInfo: typeof(Realm).GetProperty("RealmRulesetLinksLinkedRealm", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Realm).GetField("<RealmRulesetLinksLinkedRealm>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "realm_link_child");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey2(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("RealmId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("Id") }),
                principalEntityType,
                deleteBehavior: DeleteBehavior.Cascade,
                required: true);

            var realm = declaringEntityType.AddNavigation("Realm",
                runtimeForeignKey,
                onDependent: true,
                typeof(Realm),
                propertyInfo: typeof(RealmRulesetLinks).GetProperty("Realm", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RealmRulesetLinks).GetField("<Realm>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var realmRulesetLinksRealm = principalEntityType.AddNavigation("RealmRulesetLinksRealm",
                runtimeForeignKey,
                onDependent: false,
                typeof(IList<RealmRulesetLinks>),
                propertyInfo: typeof(Realm).GetProperty("RealmRulesetLinksRealm", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Realm).GetField("<RealmRulesetLinksRealm>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "realm_link_parent");
            return runtimeForeignKey;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "realm_ruleset_links");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
