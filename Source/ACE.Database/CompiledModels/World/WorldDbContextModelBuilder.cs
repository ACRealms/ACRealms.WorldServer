// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using Microsoft.EntityFrameworkCore.Migrations;

#pragma warning disable 219, 612, 618
#nullable disable

namespace ACE.Database.CompiledModels.World
{
    public partial class WorldDbContextModel
    {
        partial void Initialize()
        {
            var cookBook = CookBookEntityType.Create(this);
            var encounter = EncounterEntityType.Create(this);
            var @event = EventEntityType.Create(this);
            var housePortal = HousePortalEntityType.Create(this);
            var landblockInstance = LandblockInstanceEntityType.Create(this);
            var landblockInstanceLink = LandblockInstanceLinkEntityType.Create(this);
            var pointsOfInterest = PointsOfInterestEntityType.Create(this);
            var quest = QuestEntityType.Create(this);
            var realm = RealmEntityType.Create(this);
            var realmPropertiesBool = RealmPropertiesBoolEntityType.Create(this);
            var realmPropertiesFloat = RealmPropertiesFloatEntityType.Create(this);
            var realmPropertiesInt = RealmPropertiesIntEntityType.Create(this);
            var realmPropertiesInt64 = RealmPropertiesInt64EntityType.Create(this);
            var realmPropertiesString = RealmPropertiesStringEntityType.Create(this);
            var realmRulesetLinks = RealmRulesetLinksEntityType.Create(this);
            var recipe = RecipeEntityType.Create(this);
            var recipeMod = RecipeModEntityType.Create(this);
            var recipeModsBool = RecipeModsBoolEntityType.Create(this);
            var recipeModsDID = RecipeModsDIDEntityType.Create(this);
            var recipeModsFloat = RecipeModsFloatEntityType.Create(this);
            var recipeModsIID = RecipeModsIIDEntityType.Create(this);
            var recipeModsInt = RecipeModsIntEntityType.Create(this);
            var recipeModsString = RecipeModsStringEntityType.Create(this);
            var recipeRequirementsBool = RecipeRequirementsBoolEntityType.Create(this);
            var recipeRequirementsDID = RecipeRequirementsDIDEntityType.Create(this);
            var recipeRequirementsFloat = RecipeRequirementsFloatEntityType.Create(this);
            var recipeRequirementsIID = RecipeRequirementsIIDEntityType.Create(this);
            var recipeRequirementsInt = RecipeRequirementsIntEntityType.Create(this);
            var recipeRequirementsString = RecipeRequirementsStringEntityType.Create(this);
            var spell = SpellEntityType.Create(this);
            var treasureDeath = TreasureDeathEntityType.Create(this);
            var treasureGemCount = TreasureGemCountEntityType.Create(this);
            var treasureMaterialBase = TreasureMaterialBaseEntityType.Create(this);
            var treasureMaterialColor = TreasureMaterialColorEntityType.Create(this);
            var treasureMaterialGroups = TreasureMaterialGroupsEntityType.Create(this);
            var treasureWielded = TreasureWieldedEntityType.Create(this);
            var version = VersionEntityType.Create(this);
            var weenie = WeenieEntityType.Create(this);
            var weeniePropertiesAnimPart = WeeniePropertiesAnimPartEntityType.Create(this);
            var weeniePropertiesAttribute = WeeniePropertiesAttributeEntityType.Create(this);
            var weeniePropertiesAttribute2nd = WeeniePropertiesAttribute2ndEntityType.Create(this);
            var weeniePropertiesBodyPart = WeeniePropertiesBodyPartEntityType.Create(this);
            var weeniePropertiesBook = WeeniePropertiesBookEntityType.Create(this);
            var weeniePropertiesBookPageData = WeeniePropertiesBookPageDataEntityType.Create(this);
            var weeniePropertiesBool = WeeniePropertiesBoolEntityType.Create(this);
            var weeniePropertiesCreateList = WeeniePropertiesCreateListEntityType.Create(this);
            var weeniePropertiesDID = WeeniePropertiesDIDEntityType.Create(this);
            var weeniePropertiesEmote = WeeniePropertiesEmoteEntityType.Create(this);
            var weeniePropertiesEmoteAction = WeeniePropertiesEmoteActionEntityType.Create(this);
            var weeniePropertiesEventFilter = WeeniePropertiesEventFilterEntityType.Create(this);
            var weeniePropertiesFloat = WeeniePropertiesFloatEntityType.Create(this);
            var weeniePropertiesGenerator = WeeniePropertiesGeneratorEntityType.Create(this);
            var weeniePropertiesIID = WeeniePropertiesIIDEntityType.Create(this);
            var weeniePropertiesInt = WeeniePropertiesIntEntityType.Create(this);
            var weeniePropertiesInt64 = WeeniePropertiesInt64EntityType.Create(this);
            var weeniePropertiesPalette = WeeniePropertiesPaletteEntityType.Create(this);
            var weeniePropertiesPosition = WeeniePropertiesPositionEntityType.Create(this);
            var weeniePropertiesSkill = WeeniePropertiesSkillEntityType.Create(this);
            var weeniePropertiesSpellBook = WeeniePropertiesSpellBookEntityType.Create(this);
            var weeniePropertiesString = WeeniePropertiesStringEntityType.Create(this);
            var weeniePropertiesTextureMap = WeeniePropertiesTextureMapEntityType.Create(this);

            CookBookEntityType.CreateForeignKey1(cookBook, recipe);
            LandblockInstanceLinkEntityType.CreateForeignKey1(landblockInstanceLink, landblockInstance);
            RealmPropertiesBoolEntityType.CreateForeignKey1(realmPropertiesBool, realm);
            RealmPropertiesFloatEntityType.CreateForeignKey1(realmPropertiesFloat, realm);
            RealmPropertiesIntEntityType.CreateForeignKey1(realmPropertiesInt, realm);
            RealmPropertiesInt64EntityType.CreateForeignKey1(realmPropertiesInt64, realm);
            RealmPropertiesStringEntityType.CreateForeignKey1(realmPropertiesString, realm);
            RealmRulesetLinksEntityType.CreateForeignKey1(realmRulesetLinks, realm);
            RealmRulesetLinksEntityType.CreateForeignKey2(realmRulesetLinks, realm);
            RecipeModEntityType.CreateForeignKey1(recipeMod, recipe);
            RecipeModsBoolEntityType.CreateForeignKey1(recipeModsBool, recipeMod);
            RecipeModsDIDEntityType.CreateForeignKey1(recipeModsDID, recipeMod);
            RecipeModsFloatEntityType.CreateForeignKey1(recipeModsFloat, recipeMod);
            RecipeModsIIDEntityType.CreateForeignKey1(recipeModsIID, recipeMod);
            RecipeModsIntEntityType.CreateForeignKey1(recipeModsInt, recipeMod);
            RecipeModsStringEntityType.CreateForeignKey1(recipeModsString, recipeMod);
            RecipeRequirementsBoolEntityType.CreateForeignKey1(recipeRequirementsBool, recipe);
            RecipeRequirementsDIDEntityType.CreateForeignKey1(recipeRequirementsDID, recipe);
            RecipeRequirementsFloatEntityType.CreateForeignKey1(recipeRequirementsFloat, recipe);
            RecipeRequirementsIIDEntityType.CreateForeignKey1(recipeRequirementsIID, recipe);
            RecipeRequirementsIntEntityType.CreateForeignKey1(recipeRequirementsInt, recipe);
            RecipeRequirementsStringEntityType.CreateForeignKey1(recipeRequirementsString, recipe);
            WeeniePropertiesAnimPartEntityType.CreateForeignKey1(weeniePropertiesAnimPart, weenie);
            WeeniePropertiesAttributeEntityType.CreateForeignKey1(weeniePropertiesAttribute, weenie);
            WeeniePropertiesAttribute2ndEntityType.CreateForeignKey1(weeniePropertiesAttribute2nd, weenie);
            WeeniePropertiesBodyPartEntityType.CreateForeignKey1(weeniePropertiesBodyPart, weenie);
            WeeniePropertiesBookEntityType.CreateForeignKey1(weeniePropertiesBook, weenie);
            WeeniePropertiesBookPageDataEntityType.CreateForeignKey1(weeniePropertiesBookPageData, weenie);
            WeeniePropertiesBoolEntityType.CreateForeignKey1(weeniePropertiesBool, weenie);
            WeeniePropertiesCreateListEntityType.CreateForeignKey1(weeniePropertiesCreateList, weenie);
            WeeniePropertiesDIDEntityType.CreateForeignKey1(weeniePropertiesDID, weenie);
            WeeniePropertiesEmoteEntityType.CreateForeignKey1(weeniePropertiesEmote, weenie);
            WeeniePropertiesEmoteActionEntityType.CreateForeignKey1(weeniePropertiesEmoteAction, weeniePropertiesEmote);
            WeeniePropertiesEventFilterEntityType.CreateForeignKey1(weeniePropertiesEventFilter, weenie);
            WeeniePropertiesFloatEntityType.CreateForeignKey1(weeniePropertiesFloat, weenie);
            WeeniePropertiesGeneratorEntityType.CreateForeignKey1(weeniePropertiesGenerator, weenie);
            WeeniePropertiesIIDEntityType.CreateForeignKey1(weeniePropertiesIID, weenie);
            WeeniePropertiesIntEntityType.CreateForeignKey1(weeniePropertiesInt, weenie);
            WeeniePropertiesInt64EntityType.CreateForeignKey1(weeniePropertiesInt64, weenie);
            WeeniePropertiesPaletteEntityType.CreateForeignKey1(weeniePropertiesPalette, weenie);
            WeeniePropertiesPositionEntityType.CreateForeignKey1(weeniePropertiesPosition, weenie);
            WeeniePropertiesSkillEntityType.CreateForeignKey1(weeniePropertiesSkill, weenie);
            WeeniePropertiesSpellBookEntityType.CreateForeignKey1(weeniePropertiesSpellBook, weenie);
            WeeniePropertiesStringEntityType.CreateForeignKey1(weeniePropertiesString, weenie);
            WeeniePropertiesTextureMapEntityType.CreateForeignKey1(weeniePropertiesTextureMap, weenie);

            CookBookEntityType.CreateAnnotations(cookBook);
            EncounterEntityType.CreateAnnotations(encounter);
            EventEntityType.CreateAnnotations(@event);
            HousePortalEntityType.CreateAnnotations(housePortal);
            LandblockInstanceEntityType.CreateAnnotations(landblockInstance);
            LandblockInstanceLinkEntityType.CreateAnnotations(landblockInstanceLink);
            PointsOfInterestEntityType.CreateAnnotations(pointsOfInterest);
            QuestEntityType.CreateAnnotations(quest);
            RealmEntityType.CreateAnnotations(realm);
            RealmPropertiesBoolEntityType.CreateAnnotations(realmPropertiesBool);
            RealmPropertiesFloatEntityType.CreateAnnotations(realmPropertiesFloat);
            RealmPropertiesIntEntityType.CreateAnnotations(realmPropertiesInt);
            RealmPropertiesInt64EntityType.CreateAnnotations(realmPropertiesInt64);
            RealmPropertiesStringEntityType.CreateAnnotations(realmPropertiesString);
            RealmRulesetLinksEntityType.CreateAnnotations(realmRulesetLinks);
            RecipeEntityType.CreateAnnotations(recipe);
            RecipeModEntityType.CreateAnnotations(recipeMod);
            RecipeModsBoolEntityType.CreateAnnotations(recipeModsBool);
            RecipeModsDIDEntityType.CreateAnnotations(recipeModsDID);
            RecipeModsFloatEntityType.CreateAnnotations(recipeModsFloat);
            RecipeModsIIDEntityType.CreateAnnotations(recipeModsIID);
            RecipeModsIntEntityType.CreateAnnotations(recipeModsInt);
            RecipeModsStringEntityType.CreateAnnotations(recipeModsString);
            RecipeRequirementsBoolEntityType.CreateAnnotations(recipeRequirementsBool);
            RecipeRequirementsDIDEntityType.CreateAnnotations(recipeRequirementsDID);
            RecipeRequirementsFloatEntityType.CreateAnnotations(recipeRequirementsFloat);
            RecipeRequirementsIIDEntityType.CreateAnnotations(recipeRequirementsIID);
            RecipeRequirementsIntEntityType.CreateAnnotations(recipeRequirementsInt);
            RecipeRequirementsStringEntityType.CreateAnnotations(recipeRequirementsString);
            SpellEntityType.CreateAnnotations(spell);
            TreasureDeathEntityType.CreateAnnotations(treasureDeath);
            TreasureGemCountEntityType.CreateAnnotations(treasureGemCount);
            TreasureMaterialBaseEntityType.CreateAnnotations(treasureMaterialBase);
            TreasureMaterialColorEntityType.CreateAnnotations(treasureMaterialColor);
            TreasureMaterialGroupsEntityType.CreateAnnotations(treasureMaterialGroups);
            TreasureWieldedEntityType.CreateAnnotations(treasureWielded);
            VersionEntityType.CreateAnnotations(version);
            WeenieEntityType.CreateAnnotations(weenie);
            WeeniePropertiesAnimPartEntityType.CreateAnnotations(weeniePropertiesAnimPart);
            WeeniePropertiesAttributeEntityType.CreateAnnotations(weeniePropertiesAttribute);
            WeeniePropertiesAttribute2ndEntityType.CreateAnnotations(weeniePropertiesAttribute2nd);
            WeeniePropertiesBodyPartEntityType.CreateAnnotations(weeniePropertiesBodyPart);
            WeeniePropertiesBookEntityType.CreateAnnotations(weeniePropertiesBook);
            WeeniePropertiesBookPageDataEntityType.CreateAnnotations(weeniePropertiesBookPageData);
            WeeniePropertiesBoolEntityType.CreateAnnotations(weeniePropertiesBool);
            WeeniePropertiesCreateListEntityType.CreateAnnotations(weeniePropertiesCreateList);
            WeeniePropertiesDIDEntityType.CreateAnnotations(weeniePropertiesDID);
            WeeniePropertiesEmoteEntityType.CreateAnnotations(weeniePropertiesEmote);
            WeeniePropertiesEmoteActionEntityType.CreateAnnotations(weeniePropertiesEmoteAction);
            WeeniePropertiesEventFilterEntityType.CreateAnnotations(weeniePropertiesEventFilter);
            WeeniePropertiesFloatEntityType.CreateAnnotations(weeniePropertiesFloat);
            WeeniePropertiesGeneratorEntityType.CreateAnnotations(weeniePropertiesGenerator);
            WeeniePropertiesIIDEntityType.CreateAnnotations(weeniePropertiesIID);
            WeeniePropertiesIntEntityType.CreateAnnotations(weeniePropertiesInt);
            WeeniePropertiesInt64EntityType.CreateAnnotations(weeniePropertiesInt64);
            WeeniePropertiesPaletteEntityType.CreateAnnotations(weeniePropertiesPalette);
            WeeniePropertiesPositionEntityType.CreateAnnotations(weeniePropertiesPosition);
            WeeniePropertiesSkillEntityType.CreateAnnotations(weeniePropertiesSkill);
            WeeniePropertiesSpellBookEntityType.CreateAnnotations(weeniePropertiesSpellBook);
            WeeniePropertiesStringEntityType.CreateAnnotations(weeniePropertiesString);
            WeeniePropertiesTextureMapEntityType.CreateAnnotations(weeniePropertiesTextureMap);

            AddAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);
            AddAnnotation("ProductVersion", "8.0.7");
            AddAnnotation("Relational:MaxIdentifierLength", 64);
            AddRuntimeAnnotation("Relational:RelationalModel", CreateRelationalModel());
        }

        private IRelationalModel CreateRelationalModel()
        {
            var relationalModel = new RelationalModel(this);

            var cookBook = FindEntityType("ACE.Database.Models.World.CookBook")!;

            var defaultTableMappings = new List<TableMappingBase<ColumnMappingBase>>();
            cookBook.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings);
            var aCEDatabaseModelsWorldCookBookTableBase = new TableBase("ACE.Database.Models.World.CookBook", null, relationalModel);
            var idColumnBase = new ColumnBase<ColumnMappingBase>("id", "int unsigned", aCEDatabaseModelsWorldCookBookTableBase);
            aCEDatabaseModelsWorldCookBookTableBase.Columns.Add("id", idColumnBase);
            var last_ModifiedColumnBase = new ColumnBase<ColumnMappingBase>("last_Modified", "datetime", aCEDatabaseModelsWorldCookBookTableBase);
            aCEDatabaseModelsWorldCookBookTableBase.Columns.Add("last_Modified", last_ModifiedColumnBase);
            var recipe_IdColumnBase = new ColumnBase<ColumnMappingBase>("recipe_Id", "int unsigned", aCEDatabaseModelsWorldCookBookTableBase);
            aCEDatabaseModelsWorldCookBookTableBase.Columns.Add("recipe_Id", recipe_IdColumnBase);
            var source_W_C_I_DColumnBase = new ColumnBase<ColumnMappingBase>("source_W_C_I_D", "int unsigned", aCEDatabaseModelsWorldCookBookTableBase);
            aCEDatabaseModelsWorldCookBookTableBase.Columns.Add("source_W_C_I_D", source_W_C_I_DColumnBase);
            var target_W_C_I_DColumnBase = new ColumnBase<ColumnMappingBase>("target_W_C_I_D", "int unsigned", aCEDatabaseModelsWorldCookBookTableBase);
            aCEDatabaseModelsWorldCookBookTableBase.Columns.Add("target_W_C_I_D", target_W_C_I_DColumnBase);
            relationalModel.DefaultTables.Add("ACE.Database.Models.World.CookBook", aCEDatabaseModelsWorldCookBookTableBase);
            var aCEDatabaseModelsWorldCookBookMappingBase = new TableMappingBase<ColumnMappingBase>(cookBook, aCEDatabaseModelsWorldCookBookTableBase, true);
            aCEDatabaseModelsWorldCookBookTableBase.AddTypeMapping(aCEDatabaseModelsWorldCookBookMappingBase, false);
            defaultTableMappings.Add(aCEDatabaseModelsWorldCookBookMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase, cookBook.FindProperty("Id")!, aCEDatabaseModelsWorldCookBookMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)last_ModifiedColumnBase, cookBook.FindProperty("LastModified")!, aCEDatabaseModelsWorldCookBookMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)recipe_IdColumnBase, cookBook.FindProperty("RecipeId")!, aCEDatabaseModelsWorldCookBookMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)source_W_C_I_DColumnBase, cookBook.FindProperty("SourceWCID")!, aCEDatabaseModelsWorldCookBookMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)target_W_C_I_DColumnBase, cookBook.FindProperty("TargetWCID")!, aCEDatabaseModelsWorldCookBookMappingBase);

            var tableMappings = new List<TableMapping>();
            cookBook.SetRuntimeAnnotation("Relational:TableMappings", tableMappings);
            var cook_bookTable = new Table("cook_book", null, relationalModel);
            var idColumn = new Column("id", "int unsigned", cook_bookTable);
            cook_bookTable.Columns.Add("id", idColumn);
            var last_ModifiedColumn = new Column("last_Modified", "datetime", cook_bookTable);
            cook_bookTable.Columns.Add("last_Modified", last_ModifiedColumn);
            var recipe_IdColumn = new Column("recipe_Id", "int unsigned", cook_bookTable);
            cook_bookTable.Columns.Add("recipe_Id", recipe_IdColumn);
            var source_W_C_I_DColumn = new Column("source_W_C_I_D", "int unsigned", cook_bookTable);
            cook_bookTable.Columns.Add("source_W_C_I_D", source_W_C_I_DColumn);
            var target_W_C_I_DColumn = new Column("target_W_C_I_D", "int unsigned", cook_bookTable);
            cook_bookTable.Columns.Add("target_W_C_I_D", target_W_C_I_DColumn);
            var pK_cook_book = new UniqueConstraint("PK_cook_book", cook_bookTable, new[] { idColumn });
            cook_bookTable.PrimaryKey = pK_cook_book;
            var pK_cook_bookUc = RelationalModel.GetKey(this,
                "ACE.Database.Models.World.CookBook",
                new[] { "Id" });
            pK_cook_book.MappedKeys.Add(pK_cook_bookUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_cook_bookUc).Add(pK_cook_book);
            cook_bookTable.UniqueConstraints.Add("PK_cook_book", pK_cook_book);
            var recipe_source_target_uidx = new TableIndex(
            "recipe_source_target_uidx", cook_bookTable, new[] { recipe_IdColumn, source_W_C_I_DColumn, target_W_C_I_DColumn }, true);
            var recipe_source_target_uidxIx = RelationalModel.GetIndex(this,
                "ACE.Database.Models.World.CookBook",
                "recipe_source_target_uidx");
            recipe_source_target_uidx.MappedIndexes.Add(recipe_source_target_uidxIx);
            RelationalModel.GetOrCreateTableIndexes(recipe_source_target_uidxIx).Add(recipe_source_target_uidx);
            cook_bookTable.Indexes.Add("recipe_source_target_uidx", recipe_source_target_uidx);
            var source_idx = new TableIndex(
            "source_idx", cook_bookTable, new[] { source_W_C_I_DColumn }, false);
            var source_idxIx = RelationalModel.GetIndex(this,
                "ACE.Database.Models.World.CookBook",
                "source_idx");
            source_idx.MappedIndexes.Add(source_idxIx);
            RelationalModel.GetOrCreateTableIndexes(source_idxIx).Add(source_idx);
            cook_bookTable.Indexes.Add("source_idx", source_idx);
            var target_idx = new TableIndex(
            "target_idx", cook_bookTable, new[] { target_W_C_I_DColumn }, false);
            var target_idxIx = RelationalModel.GetIndex(this,
                "ACE.Database.Models.World.CookBook",
                "target_idx");
            target_idx.MappedIndexes.Add(target_idxIx);
            RelationalModel.GetOrCreateTableIndexes(target_idxIx).Add(target_idx);
            cook_bookTable.Indexes.Add("target_idx", target_idx);
            relationalModel.Tables.Add(("cook_book", null), cook_bookTable);
            var cook_bookTableMapping = new TableMapping(cookBook, cook_bookTable, true);
            cook_bookTable.AddTypeMapping(cook_bookTableMapping, false);
            tableMappings.Add(cook_bookTableMapping);
            RelationalModel.CreateColumnMapping(idColumn, cookBook.FindProperty("Id")!, cook_bookTableMapping);
            RelationalModel.CreateColumnMapping(last_ModifiedColumn, cookBook.FindProperty("LastModified")!, cook_bookTableMapping);
            RelationalModel.CreateColumnMapping(recipe_IdColumn, cookBook.FindProperty("RecipeId")!, cook_bookTableMapping);
            RelationalModel.CreateColumnMapping(source_W_C_I_DColumn, cookBook.FindProperty("SourceWCID")!, cook_bookTableMapping);
            RelationalModel.CreateColumnMapping(target_W_C_I_DColumn, cookBook.FindProperty("TargetWCID")!, cook_bookTableMapping);

            var encounter = FindEntityType("ACE.Database.Models.World.Encounter")!;

            var defaultTableMappings0 = new List<TableMappingBase<ColumnMappingBase>>();
            encounter.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings0);
            var aCEDatabaseModelsWorldEncounterTableBase = new TableBase("ACE.Database.Models.World.Encounter", null, relationalModel);
            var cell_XColumnBase = new ColumnBase<ColumnMappingBase>("cell_X", "int", aCEDatabaseModelsWorldEncounterTableBase);
            aCEDatabaseModelsWorldEncounterTableBase.Columns.Add("cell_X", cell_XColumnBase);
            var cell_YColumnBase = new ColumnBase<ColumnMappingBase>("cell_Y", "int", aCEDatabaseModelsWorldEncounterTableBase);
            aCEDatabaseModelsWorldEncounterTableBase.Columns.Add("cell_Y", cell_YColumnBase);
            var idColumnBase0 = new ColumnBase<ColumnMappingBase>("id", "int unsigned", aCEDatabaseModelsWorldEncounterTableBase);
            aCEDatabaseModelsWorldEncounterTableBase.Columns.Add("id", idColumnBase0);
            var landblockColumnBase = new ColumnBase<ColumnMappingBase>("landblock", "int", aCEDatabaseModelsWorldEncounterTableBase);
            aCEDatabaseModelsWorldEncounterTableBase.Columns.Add("landblock", landblockColumnBase);
            var last_ModifiedColumnBase0 = new ColumnBase<ColumnMappingBase>("last_Modified", "datetime", aCEDatabaseModelsWorldEncounterTableBase);
            aCEDatabaseModelsWorldEncounterTableBase.Columns.Add("last_Modified", last_ModifiedColumnBase0);
            var weenie_Class_IdColumnBase = new ColumnBase<ColumnMappingBase>("weenie_Class_Id", "int unsigned", aCEDatabaseModelsWorldEncounterTableBase);
            aCEDatabaseModelsWorldEncounterTableBase.Columns.Add("weenie_Class_Id", weenie_Class_IdColumnBase);
            relationalModel.DefaultTables.Add("ACE.Database.Models.World.Encounter", aCEDatabaseModelsWorldEncounterTableBase);
            var aCEDatabaseModelsWorldEncounterMappingBase = new TableMappingBase<ColumnMappingBase>(encounter, aCEDatabaseModelsWorldEncounterTableBase, true);
            aCEDatabaseModelsWorldEncounterTableBase.AddTypeMapping(aCEDatabaseModelsWorldEncounterMappingBase, false);
            defaultTableMappings0.Add(aCEDatabaseModelsWorldEncounterMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase0, encounter.FindProperty("Id")!, aCEDatabaseModelsWorldEncounterMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)cell_XColumnBase, encounter.FindProperty("CellX")!, aCEDatabaseModelsWorldEncounterMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)cell_YColumnBase, encounter.FindProperty("CellY")!, aCEDatabaseModelsWorldEncounterMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)landblockColumnBase, encounter.FindProperty("Landblock")!, aCEDatabaseModelsWorldEncounterMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)last_ModifiedColumnBase0, encounter.FindProperty("LastModified")!, aCEDatabaseModelsWorldEncounterMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)weenie_Class_IdColumnBase, encounter.FindProperty("WeenieClassId")!, aCEDatabaseModelsWorldEncounterMappingBase);

            var tableMappings0 = new List<TableMapping>();
            encounter.SetRuntimeAnnotation("Relational:TableMappings", tableMappings0);
            var encounterTable = new Table("encounter", null, relationalModel);
            var idColumn0 = new Column("id", "int unsigned", encounterTable);
            encounterTable.Columns.Add("id", idColumn0);
            var cell_XColumn = new Column("cell_X", "int", encounterTable);
            encounterTable.Columns.Add("cell_X", cell_XColumn);
            var cell_YColumn = new Column("cell_Y", "int", encounterTable);
            encounterTable.Columns.Add("cell_Y", cell_YColumn);
            var landblockColumn = new Column("landblock", "int", encounterTable);
            encounterTable.Columns.Add("landblock", landblockColumn);
            var last_ModifiedColumn0 = new Column("last_Modified", "datetime", encounterTable);
            encounterTable.Columns.Add("last_Modified", last_ModifiedColumn0);
            var weenie_Class_IdColumn = new Column("weenie_Class_Id", "int unsigned", encounterTable);
            encounterTable.Columns.Add("weenie_Class_Id", weenie_Class_IdColumn);
            var pK_encounter = new UniqueConstraint("PK_encounter", encounterTable, new[] { idColumn0 });
            encounterTable.PrimaryKey = pK_encounter;
            var pK_encounterUc = RelationalModel.GetKey(this,
                "ACE.Database.Models.World.Encounter",
                new[] { "Id" });
            pK_encounter.MappedKeys.Add(pK_encounterUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_encounterUc).Add(pK_encounter);
            encounterTable.UniqueConstraints.Add("PK_encounter", pK_encounter);
            var landblock_cellx_celly_uidx = new TableIndex(
            "landblock_cellx_celly_uidx", encounterTable, new[] { landblockColumn, cell_XColumn, cell_YColumn }, true);
            var landblock_cellx_celly_uidxIx = RelationalModel.GetIndex(this,
                "ACE.Database.Models.World.Encounter",
                "landblock_cellx_celly_uidx");
            landblock_cellx_celly_uidx.MappedIndexes.Add(landblock_cellx_celly_uidxIx);
            RelationalModel.GetOrCreateTableIndexes(landblock_cellx_celly_uidxIx).Add(landblock_cellx_celly_uidx);
            encounterTable.Indexes.Add("landblock_cellx_celly_uidx", landblock_cellx_celly_uidx);
            var landblock_idx = new TableIndex(
            "landblock_idx", encounterTable, new[] { landblockColumn }, false);
            var landblock_idxIx = RelationalModel.GetIndex(this,
                "ACE.Database.Models.World.Encounter",
                "landblock_idx");
            landblock_idx.MappedIndexes.Add(landblock_idxIx);
            RelationalModel.GetOrCreateTableIndexes(landblock_idxIx).Add(landblock_idx);
            encounterTable.Indexes.Add("landblock_idx", landblock_idx);
            relationalModel.Tables.Add(("encounter", null), encounterTable);
            var encounterTableMapping = new TableMapping(encounter, encounterTable, true);
            encounterTable.AddTypeMapping(encounterTableMapping, false);
            tableMappings0.Add(encounterTableMapping);
            RelationalModel.CreateColumnMapping(idColumn0, encounter.FindProperty("Id")!, encounterTableMapping);
            RelationalModel.CreateColumnMapping(cell_XColumn, encounter.FindProperty("CellX")!, encounterTableMapping);
            RelationalModel.CreateColumnMapping(cell_YColumn, encounter.FindProperty("CellY")!, encounterTableMapping);
            RelationalModel.CreateColumnMapping(landblockColumn, encounter.FindProperty("Landblock")!, encounterTableMapping);
            RelationalModel.CreateColumnMapping(last_ModifiedColumn0, encounter.FindProperty("LastModified")!, encounterTableMapping);
            RelationalModel.CreateColumnMapping(weenie_Class_IdColumn, encounter.FindProperty("WeenieClassId")!, encounterTableMapping);

            var @event = FindEntityType("ACE.Database.Models.World.Event")!;

            var defaultTableMappings1 = new List<TableMappingBase<ColumnMappingBase>>();
            @event.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings1);
            var aCEDatabaseModelsWorldEventTableBase = new TableBase("ACE.Database.Models.World.Event", null, relationalModel);
            var end_TimeColumnBase = new ColumnBase<ColumnMappingBase>("end_Time", "int", aCEDatabaseModelsWorldEventTableBase);
            aCEDatabaseModelsWorldEventTableBase.Columns.Add("end_Time", end_TimeColumnBase);
            var idColumnBase1 = new ColumnBase<ColumnMappingBase>("id", "int unsigned", aCEDatabaseModelsWorldEventTableBase);
            aCEDatabaseModelsWorldEventTableBase.Columns.Add("id", idColumnBase1);
            var last_ModifiedColumnBase1 = new ColumnBase<ColumnMappingBase>("last_Modified", "datetime", aCEDatabaseModelsWorldEventTableBase);
            aCEDatabaseModelsWorldEventTableBase.Columns.Add("last_Modified", last_ModifiedColumnBase1);
            var nameColumnBase = new ColumnBase<ColumnMappingBase>("name", "varchar(255)", aCEDatabaseModelsWorldEventTableBase);
            aCEDatabaseModelsWorldEventTableBase.Columns.Add("name", nameColumnBase);
            var start_TimeColumnBase = new ColumnBase<ColumnMappingBase>("start_Time", "int", aCEDatabaseModelsWorldEventTableBase);
            aCEDatabaseModelsWorldEventTableBase.Columns.Add("start_Time", start_TimeColumnBase);
            var stateColumnBase = new ColumnBase<ColumnMappingBase>("state", "int", aCEDatabaseModelsWorldEventTableBase);
            aCEDatabaseModelsWorldEventTableBase.Columns.Add("state", stateColumnBase);
            relationalModel.DefaultTables.Add("ACE.Database.Models.World.Event", aCEDatabaseModelsWorldEventTableBase);
            var aCEDatabaseModelsWorldEventMappingBase = new TableMappingBase<ColumnMappingBase>(@event, aCEDatabaseModelsWorldEventTableBase, true);
            aCEDatabaseModelsWorldEventTableBase.AddTypeMapping(aCEDatabaseModelsWorldEventMappingBase, false);
            defaultTableMappings1.Add(aCEDatabaseModelsWorldEventMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase1, @event.FindProperty("Id")!, aCEDatabaseModelsWorldEventMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)end_TimeColumnBase, @event.FindProperty("EndTime")!, aCEDatabaseModelsWorldEventMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)last_ModifiedColumnBase1, @event.FindProperty("LastModified")!, aCEDatabaseModelsWorldEventMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nameColumnBase, @event.FindProperty("Name")!, aCEDatabaseModelsWorldEventMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)start_TimeColumnBase, @event.FindProperty("StartTime")!, aCEDatabaseModelsWorldEventMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)stateColumnBase, @event.FindProperty("State")!, aCEDatabaseModelsWorldEventMappingBase);

            var tableMappings1 = new List<TableMapping>();
            @event.SetRuntimeAnnotation("Relational:TableMappings", tableMappings1);
            var eventTable = new Table("event", null, relationalModel);
            var idColumn1 = new Column("id", "int unsigned", eventTable);
            eventTable.Columns.Add("id", idColumn1);
            var end_TimeColumn = new Column("end_Time", "int", eventTable);
            eventTable.Columns.Add("end_Time", end_TimeColumn);
            var last_ModifiedColumn1 = new Column("last_Modified", "datetime", eventTable);
            eventTable.Columns.Add("last_Modified", last_ModifiedColumn1);
            var nameColumn = new Column("name", "varchar(255)", eventTable);
            eventTable.Columns.Add("name", nameColumn);
            var start_TimeColumn = new Column("start_Time", "int", eventTable);
            eventTable.Columns.Add("start_Time", start_TimeColumn);
            var stateColumn = new Column("state", "int", eventTable);
            eventTable.Columns.Add("state", stateColumn);
            var pK_event = new UniqueConstraint("PK_event", eventTable, new[] { idColumn1 });
            eventTable.PrimaryKey = pK_event;
            var pK_eventUc = RelationalModel.GetKey(this,
                "ACE.Database.Models.World.Event",
                new[] { "Id" });
            pK_event.MappedKeys.Add(pK_eventUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_eventUc).Add(pK_event);
            eventTable.UniqueConstraints.Add("PK_event", pK_event);
            var name_UNIQUE = new TableIndex(
            "name_UNIQUE", eventTable, new[] { nameColumn }, true);
            var name_UNIQUEIx = RelationalModel.GetIndex(this,
                "ACE.Database.Models.World.Event",
                "name_UNIQUE");
            name_UNIQUE.MappedIndexes.Add(name_UNIQUEIx);
            RelationalModel.GetOrCreateTableIndexes(name_UNIQUEIx).Add(name_UNIQUE);
            eventTable.Indexes.Add("name_UNIQUE", name_UNIQUE);
            relationalModel.Tables.Add(("event", null), eventTable);
            var eventTableMapping = new TableMapping(@event, eventTable, true);
            eventTable.AddTypeMapping(eventTableMapping, false);
            tableMappings1.Add(eventTableMapping);
            RelationalModel.CreateColumnMapping(idColumn1, @event.FindProperty("Id")!, eventTableMapping);
            RelationalModel.CreateColumnMapping(end_TimeColumn, @event.FindProperty("EndTime")!, eventTableMapping);
            RelationalModel.CreateColumnMapping(last_ModifiedColumn1, @event.FindProperty("LastModified")!, eventTableMapping);
            RelationalModel.CreateColumnMapping(nameColumn, @event.FindProperty("Name")!, eventTableMapping);
            RelationalModel.CreateColumnMapping(start_TimeColumn, @event.FindProperty("StartTime")!, eventTableMapping);
            RelationalModel.CreateColumnMapping(stateColumn, @event.FindProperty("State")!, eventTableMapping);

            var housePortal = FindEntityType("ACE.Database.Models.World.HousePortal")!;

            var defaultTableMappings2 = new List<TableMappingBase<ColumnMappingBase>>();
            housePortal.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings2);
            var aCEDatabaseModelsWorldHousePortalTableBase = new TableBase("ACE.Database.Models.World.HousePortal", null, relationalModel);
            var angles_WColumnBase = new ColumnBase<ColumnMappingBase>("angles_W", "float", aCEDatabaseModelsWorldHousePortalTableBase);
            aCEDatabaseModelsWorldHousePortalTableBase.Columns.Add("angles_W", angles_WColumnBase);
            var angles_XColumnBase = new ColumnBase<ColumnMappingBase>("angles_X", "float", aCEDatabaseModelsWorldHousePortalTableBase);
            aCEDatabaseModelsWorldHousePortalTableBase.Columns.Add("angles_X", angles_XColumnBase);
            var angles_YColumnBase = new ColumnBase<ColumnMappingBase>("angles_Y", "float", aCEDatabaseModelsWorldHousePortalTableBase);
            aCEDatabaseModelsWorldHousePortalTableBase.Columns.Add("angles_Y", angles_YColumnBase);
            var angles_ZColumnBase = new ColumnBase<ColumnMappingBase>("angles_Z", "float", aCEDatabaseModelsWorldHousePortalTableBase);
            aCEDatabaseModelsWorldHousePortalTableBase.Columns.Add("angles_Z", angles_ZColumnBase);
            var house_IdColumnBase = new ColumnBase<ColumnMappingBase>("house_Id", "int unsigned", aCEDatabaseModelsWorldHousePortalTableBase);
            aCEDatabaseModelsWorldHousePortalTableBase.Columns.Add("house_Id", house_IdColumnBase);
            var idColumnBase2 = new ColumnBase<ColumnMappingBase>("id", "int unsigned", aCEDatabaseModelsWorldHousePortalTableBase);
            aCEDatabaseModelsWorldHousePortalTableBase.Columns.Add("id", idColumnBase2);
            var last_ModifiedColumnBase2 = new ColumnBase<ColumnMappingBase>("last_Modified", "datetime", aCEDatabaseModelsWorldHousePortalTableBase);
            aCEDatabaseModelsWorldHousePortalTableBase.Columns.Add("last_Modified", last_ModifiedColumnBase2);
            var obj_Cell_IdColumnBase = new ColumnBase<ColumnMappingBase>("obj_Cell_Id", "int unsigned", aCEDatabaseModelsWorldHousePortalTableBase);
            aCEDatabaseModelsWorldHousePortalTableBase.Columns.Add("obj_Cell_Id", obj_Cell_IdColumnBase);
            var origin_XColumnBase = new ColumnBase<ColumnMappingBase>("origin_X", "float", aCEDatabaseModelsWorldHousePortalTableBase);
            aCEDatabaseModelsWorldHousePortalTableBase.Columns.Add("origin_X", origin_XColumnBase);
            var origin_YColumnBase = new ColumnBase<ColumnMappingBase>("origin_Y", "float", aCEDatabaseModelsWorldHousePortalTableBase);
            aCEDatabaseModelsWorldHousePortalTableBase.Columns.Add("origin_Y", origin_YColumnBase);
            var origin_ZColumnBase = new ColumnBase<ColumnMappingBase>("origin_Z", "float", aCEDatabaseModelsWorldHousePortalTableBase);
            aCEDatabaseModelsWorldHousePortalTableBase.Columns.Add("origin_Z", origin_ZColumnBase);
            relationalModel.DefaultTables.Add("ACE.Database.Models.World.HousePortal", aCEDatabaseModelsWorldHousePortalTableBase);
            var aCEDatabaseModelsWorldHousePortalMappingBase = new TableMappingBase<ColumnMappingBase>(housePortal, aCEDatabaseModelsWorldHousePortalTableBase, true);
            aCEDatabaseModelsWorldHousePortalTableBase.AddTypeMapping(aCEDatabaseModelsWorldHousePortalMappingBase, false);
            defaultTableMappings2.Add(aCEDatabaseModelsWorldHousePortalMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase2, housePortal.FindProperty("Id")!, aCEDatabaseModelsWorldHousePortalMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)angles_WColumnBase, housePortal.FindProperty("AnglesW")!, aCEDatabaseModelsWorldHousePortalMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)angles_XColumnBase, housePortal.FindProperty("AnglesX")!, aCEDatabaseModelsWorldHousePortalMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)angles_YColumnBase, housePortal.FindProperty("AnglesY")!, aCEDatabaseModelsWorldHousePortalMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)angles_ZColumnBase, housePortal.FindProperty("AnglesZ")!, aCEDatabaseModelsWorldHousePortalMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)house_IdColumnBase, housePortal.FindProperty("HouseId")!, aCEDatabaseModelsWorldHousePortalMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)last_ModifiedColumnBase2, housePortal.FindProperty("LastModified")!, aCEDatabaseModelsWorldHousePortalMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)obj_Cell_IdColumnBase, housePortal.FindProperty("ObjCellId")!, aCEDatabaseModelsWorldHousePortalMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)origin_XColumnBase, housePortal.FindProperty("OriginX")!, aCEDatabaseModelsWorldHousePortalMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)origin_YColumnBase, housePortal.FindProperty("OriginY")!, aCEDatabaseModelsWorldHousePortalMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)origin_ZColumnBase, housePortal.FindProperty("OriginZ")!, aCEDatabaseModelsWorldHousePortalMappingBase);

            var tableMappings2 = new List<TableMapping>();
            housePortal.SetRuntimeAnnotation("Relational:TableMappings", tableMappings2);
            var house_portalTable = new Table("house_portal", null, relationalModel);
            var idColumn2 = new Column("id", "int unsigned", house_portalTable);
            house_portalTable.Columns.Add("id", idColumn2);
            var angles_WColumn = new Column("angles_W", "float", house_portalTable);
            house_portalTable.Columns.Add("angles_W", angles_WColumn);
            var angles_XColumn = new Column("angles_X", "float", house_portalTable);
            house_portalTable.Columns.Add("angles_X", angles_XColumn);
            var angles_YColumn = new Column("angles_Y", "float", house_portalTable);
            house_portalTable.Columns.Add("angles_Y", angles_YColumn);
            var angles_ZColumn = new Column("angles_Z", "float", house_portalTable);
            house_portalTable.Columns.Add("angles_Z", angles_ZColumn);
            var house_IdColumn = new Column("house_Id", "int unsigned", house_portalTable);
            house_portalTable.Columns.Add("house_Id", house_IdColumn);
            var last_ModifiedColumn2 = new Column("last_Modified", "datetime", house_portalTable);
            house_portalTable.Columns.Add("last_Modified", last_ModifiedColumn2);
            var obj_Cell_IdColumn = new Column("obj_Cell_Id", "int unsigned", house_portalTable);
            house_portalTable.Columns.Add("obj_Cell_Id", obj_Cell_IdColumn);
            var origin_XColumn = new Column("origin_X", "float", house_portalTable);
            house_portalTable.Columns.Add("origin_X", origin_XColumn);
            var origin_YColumn = new Column("origin_Y", "float", house_portalTable);
            house_portalTable.Columns.Add("origin_Y", origin_YColumn);
            var origin_ZColumn = new Column("origin_Z", "float", house_portalTable);
            house_portalTable.Columns.Add("origin_Z", origin_ZColumn);
            var pK_house_portal = new UniqueConstraint("PK_house_portal", house_portalTable, new[] { idColumn2 });
            house_portalTable.PrimaryKey = pK_house_portal;
            var pK_house_portalUc = RelationalModel.GetKey(this,
                "ACE.Database.Models.World.HousePortal",
                new[] { "Id" });
            pK_house_portal.MappedKeys.Add(pK_house_portalUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_house_portalUc).Add(pK_house_portal);
            house_portalTable.UniqueConstraints.Add("PK_house_portal", pK_house_portal);
            var house_Id_UNIQUE = new TableIndex(
            "house_Id_UNIQUE", house_portalTable, new[] { house_IdColumn, obj_Cell_IdColumn }, true);
            var house_Id_UNIQUEIx = RelationalModel.GetIndex(this,
                "ACE.Database.Models.World.HousePortal",
                "house_Id_UNIQUE");
            house_Id_UNIQUE.MappedIndexes.Add(house_Id_UNIQUEIx);
            RelationalModel.GetOrCreateTableIndexes(house_Id_UNIQUEIx).Add(house_Id_UNIQUE);
            house_portalTable.Indexes.Add("house_Id_UNIQUE", house_Id_UNIQUE);
            relationalModel.Tables.Add(("house_portal", null), house_portalTable);
            var house_portalTableMapping = new TableMapping(housePortal, house_portalTable, true);
            house_portalTable.AddTypeMapping(house_portalTableMapping, false);
            tableMappings2.Add(house_portalTableMapping);
            RelationalModel.CreateColumnMapping(idColumn2, housePortal.FindProperty("Id")!, house_portalTableMapping);
            RelationalModel.CreateColumnMapping(angles_WColumn, housePortal.FindProperty("AnglesW")!, house_portalTableMapping);
            RelationalModel.CreateColumnMapping(angles_XColumn, housePortal.FindProperty("AnglesX")!, house_portalTableMapping);
            RelationalModel.CreateColumnMapping(angles_YColumn, housePortal.FindProperty("AnglesY")!, house_portalTableMapping);
            RelationalModel.CreateColumnMapping(angles_ZColumn, housePortal.FindProperty("AnglesZ")!, house_portalTableMapping);
            RelationalModel.CreateColumnMapping(house_IdColumn, housePortal.FindProperty("HouseId")!, house_portalTableMapping);
            RelationalModel.CreateColumnMapping(last_ModifiedColumn2, housePortal.FindProperty("LastModified")!, house_portalTableMapping);
            RelationalModel.CreateColumnMapping(obj_Cell_IdColumn, housePortal.FindProperty("ObjCellId")!, house_portalTableMapping);
            RelationalModel.CreateColumnMapping(origin_XColumn, housePortal.FindProperty("OriginX")!, house_portalTableMapping);
            RelationalModel.CreateColumnMapping(origin_YColumn, housePortal.FindProperty("OriginY")!, house_portalTableMapping);
            RelationalModel.CreateColumnMapping(origin_ZColumn, housePortal.FindProperty("OriginZ")!, house_portalTableMapping);

            var landblockInstance = FindEntityType("ACE.Database.Models.World.LandblockInstance")!;

            var defaultTableMappings3 = new List<TableMappingBase<ColumnMappingBase>>();
            landblockInstance.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings3);
            var aCEDatabaseModelsWorldLandblockInstanceTableBase = new TableBase("ACE.Database.Models.World.LandblockInstance", null, relationalModel);
            var angles_WColumnBase0 = new ColumnBase<ColumnMappingBase>("angles_W", "float", aCEDatabaseModelsWorldLandblockInstanceTableBase);
            aCEDatabaseModelsWorldLandblockInstanceTableBase.Columns.Add("angles_W", angles_WColumnBase0);
            var angles_XColumnBase0 = new ColumnBase<ColumnMappingBase>("angles_X", "float", aCEDatabaseModelsWorldLandblockInstanceTableBase);
            aCEDatabaseModelsWorldLandblockInstanceTableBase.Columns.Add("angles_X", angles_XColumnBase0);
            var angles_YColumnBase0 = new ColumnBase<ColumnMappingBase>("angles_Y", "float", aCEDatabaseModelsWorldLandblockInstanceTableBase);
            aCEDatabaseModelsWorldLandblockInstanceTableBase.Columns.Add("angles_Y", angles_YColumnBase0);
            var angles_ZColumnBase0 = new ColumnBase<ColumnMappingBase>("angles_Z", "float", aCEDatabaseModelsWorldLandblockInstanceTableBase);
            aCEDatabaseModelsWorldLandblockInstanceTableBase.Columns.Add("angles_Z", angles_ZColumnBase0);
            var guidColumnBase = new ColumnBase<ColumnMappingBase>("guid", "int unsigned", aCEDatabaseModelsWorldLandblockInstanceTableBase);
            aCEDatabaseModelsWorldLandblockInstanceTableBase.Columns.Add("guid", guidColumnBase);
            var is_Link_ChildColumnBase = new ColumnBase<ColumnMappingBase>("is_Link_Child", "bit(1)", aCEDatabaseModelsWorldLandblockInstanceTableBase);
            aCEDatabaseModelsWorldLandblockInstanceTableBase.Columns.Add("is_Link_Child", is_Link_ChildColumnBase);
            var landblockColumnBase0 = new ColumnBase<ColumnMappingBase>("landblock", "int", aCEDatabaseModelsWorldLandblockInstanceTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsWorldLandblockInstanceTableBase.Columns.Add("landblock", landblockColumnBase0);
            var last_ModifiedColumnBase3 = new ColumnBase<ColumnMappingBase>("last_Modified", "datetime", aCEDatabaseModelsWorldLandblockInstanceTableBase);
            aCEDatabaseModelsWorldLandblockInstanceTableBase.Columns.Add("last_Modified", last_ModifiedColumnBase3);
            var obj_Cell_IdColumnBase0 = new ColumnBase<ColumnMappingBase>("obj_Cell_Id", "int unsigned", aCEDatabaseModelsWorldLandblockInstanceTableBase);
            aCEDatabaseModelsWorldLandblockInstanceTableBase.Columns.Add("obj_Cell_Id", obj_Cell_IdColumnBase0);
            var origin_XColumnBase0 = new ColumnBase<ColumnMappingBase>("origin_X", "float", aCEDatabaseModelsWorldLandblockInstanceTableBase);
            aCEDatabaseModelsWorldLandblockInstanceTableBase.Columns.Add("origin_X", origin_XColumnBase0);
            var origin_YColumnBase0 = new ColumnBase<ColumnMappingBase>("origin_Y", "float", aCEDatabaseModelsWorldLandblockInstanceTableBase);
            aCEDatabaseModelsWorldLandblockInstanceTableBase.Columns.Add("origin_Y", origin_YColumnBase0);
            var origin_ZColumnBase0 = new ColumnBase<ColumnMappingBase>("origin_Z", "float", aCEDatabaseModelsWorldLandblockInstanceTableBase);
            aCEDatabaseModelsWorldLandblockInstanceTableBase.Columns.Add("origin_Z", origin_ZColumnBase0);
            var weenie_Class_IdColumnBase0 = new ColumnBase<ColumnMappingBase>("weenie_Class_Id", "int unsigned", aCEDatabaseModelsWorldLandblockInstanceTableBase);
            aCEDatabaseModelsWorldLandblockInstanceTableBase.Columns.Add("weenie_Class_Id", weenie_Class_IdColumnBase0);
            relationalModel.DefaultTables.Add("ACE.Database.Models.World.LandblockInstance", aCEDatabaseModelsWorldLandblockInstanceTableBase);
            var aCEDatabaseModelsWorldLandblockInstanceMappingBase = new TableMappingBase<ColumnMappingBase>(landblockInstance, aCEDatabaseModelsWorldLandblockInstanceTableBase, true);
            aCEDatabaseModelsWorldLandblockInstanceTableBase.AddTypeMapping(aCEDatabaseModelsWorldLandblockInstanceMappingBase, false);
            defaultTableMappings3.Add(aCEDatabaseModelsWorldLandblockInstanceMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)guidColumnBase, landblockInstance.FindProperty("Guid")!, aCEDatabaseModelsWorldLandblockInstanceMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)angles_WColumnBase0, landblockInstance.FindProperty("AnglesW")!, aCEDatabaseModelsWorldLandblockInstanceMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)angles_XColumnBase0, landblockInstance.FindProperty("AnglesX")!, aCEDatabaseModelsWorldLandblockInstanceMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)angles_YColumnBase0, landblockInstance.FindProperty("AnglesY")!, aCEDatabaseModelsWorldLandblockInstanceMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)angles_ZColumnBase0, landblockInstance.FindProperty("AnglesZ")!, aCEDatabaseModelsWorldLandblockInstanceMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)is_Link_ChildColumnBase, landblockInstance.FindProperty("IsLinkChild")!, aCEDatabaseModelsWorldLandblockInstanceMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)landblockColumnBase0, landblockInstance.FindProperty("Landblock")!, aCEDatabaseModelsWorldLandblockInstanceMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)last_ModifiedColumnBase3, landblockInstance.FindProperty("LastModified")!, aCEDatabaseModelsWorldLandblockInstanceMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)obj_Cell_IdColumnBase0, landblockInstance.FindProperty("ObjCellId")!, aCEDatabaseModelsWorldLandblockInstanceMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)origin_XColumnBase0, landblockInstance.FindProperty("OriginX")!, aCEDatabaseModelsWorldLandblockInstanceMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)origin_YColumnBase0, landblockInstance.FindProperty("OriginY")!, aCEDatabaseModelsWorldLandblockInstanceMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)origin_ZColumnBase0, landblockInstance.FindProperty("OriginZ")!, aCEDatabaseModelsWorldLandblockInstanceMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)weenie_Class_IdColumnBase0, landblockInstance.FindProperty("WeenieClassId")!, aCEDatabaseModelsWorldLandblockInstanceMappingBase);

            var tableMappings3 = new List<TableMapping>();
            landblockInstance.SetRuntimeAnnotation("Relational:TableMappings", tableMappings3);
            var landblock_instanceTable = new Table("landblock_instance", null, relationalModel);
            var guidColumn = new Column("guid", "int unsigned", landblock_instanceTable);
            landblock_instanceTable.Columns.Add("guid", guidColumn);
            var angles_WColumn0 = new Column("angles_W", "float", landblock_instanceTable);
            landblock_instanceTable.Columns.Add("angles_W", angles_WColumn0);
            var angles_XColumn0 = new Column("angles_X", "float", landblock_instanceTable);
            landblock_instanceTable.Columns.Add("angles_X", angles_XColumn0);
            var angles_YColumn0 = new Column("angles_Y", "float", landblock_instanceTable);
            landblock_instanceTable.Columns.Add("angles_Y", angles_YColumn0);
            var angles_ZColumn0 = new Column("angles_Z", "float", landblock_instanceTable);
            landblock_instanceTable.Columns.Add("angles_Z", angles_ZColumn0);
            var is_Link_ChildColumn = new Column("is_Link_Child", "bit(1)", landblock_instanceTable);
            landblock_instanceTable.Columns.Add("is_Link_Child", is_Link_ChildColumn);
            var landblockColumn0 = new Column("landblock", "int", landblock_instanceTable)
            {
                IsNullable = true
            };
            landblock_instanceTable.Columns.Add("landblock", landblockColumn0);
            var last_ModifiedColumn3 = new Column("last_Modified", "datetime", landblock_instanceTable);
            landblock_instanceTable.Columns.Add("last_Modified", last_ModifiedColumn3);
            var obj_Cell_IdColumn0 = new Column("obj_Cell_Id", "int unsigned", landblock_instanceTable);
            landblock_instanceTable.Columns.Add("obj_Cell_Id", obj_Cell_IdColumn0);
            var origin_XColumn0 = new Column("origin_X", "float", landblock_instanceTable);
            landblock_instanceTable.Columns.Add("origin_X", origin_XColumn0);
            var origin_YColumn0 = new Column("origin_Y", "float", landblock_instanceTable);
            landblock_instanceTable.Columns.Add("origin_Y", origin_YColumn0);
            var origin_ZColumn0 = new Column("origin_Z", "float", landblock_instanceTable);
            landblock_instanceTable.Columns.Add("origin_Z", origin_ZColumn0);
            var weenie_Class_IdColumn0 = new Column("weenie_Class_Id", "int unsigned", landblock_instanceTable);
            landblock_instanceTable.Columns.Add("weenie_Class_Id", weenie_Class_IdColumn0);
            var pRIMARY = new UniqueConstraint("PRIMARY", landblock_instanceTable, new[] { guidColumn });
            landblock_instanceTable.PrimaryKey = pRIMARY;
            var pRIMARYUc = RelationalModel.GetKey(this,
                "ACE.Database.Models.World.LandblockInstance",
                new[] { "Guid" });
            pRIMARY.MappedKeys.Add(pRIMARYUc);
            RelationalModel.GetOrCreateUniqueConstraints(pRIMARYUc).Add(pRIMARY);
            landblock_instanceTable.UniqueConstraints.Add("PRIMARY", pRIMARY);
            var instance_landblock_idx = new TableIndex(
            "instance_landblock_idx", landblock_instanceTable, new[] { landblockColumn0 }, false);
            var instance_landblock_idxIx = RelationalModel.GetIndex(this,
                "ACE.Database.Models.World.LandblockInstance",
                "instance_landblock_idx");
            instance_landblock_idx.MappedIndexes.Add(instance_landblock_idxIx);
            RelationalModel.GetOrCreateTableIndexes(instance_landblock_idxIx).Add(instance_landblock_idx);
            landblock_instanceTable.Indexes.Add("instance_landblock_idx", instance_landblock_idx);
            relationalModel.Tables.Add(("landblock_instance", null), landblock_instanceTable);
            var landblock_instanceTableMapping = new TableMapping(landblockInstance, landblock_instanceTable, true);
            landblock_instanceTable.AddTypeMapping(landblock_instanceTableMapping, false);
            tableMappings3.Add(landblock_instanceTableMapping);
            RelationalModel.CreateColumnMapping(guidColumn, landblockInstance.FindProperty("Guid")!, landblock_instanceTableMapping);
            RelationalModel.CreateColumnMapping(angles_WColumn0, landblockInstance.FindProperty("AnglesW")!, landblock_instanceTableMapping);
            RelationalModel.CreateColumnMapping(angles_XColumn0, landblockInstance.FindProperty("AnglesX")!, landblock_instanceTableMapping);
            RelationalModel.CreateColumnMapping(angles_YColumn0, landblockInstance.FindProperty("AnglesY")!, landblock_instanceTableMapping);
            RelationalModel.CreateColumnMapping(angles_ZColumn0, landblockInstance.FindProperty("AnglesZ")!, landblock_instanceTableMapping);
            RelationalModel.CreateColumnMapping(is_Link_ChildColumn, landblockInstance.FindProperty("IsLinkChild")!, landblock_instanceTableMapping);
            RelationalModel.CreateColumnMapping(landblockColumn0, landblockInstance.FindProperty("Landblock")!, landblock_instanceTableMapping);
            RelationalModel.CreateColumnMapping(last_ModifiedColumn3, landblockInstance.FindProperty("LastModified")!, landblock_instanceTableMapping);
            RelationalModel.CreateColumnMapping(obj_Cell_IdColumn0, landblockInstance.FindProperty("ObjCellId")!, landblock_instanceTableMapping);
            RelationalModel.CreateColumnMapping(origin_XColumn0, landblockInstance.FindProperty("OriginX")!, landblock_instanceTableMapping);
            RelationalModel.CreateColumnMapping(origin_YColumn0, landblockInstance.FindProperty("OriginY")!, landblock_instanceTableMapping);
            RelationalModel.CreateColumnMapping(origin_ZColumn0, landblockInstance.FindProperty("OriginZ")!, landblock_instanceTableMapping);
            RelationalModel.CreateColumnMapping(weenie_Class_IdColumn0, landblockInstance.FindProperty("WeenieClassId")!, landblock_instanceTableMapping);

            var landblockInstanceLink = FindEntityType("ACE.Database.Models.World.LandblockInstanceLink")!;

            var defaultTableMappings4 = new List<TableMappingBase<ColumnMappingBase>>();
            landblockInstanceLink.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings4);
            var aCEDatabaseModelsWorldLandblockInstanceLinkTableBase = new TableBase("ACE.Database.Models.World.LandblockInstanceLink", null, relationalModel);
            var child_GUIDColumnBase = new ColumnBase<ColumnMappingBase>("child_GUID", "int unsigned", aCEDatabaseModelsWorldLandblockInstanceLinkTableBase);
            aCEDatabaseModelsWorldLandblockInstanceLinkTableBase.Columns.Add("child_GUID", child_GUIDColumnBase);
            var idColumnBase3 = new ColumnBase<ColumnMappingBase>("id", "int unsigned", aCEDatabaseModelsWorldLandblockInstanceLinkTableBase);
            aCEDatabaseModelsWorldLandblockInstanceLinkTableBase.Columns.Add("id", idColumnBase3);
            var last_ModifiedColumnBase4 = new ColumnBase<ColumnMappingBase>("last_Modified", "datetime", aCEDatabaseModelsWorldLandblockInstanceLinkTableBase);
            aCEDatabaseModelsWorldLandblockInstanceLinkTableBase.Columns.Add("last_Modified", last_ModifiedColumnBase4);
            var parent_GUIDColumnBase = new ColumnBase<ColumnMappingBase>("parent_GUID", "int unsigned", aCEDatabaseModelsWorldLandblockInstanceLinkTableBase);
            aCEDatabaseModelsWorldLandblockInstanceLinkTableBase.Columns.Add("parent_GUID", parent_GUIDColumnBase);
            relationalModel.DefaultTables.Add("ACE.Database.Models.World.LandblockInstanceLink", aCEDatabaseModelsWorldLandblockInstanceLinkTableBase);
            var aCEDatabaseModelsWorldLandblockInstanceLinkMappingBase = new TableMappingBase<ColumnMappingBase>(landblockInstanceLink, aCEDatabaseModelsWorldLandblockInstanceLinkTableBase, true);
            aCEDatabaseModelsWorldLandblockInstanceLinkTableBase.AddTypeMapping(aCEDatabaseModelsWorldLandblockInstanceLinkMappingBase, false);
            defaultTableMappings4.Add(aCEDatabaseModelsWorldLandblockInstanceLinkMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase3, landblockInstanceLink.FindProperty("Id")!, aCEDatabaseModelsWorldLandblockInstanceLinkMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)child_GUIDColumnBase, landblockInstanceLink.FindProperty("ChildGuid")!, aCEDatabaseModelsWorldLandblockInstanceLinkMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)last_ModifiedColumnBase4, landblockInstanceLink.FindProperty("LastModified")!, aCEDatabaseModelsWorldLandblockInstanceLinkMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)parent_GUIDColumnBase, landblockInstanceLink.FindProperty("ParentGuid")!, aCEDatabaseModelsWorldLandblockInstanceLinkMappingBase);

            var tableMappings4 = new List<TableMapping>();
            landblockInstanceLink.SetRuntimeAnnotation("Relational:TableMappings", tableMappings4);
            var landblock_instance_linkTable = new Table("landblock_instance_link", null, relationalModel);
            var idColumn3 = new Column("id", "int unsigned", landblock_instance_linkTable);
            landblock_instance_linkTable.Columns.Add("id", idColumn3);
            var child_GUIDColumn = new Column("child_GUID", "int unsigned", landblock_instance_linkTable);
            landblock_instance_linkTable.Columns.Add("child_GUID", child_GUIDColumn);
            var last_ModifiedColumn4 = new Column("last_Modified", "datetime", landblock_instance_linkTable);
            landblock_instance_linkTable.Columns.Add("last_Modified", last_ModifiedColumn4);
            var parent_GUIDColumn = new Column("parent_GUID", "int unsigned", landblock_instance_linkTable);
            landblock_instance_linkTable.Columns.Add("parent_GUID", parent_GUIDColumn);
            var pK_landblock_instance_link = new UniqueConstraint("PK_landblock_instance_link", landblock_instance_linkTable, new[] { idColumn3 });
            landblock_instance_linkTable.PrimaryKey = pK_landblock_instance_link;
            var pK_landblock_instance_linkUc = RelationalModel.GetKey(this,
                "ACE.Database.Models.World.LandblockInstanceLink",
                new[] { "Id" });
            pK_landblock_instance_link.MappedKeys.Add(pK_landblock_instance_linkUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_landblock_instance_linkUc).Add(pK_landblock_instance_link);
            landblock_instance_linkTable.UniqueConstraints.Add("PK_landblock_instance_link", pK_landblock_instance_link);
            var child_idx = new TableIndex(
            "child_idx", landblock_instance_linkTable, new[] { child_GUIDColumn }, false);
            var child_idxIx = RelationalModel.GetIndex(this,
                "ACE.Database.Models.World.LandblockInstanceLink",
                "child_idx");
            child_idx.MappedIndexes.Add(child_idxIx);
            RelationalModel.GetOrCreateTableIndexes(child_idxIx).Add(child_idx);
            landblock_instance_linkTable.Indexes.Add("child_idx", child_idx);
            var parent_child_uidx = new TableIndex(
            "parent_child_uidx", landblock_instance_linkTable, new[] { parent_GUIDColumn, child_GUIDColumn }, true);
            var parent_child_uidxIx = RelationalModel.GetIndex(this,
                "ACE.Database.Models.World.LandblockInstanceLink",
                "parent_child_uidx");
            parent_child_uidx.MappedIndexes.Add(parent_child_uidxIx);
            RelationalModel.GetOrCreateTableIndexes(parent_child_uidxIx).Add(parent_child_uidx);
            landblock_instance_linkTable.Indexes.Add("parent_child_uidx", parent_child_uidx);
            relationalModel.Tables.Add(("landblock_instance_link", null), landblock_instance_linkTable);
            var landblock_instance_linkTableMapping = new TableMapping(landblockInstanceLink, landblock_instance_linkTable, true);
            landblock_instance_linkTable.AddTypeMapping(landblock_instance_linkTableMapping, false);
            tableMappings4.Add(landblock_instance_linkTableMapping);
            RelationalModel.CreateColumnMapping(idColumn3, landblockInstanceLink.FindProperty("Id")!, landblock_instance_linkTableMapping);
            RelationalModel.CreateColumnMapping(child_GUIDColumn, landblockInstanceLink.FindProperty("ChildGuid")!, landblock_instance_linkTableMapping);
            RelationalModel.CreateColumnMapping(last_ModifiedColumn4, landblockInstanceLink.FindProperty("LastModified")!, landblock_instance_linkTableMapping);
            RelationalModel.CreateColumnMapping(parent_GUIDColumn, landblockInstanceLink.FindProperty("ParentGuid")!, landblock_instance_linkTableMapping);

            var pointsOfInterest = FindEntityType("ACE.Database.Models.World.PointsOfInterest")!;

            var defaultTableMappings5 = new List<TableMappingBase<ColumnMappingBase>>();
            pointsOfInterest.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings5);
            var aCEDatabaseModelsWorldPointsOfInterestTableBase = new TableBase("ACE.Database.Models.World.PointsOfInterest", null, relationalModel);
            var idColumnBase4 = new ColumnBase<ColumnMappingBase>("id", "int unsigned", aCEDatabaseModelsWorldPointsOfInterestTableBase);
            aCEDatabaseModelsWorldPointsOfInterestTableBase.Columns.Add("id", idColumnBase4);
            var last_ModifiedColumnBase5 = new ColumnBase<ColumnMappingBase>("last_Modified", "datetime", aCEDatabaseModelsWorldPointsOfInterestTableBase);
            aCEDatabaseModelsWorldPointsOfInterestTableBase.Columns.Add("last_Modified", last_ModifiedColumnBase5);
            var nameColumnBase0 = new ColumnBase<ColumnMappingBase>("name", "text", aCEDatabaseModelsWorldPointsOfInterestTableBase);
            aCEDatabaseModelsWorldPointsOfInterestTableBase.Columns.Add("name", nameColumnBase0);
            var weenie_Class_IdColumnBase1 = new ColumnBase<ColumnMappingBase>("weenie_Class_Id", "int unsigned", aCEDatabaseModelsWorldPointsOfInterestTableBase);
            aCEDatabaseModelsWorldPointsOfInterestTableBase.Columns.Add("weenie_Class_Id", weenie_Class_IdColumnBase1);
            relationalModel.DefaultTables.Add("ACE.Database.Models.World.PointsOfInterest", aCEDatabaseModelsWorldPointsOfInterestTableBase);
            var aCEDatabaseModelsWorldPointsOfInterestMappingBase = new TableMappingBase<ColumnMappingBase>(pointsOfInterest, aCEDatabaseModelsWorldPointsOfInterestTableBase, true);
            aCEDatabaseModelsWorldPointsOfInterestTableBase.AddTypeMapping(aCEDatabaseModelsWorldPointsOfInterestMappingBase, false);
            defaultTableMappings5.Add(aCEDatabaseModelsWorldPointsOfInterestMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase4, pointsOfInterest.FindProperty("Id")!, aCEDatabaseModelsWorldPointsOfInterestMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)last_ModifiedColumnBase5, pointsOfInterest.FindProperty("LastModified")!, aCEDatabaseModelsWorldPointsOfInterestMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nameColumnBase0, pointsOfInterest.FindProperty("Name")!, aCEDatabaseModelsWorldPointsOfInterestMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)weenie_Class_IdColumnBase1, pointsOfInterest.FindProperty("WeenieClassId")!, aCEDatabaseModelsWorldPointsOfInterestMappingBase);

            var tableMappings5 = new List<TableMapping>();
            pointsOfInterest.SetRuntimeAnnotation("Relational:TableMappings", tableMappings5);
            var points_of_interestTable = new Table("points_of_interest", null, relationalModel);
            var idColumn4 = new Column("id", "int unsigned", points_of_interestTable);
            points_of_interestTable.Columns.Add("id", idColumn4);
            var last_ModifiedColumn5 = new Column("last_Modified", "datetime", points_of_interestTable);
            points_of_interestTable.Columns.Add("last_Modified", last_ModifiedColumn5);
            var nameColumn0 = new Column("name", "text", points_of_interestTable);
            points_of_interestTable.Columns.Add("name", nameColumn0);
            var weenie_Class_IdColumn1 = new Column("weenie_Class_Id", "int unsigned", points_of_interestTable);
            points_of_interestTable.Columns.Add("weenie_Class_Id", weenie_Class_IdColumn1);
            var pK_points_of_interest = new UniqueConstraint("PK_points_of_interest", points_of_interestTable, new[] { idColumn4 });
            points_of_interestTable.PrimaryKey = pK_points_of_interest;
            var pK_points_of_interestUc = RelationalModel.GetKey(this,
                "ACE.Database.Models.World.PointsOfInterest",
                new[] { "Id" });
            pK_points_of_interest.MappedKeys.Add(pK_points_of_interestUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_points_of_interestUc).Add(pK_points_of_interest);
            points_of_interestTable.UniqueConstraints.Add("PK_points_of_interest", pK_points_of_interest);
            var name_UNIQUE1 = new TableIndex(
            "name_UNIQUE1", points_of_interestTable, new[] { nameColumn0 }, true);
            var name_UNIQUE1Ix = RelationalModel.GetIndex(this,
                "ACE.Database.Models.World.PointsOfInterest",
                "name_UNIQUE");
            name_UNIQUE1.MappedIndexes.Add(name_UNIQUE1Ix);
            RelationalModel.GetOrCreateTableIndexes(name_UNIQUE1Ix).Add(name_UNIQUE1);
            points_of_interestTable.Indexes.Add("name_UNIQUE1", name_UNIQUE1);
            relationalModel.Tables.Add(("points_of_interest", null), points_of_interestTable);
            var points_of_interestTableMapping = new TableMapping(pointsOfInterest, points_of_interestTable, true);
            points_of_interestTable.AddTypeMapping(points_of_interestTableMapping, false);
            tableMappings5.Add(points_of_interestTableMapping);
            RelationalModel.CreateColumnMapping(idColumn4, pointsOfInterest.FindProperty("Id")!, points_of_interestTableMapping);
            RelationalModel.CreateColumnMapping(last_ModifiedColumn5, pointsOfInterest.FindProperty("LastModified")!, points_of_interestTableMapping);
            RelationalModel.CreateColumnMapping(nameColumn0, pointsOfInterest.FindProperty("Name")!, points_of_interestTableMapping);
            RelationalModel.CreateColumnMapping(weenie_Class_IdColumn1, pointsOfInterest.FindProperty("WeenieClassId")!, points_of_interestTableMapping);

            var quest = FindEntityType("ACE.Database.Models.World.Quest")!;

            var defaultTableMappings6 = new List<TableMappingBase<ColumnMappingBase>>();
            quest.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings6);
            var aCEDatabaseModelsWorldQuestTableBase = new TableBase("ACE.Database.Models.World.Quest", null, relationalModel);
            var idColumnBase5 = new ColumnBase<ColumnMappingBase>("id", "int unsigned", aCEDatabaseModelsWorldQuestTableBase);
            aCEDatabaseModelsWorldQuestTableBase.Columns.Add("id", idColumnBase5);
            var last_ModifiedColumnBase6 = new ColumnBase<ColumnMappingBase>("last_Modified", "datetime", aCEDatabaseModelsWorldQuestTableBase);
            aCEDatabaseModelsWorldQuestTableBase.Columns.Add("last_Modified", last_ModifiedColumnBase6);
            var max_SolvesColumnBase = new ColumnBase<ColumnMappingBase>("max_Solves", "int", aCEDatabaseModelsWorldQuestTableBase);
            aCEDatabaseModelsWorldQuestTableBase.Columns.Add("max_Solves", max_SolvesColumnBase);
            var messageColumnBase = new ColumnBase<ColumnMappingBase>("message", "text", aCEDatabaseModelsWorldQuestTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsWorldQuestTableBase.Columns.Add("message", messageColumnBase);
            var min_DeltaColumnBase = new ColumnBase<ColumnMappingBase>("min_Delta", "int unsigned", aCEDatabaseModelsWorldQuestTableBase);
            aCEDatabaseModelsWorldQuestTableBase.Columns.Add("min_Delta", min_DeltaColumnBase);
            var nameColumnBase1 = new ColumnBase<ColumnMappingBase>("name", "varchar(255)", aCEDatabaseModelsWorldQuestTableBase);
            aCEDatabaseModelsWorldQuestTableBase.Columns.Add("name", nameColumnBase1);
            relationalModel.DefaultTables.Add("ACE.Database.Models.World.Quest", aCEDatabaseModelsWorldQuestTableBase);
            var aCEDatabaseModelsWorldQuestMappingBase = new TableMappingBase<ColumnMappingBase>(quest, aCEDatabaseModelsWorldQuestTableBase, true);
            aCEDatabaseModelsWorldQuestTableBase.AddTypeMapping(aCEDatabaseModelsWorldQuestMappingBase, false);
            defaultTableMappings6.Add(aCEDatabaseModelsWorldQuestMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase5, quest.FindProperty("Id")!, aCEDatabaseModelsWorldQuestMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)last_ModifiedColumnBase6, quest.FindProperty("LastModified")!, aCEDatabaseModelsWorldQuestMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)max_SolvesColumnBase, quest.FindProperty("MaxSolves")!, aCEDatabaseModelsWorldQuestMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)messageColumnBase, quest.FindProperty("Message")!, aCEDatabaseModelsWorldQuestMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)min_DeltaColumnBase, quest.FindProperty("MinDelta")!, aCEDatabaseModelsWorldQuestMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nameColumnBase1, quest.FindProperty("Name")!, aCEDatabaseModelsWorldQuestMappingBase);

            var tableMappings6 = new List<TableMapping>();
            quest.SetRuntimeAnnotation("Relational:TableMappings", tableMappings6);
            var questTable = new Table("quest", null, relationalModel);
            var idColumn5 = new Column("id", "int unsigned", questTable);
            questTable.Columns.Add("id", idColumn5);
            var last_ModifiedColumn6 = new Column("last_Modified", "datetime", questTable);
            questTable.Columns.Add("last_Modified", last_ModifiedColumn6);
            var max_SolvesColumn = new Column("max_Solves", "int", questTable);
            questTable.Columns.Add("max_Solves", max_SolvesColumn);
            var messageColumn = new Column("message", "text", questTable)
            {
                IsNullable = true
            };
            questTable.Columns.Add("message", messageColumn);
            var min_DeltaColumn = new Column("min_Delta", "int unsigned", questTable);
            questTable.Columns.Add("min_Delta", min_DeltaColumn);
            var nameColumn1 = new Column("name", "varchar(255)", questTable);
            questTable.Columns.Add("name", nameColumn1);
            var pK_quest = new UniqueConstraint("PK_quest", questTable, new[] { idColumn5 });
            questTable.PrimaryKey = pK_quest;
            var pK_questUc = RelationalModel.GetKey(this,
                "ACE.Database.Models.World.Quest",
                new[] { "Id" });
            pK_quest.MappedKeys.Add(pK_questUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_questUc).Add(pK_quest);
            questTable.UniqueConstraints.Add("PK_quest", pK_quest);
            var name_UNIQUE2 = new TableIndex(
            "name_UNIQUE2", questTable, new[] { nameColumn1 }, true);
            var name_UNIQUE2Ix = RelationalModel.GetIndex(this,
                "ACE.Database.Models.World.Quest",
                "name_UNIQUE");
            name_UNIQUE2.MappedIndexes.Add(name_UNIQUE2Ix);
            RelationalModel.GetOrCreateTableIndexes(name_UNIQUE2Ix).Add(name_UNIQUE2);
            questTable.Indexes.Add("name_UNIQUE2", name_UNIQUE2);
            relationalModel.Tables.Add(("quest", null), questTable);
            var questTableMapping = new TableMapping(quest, questTable, true);
            questTable.AddTypeMapping(questTableMapping, false);
            tableMappings6.Add(questTableMapping);
            RelationalModel.CreateColumnMapping(idColumn5, quest.FindProperty("Id")!, questTableMapping);
            RelationalModel.CreateColumnMapping(last_ModifiedColumn6, quest.FindProperty("LastModified")!, questTableMapping);
            RelationalModel.CreateColumnMapping(max_SolvesColumn, quest.FindProperty("MaxSolves")!, questTableMapping);
            RelationalModel.CreateColumnMapping(messageColumn, quest.FindProperty("Message")!, questTableMapping);
            RelationalModel.CreateColumnMapping(min_DeltaColumn, quest.FindProperty("MinDelta")!, questTableMapping);
            RelationalModel.CreateColumnMapping(nameColumn1, quest.FindProperty("Name")!, questTableMapping);

            var realm = FindEntityType("ACE.Database.Models.World.Realm")!;

            var defaultTableMappings7 = new List<TableMappingBase<ColumnMappingBase>>();
            realm.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings7);
            var aCEDatabaseModelsWorldRealmTableBase = new TableBase("ACE.Database.Models.World.Realm", null, relationalModel);
            var idColumnBase6 = new ColumnBase<ColumnMappingBase>("id", "smallint unsigned", aCEDatabaseModelsWorldRealmTableBase);
            aCEDatabaseModelsWorldRealmTableBase.Columns.Add("id", idColumnBase6);
            var nameColumnBase2 = new ColumnBase<ColumnMappingBase>("name", "text", aCEDatabaseModelsWorldRealmTableBase);
            aCEDatabaseModelsWorldRealmTableBase.Columns.Add("name", nameColumnBase2);
            var parent_realm_idColumnBase = new ColumnBase<ColumnMappingBase>("parent_realm_id", "smallint unsigned", aCEDatabaseModelsWorldRealmTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsWorldRealmTableBase.Columns.Add("parent_realm_id", parent_realm_idColumnBase);
            var property_count_randomizedColumnBase = new ColumnBase<ColumnMappingBase>("property_count_randomized", "smallint unsigned", aCEDatabaseModelsWorldRealmTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsWorldRealmTableBase.Columns.Add("property_count_randomized", property_count_randomizedColumnBase);
            var typeColumnBase = new ColumnBase<ColumnMappingBase>("type", "smallint unsigned", aCEDatabaseModelsWorldRealmTableBase);
            aCEDatabaseModelsWorldRealmTableBase.Columns.Add("type", typeColumnBase);
            relationalModel.DefaultTables.Add("ACE.Database.Models.World.Realm", aCEDatabaseModelsWorldRealmTableBase);
            var aCEDatabaseModelsWorldRealmMappingBase = new TableMappingBase<ColumnMappingBase>(realm, aCEDatabaseModelsWorldRealmTableBase, true);
            aCEDatabaseModelsWorldRealmTableBase.AddTypeMapping(aCEDatabaseModelsWorldRealmMappingBase, false);
            defaultTableMappings7.Add(aCEDatabaseModelsWorldRealmMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase6, realm.FindProperty("Id")!, aCEDatabaseModelsWorldRealmMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nameColumnBase2, realm.FindProperty("Name")!, aCEDatabaseModelsWorldRealmMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)parent_realm_idColumnBase, realm.FindProperty("ParentRealmId")!, aCEDatabaseModelsWorldRealmMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)property_count_randomizedColumnBase, realm.FindProperty("PropertyCountRandomized")!, aCEDatabaseModelsWorldRealmMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)typeColumnBase, realm.FindProperty("Type")!, aCEDatabaseModelsWorldRealmMappingBase);

            var tableMappings7 = new List<TableMapping>();
            realm.SetRuntimeAnnotation("Relational:TableMappings", tableMappings7);
            var realmTable = new Table("realm", null, relationalModel);
            var idColumn6 = new Column("id", "smallint unsigned", realmTable);
            realmTable.Columns.Add("id", idColumn6);
            var nameColumn2 = new Column("name", "text", realmTable);
            realmTable.Columns.Add("name", nameColumn2);
            var parent_realm_idColumn = new Column("parent_realm_id", "smallint unsigned", realmTable)
            {
                IsNullable = true
            };
            realmTable.Columns.Add("parent_realm_id", parent_realm_idColumn);
            var property_count_randomizedColumn = new Column("property_count_randomized", "smallint unsigned", realmTable)
            {
                IsNullable = true
            };
            realmTable.Columns.Add("property_count_randomized", property_count_randomizedColumn);
            var typeColumn = new Column("type", "smallint unsigned", realmTable);
            realmTable.Columns.Add("type", typeColumn);
            var pK_realm = new UniqueConstraint("PK_realm", realmTable, new[] { idColumn6 });
            realmTable.PrimaryKey = pK_realm;
            var pK_realmUc = RelationalModel.GetKey(this,
                "ACE.Database.Models.World.Realm",
                new[] { "Id" });
            pK_realm.MappedKeys.Add(pK_realmUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_realmUc).Add(pK_realm);
            realmTable.UniqueConstraints.Add("PK_realm", pK_realm);
            relationalModel.Tables.Add(("realm", null), realmTable);
            var realmTableMapping = new TableMapping(realm, realmTable, true);
            realmTable.AddTypeMapping(realmTableMapping, false);
            tableMappings7.Add(realmTableMapping);
            RelationalModel.CreateColumnMapping(idColumn6, realm.FindProperty("Id")!, realmTableMapping);
            RelationalModel.CreateColumnMapping(nameColumn2, realm.FindProperty("Name")!, realmTableMapping);
            RelationalModel.CreateColumnMapping(parent_realm_idColumn, realm.FindProperty("ParentRealmId")!, realmTableMapping);
            RelationalModel.CreateColumnMapping(property_count_randomizedColumn, realm.FindProperty("PropertyCountRandomized")!, realmTableMapping);
            RelationalModel.CreateColumnMapping(typeColumn, realm.FindProperty("Type")!, realmTableMapping);

            var realmPropertiesBool = FindEntityType("ACE.Database.Models.World.RealmPropertiesBool")!;

            var defaultTableMappings8 = new List<TableMappingBase<ColumnMappingBase>>();
            realmPropertiesBool.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings8);
            var aCEDatabaseModelsWorldRealmPropertiesBoolTableBase = new TableBase("ACE.Database.Models.World.RealmPropertiesBool", null, relationalModel);
            var lockedColumnBase = new ColumnBase<ColumnMappingBase>("locked", "bit(1)", aCEDatabaseModelsWorldRealmPropertiesBoolTableBase);
            aCEDatabaseModelsWorldRealmPropertiesBoolTableBase.Columns.Add("locked", lockedColumnBase);
            var probabilityColumnBase = new ColumnBase<ColumnMappingBase>("probability", "double", aCEDatabaseModelsWorldRealmPropertiesBoolTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsWorldRealmPropertiesBoolTableBase.Columns.Add("probability", probabilityColumnBase);
            var realm_IdColumnBase = new ColumnBase<ColumnMappingBase>("realm_Id", "smallint unsigned", aCEDatabaseModelsWorldRealmPropertiesBoolTableBase);
            aCEDatabaseModelsWorldRealmPropertiesBoolTableBase.Columns.Add("realm_Id", realm_IdColumnBase);
            var typeColumnBase0 = new ColumnBase<ColumnMappingBase>("type", "smallint unsigned", aCEDatabaseModelsWorldRealmPropertiesBoolTableBase);
            aCEDatabaseModelsWorldRealmPropertiesBoolTableBase.Columns.Add("type", typeColumnBase0);
            var valueColumnBase = new ColumnBase<ColumnMappingBase>("value", "bit(1)", aCEDatabaseModelsWorldRealmPropertiesBoolTableBase);
            aCEDatabaseModelsWorldRealmPropertiesBoolTableBase.Columns.Add("value", valueColumnBase);
            relationalModel.DefaultTables.Add("ACE.Database.Models.World.RealmPropertiesBool", aCEDatabaseModelsWorldRealmPropertiesBoolTableBase);
            var aCEDatabaseModelsWorldRealmPropertiesBoolMappingBase = new TableMappingBase<ColumnMappingBase>(realmPropertiesBool, aCEDatabaseModelsWorldRealmPropertiesBoolTableBase, true);
            aCEDatabaseModelsWorldRealmPropertiesBoolTableBase.AddTypeMapping(aCEDatabaseModelsWorldRealmPropertiesBoolMappingBase, false);
            defaultTableMappings8.Add(aCEDatabaseModelsWorldRealmPropertiesBoolMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)realm_IdColumnBase, realmPropertiesBool.FindProperty("RealmId")!, aCEDatabaseModelsWorldRealmPropertiesBoolMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)typeColumnBase0, realmPropertiesBool.FindProperty("Type")!, aCEDatabaseModelsWorldRealmPropertiesBoolMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)lockedColumnBase, realmPropertiesBool.FindProperty("Locked")!, aCEDatabaseModelsWorldRealmPropertiesBoolMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)probabilityColumnBase, realmPropertiesBool.FindProperty("Probability")!, aCEDatabaseModelsWorldRealmPropertiesBoolMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)valueColumnBase, realmPropertiesBool.FindProperty("Value")!, aCEDatabaseModelsWorldRealmPropertiesBoolMappingBase);

            var tableMappings8 = new List<TableMapping>();
            realmPropertiesBool.SetRuntimeAnnotation("Relational:TableMappings", tableMappings8);
            var realm_properties_boolTable = new Table("realm_properties_bool", null, relationalModel);
            var realm_IdColumn = new Column("realm_Id", "smallint unsigned", realm_properties_boolTable);
            realm_properties_boolTable.Columns.Add("realm_Id", realm_IdColumn);
            var typeColumn0 = new Column("type", "smallint unsigned", realm_properties_boolTable);
            realm_properties_boolTable.Columns.Add("type", typeColumn0);
            var lockedColumn = new Column("locked", "bit(1)", realm_properties_boolTable);
            realm_properties_boolTable.Columns.Add("locked", lockedColumn);
            var probabilityColumn = new Column("probability", "double", realm_properties_boolTable)
            {
                IsNullable = true
            };
            realm_properties_boolTable.Columns.Add("probability", probabilityColumn);
            var valueColumn = new Column("value", "bit(1)", realm_properties_boolTable);
            realm_properties_boolTable.Columns.Add("value", valueColumn);
            var pRIMARY0 = new UniqueConstraint("PRIMARY", realm_properties_boolTable, new[] { realm_IdColumn, typeColumn0 });
            realm_properties_boolTable.PrimaryKey = pRIMARY0;
            var pRIMARY0Uc = RelationalModel.GetKey(this,
                "ACE.Database.Models.World.RealmPropertiesBool",
                new[] { "RealmId", "Type" });
            pRIMARY0.MappedKeys.Add(pRIMARY0Uc);
            RelationalModel.GetOrCreateUniqueConstraints(pRIMARY0Uc).Add(pRIMARY0);
            realm_properties_boolTable.UniqueConstraints.Add("PRIMARY", pRIMARY0);
            var idx_type = new TableIndex(
            "idx_type", realm_properties_boolTable, new[] { typeColumn0 }, false);
            var idx_typeIx = RelationalModel.GetIndex(this,
                "ACE.Database.Models.World.RealmPropertiesBool",
                new[] { "Type" });
            idx_type.MappedIndexes.Add(idx_typeIx);
            RelationalModel.GetOrCreateTableIndexes(idx_typeIx).Add(idx_type);
            realm_properties_boolTable.Indexes.Add("idx_type", idx_type);
            relationalModel.Tables.Add(("realm_properties_bool", null), realm_properties_boolTable);
            var realm_properties_boolTableMapping = new TableMapping(realmPropertiesBool, realm_properties_boolTable, true);
            realm_properties_boolTable.AddTypeMapping(realm_properties_boolTableMapping, false);
            tableMappings8.Add(realm_properties_boolTableMapping);
            RelationalModel.CreateColumnMapping(realm_IdColumn, realmPropertiesBool.FindProperty("RealmId")!, realm_properties_boolTableMapping);
            RelationalModel.CreateColumnMapping(typeColumn0, realmPropertiesBool.FindProperty("Type")!, realm_properties_boolTableMapping);
            RelationalModel.CreateColumnMapping(lockedColumn, realmPropertiesBool.FindProperty("Locked")!, realm_properties_boolTableMapping);
            RelationalModel.CreateColumnMapping(probabilityColumn, realmPropertiesBool.FindProperty("Probability")!, realm_properties_boolTableMapping);
            RelationalModel.CreateColumnMapping(valueColumn, realmPropertiesBool.FindProperty("Value")!, realm_properties_boolTableMapping);

            var realmPropertiesFloat = FindEntityType("ACE.Database.Models.World.RealmPropertiesFloat")!;

            var defaultTableMappings9 = new List<TableMappingBase<ColumnMappingBase>>();
            realmPropertiesFloat.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings9);
            var aCEDatabaseModelsWorldRealmPropertiesFloatTableBase = new TableBase("ACE.Database.Models.World.RealmPropertiesFloat", null, relationalModel);
            var composition_typeColumnBase = new ColumnBase<ColumnMappingBase>("composition_type", "tinyint unsigned", aCEDatabaseModelsWorldRealmPropertiesFloatTableBase);
            aCEDatabaseModelsWorldRealmPropertiesFloatTableBase.Columns.Add("composition_type", composition_typeColumnBase);
            var lockedColumnBase0 = new ColumnBase<ColumnMappingBase>("locked", "bit(1)", aCEDatabaseModelsWorldRealmPropertiesFloatTableBase);
            aCEDatabaseModelsWorldRealmPropertiesFloatTableBase.Columns.Add("locked", lockedColumnBase0);
            var probabilityColumnBase0 = new ColumnBase<ColumnMappingBase>("probability", "double", aCEDatabaseModelsWorldRealmPropertiesFloatTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsWorldRealmPropertiesFloatTableBase.Columns.Add("probability", probabilityColumnBase0);
            var random_high_rangeColumnBase = new ColumnBase<ColumnMappingBase>("random_high_range", "double", aCEDatabaseModelsWorldRealmPropertiesFloatTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsWorldRealmPropertiesFloatTableBase.Columns.Add("random_high_range", random_high_rangeColumnBase);
            var random_low_rangeColumnBase = new ColumnBase<ColumnMappingBase>("random_low_range", "double", aCEDatabaseModelsWorldRealmPropertiesFloatTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsWorldRealmPropertiesFloatTableBase.Columns.Add("random_low_range", random_low_rangeColumnBase);
            var random_typeColumnBase = new ColumnBase<ColumnMappingBase>("random_type", "tinyint unsigned", aCEDatabaseModelsWorldRealmPropertiesFloatTableBase);
            aCEDatabaseModelsWorldRealmPropertiesFloatTableBase.Columns.Add("random_type", random_typeColumnBase);
            var realm_IdColumnBase0 = new ColumnBase<ColumnMappingBase>("realm_Id", "smallint unsigned", aCEDatabaseModelsWorldRealmPropertiesFloatTableBase);
            aCEDatabaseModelsWorldRealmPropertiesFloatTableBase.Columns.Add("realm_Id", realm_IdColumnBase0);
            var typeColumnBase1 = new ColumnBase<ColumnMappingBase>("type", "smallint unsigned", aCEDatabaseModelsWorldRealmPropertiesFloatTableBase);
            aCEDatabaseModelsWorldRealmPropertiesFloatTableBase.Columns.Add("type", typeColumnBase1);
            var valueColumnBase0 = new ColumnBase<ColumnMappingBase>("value", "double", aCEDatabaseModelsWorldRealmPropertiesFloatTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsWorldRealmPropertiesFloatTableBase.Columns.Add("value", valueColumnBase0);
            relationalModel.DefaultTables.Add("ACE.Database.Models.World.RealmPropertiesFloat", aCEDatabaseModelsWorldRealmPropertiesFloatTableBase);
            var aCEDatabaseModelsWorldRealmPropertiesFloatMappingBase = new TableMappingBase<ColumnMappingBase>(realmPropertiesFloat, aCEDatabaseModelsWorldRealmPropertiesFloatTableBase, true);
            aCEDatabaseModelsWorldRealmPropertiesFloatTableBase.AddTypeMapping(aCEDatabaseModelsWorldRealmPropertiesFloatMappingBase, false);
            defaultTableMappings9.Add(aCEDatabaseModelsWorldRealmPropertiesFloatMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)realm_IdColumnBase0, realmPropertiesFloat.FindProperty("RealmId")!, aCEDatabaseModelsWorldRealmPropertiesFloatMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)typeColumnBase1, realmPropertiesFloat.FindProperty("Type")!, aCEDatabaseModelsWorldRealmPropertiesFloatMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)composition_typeColumnBase, realmPropertiesFloat.FindProperty("CompositionType")!, aCEDatabaseModelsWorldRealmPropertiesFloatMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)lockedColumnBase0, realmPropertiesFloat.FindProperty("Locked")!, aCEDatabaseModelsWorldRealmPropertiesFloatMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)probabilityColumnBase0, realmPropertiesFloat.FindProperty("Probability")!, aCEDatabaseModelsWorldRealmPropertiesFloatMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)random_high_rangeColumnBase, realmPropertiesFloat.FindProperty("RandomHighRange")!, aCEDatabaseModelsWorldRealmPropertiesFloatMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)random_low_rangeColumnBase, realmPropertiesFloat.FindProperty("RandomLowRange")!, aCEDatabaseModelsWorldRealmPropertiesFloatMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)random_typeColumnBase, realmPropertiesFloat.FindProperty("RandomType")!, aCEDatabaseModelsWorldRealmPropertiesFloatMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)valueColumnBase0, realmPropertiesFloat.FindProperty("Value")!, aCEDatabaseModelsWorldRealmPropertiesFloatMappingBase);

            var tableMappings9 = new List<TableMapping>();
            realmPropertiesFloat.SetRuntimeAnnotation("Relational:TableMappings", tableMappings9);
            var realm_properties_floatTable = new Table("realm_properties_float", null, relationalModel);
            var realm_IdColumn0 = new Column("realm_Id", "smallint unsigned", realm_properties_floatTable);
            realm_properties_floatTable.Columns.Add("realm_Id", realm_IdColumn0);
            var typeColumn1 = new Column("type", "smallint unsigned", realm_properties_floatTable);
            realm_properties_floatTable.Columns.Add("type", typeColumn1);
            var composition_typeColumn = new Column("composition_type", "tinyint unsigned", realm_properties_floatTable);
            realm_properties_floatTable.Columns.Add("composition_type", composition_typeColumn);
            var lockedColumn0 = new Column("locked", "bit(1)", realm_properties_floatTable);
            realm_properties_floatTable.Columns.Add("locked", lockedColumn0);
            var probabilityColumn0 = new Column("probability", "double", realm_properties_floatTable)
            {
                IsNullable = true
            };
            realm_properties_floatTable.Columns.Add("probability", probabilityColumn0);
            var random_high_rangeColumn = new Column("random_high_range", "double", realm_properties_floatTable)
            {
                IsNullable = true
            };
            realm_properties_floatTable.Columns.Add("random_high_range", random_high_rangeColumn);
            var random_low_rangeColumn = new Column("random_low_range", "double", realm_properties_floatTable)
            {
                IsNullable = true
            };
            realm_properties_floatTable.Columns.Add("random_low_range", random_low_rangeColumn);
            var random_typeColumn = new Column("random_type", "tinyint unsigned", realm_properties_floatTable);
            realm_properties_floatTable.Columns.Add("random_type", random_typeColumn);
            var valueColumn0 = new Column("value", "double", realm_properties_floatTable)
            {
                IsNullable = true
            };
            realm_properties_floatTable.Columns.Add("value", valueColumn0);
            var pRIMARY1 = new UniqueConstraint("PRIMARY", realm_properties_floatTable, new[] { realm_IdColumn0, typeColumn1 });
            realm_properties_floatTable.PrimaryKey = pRIMARY1;
            var pRIMARY1Uc = RelationalModel.GetKey(this,
                "ACE.Database.Models.World.RealmPropertiesFloat",
                new[] { "RealmId", "Type" });
            pRIMARY1.MappedKeys.Add(pRIMARY1Uc);
            RelationalModel.GetOrCreateUniqueConstraints(pRIMARY1Uc).Add(pRIMARY1);
            realm_properties_floatTable.UniqueConstraints.Add("PRIMARY", pRIMARY1);
            var idx_type0 = new TableIndex(
            "idx_type", realm_properties_floatTable, new[] { typeColumn1 }, false);
            var idx_type0Ix = RelationalModel.GetIndex(this,
                "ACE.Database.Models.World.RealmPropertiesFloat",
                new[] { "Type" });
            idx_type0.MappedIndexes.Add(idx_type0Ix);
            RelationalModel.GetOrCreateTableIndexes(idx_type0Ix).Add(idx_type0);
            realm_properties_floatTable.Indexes.Add("idx_type", idx_type0);
            relationalModel.Tables.Add(("realm_properties_float", null), realm_properties_floatTable);
            var realm_properties_floatTableMapping = new TableMapping(realmPropertiesFloat, realm_properties_floatTable, true);
            realm_properties_floatTable.AddTypeMapping(realm_properties_floatTableMapping, false);
            tableMappings9.Add(realm_properties_floatTableMapping);
            RelationalModel.CreateColumnMapping(realm_IdColumn0, realmPropertiesFloat.FindProperty("RealmId")!, realm_properties_floatTableMapping);
            RelationalModel.CreateColumnMapping(typeColumn1, realmPropertiesFloat.FindProperty("Type")!, realm_properties_floatTableMapping);
            RelationalModel.CreateColumnMapping(composition_typeColumn, realmPropertiesFloat.FindProperty("CompositionType")!, realm_properties_floatTableMapping);
            RelationalModel.CreateColumnMapping(lockedColumn0, realmPropertiesFloat.FindProperty("Locked")!, realm_properties_floatTableMapping);
            RelationalModel.CreateColumnMapping(probabilityColumn0, realmPropertiesFloat.FindProperty("Probability")!, realm_properties_floatTableMapping);
            RelationalModel.CreateColumnMapping(random_high_rangeColumn, realmPropertiesFloat.FindProperty("RandomHighRange")!, realm_properties_floatTableMapping);
            RelationalModel.CreateColumnMapping(random_low_rangeColumn, realmPropertiesFloat.FindProperty("RandomLowRange")!, realm_properties_floatTableMapping);
            RelationalModel.CreateColumnMapping(random_typeColumn, realmPropertiesFloat.FindProperty("RandomType")!, realm_properties_floatTableMapping);
            RelationalModel.CreateColumnMapping(valueColumn0, realmPropertiesFloat.FindProperty("Value")!, realm_properties_floatTableMapping);

            var realmPropertiesInt = FindEntityType("ACE.Database.Models.World.RealmPropertiesInt")!;

            var defaultTableMappings10 = new List<TableMappingBase<ColumnMappingBase>>();
            realmPropertiesInt.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings10);
            var aCEDatabaseModelsWorldRealmPropertiesIntTableBase = new TableBase("ACE.Database.Models.World.RealmPropertiesInt", null, relationalModel);
            var composition_typeColumnBase0 = new ColumnBase<ColumnMappingBase>("composition_type", "tinyint unsigned", aCEDatabaseModelsWorldRealmPropertiesIntTableBase);
            aCEDatabaseModelsWorldRealmPropertiesIntTableBase.Columns.Add("composition_type", composition_typeColumnBase0);
            var lockedColumnBase1 = new ColumnBase<ColumnMappingBase>("locked", "bit(1)", aCEDatabaseModelsWorldRealmPropertiesIntTableBase);
            aCEDatabaseModelsWorldRealmPropertiesIntTableBase.Columns.Add("locked", lockedColumnBase1);
            var probabilityColumnBase1 = new ColumnBase<ColumnMappingBase>("probability", "double", aCEDatabaseModelsWorldRealmPropertiesIntTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsWorldRealmPropertiesIntTableBase.Columns.Add("probability", probabilityColumnBase1);
            var random_high_rangeColumnBase0 = new ColumnBase<ColumnMappingBase>("random_high_range", "int", aCEDatabaseModelsWorldRealmPropertiesIntTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsWorldRealmPropertiesIntTableBase.Columns.Add("random_high_range", random_high_rangeColumnBase0);
            var random_low_rangeColumnBase0 = new ColumnBase<ColumnMappingBase>("random_low_range", "int", aCEDatabaseModelsWorldRealmPropertiesIntTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsWorldRealmPropertiesIntTableBase.Columns.Add("random_low_range", random_low_rangeColumnBase0);
            var random_typeColumnBase0 = new ColumnBase<ColumnMappingBase>("random_type", "tinyint unsigned", aCEDatabaseModelsWorldRealmPropertiesIntTableBase);
            aCEDatabaseModelsWorldRealmPropertiesIntTableBase.Columns.Add("random_type", random_typeColumnBase0);
            var realm_IdColumnBase1 = new ColumnBase<ColumnMappingBase>("realm_Id", "smallint unsigned", aCEDatabaseModelsWorldRealmPropertiesIntTableBase);
            aCEDatabaseModelsWorldRealmPropertiesIntTableBase.Columns.Add("realm_Id", realm_IdColumnBase1);
            var typeColumnBase2 = new ColumnBase<ColumnMappingBase>("type", "smallint unsigned", aCEDatabaseModelsWorldRealmPropertiesIntTableBase);
            aCEDatabaseModelsWorldRealmPropertiesIntTableBase.Columns.Add("type", typeColumnBase2);
            var valueColumnBase1 = new ColumnBase<ColumnMappingBase>("value", "int", aCEDatabaseModelsWorldRealmPropertiesIntTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsWorldRealmPropertiesIntTableBase.Columns.Add("value", valueColumnBase1);
            relationalModel.DefaultTables.Add("ACE.Database.Models.World.RealmPropertiesInt", aCEDatabaseModelsWorldRealmPropertiesIntTableBase);
            var aCEDatabaseModelsWorldRealmPropertiesIntMappingBase = new TableMappingBase<ColumnMappingBase>(realmPropertiesInt, aCEDatabaseModelsWorldRealmPropertiesIntTableBase, true);
            aCEDatabaseModelsWorldRealmPropertiesIntTableBase.AddTypeMapping(aCEDatabaseModelsWorldRealmPropertiesIntMappingBase, false);
            defaultTableMappings10.Add(aCEDatabaseModelsWorldRealmPropertiesIntMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)realm_IdColumnBase1, realmPropertiesInt.FindProperty("RealmId")!, aCEDatabaseModelsWorldRealmPropertiesIntMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)typeColumnBase2, realmPropertiesInt.FindProperty("Type")!, aCEDatabaseModelsWorldRealmPropertiesIntMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)composition_typeColumnBase0, realmPropertiesInt.FindProperty("CompositionType")!, aCEDatabaseModelsWorldRealmPropertiesIntMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)lockedColumnBase1, realmPropertiesInt.FindProperty("Locked")!, aCEDatabaseModelsWorldRealmPropertiesIntMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)probabilityColumnBase1, realmPropertiesInt.FindProperty("Probability")!, aCEDatabaseModelsWorldRealmPropertiesIntMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)random_high_rangeColumnBase0, realmPropertiesInt.FindProperty("RandomHighRange")!, aCEDatabaseModelsWorldRealmPropertiesIntMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)random_low_rangeColumnBase0, realmPropertiesInt.FindProperty("RandomLowRange")!, aCEDatabaseModelsWorldRealmPropertiesIntMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)random_typeColumnBase0, realmPropertiesInt.FindProperty("RandomType")!, aCEDatabaseModelsWorldRealmPropertiesIntMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)valueColumnBase1, realmPropertiesInt.FindProperty("Value")!, aCEDatabaseModelsWorldRealmPropertiesIntMappingBase);

            var tableMappings10 = new List<TableMapping>();
            realmPropertiesInt.SetRuntimeAnnotation("Relational:TableMappings", tableMappings10);
            var realm_properties_intTable = new Table("realm_properties_int", null, relationalModel);
            var realm_IdColumn1 = new Column("realm_Id", "smallint unsigned", realm_properties_intTable);
            realm_properties_intTable.Columns.Add("realm_Id", realm_IdColumn1);
            var typeColumn2 = new Column("type", "smallint unsigned", realm_properties_intTable);
            realm_properties_intTable.Columns.Add("type", typeColumn2);
            var composition_typeColumn0 = new Column("composition_type", "tinyint unsigned", realm_properties_intTable);
            realm_properties_intTable.Columns.Add("composition_type", composition_typeColumn0);
            var lockedColumn1 = new Column("locked", "bit(1)", realm_properties_intTable);
            realm_properties_intTable.Columns.Add("locked", lockedColumn1);
            var probabilityColumn1 = new Column("probability", "double", realm_properties_intTable)
            {
                IsNullable = true
            };
            realm_properties_intTable.Columns.Add("probability", probabilityColumn1);
            var random_high_rangeColumn0 = new Column("random_high_range", "int", realm_properties_intTable)
            {
                IsNullable = true
            };
            realm_properties_intTable.Columns.Add("random_high_range", random_high_rangeColumn0);
            var random_low_rangeColumn0 = new Column("random_low_range", "int", realm_properties_intTable)
            {
                IsNullable = true
            };
            realm_properties_intTable.Columns.Add("random_low_range", random_low_rangeColumn0);
            var random_typeColumn0 = new Column("random_type", "tinyint unsigned", realm_properties_intTable);
            realm_properties_intTable.Columns.Add("random_type", random_typeColumn0);
            var valueColumn1 = new Column("value", "int", realm_properties_intTable)
            {
                IsNullable = true
            };
            realm_properties_intTable.Columns.Add("value", valueColumn1);
            var pRIMARY2 = new UniqueConstraint("PRIMARY", realm_properties_intTable, new[] { realm_IdColumn1, typeColumn2 });
            realm_properties_intTable.PrimaryKey = pRIMARY2;
            var pRIMARY2Uc = RelationalModel.GetKey(this,
                "ACE.Database.Models.World.RealmPropertiesInt",
                new[] { "RealmId", "Type" });
            pRIMARY2.MappedKeys.Add(pRIMARY2Uc);
            RelationalModel.GetOrCreateUniqueConstraints(pRIMARY2Uc).Add(pRIMARY2);
            realm_properties_intTable.UniqueConstraints.Add("PRIMARY", pRIMARY2);
            var idx_type1 = new TableIndex(
            "idx_type", realm_properties_intTable, new[] { typeColumn2 }, false);
            var idx_type1Ix = RelationalModel.GetIndex(this,
                "ACE.Database.Models.World.RealmPropertiesInt",
                new[] { "Type" });
            idx_type1.MappedIndexes.Add(idx_type1Ix);
            RelationalModel.GetOrCreateTableIndexes(idx_type1Ix).Add(idx_type1);
            realm_properties_intTable.Indexes.Add("idx_type", idx_type1);
            relationalModel.Tables.Add(("realm_properties_int", null), realm_properties_intTable);
            var realm_properties_intTableMapping = new TableMapping(realmPropertiesInt, realm_properties_intTable, true);
            realm_properties_intTable.AddTypeMapping(realm_properties_intTableMapping, false);
            tableMappings10.Add(realm_properties_intTableMapping);
            RelationalModel.CreateColumnMapping(realm_IdColumn1, realmPropertiesInt.FindProperty("RealmId")!, realm_properties_intTableMapping);
            RelationalModel.CreateColumnMapping(typeColumn2, realmPropertiesInt.FindProperty("Type")!, realm_properties_intTableMapping);
            RelationalModel.CreateColumnMapping(composition_typeColumn0, realmPropertiesInt.FindProperty("CompositionType")!, realm_properties_intTableMapping);
            RelationalModel.CreateColumnMapping(lockedColumn1, realmPropertiesInt.FindProperty("Locked")!, realm_properties_intTableMapping);
            RelationalModel.CreateColumnMapping(probabilityColumn1, realmPropertiesInt.FindProperty("Probability")!, realm_properties_intTableMapping);
            RelationalModel.CreateColumnMapping(random_high_rangeColumn0, realmPropertiesInt.FindProperty("RandomHighRange")!, realm_properties_intTableMapping);
            RelationalModel.CreateColumnMapping(random_low_rangeColumn0, realmPropertiesInt.FindProperty("RandomLowRange")!, realm_properties_intTableMapping);
            RelationalModel.CreateColumnMapping(random_typeColumn0, realmPropertiesInt.FindProperty("RandomType")!, realm_properties_intTableMapping);
            RelationalModel.CreateColumnMapping(valueColumn1, realmPropertiesInt.FindProperty("Value")!, realm_properties_intTableMapping);

            var realmPropertiesInt64 = FindEntityType("ACE.Database.Models.World.RealmPropertiesInt64")!;

            var defaultTableMappings11 = new List<TableMappingBase<ColumnMappingBase>>();
            realmPropertiesInt64.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings11);
            var aCEDatabaseModelsWorldRealmPropertiesInt64TableBase = new TableBase("ACE.Database.Models.World.RealmPropertiesInt64", null, relationalModel);
            var composition_typeColumnBase1 = new ColumnBase<ColumnMappingBase>("composition_type", "tinyint unsigned", aCEDatabaseModelsWorldRealmPropertiesInt64TableBase);
            aCEDatabaseModelsWorldRealmPropertiesInt64TableBase.Columns.Add("composition_type", composition_typeColumnBase1);
            var lockedColumnBase2 = new ColumnBase<ColumnMappingBase>("locked", "bit(1)", aCEDatabaseModelsWorldRealmPropertiesInt64TableBase);
            aCEDatabaseModelsWorldRealmPropertiesInt64TableBase.Columns.Add("locked", lockedColumnBase2);
            var probabilityColumnBase2 = new ColumnBase<ColumnMappingBase>("probability", "double", aCEDatabaseModelsWorldRealmPropertiesInt64TableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsWorldRealmPropertiesInt64TableBase.Columns.Add("probability", probabilityColumnBase2);
            var random_high_rangeColumnBase1 = new ColumnBase<ColumnMappingBase>("random_high_range", "bigint", aCEDatabaseModelsWorldRealmPropertiesInt64TableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsWorldRealmPropertiesInt64TableBase.Columns.Add("random_high_range", random_high_rangeColumnBase1);
            var random_low_rangeColumnBase1 = new ColumnBase<ColumnMappingBase>("random_low_range", "bigint", aCEDatabaseModelsWorldRealmPropertiesInt64TableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsWorldRealmPropertiesInt64TableBase.Columns.Add("random_low_range", random_low_rangeColumnBase1);
            var random_typeColumnBase1 = new ColumnBase<ColumnMappingBase>("random_type", "tinyint unsigned", aCEDatabaseModelsWorldRealmPropertiesInt64TableBase);
            aCEDatabaseModelsWorldRealmPropertiesInt64TableBase.Columns.Add("random_type", random_typeColumnBase1);
            var realm_IdColumnBase2 = new ColumnBase<ColumnMappingBase>("realm_Id", "smallint unsigned", aCEDatabaseModelsWorldRealmPropertiesInt64TableBase);
            aCEDatabaseModelsWorldRealmPropertiesInt64TableBase.Columns.Add("realm_Id", realm_IdColumnBase2);
            var typeColumnBase3 = new ColumnBase<ColumnMappingBase>("type", "smallint unsigned", aCEDatabaseModelsWorldRealmPropertiesInt64TableBase);
            aCEDatabaseModelsWorldRealmPropertiesInt64TableBase.Columns.Add("type", typeColumnBase3);
            var valueColumnBase2 = new ColumnBase<ColumnMappingBase>("value", "bigint", aCEDatabaseModelsWorldRealmPropertiesInt64TableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsWorldRealmPropertiesInt64TableBase.Columns.Add("value", valueColumnBase2);
            relationalModel.DefaultTables.Add("ACE.Database.Models.World.RealmPropertiesInt64", aCEDatabaseModelsWorldRealmPropertiesInt64TableBase);
            var aCEDatabaseModelsWorldRealmPropertiesInt64MappingBase = new TableMappingBase<ColumnMappingBase>(realmPropertiesInt64, aCEDatabaseModelsWorldRealmPropertiesInt64TableBase, true);
            aCEDatabaseModelsWorldRealmPropertiesInt64TableBase.AddTypeMapping(aCEDatabaseModelsWorldRealmPropertiesInt64MappingBase, false);
            defaultTableMappings11.Add(aCEDatabaseModelsWorldRealmPropertiesInt64MappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)realm_IdColumnBase2, realmPropertiesInt64.FindProperty("RealmId")!, aCEDatabaseModelsWorldRealmPropertiesInt64MappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)typeColumnBase3, realmPropertiesInt64.FindProperty("Type")!, aCEDatabaseModelsWorldRealmPropertiesInt64MappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)composition_typeColumnBase1, realmPropertiesInt64.FindProperty("CompositionType")!, aCEDatabaseModelsWorldRealmPropertiesInt64MappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)lockedColumnBase2, realmPropertiesInt64.FindProperty("Locked")!, aCEDatabaseModelsWorldRealmPropertiesInt64MappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)probabilityColumnBase2, realmPropertiesInt64.FindProperty("Probability")!, aCEDatabaseModelsWorldRealmPropertiesInt64MappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)random_high_rangeColumnBase1, realmPropertiesInt64.FindProperty("RandomHighRange")!, aCEDatabaseModelsWorldRealmPropertiesInt64MappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)random_low_rangeColumnBase1, realmPropertiesInt64.FindProperty("RandomLowRange")!, aCEDatabaseModelsWorldRealmPropertiesInt64MappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)random_typeColumnBase1, realmPropertiesInt64.FindProperty("RandomType")!, aCEDatabaseModelsWorldRealmPropertiesInt64MappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)valueColumnBase2, realmPropertiesInt64.FindProperty("Value")!, aCEDatabaseModelsWorldRealmPropertiesInt64MappingBase);

            var tableMappings11 = new List<TableMapping>();
            realmPropertiesInt64.SetRuntimeAnnotation("Relational:TableMappings", tableMappings11);
            var realm_properties_int64Table = new Table("realm_properties_int64", null, relationalModel);
            var realm_IdColumn2 = new Column("realm_Id", "smallint unsigned", realm_properties_int64Table);
            realm_properties_int64Table.Columns.Add("realm_Id", realm_IdColumn2);
            var typeColumn3 = new Column("type", "smallint unsigned", realm_properties_int64Table);
            realm_properties_int64Table.Columns.Add("type", typeColumn3);
            var composition_typeColumn1 = new Column("composition_type", "tinyint unsigned", realm_properties_int64Table);
            realm_properties_int64Table.Columns.Add("composition_type", composition_typeColumn1);
            var lockedColumn2 = new Column("locked", "bit(1)", realm_properties_int64Table);
            realm_properties_int64Table.Columns.Add("locked", lockedColumn2);
            var probabilityColumn2 = new Column("probability", "double", realm_properties_int64Table)
            {
                IsNullable = true
            };
            realm_properties_int64Table.Columns.Add("probability", probabilityColumn2);
            var random_high_rangeColumn1 = new Column("random_high_range", "bigint", realm_properties_int64Table)
            {
                IsNullable = true
            };
            realm_properties_int64Table.Columns.Add("random_high_range", random_high_rangeColumn1);
            var random_low_rangeColumn1 = new Column("random_low_range", "bigint", realm_properties_int64Table)
            {
                IsNullable = true
            };
            realm_properties_int64Table.Columns.Add("random_low_range", random_low_rangeColumn1);
            var random_typeColumn1 = new Column("random_type", "tinyint unsigned", realm_properties_int64Table);
            realm_properties_int64Table.Columns.Add("random_type", random_typeColumn1);
            var valueColumn2 = new Column("value", "bigint", realm_properties_int64Table)
            {
                IsNullable = true
            };
            realm_properties_int64Table.Columns.Add("value", valueColumn2);
            var pRIMARY3 = new UniqueConstraint("PRIMARY", realm_properties_int64Table, new[] { realm_IdColumn2, typeColumn3 });
            realm_properties_int64Table.PrimaryKey = pRIMARY3;
            var pRIMARY3Uc = RelationalModel.GetKey(this,
                "ACE.Database.Models.World.RealmPropertiesInt64",
                new[] { "RealmId", "Type" });
            pRIMARY3.MappedKeys.Add(pRIMARY3Uc);
            RelationalModel.GetOrCreateUniqueConstraints(pRIMARY3Uc).Add(pRIMARY3);
            realm_properties_int64Table.UniqueConstraints.Add("PRIMARY", pRIMARY3);
            relationalModel.Tables.Add(("realm_properties_int64", null), realm_properties_int64Table);
            var realm_properties_int64TableMapping = new TableMapping(realmPropertiesInt64, realm_properties_int64Table, true);
            realm_properties_int64Table.AddTypeMapping(realm_properties_int64TableMapping, false);
            tableMappings11.Add(realm_properties_int64TableMapping);
            RelationalModel.CreateColumnMapping(realm_IdColumn2, realmPropertiesInt64.FindProperty("RealmId")!, realm_properties_int64TableMapping);
            RelationalModel.CreateColumnMapping(typeColumn3, realmPropertiesInt64.FindProperty("Type")!, realm_properties_int64TableMapping);
            RelationalModel.CreateColumnMapping(composition_typeColumn1, realmPropertiesInt64.FindProperty("CompositionType")!, realm_properties_int64TableMapping);
            RelationalModel.CreateColumnMapping(lockedColumn2, realmPropertiesInt64.FindProperty("Locked")!, realm_properties_int64TableMapping);
            RelationalModel.CreateColumnMapping(probabilityColumn2, realmPropertiesInt64.FindProperty("Probability")!, realm_properties_int64TableMapping);
            RelationalModel.CreateColumnMapping(random_high_rangeColumn1, realmPropertiesInt64.FindProperty("RandomHighRange")!, realm_properties_int64TableMapping);
            RelationalModel.CreateColumnMapping(random_low_rangeColumn1, realmPropertiesInt64.FindProperty("RandomLowRange")!, realm_properties_int64TableMapping);
            RelationalModel.CreateColumnMapping(random_typeColumn1, realmPropertiesInt64.FindProperty("RandomType")!, realm_properties_int64TableMapping);
            RelationalModel.CreateColumnMapping(valueColumn2, realmPropertiesInt64.FindProperty("Value")!, realm_properties_int64TableMapping);

            var realmPropertiesString = FindEntityType("ACE.Database.Models.World.RealmPropertiesString")!;

            var defaultTableMappings12 = new List<TableMappingBase<ColumnMappingBase>>();
            realmPropertiesString.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings12);
            var aCEDatabaseModelsWorldRealmPropertiesStringTableBase = new TableBase("ACE.Database.Models.World.RealmPropertiesString", null, relationalModel);
            var lockedColumnBase3 = new ColumnBase<ColumnMappingBase>("locked", "bit(1)", aCEDatabaseModelsWorldRealmPropertiesStringTableBase);
            aCEDatabaseModelsWorldRealmPropertiesStringTableBase.Columns.Add("locked", lockedColumnBase3);
            var probabilityColumnBase3 = new ColumnBase<ColumnMappingBase>("probability", "double", aCEDatabaseModelsWorldRealmPropertiesStringTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsWorldRealmPropertiesStringTableBase.Columns.Add("probability", probabilityColumnBase3);
            var realm_IdColumnBase3 = new ColumnBase<ColumnMappingBase>("realm_Id", "smallint unsigned", aCEDatabaseModelsWorldRealmPropertiesStringTableBase);
            aCEDatabaseModelsWorldRealmPropertiesStringTableBase.Columns.Add("realm_Id", realm_IdColumnBase3);
            var typeColumnBase4 = new ColumnBase<ColumnMappingBase>("type", "smallint unsigned", aCEDatabaseModelsWorldRealmPropertiesStringTableBase);
            aCEDatabaseModelsWorldRealmPropertiesStringTableBase.Columns.Add("type", typeColumnBase4);
            var valueColumnBase3 = new ColumnBase<ColumnMappingBase>("value", "text", aCEDatabaseModelsWorldRealmPropertiesStringTableBase);
            aCEDatabaseModelsWorldRealmPropertiesStringTableBase.Columns.Add("value", valueColumnBase3);
            relationalModel.DefaultTables.Add("ACE.Database.Models.World.RealmPropertiesString", aCEDatabaseModelsWorldRealmPropertiesStringTableBase);
            var aCEDatabaseModelsWorldRealmPropertiesStringMappingBase = new TableMappingBase<ColumnMappingBase>(realmPropertiesString, aCEDatabaseModelsWorldRealmPropertiesStringTableBase, true);
            aCEDatabaseModelsWorldRealmPropertiesStringTableBase.AddTypeMapping(aCEDatabaseModelsWorldRealmPropertiesStringMappingBase, false);
            defaultTableMappings12.Add(aCEDatabaseModelsWorldRealmPropertiesStringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)realm_IdColumnBase3, realmPropertiesString.FindProperty("RealmId")!, aCEDatabaseModelsWorldRealmPropertiesStringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)typeColumnBase4, realmPropertiesString.FindProperty("Type")!, aCEDatabaseModelsWorldRealmPropertiesStringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)lockedColumnBase3, realmPropertiesString.FindProperty("Locked")!, aCEDatabaseModelsWorldRealmPropertiesStringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)probabilityColumnBase3, realmPropertiesString.FindProperty("Probability")!, aCEDatabaseModelsWorldRealmPropertiesStringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)valueColumnBase3, realmPropertiesString.FindProperty("Value")!, aCEDatabaseModelsWorldRealmPropertiesStringMappingBase);

            var tableMappings12 = new List<TableMapping>();
            realmPropertiesString.SetRuntimeAnnotation("Relational:TableMappings", tableMappings12);
            var realm_properties_stringTable = new Table("realm_properties_string", null, relationalModel);
            var realm_IdColumn3 = new Column("realm_Id", "smallint unsigned", realm_properties_stringTable);
            realm_properties_stringTable.Columns.Add("realm_Id", realm_IdColumn3);
            var typeColumn4 = new Column("type", "smallint unsigned", realm_properties_stringTable);
            realm_properties_stringTable.Columns.Add("type", typeColumn4);
            var lockedColumn3 = new Column("locked", "bit(1)", realm_properties_stringTable);
            realm_properties_stringTable.Columns.Add("locked", lockedColumn3);
            var probabilityColumn3 = new Column("probability", "double", realm_properties_stringTable)
            {
                IsNullable = true
            };
            realm_properties_stringTable.Columns.Add("probability", probabilityColumn3);
            var valueColumn3 = new Column("value", "text", realm_properties_stringTable);
            realm_properties_stringTable.Columns.Add("value", valueColumn3);
            var pRIMARY4 = new UniqueConstraint("PRIMARY", realm_properties_stringTable, new[] { realm_IdColumn3, typeColumn4 });
            realm_properties_stringTable.PrimaryKey = pRIMARY4;
            var pRIMARY4Uc = RelationalModel.GetKey(this,
                "ACE.Database.Models.World.RealmPropertiesString",
                new[] { "RealmId", "Type" });
            pRIMARY4.MappedKeys.Add(pRIMARY4Uc);
            RelationalModel.GetOrCreateUniqueConstraints(pRIMARY4Uc).Add(pRIMARY4);
            realm_properties_stringTable.UniqueConstraints.Add("PRIMARY", pRIMARY4);
            var idx_type2 = new TableIndex(
            "idx_type", realm_properties_stringTable, new[] { typeColumn4 }, false);
            var idx_type2Ix = RelationalModel.GetIndex(this,
                "ACE.Database.Models.World.RealmPropertiesString",
                new[] { "Type" });
            idx_type2.MappedIndexes.Add(idx_type2Ix);
            RelationalModel.GetOrCreateTableIndexes(idx_type2Ix).Add(idx_type2);
            realm_properties_stringTable.Indexes.Add("idx_type", idx_type2);
            relationalModel.Tables.Add(("realm_properties_string", null), realm_properties_stringTable);
            var realm_properties_stringTableMapping = new TableMapping(realmPropertiesString, realm_properties_stringTable, true);
            realm_properties_stringTable.AddTypeMapping(realm_properties_stringTableMapping, false);
            tableMappings12.Add(realm_properties_stringTableMapping);
            RelationalModel.CreateColumnMapping(realm_IdColumn3, realmPropertiesString.FindProperty("RealmId")!, realm_properties_stringTableMapping);
            RelationalModel.CreateColumnMapping(typeColumn4, realmPropertiesString.FindProperty("Type")!, realm_properties_stringTableMapping);
            RelationalModel.CreateColumnMapping(lockedColumn3, realmPropertiesString.FindProperty("Locked")!, realm_properties_stringTableMapping);
            RelationalModel.CreateColumnMapping(probabilityColumn3, realmPropertiesString.FindProperty("Probability")!, realm_properties_stringTableMapping);
            RelationalModel.CreateColumnMapping(valueColumn3, realmPropertiesString.FindProperty("Value")!, realm_properties_stringTableMapping);

            var realmRulesetLinks = FindEntityType("ACE.Database.Models.World.RealmRulesetLinks")!;

            var defaultTableMappings13 = new List<TableMappingBase<ColumnMappingBase>>();
            realmRulesetLinks.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings13);
            var aCEDatabaseModelsWorldRealmRulesetLinksTableBase = new TableBase("ACE.Database.Models.World.RealmRulesetLinks", null, relationalModel);
            var link_typeColumnBase = new ColumnBase<ColumnMappingBase>("link_type", "smallint unsigned", aCEDatabaseModelsWorldRealmRulesetLinksTableBase);
            aCEDatabaseModelsWorldRealmRulesetLinksTableBase.Columns.Add("link_type", link_typeColumnBase);
            var linked_realm_idColumnBase = new ColumnBase<ColumnMappingBase>("linked_realm_id", "smallint unsigned", aCEDatabaseModelsWorldRealmRulesetLinksTableBase);
            aCEDatabaseModelsWorldRealmRulesetLinksTableBase.Columns.Add("linked_realm_id", linked_realm_idColumnBase);
            var orderColumnBase = new ColumnBase<ColumnMappingBase>("order", "smallint unsigned", aCEDatabaseModelsWorldRealmRulesetLinksTableBase);
            aCEDatabaseModelsWorldRealmRulesetLinksTableBase.Columns.Add("order", orderColumnBase);
            var probabilityColumnBase4 = new ColumnBase<ColumnMappingBase>("probability", "double", aCEDatabaseModelsWorldRealmRulesetLinksTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsWorldRealmRulesetLinksTableBase.Columns.Add("probability", probabilityColumnBase4);
            var probability_groupColumnBase = new ColumnBase<ColumnMappingBase>("probability_group", "tinyint unsigned", aCEDatabaseModelsWorldRealmRulesetLinksTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsWorldRealmRulesetLinksTableBase.Columns.Add("probability_group", probability_groupColumnBase);
            var realm_idColumnBase = new ColumnBase<ColumnMappingBase>("realm_id", "smallint unsigned", aCEDatabaseModelsWorldRealmRulesetLinksTableBase);
            aCEDatabaseModelsWorldRealmRulesetLinksTableBase.Columns.Add("realm_id", realm_idColumnBase);
            relationalModel.DefaultTables.Add("ACE.Database.Models.World.RealmRulesetLinks", aCEDatabaseModelsWorldRealmRulesetLinksTableBase);
            var aCEDatabaseModelsWorldRealmRulesetLinksMappingBase = new TableMappingBase<ColumnMappingBase>(realmRulesetLinks, aCEDatabaseModelsWorldRealmRulesetLinksTableBase, true);
            aCEDatabaseModelsWorldRealmRulesetLinksTableBase.AddTypeMapping(aCEDatabaseModelsWorldRealmRulesetLinksMappingBase, false);
            defaultTableMappings13.Add(aCEDatabaseModelsWorldRealmRulesetLinksMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)orderColumnBase, realmRulesetLinks.FindProperty("Order")!, aCEDatabaseModelsWorldRealmRulesetLinksMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)realm_idColumnBase, realmRulesetLinks.FindProperty("RealmId")!, aCEDatabaseModelsWorldRealmRulesetLinksMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)link_typeColumnBase, realmRulesetLinks.FindProperty("LinkType")!, aCEDatabaseModelsWorldRealmRulesetLinksMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)linked_realm_idColumnBase, realmRulesetLinks.FindProperty("LinkedRealmId")!, aCEDatabaseModelsWorldRealmRulesetLinksMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)probabilityColumnBase4, realmRulesetLinks.FindProperty("Probability")!, aCEDatabaseModelsWorldRealmRulesetLinksMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)probability_groupColumnBase, realmRulesetLinks.FindProperty("ProbabilityGroup")!, aCEDatabaseModelsWorldRealmRulesetLinksMappingBase);

            var tableMappings13 = new List<TableMapping>();
            realmRulesetLinks.SetRuntimeAnnotation("Relational:TableMappings", tableMappings13);
            var realm_ruleset_linksTable = new Table("realm_ruleset_links", null, relationalModel);
            var realm_idColumn = new Column("realm_id", "smallint unsigned", realm_ruleset_linksTable);
            realm_ruleset_linksTable.Columns.Add("realm_id", realm_idColumn);
            var orderColumn = new Column("order", "smallint unsigned", realm_ruleset_linksTable);
            realm_ruleset_linksTable.Columns.Add("order", orderColumn);
            var link_typeColumn = new Column("link_type", "smallint unsigned", realm_ruleset_linksTable);
            realm_ruleset_linksTable.Columns.Add("link_type", link_typeColumn);
            var linked_realm_idColumn = new Column("linked_realm_id", "smallint unsigned", realm_ruleset_linksTable);
            realm_ruleset_linksTable.Columns.Add("linked_realm_id", linked_realm_idColumn);
            var probabilityColumn4 = new Column("probability", "double", realm_ruleset_linksTable)
            {
                IsNullable = true
            };
            realm_ruleset_linksTable.Columns.Add("probability", probabilityColumn4);
            var probability_groupColumn = new Column("probability_group", "tinyint unsigned", realm_ruleset_linksTable)
            {
                IsNullable = true
            };
            realm_ruleset_linksTable.Columns.Add("probability_group", probability_groupColumn);
            var pRIMARY5 = new UniqueConstraint("PRIMARY", realm_ruleset_linksTable, new[] { realm_idColumn, orderColumn });
            realm_ruleset_linksTable.PrimaryKey = pRIMARY5;
            var pRIMARY5Uc = RelationalModel.GetKey(this,
                "ACE.Database.Models.World.RealmRulesetLinks",
                new[] { "RealmId", "Order" });
            pRIMARY5.MappedKeys.Add(pRIMARY5Uc);
            RelationalModel.GetOrCreateUniqueConstraints(pRIMARY5Uc).Add(pRIMARY5);
            realm_ruleset_linksTable.UniqueConstraints.Add("PRIMARY", pRIMARY5);
            var realm_link_child = new TableIndex(
            "realm_link_child", realm_ruleset_linksTable, new[] { linked_realm_idColumn }, false);
            var realm_link_childIx = RelationalModel.GetIndex(this,
                "ACE.Database.Models.World.RealmRulesetLinks",
                new[] { "LinkedRealmId" });
            realm_link_child.MappedIndexes.Add(realm_link_childIx);
            RelationalModel.GetOrCreateTableIndexes(realm_link_childIx).Add(realm_link_child);
            realm_ruleset_linksTable.Indexes.Add("realm_link_child", realm_link_child);
            relationalModel.Tables.Add(("realm_ruleset_links", null), realm_ruleset_linksTable);
            var realm_ruleset_linksTableMapping = new TableMapping(realmRulesetLinks, realm_ruleset_linksTable, true);
            realm_ruleset_linksTable.AddTypeMapping(realm_ruleset_linksTableMapping, false);
            tableMappings13.Add(realm_ruleset_linksTableMapping);
            RelationalModel.CreateColumnMapping(orderColumn, realmRulesetLinks.FindProperty("Order")!, realm_ruleset_linksTableMapping);
            RelationalModel.CreateColumnMapping(realm_idColumn, realmRulesetLinks.FindProperty("RealmId")!, realm_ruleset_linksTableMapping);
            RelationalModel.CreateColumnMapping(link_typeColumn, realmRulesetLinks.FindProperty("LinkType")!, realm_ruleset_linksTableMapping);
            RelationalModel.CreateColumnMapping(linked_realm_idColumn, realmRulesetLinks.FindProperty("LinkedRealmId")!, realm_ruleset_linksTableMapping);
            RelationalModel.CreateColumnMapping(probabilityColumn4, realmRulesetLinks.FindProperty("Probability")!, realm_ruleset_linksTableMapping);
            RelationalModel.CreateColumnMapping(probability_groupColumn, realmRulesetLinks.FindProperty("ProbabilityGroup")!, realm_ruleset_linksTableMapping);

            var recipe = FindEntityType("ACE.Database.Models.World.Recipe")!;

            var defaultTableMappings14 = new List<TableMappingBase<ColumnMappingBase>>();
            recipe.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings14);
            var aCEDatabaseModelsWorldRecipeTableBase = new TableBase("ACE.Database.Models.World.Recipe", null, relationalModel);
            var data_IdColumnBase = new ColumnBase<ColumnMappingBase>("data_Id", "int unsigned", aCEDatabaseModelsWorldRecipeTableBase);
            aCEDatabaseModelsWorldRecipeTableBase.Columns.Add("data_Id", data_IdColumnBase);
            var difficultyColumnBase = new ColumnBase<ColumnMappingBase>("difficulty", "int unsigned", aCEDatabaseModelsWorldRecipeTableBase);
            aCEDatabaseModelsWorldRecipeTableBase.Columns.Add("difficulty", difficultyColumnBase);
            var fail_AmountColumnBase = new ColumnBase<ColumnMappingBase>("fail_Amount", "int unsigned", aCEDatabaseModelsWorldRecipeTableBase);
            aCEDatabaseModelsWorldRecipeTableBase.Columns.Add("fail_Amount", fail_AmountColumnBase);
            var fail_Destroy_Source_AmountColumnBase = new ColumnBase<ColumnMappingBase>("fail_Destroy_Source_Amount", "int unsigned", aCEDatabaseModelsWorldRecipeTableBase);
            aCEDatabaseModelsWorldRecipeTableBase.Columns.Add("fail_Destroy_Source_Amount", fail_Destroy_Source_AmountColumnBase);
            var fail_Destroy_Source_ChanceColumnBase = new ColumnBase<ColumnMappingBase>("fail_Destroy_Source_Chance", "double", aCEDatabaseModelsWorldRecipeTableBase);
            aCEDatabaseModelsWorldRecipeTableBase.Columns.Add("fail_Destroy_Source_Chance", fail_Destroy_Source_ChanceColumnBase);
            var fail_Destroy_Source_MessageColumnBase = new ColumnBase<ColumnMappingBase>("fail_Destroy_Source_Message", "text", aCEDatabaseModelsWorldRecipeTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsWorldRecipeTableBase.Columns.Add("fail_Destroy_Source_Message", fail_Destroy_Source_MessageColumnBase);
            var fail_Destroy_Target_AmountColumnBase = new ColumnBase<ColumnMappingBase>("fail_Destroy_Target_Amount", "int unsigned", aCEDatabaseModelsWorldRecipeTableBase);
            aCEDatabaseModelsWorldRecipeTableBase.Columns.Add("fail_Destroy_Target_Amount", fail_Destroy_Target_AmountColumnBase);
            var fail_Destroy_Target_ChanceColumnBase = new ColumnBase<ColumnMappingBase>("fail_Destroy_Target_Chance", "double", aCEDatabaseModelsWorldRecipeTableBase);
            aCEDatabaseModelsWorldRecipeTableBase.Columns.Add("fail_Destroy_Target_Chance", fail_Destroy_Target_ChanceColumnBase);
            var fail_Destroy_Target_MessageColumnBase = new ColumnBase<ColumnMappingBase>("fail_Destroy_Target_Message", "text", aCEDatabaseModelsWorldRecipeTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsWorldRecipeTableBase.Columns.Add("fail_Destroy_Target_Message", fail_Destroy_Target_MessageColumnBase);
            var fail_MessageColumnBase = new ColumnBase<ColumnMappingBase>("fail_Message", "text", aCEDatabaseModelsWorldRecipeTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsWorldRecipeTableBase.Columns.Add("fail_Message", fail_MessageColumnBase);
            var fail_W_C_I_DColumnBase = new ColumnBase<ColumnMappingBase>("fail_W_C_I_D", "int unsigned", aCEDatabaseModelsWorldRecipeTableBase);
            aCEDatabaseModelsWorldRecipeTableBase.Columns.Add("fail_W_C_I_D", fail_W_C_I_DColumnBase);
            var idColumnBase7 = new ColumnBase<ColumnMappingBase>("id", "int unsigned", aCEDatabaseModelsWorldRecipeTableBase);
            aCEDatabaseModelsWorldRecipeTableBase.Columns.Add("id", idColumnBase7);
            var last_ModifiedColumnBase7 = new ColumnBase<ColumnMappingBase>("last_Modified", "datetime", aCEDatabaseModelsWorldRecipeTableBase);
            aCEDatabaseModelsWorldRecipeTableBase.Columns.Add("last_Modified", last_ModifiedColumnBase7);
            var salvage_TypeColumnBase = new ColumnBase<ColumnMappingBase>("salvage_Type", "int unsigned", aCEDatabaseModelsWorldRecipeTableBase);
            aCEDatabaseModelsWorldRecipeTableBase.Columns.Add("salvage_Type", salvage_TypeColumnBase);
            var skillColumnBase = new ColumnBase<ColumnMappingBase>("skill", "int unsigned", aCEDatabaseModelsWorldRecipeTableBase);
            aCEDatabaseModelsWorldRecipeTableBase.Columns.Add("skill", skillColumnBase);
            var success_AmountColumnBase = new ColumnBase<ColumnMappingBase>("success_Amount", "int unsigned", aCEDatabaseModelsWorldRecipeTableBase);
            aCEDatabaseModelsWorldRecipeTableBase.Columns.Add("success_Amount", success_AmountColumnBase);
            var success_Destroy_Source_AmountColumnBase = new ColumnBase<ColumnMappingBase>("success_Destroy_Source_Amount", "int unsigned", aCEDatabaseModelsWorldRecipeTableBase);
            aCEDatabaseModelsWorldRecipeTableBase.Columns.Add("success_Destroy_Source_Amount", success_Destroy_Source_AmountColumnBase);
            var success_Destroy_Source_ChanceColumnBase = new ColumnBase<ColumnMappingBase>("success_Destroy_Source_Chance", "double", aCEDatabaseModelsWorldRecipeTableBase);
            aCEDatabaseModelsWorldRecipeTableBase.Columns.Add("success_Destroy_Source_Chance", success_Destroy_Source_ChanceColumnBase);
            var success_Destroy_Source_MessageColumnBase = new ColumnBase<ColumnMappingBase>("success_Destroy_Source_Message", "text", aCEDatabaseModelsWorldRecipeTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsWorldRecipeTableBase.Columns.Add("success_Destroy_Source_Message", success_Destroy_Source_MessageColumnBase);
            var success_Destroy_Target_AmountColumnBase = new ColumnBase<ColumnMappingBase>("success_Destroy_Target_Amount", "int unsigned", aCEDatabaseModelsWorldRecipeTableBase);
            aCEDatabaseModelsWorldRecipeTableBase.Columns.Add("success_Destroy_Target_Amount", success_Destroy_Target_AmountColumnBase);
            var success_Destroy_Target_ChanceColumnBase = new ColumnBase<ColumnMappingBase>("success_Destroy_Target_Chance", "double", aCEDatabaseModelsWorldRecipeTableBase);
            aCEDatabaseModelsWorldRecipeTableBase.Columns.Add("success_Destroy_Target_Chance", success_Destroy_Target_ChanceColumnBase);
            var success_Destroy_Target_MessageColumnBase = new ColumnBase<ColumnMappingBase>("success_Destroy_Target_Message", "text", aCEDatabaseModelsWorldRecipeTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsWorldRecipeTableBase.Columns.Add("success_Destroy_Target_Message", success_Destroy_Target_MessageColumnBase);
            var success_MessageColumnBase = new ColumnBase<ColumnMappingBase>("success_Message", "text", aCEDatabaseModelsWorldRecipeTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsWorldRecipeTableBase.Columns.Add("success_Message", success_MessageColumnBase);
            var success_W_C_I_DColumnBase = new ColumnBase<ColumnMappingBase>("success_W_C_I_D", "int unsigned", aCEDatabaseModelsWorldRecipeTableBase);
            aCEDatabaseModelsWorldRecipeTableBase.Columns.Add("success_W_C_I_D", success_W_C_I_DColumnBase);
            var unknown_1ColumnBase = new ColumnBase<ColumnMappingBase>("unknown_1", "int unsigned", aCEDatabaseModelsWorldRecipeTableBase);
            aCEDatabaseModelsWorldRecipeTableBase.Columns.Add("unknown_1", unknown_1ColumnBase);
            relationalModel.DefaultTables.Add("ACE.Database.Models.World.Recipe", aCEDatabaseModelsWorldRecipeTableBase);
            var aCEDatabaseModelsWorldRecipeMappingBase = new TableMappingBase<ColumnMappingBase>(recipe, aCEDatabaseModelsWorldRecipeTableBase, true);
            aCEDatabaseModelsWorldRecipeTableBase.AddTypeMapping(aCEDatabaseModelsWorldRecipeMappingBase, false);
            defaultTableMappings14.Add(aCEDatabaseModelsWorldRecipeMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase7, recipe.FindProperty("Id")!, aCEDatabaseModelsWorldRecipeMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)data_IdColumnBase, recipe.FindProperty("DataId")!, aCEDatabaseModelsWorldRecipeMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)difficultyColumnBase, recipe.FindProperty("Difficulty")!, aCEDatabaseModelsWorldRecipeMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)fail_AmountColumnBase, recipe.FindProperty("FailAmount")!, aCEDatabaseModelsWorldRecipeMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)fail_Destroy_Source_AmountColumnBase, recipe.FindProperty("FailDestroySourceAmount")!, aCEDatabaseModelsWorldRecipeMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)fail_Destroy_Source_ChanceColumnBase, recipe.FindProperty("FailDestroySourceChance")!, aCEDatabaseModelsWorldRecipeMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)fail_Destroy_Source_MessageColumnBase, recipe.FindProperty("FailDestroySourceMessage")!, aCEDatabaseModelsWorldRecipeMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)fail_Destroy_Target_AmountColumnBase, recipe.FindProperty("FailDestroyTargetAmount")!, aCEDatabaseModelsWorldRecipeMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)fail_Destroy_Target_ChanceColumnBase, recipe.FindProperty("FailDestroyTargetChance")!, aCEDatabaseModelsWorldRecipeMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)fail_Destroy_Target_MessageColumnBase, recipe.FindProperty("FailDestroyTargetMessage")!, aCEDatabaseModelsWorldRecipeMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)fail_MessageColumnBase, recipe.FindProperty("FailMessage")!, aCEDatabaseModelsWorldRecipeMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)fail_W_C_I_DColumnBase, recipe.FindProperty("FailWCID")!, aCEDatabaseModelsWorldRecipeMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)last_ModifiedColumnBase7, recipe.FindProperty("LastModified")!, aCEDatabaseModelsWorldRecipeMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)salvage_TypeColumnBase, recipe.FindProperty("SalvageType")!, aCEDatabaseModelsWorldRecipeMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)skillColumnBase, recipe.FindProperty("Skill")!, aCEDatabaseModelsWorldRecipeMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)success_AmountColumnBase, recipe.FindProperty("SuccessAmount")!, aCEDatabaseModelsWorldRecipeMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)success_Destroy_Source_AmountColumnBase, recipe.FindProperty("SuccessDestroySourceAmount")!, aCEDatabaseModelsWorldRecipeMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)success_Destroy_Source_ChanceColumnBase, recipe.FindProperty("SuccessDestroySourceChance")!, aCEDatabaseModelsWorldRecipeMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)success_Destroy_Source_MessageColumnBase, recipe.FindProperty("SuccessDestroySourceMessage")!, aCEDatabaseModelsWorldRecipeMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)success_Destroy_Target_AmountColumnBase, recipe.FindProperty("SuccessDestroyTargetAmount")!, aCEDatabaseModelsWorldRecipeMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)success_Destroy_Target_ChanceColumnBase, recipe.FindProperty("SuccessDestroyTargetChance")!, aCEDatabaseModelsWorldRecipeMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)success_Destroy_Target_MessageColumnBase, recipe.FindProperty("SuccessDestroyTargetMessage")!, aCEDatabaseModelsWorldRecipeMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)success_MessageColumnBase, recipe.FindProperty("SuccessMessage")!, aCEDatabaseModelsWorldRecipeMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)success_W_C_I_DColumnBase, recipe.FindProperty("SuccessWCID")!, aCEDatabaseModelsWorldRecipeMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)unknown_1ColumnBase, recipe.FindProperty("Unknown1")!, aCEDatabaseModelsWorldRecipeMappingBase);

            var tableMappings14 = new List<TableMapping>();
            recipe.SetRuntimeAnnotation("Relational:TableMappings", tableMappings14);
            var recipeTable = new Table("recipe", null, relationalModel);
            var idColumn7 = new Column("id", "int unsigned", recipeTable);
            recipeTable.Columns.Add("id", idColumn7);
            var data_IdColumn = new Column("data_Id", "int unsigned", recipeTable);
            recipeTable.Columns.Add("data_Id", data_IdColumn);
            var difficultyColumn = new Column("difficulty", "int unsigned", recipeTable);
            recipeTable.Columns.Add("difficulty", difficultyColumn);
            var fail_AmountColumn = new Column("fail_Amount", "int unsigned", recipeTable);
            recipeTable.Columns.Add("fail_Amount", fail_AmountColumn);
            var fail_Destroy_Source_AmountColumn = new Column("fail_Destroy_Source_Amount", "int unsigned", recipeTable);
            recipeTable.Columns.Add("fail_Destroy_Source_Amount", fail_Destroy_Source_AmountColumn);
            var fail_Destroy_Source_ChanceColumn = new Column("fail_Destroy_Source_Chance", "double", recipeTable);
            recipeTable.Columns.Add("fail_Destroy_Source_Chance", fail_Destroy_Source_ChanceColumn);
            var fail_Destroy_Source_MessageColumn = new Column("fail_Destroy_Source_Message", "text", recipeTable)
            {
                IsNullable = true
            };
            recipeTable.Columns.Add("fail_Destroy_Source_Message", fail_Destroy_Source_MessageColumn);
            var fail_Destroy_Target_AmountColumn = new Column("fail_Destroy_Target_Amount", "int unsigned", recipeTable);
            recipeTable.Columns.Add("fail_Destroy_Target_Amount", fail_Destroy_Target_AmountColumn);
            var fail_Destroy_Target_ChanceColumn = new Column("fail_Destroy_Target_Chance", "double", recipeTable);
            recipeTable.Columns.Add("fail_Destroy_Target_Chance", fail_Destroy_Target_ChanceColumn);
            var fail_Destroy_Target_MessageColumn = new Column("fail_Destroy_Target_Message", "text", recipeTable)
            {
                IsNullable = true
            };
            recipeTable.Columns.Add("fail_Destroy_Target_Message", fail_Destroy_Target_MessageColumn);
            var fail_MessageColumn = new Column("fail_Message", "text", recipeTable)
            {
                IsNullable = true
            };
            recipeTable.Columns.Add("fail_Message", fail_MessageColumn);
            var fail_W_C_I_DColumn = new Column("fail_W_C_I_D", "int unsigned", recipeTable);
            recipeTable.Columns.Add("fail_W_C_I_D", fail_W_C_I_DColumn);
            var last_ModifiedColumn7 = new Column("last_Modified", "datetime", recipeTable);
            recipeTable.Columns.Add("last_Modified", last_ModifiedColumn7);
            var salvage_TypeColumn = new Column("salvage_Type", "int unsigned", recipeTable);
            recipeTable.Columns.Add("salvage_Type", salvage_TypeColumn);
            var skillColumn = new Column("skill", "int unsigned", recipeTable);
            recipeTable.Columns.Add("skill", skillColumn);
            var success_AmountColumn = new Column("success_Amount", "int unsigned", recipeTable);
            recipeTable.Columns.Add("success_Amount", success_AmountColumn);
            var success_Destroy_Source_AmountColumn = new Column("success_Destroy_Source_Amount", "int unsigned", recipeTable);
            recipeTable.Columns.Add("success_Destroy_Source_Amount", success_Destroy_Source_AmountColumn);
            var success_Destroy_Source_ChanceColumn = new Column("success_Destroy_Source_Chance", "double", recipeTable);
            recipeTable.Columns.Add("success_Destroy_Source_Chance", success_Destroy_Source_ChanceColumn);
            var success_Destroy_Source_MessageColumn = new Column("success_Destroy_Source_Message", "text", recipeTable)
            {
                IsNullable = true
            };
            recipeTable.Columns.Add("success_Destroy_Source_Message", success_Destroy_Source_MessageColumn);
            var success_Destroy_Target_AmountColumn = new Column("success_Destroy_Target_Amount", "int unsigned", recipeTable);
            recipeTable.Columns.Add("success_Destroy_Target_Amount", success_Destroy_Target_AmountColumn);
            var success_Destroy_Target_ChanceColumn = new Column("success_Destroy_Target_Chance", "double", recipeTable);
            recipeTable.Columns.Add("success_Destroy_Target_Chance", success_Destroy_Target_ChanceColumn);
            var success_Destroy_Target_MessageColumn = new Column("success_Destroy_Target_Message", "text", recipeTable)
            {
                IsNullable = true
            };
            recipeTable.Columns.Add("success_Destroy_Target_Message", success_Destroy_Target_MessageColumn);
            var success_MessageColumn = new Column("success_Message", "text", recipeTable)
            {
                IsNullable = true
            };
            recipeTable.Columns.Add("success_Message", success_MessageColumn);
            var success_W_C_I_DColumn = new Column("success_W_C_I_D", "int unsigned", recipeTable);
            recipeTable.Columns.Add("success_W_C_I_D", success_W_C_I_DColumn);
            var unknown_1Column = new Column("unknown_1", "int unsigned", recipeTable);
            recipeTable.Columns.Add("unknown_1", unknown_1Column);
            var pK_recipe = new UniqueConstraint("PK_recipe", recipeTable, new[] { idColumn7 });
            recipeTable.PrimaryKey = pK_recipe;
            var pK_recipeUc = RelationalModel.GetKey(this,
                "ACE.Database.Models.World.Recipe",
                new[] { "Id" });
            pK_recipe.MappedKeys.Add(pK_recipeUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_recipeUc).Add(pK_recipe);
            recipeTable.UniqueConstraints.Add("PK_recipe", pK_recipe);
            relationalModel.Tables.Add(("recipe", null), recipeTable);
            var recipeTableMapping = new TableMapping(recipe, recipeTable, true);
            recipeTable.AddTypeMapping(recipeTableMapping, false);
            tableMappings14.Add(recipeTableMapping);
            RelationalModel.CreateColumnMapping(idColumn7, recipe.FindProperty("Id")!, recipeTableMapping);
            RelationalModel.CreateColumnMapping(data_IdColumn, recipe.FindProperty("DataId")!, recipeTableMapping);
            RelationalModel.CreateColumnMapping(difficultyColumn, recipe.FindProperty("Difficulty")!, recipeTableMapping);
            RelationalModel.CreateColumnMapping(fail_AmountColumn, recipe.FindProperty("FailAmount")!, recipeTableMapping);
            RelationalModel.CreateColumnMapping(fail_Destroy_Source_AmountColumn, recipe.FindProperty("FailDestroySourceAmount")!, recipeTableMapping);
            RelationalModel.CreateColumnMapping(fail_Destroy_Source_ChanceColumn, recipe.FindProperty("FailDestroySourceChance")!, recipeTableMapping);
            RelationalModel.CreateColumnMapping(fail_Destroy_Source_MessageColumn, recipe.FindProperty("FailDestroySourceMessage")!, recipeTableMapping);
            RelationalModel.CreateColumnMapping(fail_Destroy_Target_AmountColumn, recipe.FindProperty("FailDestroyTargetAmount")!, recipeTableMapping);
            RelationalModel.CreateColumnMapping(fail_Destroy_Target_ChanceColumn, recipe.FindProperty("FailDestroyTargetChance")!, recipeTableMapping);
            RelationalModel.CreateColumnMapping(fail_Destroy_Target_MessageColumn, recipe.FindProperty("FailDestroyTargetMessage")!, recipeTableMapping);
            RelationalModel.CreateColumnMapping(fail_MessageColumn, recipe.FindProperty("FailMessage")!, recipeTableMapping);
            RelationalModel.CreateColumnMapping(fail_W_C_I_DColumn, recipe.FindProperty("FailWCID")!, recipeTableMapping);
            RelationalModel.CreateColumnMapping(last_ModifiedColumn7, recipe.FindProperty("LastModified")!, recipeTableMapping);
            RelationalModel.CreateColumnMapping(salvage_TypeColumn, recipe.FindProperty("SalvageType")!, recipeTableMapping);
            RelationalModel.CreateColumnMapping(skillColumn, recipe.FindProperty("Skill")!, recipeTableMapping);
            RelationalModel.CreateColumnMapping(success_AmountColumn, recipe.FindProperty("SuccessAmount")!, recipeTableMapping);
            RelationalModel.CreateColumnMapping(success_Destroy_Source_AmountColumn, recipe.FindProperty("SuccessDestroySourceAmount")!, recipeTableMapping);
            RelationalModel.CreateColumnMapping(success_Destroy_Source_ChanceColumn, recipe.FindProperty("SuccessDestroySourceChance")!, recipeTableMapping);
            RelationalModel.CreateColumnMapping(success_Destroy_Source_MessageColumn, recipe.FindProperty("SuccessDestroySourceMessage")!, recipeTableMapping);
            RelationalModel.CreateColumnMapping(success_Destroy_Target_AmountColumn, recipe.FindProperty("SuccessDestroyTargetAmount")!, recipeTableMapping);
            RelationalModel.CreateColumnMapping(success_Destroy_Target_ChanceColumn, recipe.FindProperty("SuccessDestroyTargetChance")!, recipeTableMapping);
            RelationalModel.CreateColumnMapping(success_Destroy_Target_MessageColumn, recipe.FindProperty("SuccessDestroyTargetMessage")!, recipeTableMapping);
            RelationalModel.CreateColumnMapping(success_MessageColumn, recipe.FindProperty("SuccessMessage")!, recipeTableMapping);
            RelationalModel.CreateColumnMapping(success_W_C_I_DColumn, recipe.FindProperty("SuccessWCID")!, recipeTableMapping);
            RelationalModel.CreateColumnMapping(unknown_1Column, recipe.FindProperty("Unknown1")!, recipeTableMapping);

            var recipeMod = FindEntityType("ACE.Database.Models.World.RecipeMod")!;

            var defaultTableMappings15 = new List<TableMappingBase<ColumnMappingBase>>();
            recipeMod.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings15);
            var aCEDatabaseModelsWorldRecipeModTableBase = new TableBase("ACE.Database.Models.World.RecipeMod", null, relationalModel);
            var data_IdColumnBase0 = new ColumnBase<ColumnMappingBase>("data_Id", "int", aCEDatabaseModelsWorldRecipeModTableBase);
            aCEDatabaseModelsWorldRecipeModTableBase.Columns.Add("data_Id", data_IdColumnBase0);
            var executes_On_SuccessColumnBase = new ColumnBase<ColumnMappingBase>("executes_On_Success", "bit(1)", aCEDatabaseModelsWorldRecipeModTableBase);
            aCEDatabaseModelsWorldRecipeModTableBase.Columns.Add("executes_On_Success", executes_On_SuccessColumnBase);
            var healthColumnBase = new ColumnBase<ColumnMappingBase>("health", "int", aCEDatabaseModelsWorldRecipeModTableBase);
            aCEDatabaseModelsWorldRecipeModTableBase.Columns.Add("health", healthColumnBase);
            var idColumnBase8 = new ColumnBase<ColumnMappingBase>("id", "int unsigned", aCEDatabaseModelsWorldRecipeModTableBase);
            aCEDatabaseModelsWorldRecipeModTableBase.Columns.Add("id", idColumnBase8);
            var instance_IdColumnBase = new ColumnBase<ColumnMappingBase>("instance_Id", "int", aCEDatabaseModelsWorldRecipeModTableBase);
            aCEDatabaseModelsWorldRecipeModTableBase.Columns.Add("instance_Id", instance_IdColumnBase);
            var manaColumnBase = new ColumnBase<ColumnMappingBase>("mana", "int", aCEDatabaseModelsWorldRecipeModTableBase);
            aCEDatabaseModelsWorldRecipeModTableBase.Columns.Add("mana", manaColumnBase);
            var recipe_IdColumnBase0 = new ColumnBase<ColumnMappingBase>("recipe_Id", "int unsigned", aCEDatabaseModelsWorldRecipeModTableBase);
            aCEDatabaseModelsWorldRecipeModTableBase.Columns.Add("recipe_Id", recipe_IdColumnBase0);
            var staminaColumnBase = new ColumnBase<ColumnMappingBase>("stamina", "int", aCEDatabaseModelsWorldRecipeModTableBase);
            aCEDatabaseModelsWorldRecipeModTableBase.Columns.Add("stamina", staminaColumnBase);
            var unknown_7ColumnBase = new ColumnBase<ColumnMappingBase>("unknown_7", "bit(1)", aCEDatabaseModelsWorldRecipeModTableBase);
            aCEDatabaseModelsWorldRecipeModTableBase.Columns.Add("unknown_7", unknown_7ColumnBase);
            var unknown_9ColumnBase = new ColumnBase<ColumnMappingBase>("unknown_9", "int", aCEDatabaseModelsWorldRecipeModTableBase);
            aCEDatabaseModelsWorldRecipeModTableBase.Columns.Add("unknown_9", unknown_9ColumnBase);
            relationalModel.DefaultTables.Add("ACE.Database.Models.World.RecipeMod", aCEDatabaseModelsWorldRecipeModTableBase);
            var aCEDatabaseModelsWorldRecipeModMappingBase = new TableMappingBase<ColumnMappingBase>(recipeMod, aCEDatabaseModelsWorldRecipeModTableBase, true);
            aCEDatabaseModelsWorldRecipeModTableBase.AddTypeMapping(aCEDatabaseModelsWorldRecipeModMappingBase, false);
            defaultTableMappings15.Add(aCEDatabaseModelsWorldRecipeModMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase8, recipeMod.FindProperty("Id")!, aCEDatabaseModelsWorldRecipeModMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)data_IdColumnBase0, recipeMod.FindProperty("DataId")!, aCEDatabaseModelsWorldRecipeModMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)executes_On_SuccessColumnBase, recipeMod.FindProperty("ExecutesOnSuccess")!, aCEDatabaseModelsWorldRecipeModMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)healthColumnBase, recipeMod.FindProperty("Health")!, aCEDatabaseModelsWorldRecipeModMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)instance_IdColumnBase, recipeMod.FindProperty("InstanceId")!, aCEDatabaseModelsWorldRecipeModMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)manaColumnBase, recipeMod.FindProperty("Mana")!, aCEDatabaseModelsWorldRecipeModMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)recipe_IdColumnBase0, recipeMod.FindProperty("RecipeId")!, aCEDatabaseModelsWorldRecipeModMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)staminaColumnBase, recipeMod.FindProperty("Stamina")!, aCEDatabaseModelsWorldRecipeModMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)unknown_7ColumnBase, recipeMod.FindProperty("Unknown7")!, aCEDatabaseModelsWorldRecipeModMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)unknown_9ColumnBase, recipeMod.FindProperty("Unknown9")!, aCEDatabaseModelsWorldRecipeModMappingBase);

            var tableMappings15 = new List<TableMapping>();
            recipeMod.SetRuntimeAnnotation("Relational:TableMappings", tableMappings15);
            var recipe_modTable = new Table("recipe_mod", null, relationalModel);
            var idColumn8 = new Column("id", "int unsigned", recipe_modTable);
            recipe_modTable.Columns.Add("id", idColumn8);
            var data_IdColumn0 = new Column("data_Id", "int", recipe_modTable);
            recipe_modTable.Columns.Add("data_Id", data_IdColumn0);
            var executes_On_SuccessColumn = new Column("executes_On_Success", "bit(1)", recipe_modTable);
            recipe_modTable.Columns.Add("executes_On_Success", executes_On_SuccessColumn);
            var healthColumn = new Column("health", "int", recipe_modTable);
            recipe_modTable.Columns.Add("health", healthColumn);
            var instance_IdColumn = new Column("instance_Id", "int", recipe_modTable);
            recipe_modTable.Columns.Add("instance_Id", instance_IdColumn);
            var manaColumn = new Column("mana", "int", recipe_modTable);
            recipe_modTable.Columns.Add("mana", manaColumn);
            var recipe_IdColumn0 = new Column("recipe_Id", "int unsigned", recipe_modTable);
            recipe_modTable.Columns.Add("recipe_Id", recipe_IdColumn0);
            var staminaColumn = new Column("stamina", "int", recipe_modTable);
            recipe_modTable.Columns.Add("stamina", staminaColumn);
            var unknown_7Column = new Column("unknown_7", "bit(1)", recipe_modTable);
            recipe_modTable.Columns.Add("unknown_7", unknown_7Column);
            var unknown_9Column = new Column("unknown_9", "int", recipe_modTable);
            recipe_modTable.Columns.Add("unknown_9", unknown_9Column);
            var pK_recipe_mod = new UniqueConstraint("PK_recipe_mod", recipe_modTable, new[] { idColumn8 });
            recipe_modTable.PrimaryKey = pK_recipe_mod;
            var pK_recipe_modUc = RelationalModel.GetKey(this,
                "ACE.Database.Models.World.RecipeMod",
                new[] { "Id" });
            pK_recipe_mod.MappedKeys.Add(pK_recipe_modUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_recipe_modUc).Add(pK_recipe_mod);
            recipe_modTable.UniqueConstraints.Add("PK_recipe_mod", pK_recipe_mod);
            var recipeId_Mod = new TableIndex(
            "recipeId_Mod", recipe_modTable, new[] { recipe_IdColumn0 }, false);
            var recipeId_ModIx = RelationalModel.GetIndex(this,
                "ACE.Database.Models.World.RecipeMod",
                "recipeId_Mod");
            recipeId_Mod.MappedIndexes.Add(recipeId_ModIx);
            RelationalModel.GetOrCreateTableIndexes(recipeId_ModIx).Add(recipeId_Mod);
            recipe_modTable.Indexes.Add("recipeId_Mod", recipeId_Mod);
            relationalModel.Tables.Add(("recipe_mod", null), recipe_modTable);
            var recipe_modTableMapping = new TableMapping(recipeMod, recipe_modTable, true);
            recipe_modTable.AddTypeMapping(recipe_modTableMapping, false);
            tableMappings15.Add(recipe_modTableMapping);
            RelationalModel.CreateColumnMapping(idColumn8, recipeMod.FindProperty("Id")!, recipe_modTableMapping);
            RelationalModel.CreateColumnMapping(data_IdColumn0, recipeMod.FindProperty("DataId")!, recipe_modTableMapping);
            RelationalModel.CreateColumnMapping(executes_On_SuccessColumn, recipeMod.FindProperty("ExecutesOnSuccess")!, recipe_modTableMapping);
            RelationalModel.CreateColumnMapping(healthColumn, recipeMod.FindProperty("Health")!, recipe_modTableMapping);
            RelationalModel.CreateColumnMapping(instance_IdColumn, recipeMod.FindProperty("InstanceId")!, recipe_modTableMapping);
            RelationalModel.CreateColumnMapping(manaColumn, recipeMod.FindProperty("Mana")!, recipe_modTableMapping);
            RelationalModel.CreateColumnMapping(recipe_IdColumn0, recipeMod.FindProperty("RecipeId")!, recipe_modTableMapping);
            RelationalModel.CreateColumnMapping(staminaColumn, recipeMod.FindProperty("Stamina")!, recipe_modTableMapping);
            RelationalModel.CreateColumnMapping(unknown_7Column, recipeMod.FindProperty("Unknown7")!, recipe_modTableMapping);
            RelationalModel.CreateColumnMapping(unknown_9Column, recipeMod.FindProperty("Unknown9")!, recipe_modTableMapping);

            var recipeModsBool = FindEntityType("ACE.Database.Models.World.RecipeModsBool")!;

            var defaultTableMappings16 = new List<TableMappingBase<ColumnMappingBase>>();
            recipeModsBool.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings16);
            var aCEDatabaseModelsWorldRecipeModsBoolTableBase = new TableBase("ACE.Database.Models.World.RecipeModsBool", null, relationalModel);
            var enumColumnBase = new ColumnBase<ColumnMappingBase>("enum", "int", aCEDatabaseModelsWorldRecipeModsBoolTableBase);
            aCEDatabaseModelsWorldRecipeModsBoolTableBase.Columns.Add("enum", enumColumnBase);
            var idColumnBase9 = new ColumnBase<ColumnMappingBase>("id", "int unsigned", aCEDatabaseModelsWorldRecipeModsBoolTableBase);
            aCEDatabaseModelsWorldRecipeModsBoolTableBase.Columns.Add("id", idColumnBase9);
            var indexColumnBase = new ColumnBase<ColumnMappingBase>("index", "tinyint", aCEDatabaseModelsWorldRecipeModsBoolTableBase);
            aCEDatabaseModelsWorldRecipeModsBoolTableBase.Columns.Add("index", indexColumnBase);
            var recipe_Mod_IdColumnBase = new ColumnBase<ColumnMappingBase>("recipe_Mod_Id", "int unsigned", aCEDatabaseModelsWorldRecipeModsBoolTableBase);
            aCEDatabaseModelsWorldRecipeModsBoolTableBase.Columns.Add("recipe_Mod_Id", recipe_Mod_IdColumnBase);
            var sourceColumnBase = new ColumnBase<ColumnMappingBase>("source", "int", aCEDatabaseModelsWorldRecipeModsBoolTableBase);
            aCEDatabaseModelsWorldRecipeModsBoolTableBase.Columns.Add("source", sourceColumnBase);
            var statColumnBase = new ColumnBase<ColumnMappingBase>("stat", "int", aCEDatabaseModelsWorldRecipeModsBoolTableBase);
            aCEDatabaseModelsWorldRecipeModsBoolTableBase.Columns.Add("stat", statColumnBase);
            var valueColumnBase4 = new ColumnBase<ColumnMappingBase>("value", "bit(1)", aCEDatabaseModelsWorldRecipeModsBoolTableBase);
            aCEDatabaseModelsWorldRecipeModsBoolTableBase.Columns.Add("value", valueColumnBase4);
            relationalModel.DefaultTables.Add("ACE.Database.Models.World.RecipeModsBool", aCEDatabaseModelsWorldRecipeModsBoolTableBase);
            var aCEDatabaseModelsWorldRecipeModsBoolMappingBase = new TableMappingBase<ColumnMappingBase>(recipeModsBool, aCEDatabaseModelsWorldRecipeModsBoolTableBase, true);
            aCEDatabaseModelsWorldRecipeModsBoolTableBase.AddTypeMapping(aCEDatabaseModelsWorldRecipeModsBoolMappingBase, false);
            defaultTableMappings16.Add(aCEDatabaseModelsWorldRecipeModsBoolMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase9, recipeModsBool.FindProperty("Id")!, aCEDatabaseModelsWorldRecipeModsBoolMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)enumColumnBase, recipeModsBool.FindProperty("Enum")!, aCEDatabaseModelsWorldRecipeModsBoolMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)indexColumnBase, recipeModsBool.FindProperty("Index")!, aCEDatabaseModelsWorldRecipeModsBoolMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)recipe_Mod_IdColumnBase, recipeModsBool.FindProperty("RecipeModId")!, aCEDatabaseModelsWorldRecipeModsBoolMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)sourceColumnBase, recipeModsBool.FindProperty("Source")!, aCEDatabaseModelsWorldRecipeModsBoolMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)statColumnBase, recipeModsBool.FindProperty("Stat")!, aCEDatabaseModelsWorldRecipeModsBoolMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)valueColumnBase4, recipeModsBool.FindProperty("Value")!, aCEDatabaseModelsWorldRecipeModsBoolMappingBase);

            var tableMappings16 = new List<TableMapping>();
            recipeModsBool.SetRuntimeAnnotation("Relational:TableMappings", tableMappings16);
            var recipe_mods_boolTable = new Table("recipe_mods_bool", null, relationalModel);
            var idColumn9 = new Column("id", "int unsigned", recipe_mods_boolTable);
            recipe_mods_boolTable.Columns.Add("id", idColumn9);
            var enumColumn = new Column("enum", "int", recipe_mods_boolTable);
            recipe_mods_boolTable.Columns.Add("enum", enumColumn);
            var indexColumn = new Column("index", "tinyint", recipe_mods_boolTable);
            recipe_mods_boolTable.Columns.Add("index", indexColumn);
            var recipe_Mod_IdColumn = new Column("recipe_Mod_Id", "int unsigned", recipe_mods_boolTable);
            recipe_mods_boolTable.Columns.Add("recipe_Mod_Id", recipe_Mod_IdColumn);
            var sourceColumn = new Column("source", "int", recipe_mods_boolTable);
            recipe_mods_boolTable.Columns.Add("source", sourceColumn);
            var statColumn = new Column("stat", "int", recipe_mods_boolTable);
            recipe_mods_boolTable.Columns.Add("stat", statColumn);
            var valueColumn4 = new Column("value", "bit(1)", recipe_mods_boolTable);
            recipe_mods_boolTable.Columns.Add("value", valueColumn4);
            var pK_recipe_mods_bool = new UniqueConstraint("PK_recipe_mods_bool", recipe_mods_boolTable, new[] { idColumn9 });
            recipe_mods_boolTable.PrimaryKey = pK_recipe_mods_bool;
            var pK_recipe_mods_boolUc = RelationalModel.GetKey(this,
                "ACE.Database.Models.World.RecipeModsBool",
                new[] { "Id" });
            pK_recipe_mods_bool.MappedKeys.Add(pK_recipe_mods_boolUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_recipe_mods_boolUc).Add(pK_recipe_mods_bool);
            recipe_mods_boolTable.UniqueConstraints.Add("PK_recipe_mods_bool", pK_recipe_mods_bool);
            var recipeId_mod_bool = new TableIndex(
            "recipeId_mod_bool", recipe_mods_boolTable, new[] { recipe_Mod_IdColumn }, false);
            var recipeId_mod_boolIx = RelationalModel.GetIndex(this,
                "ACE.Database.Models.World.RecipeModsBool",
                "recipeId_mod_bool");
            recipeId_mod_bool.MappedIndexes.Add(recipeId_mod_boolIx);
            RelationalModel.GetOrCreateTableIndexes(recipeId_mod_boolIx).Add(recipeId_mod_bool);
            recipe_mods_boolTable.Indexes.Add("recipeId_mod_bool", recipeId_mod_bool);
            relationalModel.Tables.Add(("recipe_mods_bool", null), recipe_mods_boolTable);
            var recipe_mods_boolTableMapping = new TableMapping(recipeModsBool, recipe_mods_boolTable, true);
            recipe_mods_boolTable.AddTypeMapping(recipe_mods_boolTableMapping, false);
            tableMappings16.Add(recipe_mods_boolTableMapping);
            RelationalModel.CreateColumnMapping(idColumn9, recipeModsBool.FindProperty("Id")!, recipe_mods_boolTableMapping);
            RelationalModel.CreateColumnMapping(enumColumn, recipeModsBool.FindProperty("Enum")!, recipe_mods_boolTableMapping);
            RelationalModel.CreateColumnMapping(indexColumn, recipeModsBool.FindProperty("Index")!, recipe_mods_boolTableMapping);
            RelationalModel.CreateColumnMapping(recipe_Mod_IdColumn, recipeModsBool.FindProperty("RecipeModId")!, recipe_mods_boolTableMapping);
            RelationalModel.CreateColumnMapping(sourceColumn, recipeModsBool.FindProperty("Source")!, recipe_mods_boolTableMapping);
            RelationalModel.CreateColumnMapping(statColumn, recipeModsBool.FindProperty("Stat")!, recipe_mods_boolTableMapping);
            RelationalModel.CreateColumnMapping(valueColumn4, recipeModsBool.FindProperty("Value")!, recipe_mods_boolTableMapping);

            var recipeModsDID = FindEntityType("ACE.Database.Models.World.RecipeModsDID")!;

            var defaultTableMappings17 = new List<TableMappingBase<ColumnMappingBase>>();
            recipeModsDID.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings17);
            var aCEDatabaseModelsWorldRecipeModsDIDTableBase = new TableBase("ACE.Database.Models.World.RecipeModsDID", null, relationalModel);
            var enumColumnBase0 = new ColumnBase<ColumnMappingBase>("enum", "int", aCEDatabaseModelsWorldRecipeModsDIDTableBase);
            aCEDatabaseModelsWorldRecipeModsDIDTableBase.Columns.Add("enum", enumColumnBase0);
            var idColumnBase10 = new ColumnBase<ColumnMappingBase>("id", "int unsigned", aCEDatabaseModelsWorldRecipeModsDIDTableBase);
            aCEDatabaseModelsWorldRecipeModsDIDTableBase.Columns.Add("id", idColumnBase10);
            var indexColumnBase0 = new ColumnBase<ColumnMappingBase>("index", "tinyint", aCEDatabaseModelsWorldRecipeModsDIDTableBase);
            aCEDatabaseModelsWorldRecipeModsDIDTableBase.Columns.Add("index", indexColumnBase0);
            var recipe_Mod_IdColumnBase0 = new ColumnBase<ColumnMappingBase>("recipe_Mod_Id", "int unsigned", aCEDatabaseModelsWorldRecipeModsDIDTableBase);
            aCEDatabaseModelsWorldRecipeModsDIDTableBase.Columns.Add("recipe_Mod_Id", recipe_Mod_IdColumnBase0);
            var sourceColumnBase0 = new ColumnBase<ColumnMappingBase>("source", "int", aCEDatabaseModelsWorldRecipeModsDIDTableBase);
            aCEDatabaseModelsWorldRecipeModsDIDTableBase.Columns.Add("source", sourceColumnBase0);
            var statColumnBase0 = new ColumnBase<ColumnMappingBase>("stat", "int", aCEDatabaseModelsWorldRecipeModsDIDTableBase);
            aCEDatabaseModelsWorldRecipeModsDIDTableBase.Columns.Add("stat", statColumnBase0);
            var valueColumnBase5 = new ColumnBase<ColumnMappingBase>("value", "int unsigned", aCEDatabaseModelsWorldRecipeModsDIDTableBase);
            aCEDatabaseModelsWorldRecipeModsDIDTableBase.Columns.Add("value", valueColumnBase5);
            relationalModel.DefaultTables.Add("ACE.Database.Models.World.RecipeModsDID", aCEDatabaseModelsWorldRecipeModsDIDTableBase);
            var aCEDatabaseModelsWorldRecipeModsDIDMappingBase = new TableMappingBase<ColumnMappingBase>(recipeModsDID, aCEDatabaseModelsWorldRecipeModsDIDTableBase, true);
            aCEDatabaseModelsWorldRecipeModsDIDTableBase.AddTypeMapping(aCEDatabaseModelsWorldRecipeModsDIDMappingBase, false);
            defaultTableMappings17.Add(aCEDatabaseModelsWorldRecipeModsDIDMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase10, recipeModsDID.FindProperty("Id")!, aCEDatabaseModelsWorldRecipeModsDIDMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)enumColumnBase0, recipeModsDID.FindProperty("Enum")!, aCEDatabaseModelsWorldRecipeModsDIDMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)indexColumnBase0, recipeModsDID.FindProperty("Index")!, aCEDatabaseModelsWorldRecipeModsDIDMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)recipe_Mod_IdColumnBase0, recipeModsDID.FindProperty("RecipeModId")!, aCEDatabaseModelsWorldRecipeModsDIDMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)sourceColumnBase0, recipeModsDID.FindProperty("Source")!, aCEDatabaseModelsWorldRecipeModsDIDMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)statColumnBase0, recipeModsDID.FindProperty("Stat")!, aCEDatabaseModelsWorldRecipeModsDIDMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)valueColumnBase5, recipeModsDID.FindProperty("Value")!, aCEDatabaseModelsWorldRecipeModsDIDMappingBase);

            var tableMappings17 = new List<TableMapping>();
            recipeModsDID.SetRuntimeAnnotation("Relational:TableMappings", tableMappings17);
            var recipe_mods_d_i_dTable = new Table("recipe_mods_d_i_d", null, relationalModel);
            var idColumn10 = new Column("id", "int unsigned", recipe_mods_d_i_dTable);
            recipe_mods_d_i_dTable.Columns.Add("id", idColumn10);
            var enumColumn0 = new Column("enum", "int", recipe_mods_d_i_dTable);
            recipe_mods_d_i_dTable.Columns.Add("enum", enumColumn0);
            var indexColumn0 = new Column("index", "tinyint", recipe_mods_d_i_dTable);
            recipe_mods_d_i_dTable.Columns.Add("index", indexColumn0);
            var recipe_Mod_IdColumn0 = new Column("recipe_Mod_Id", "int unsigned", recipe_mods_d_i_dTable);
            recipe_mods_d_i_dTable.Columns.Add("recipe_Mod_Id", recipe_Mod_IdColumn0);
            var sourceColumn0 = new Column("source", "int", recipe_mods_d_i_dTable);
            recipe_mods_d_i_dTable.Columns.Add("source", sourceColumn0);
            var statColumn0 = new Column("stat", "int", recipe_mods_d_i_dTable);
            recipe_mods_d_i_dTable.Columns.Add("stat", statColumn0);
            var valueColumn5 = new Column("value", "int unsigned", recipe_mods_d_i_dTable);
            recipe_mods_d_i_dTable.Columns.Add("value", valueColumn5);
            var pK_recipe_mods_d_i_d = new UniqueConstraint("PK_recipe_mods_d_i_d", recipe_mods_d_i_dTable, new[] { idColumn10 });
            recipe_mods_d_i_dTable.PrimaryKey = pK_recipe_mods_d_i_d;
            var pK_recipe_mods_d_i_dUc = RelationalModel.GetKey(this,
                "ACE.Database.Models.World.RecipeModsDID",
                new[] { "Id" });
            pK_recipe_mods_d_i_d.MappedKeys.Add(pK_recipe_mods_d_i_dUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_recipe_mods_d_i_dUc).Add(pK_recipe_mods_d_i_d);
            recipe_mods_d_i_dTable.UniqueConstraints.Add("PK_recipe_mods_d_i_d", pK_recipe_mods_d_i_d);
            var recipeId_mod_did = new TableIndex(
            "recipeId_mod_did", recipe_mods_d_i_dTable, new[] { recipe_Mod_IdColumn0 }, false);
            var recipeId_mod_didIx = RelationalModel.GetIndex(this,
                "ACE.Database.Models.World.RecipeModsDID",
                "recipeId_mod_did");
            recipeId_mod_did.MappedIndexes.Add(recipeId_mod_didIx);
            RelationalModel.GetOrCreateTableIndexes(recipeId_mod_didIx).Add(recipeId_mod_did);
            recipe_mods_d_i_dTable.Indexes.Add("recipeId_mod_did", recipeId_mod_did);
            relationalModel.Tables.Add(("recipe_mods_d_i_d", null), recipe_mods_d_i_dTable);
            var recipe_mods_d_i_dTableMapping = new TableMapping(recipeModsDID, recipe_mods_d_i_dTable, true);
            recipe_mods_d_i_dTable.AddTypeMapping(recipe_mods_d_i_dTableMapping, false);
            tableMappings17.Add(recipe_mods_d_i_dTableMapping);
            RelationalModel.CreateColumnMapping(idColumn10, recipeModsDID.FindProperty("Id")!, recipe_mods_d_i_dTableMapping);
            RelationalModel.CreateColumnMapping(enumColumn0, recipeModsDID.FindProperty("Enum")!, recipe_mods_d_i_dTableMapping);
            RelationalModel.CreateColumnMapping(indexColumn0, recipeModsDID.FindProperty("Index")!, recipe_mods_d_i_dTableMapping);
            RelationalModel.CreateColumnMapping(recipe_Mod_IdColumn0, recipeModsDID.FindProperty("RecipeModId")!, recipe_mods_d_i_dTableMapping);
            RelationalModel.CreateColumnMapping(sourceColumn0, recipeModsDID.FindProperty("Source")!, recipe_mods_d_i_dTableMapping);
            RelationalModel.CreateColumnMapping(statColumn0, recipeModsDID.FindProperty("Stat")!, recipe_mods_d_i_dTableMapping);
            RelationalModel.CreateColumnMapping(valueColumn5, recipeModsDID.FindProperty("Value")!, recipe_mods_d_i_dTableMapping);

            var recipeModsFloat = FindEntityType("ACE.Database.Models.World.RecipeModsFloat")!;

            var defaultTableMappings18 = new List<TableMappingBase<ColumnMappingBase>>();
            recipeModsFloat.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings18);
            var aCEDatabaseModelsWorldRecipeModsFloatTableBase = new TableBase("ACE.Database.Models.World.RecipeModsFloat", null, relationalModel);
            var enumColumnBase1 = new ColumnBase<ColumnMappingBase>("enum", "int", aCEDatabaseModelsWorldRecipeModsFloatTableBase);
            aCEDatabaseModelsWorldRecipeModsFloatTableBase.Columns.Add("enum", enumColumnBase1);
            var idColumnBase11 = new ColumnBase<ColumnMappingBase>("id", "int unsigned", aCEDatabaseModelsWorldRecipeModsFloatTableBase);
            aCEDatabaseModelsWorldRecipeModsFloatTableBase.Columns.Add("id", idColumnBase11);
            var indexColumnBase1 = new ColumnBase<ColumnMappingBase>("index", "tinyint", aCEDatabaseModelsWorldRecipeModsFloatTableBase);
            aCEDatabaseModelsWorldRecipeModsFloatTableBase.Columns.Add("index", indexColumnBase1);
            var recipe_Mod_IdColumnBase1 = new ColumnBase<ColumnMappingBase>("recipe_Mod_Id", "int unsigned", aCEDatabaseModelsWorldRecipeModsFloatTableBase);
            aCEDatabaseModelsWorldRecipeModsFloatTableBase.Columns.Add("recipe_Mod_Id", recipe_Mod_IdColumnBase1);
            var sourceColumnBase1 = new ColumnBase<ColumnMappingBase>("source", "int", aCEDatabaseModelsWorldRecipeModsFloatTableBase);
            aCEDatabaseModelsWorldRecipeModsFloatTableBase.Columns.Add("source", sourceColumnBase1);
            var statColumnBase1 = new ColumnBase<ColumnMappingBase>("stat", "int", aCEDatabaseModelsWorldRecipeModsFloatTableBase);
            aCEDatabaseModelsWorldRecipeModsFloatTableBase.Columns.Add("stat", statColumnBase1);
            var valueColumnBase6 = new ColumnBase<ColumnMappingBase>("value", "double", aCEDatabaseModelsWorldRecipeModsFloatTableBase);
            aCEDatabaseModelsWorldRecipeModsFloatTableBase.Columns.Add("value", valueColumnBase6);
            relationalModel.DefaultTables.Add("ACE.Database.Models.World.RecipeModsFloat", aCEDatabaseModelsWorldRecipeModsFloatTableBase);
            var aCEDatabaseModelsWorldRecipeModsFloatMappingBase = new TableMappingBase<ColumnMappingBase>(recipeModsFloat, aCEDatabaseModelsWorldRecipeModsFloatTableBase, true);
            aCEDatabaseModelsWorldRecipeModsFloatTableBase.AddTypeMapping(aCEDatabaseModelsWorldRecipeModsFloatMappingBase, false);
            defaultTableMappings18.Add(aCEDatabaseModelsWorldRecipeModsFloatMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase11, recipeModsFloat.FindProperty("Id")!, aCEDatabaseModelsWorldRecipeModsFloatMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)enumColumnBase1, recipeModsFloat.FindProperty("Enum")!, aCEDatabaseModelsWorldRecipeModsFloatMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)indexColumnBase1, recipeModsFloat.FindProperty("Index")!, aCEDatabaseModelsWorldRecipeModsFloatMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)recipe_Mod_IdColumnBase1, recipeModsFloat.FindProperty("RecipeModId")!, aCEDatabaseModelsWorldRecipeModsFloatMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)sourceColumnBase1, recipeModsFloat.FindProperty("Source")!, aCEDatabaseModelsWorldRecipeModsFloatMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)statColumnBase1, recipeModsFloat.FindProperty("Stat")!, aCEDatabaseModelsWorldRecipeModsFloatMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)valueColumnBase6, recipeModsFloat.FindProperty("Value")!, aCEDatabaseModelsWorldRecipeModsFloatMappingBase);

            var tableMappings18 = new List<TableMapping>();
            recipeModsFloat.SetRuntimeAnnotation("Relational:TableMappings", tableMappings18);
            var recipe_mods_floatTable = new Table("recipe_mods_float", null, relationalModel);
            var idColumn11 = new Column("id", "int unsigned", recipe_mods_floatTable);
            recipe_mods_floatTable.Columns.Add("id", idColumn11);
            var enumColumn1 = new Column("enum", "int", recipe_mods_floatTable);
            recipe_mods_floatTable.Columns.Add("enum", enumColumn1);
            var indexColumn1 = new Column("index", "tinyint", recipe_mods_floatTable);
            recipe_mods_floatTable.Columns.Add("index", indexColumn1);
            var recipe_Mod_IdColumn1 = new Column("recipe_Mod_Id", "int unsigned", recipe_mods_floatTable);
            recipe_mods_floatTable.Columns.Add("recipe_Mod_Id", recipe_Mod_IdColumn1);
            var sourceColumn1 = new Column("source", "int", recipe_mods_floatTable);
            recipe_mods_floatTable.Columns.Add("source", sourceColumn1);
            var statColumn1 = new Column("stat", "int", recipe_mods_floatTable);
            recipe_mods_floatTable.Columns.Add("stat", statColumn1);
            var valueColumn6 = new Column("value", "double", recipe_mods_floatTable);
            recipe_mods_floatTable.Columns.Add("value", valueColumn6);
            var pK_recipe_mods_float = new UniqueConstraint("PK_recipe_mods_float", recipe_mods_floatTable, new[] { idColumn11 });
            recipe_mods_floatTable.PrimaryKey = pK_recipe_mods_float;
            var pK_recipe_mods_floatUc = RelationalModel.GetKey(this,
                "ACE.Database.Models.World.RecipeModsFloat",
                new[] { "Id" });
            pK_recipe_mods_float.MappedKeys.Add(pK_recipe_mods_floatUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_recipe_mods_floatUc).Add(pK_recipe_mods_float);
            recipe_mods_floatTable.UniqueConstraints.Add("PK_recipe_mods_float", pK_recipe_mods_float);
            var recipeId_mod_float = new TableIndex(
            "recipeId_mod_float", recipe_mods_floatTable, new[] { recipe_Mod_IdColumn1 }, false);
            var recipeId_mod_floatIx = RelationalModel.GetIndex(this,
                "ACE.Database.Models.World.RecipeModsFloat",
                "recipeId_mod_float");
            recipeId_mod_float.MappedIndexes.Add(recipeId_mod_floatIx);
            RelationalModel.GetOrCreateTableIndexes(recipeId_mod_floatIx).Add(recipeId_mod_float);
            recipe_mods_floatTable.Indexes.Add("recipeId_mod_float", recipeId_mod_float);
            relationalModel.Tables.Add(("recipe_mods_float", null), recipe_mods_floatTable);
            var recipe_mods_floatTableMapping = new TableMapping(recipeModsFloat, recipe_mods_floatTable, true);
            recipe_mods_floatTable.AddTypeMapping(recipe_mods_floatTableMapping, false);
            tableMappings18.Add(recipe_mods_floatTableMapping);
            RelationalModel.CreateColumnMapping(idColumn11, recipeModsFloat.FindProperty("Id")!, recipe_mods_floatTableMapping);
            RelationalModel.CreateColumnMapping(enumColumn1, recipeModsFloat.FindProperty("Enum")!, recipe_mods_floatTableMapping);
            RelationalModel.CreateColumnMapping(indexColumn1, recipeModsFloat.FindProperty("Index")!, recipe_mods_floatTableMapping);
            RelationalModel.CreateColumnMapping(recipe_Mod_IdColumn1, recipeModsFloat.FindProperty("RecipeModId")!, recipe_mods_floatTableMapping);
            RelationalModel.CreateColumnMapping(sourceColumn1, recipeModsFloat.FindProperty("Source")!, recipe_mods_floatTableMapping);
            RelationalModel.CreateColumnMapping(statColumn1, recipeModsFloat.FindProperty("Stat")!, recipe_mods_floatTableMapping);
            RelationalModel.CreateColumnMapping(valueColumn6, recipeModsFloat.FindProperty("Value")!, recipe_mods_floatTableMapping);

            var recipeModsIID = FindEntityType("ACE.Database.Models.World.RecipeModsIID")!;

            var defaultTableMappings19 = new List<TableMappingBase<ColumnMappingBase>>();
            recipeModsIID.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings19);
            var aCEDatabaseModelsWorldRecipeModsIIDTableBase = new TableBase("ACE.Database.Models.World.RecipeModsIID", null, relationalModel);
            var enumColumnBase2 = new ColumnBase<ColumnMappingBase>("enum", "int", aCEDatabaseModelsWorldRecipeModsIIDTableBase);
            aCEDatabaseModelsWorldRecipeModsIIDTableBase.Columns.Add("enum", enumColumnBase2);
            var idColumnBase12 = new ColumnBase<ColumnMappingBase>("id", "int unsigned", aCEDatabaseModelsWorldRecipeModsIIDTableBase);
            aCEDatabaseModelsWorldRecipeModsIIDTableBase.Columns.Add("id", idColumnBase12);
            var indexColumnBase2 = new ColumnBase<ColumnMappingBase>("index", "tinyint", aCEDatabaseModelsWorldRecipeModsIIDTableBase);
            aCEDatabaseModelsWorldRecipeModsIIDTableBase.Columns.Add("index", indexColumnBase2);
            var recipe_Mod_IdColumnBase2 = new ColumnBase<ColumnMappingBase>("recipe_Mod_Id", "int unsigned", aCEDatabaseModelsWorldRecipeModsIIDTableBase);
            aCEDatabaseModelsWorldRecipeModsIIDTableBase.Columns.Add("recipe_Mod_Id", recipe_Mod_IdColumnBase2);
            var sourceColumnBase2 = new ColumnBase<ColumnMappingBase>("source", "int", aCEDatabaseModelsWorldRecipeModsIIDTableBase);
            aCEDatabaseModelsWorldRecipeModsIIDTableBase.Columns.Add("source", sourceColumnBase2);
            var statColumnBase2 = new ColumnBase<ColumnMappingBase>("stat", "int", aCEDatabaseModelsWorldRecipeModsIIDTableBase);
            aCEDatabaseModelsWorldRecipeModsIIDTableBase.Columns.Add("stat", statColumnBase2);
            var valueColumnBase7 = new ColumnBase<ColumnMappingBase>("value", "int unsigned", aCEDatabaseModelsWorldRecipeModsIIDTableBase);
            aCEDatabaseModelsWorldRecipeModsIIDTableBase.Columns.Add("value", valueColumnBase7);
            relationalModel.DefaultTables.Add("ACE.Database.Models.World.RecipeModsIID", aCEDatabaseModelsWorldRecipeModsIIDTableBase);
            var aCEDatabaseModelsWorldRecipeModsIIDMappingBase = new TableMappingBase<ColumnMappingBase>(recipeModsIID, aCEDatabaseModelsWorldRecipeModsIIDTableBase, true);
            aCEDatabaseModelsWorldRecipeModsIIDTableBase.AddTypeMapping(aCEDatabaseModelsWorldRecipeModsIIDMappingBase, false);
            defaultTableMappings19.Add(aCEDatabaseModelsWorldRecipeModsIIDMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase12, recipeModsIID.FindProperty("Id")!, aCEDatabaseModelsWorldRecipeModsIIDMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)enumColumnBase2, recipeModsIID.FindProperty("Enum")!, aCEDatabaseModelsWorldRecipeModsIIDMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)indexColumnBase2, recipeModsIID.FindProperty("Index")!, aCEDatabaseModelsWorldRecipeModsIIDMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)recipe_Mod_IdColumnBase2, recipeModsIID.FindProperty("RecipeModId")!, aCEDatabaseModelsWorldRecipeModsIIDMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)sourceColumnBase2, recipeModsIID.FindProperty("Source")!, aCEDatabaseModelsWorldRecipeModsIIDMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)statColumnBase2, recipeModsIID.FindProperty("Stat")!, aCEDatabaseModelsWorldRecipeModsIIDMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)valueColumnBase7, recipeModsIID.FindProperty("Value")!, aCEDatabaseModelsWorldRecipeModsIIDMappingBase);

            var tableMappings19 = new List<TableMapping>();
            recipeModsIID.SetRuntimeAnnotation("Relational:TableMappings", tableMappings19);
            var recipe_mods_i_i_dTable = new Table("recipe_mods_i_i_d", null, relationalModel);
            var idColumn12 = new Column("id", "int unsigned", recipe_mods_i_i_dTable);
            recipe_mods_i_i_dTable.Columns.Add("id", idColumn12);
            var enumColumn2 = new Column("enum", "int", recipe_mods_i_i_dTable);
            recipe_mods_i_i_dTable.Columns.Add("enum", enumColumn2);
            var indexColumn2 = new Column("index", "tinyint", recipe_mods_i_i_dTable);
            recipe_mods_i_i_dTable.Columns.Add("index", indexColumn2);
            var recipe_Mod_IdColumn2 = new Column("recipe_Mod_Id", "int unsigned", recipe_mods_i_i_dTable);
            recipe_mods_i_i_dTable.Columns.Add("recipe_Mod_Id", recipe_Mod_IdColumn2);
            var sourceColumn2 = new Column("source", "int", recipe_mods_i_i_dTable);
            recipe_mods_i_i_dTable.Columns.Add("source", sourceColumn2);
            var statColumn2 = new Column("stat", "int", recipe_mods_i_i_dTable);
            recipe_mods_i_i_dTable.Columns.Add("stat", statColumn2);
            var valueColumn7 = new Column("value", "int unsigned", recipe_mods_i_i_dTable);
            recipe_mods_i_i_dTable.Columns.Add("value", valueColumn7);
            var pK_recipe_mods_i_i_d = new UniqueConstraint("PK_recipe_mods_i_i_d", recipe_mods_i_i_dTable, new[] { idColumn12 });
            recipe_mods_i_i_dTable.PrimaryKey = pK_recipe_mods_i_i_d;
            var pK_recipe_mods_i_i_dUc = RelationalModel.GetKey(this,
                "ACE.Database.Models.World.RecipeModsIID",
                new[] { "Id" });
            pK_recipe_mods_i_i_d.MappedKeys.Add(pK_recipe_mods_i_i_dUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_recipe_mods_i_i_dUc).Add(pK_recipe_mods_i_i_d);
            recipe_mods_i_i_dTable.UniqueConstraints.Add("PK_recipe_mods_i_i_d", pK_recipe_mods_i_i_d);
            var recipeId_mod_iid = new TableIndex(
            "recipeId_mod_iid", recipe_mods_i_i_dTable, new[] { recipe_Mod_IdColumn2 }, false);
            var recipeId_mod_iidIx = RelationalModel.GetIndex(this,
                "ACE.Database.Models.World.RecipeModsIID",
                "recipeId_mod_iid");
            recipeId_mod_iid.MappedIndexes.Add(recipeId_mod_iidIx);
            RelationalModel.GetOrCreateTableIndexes(recipeId_mod_iidIx).Add(recipeId_mod_iid);
            recipe_mods_i_i_dTable.Indexes.Add("recipeId_mod_iid", recipeId_mod_iid);
            relationalModel.Tables.Add(("recipe_mods_i_i_d", null), recipe_mods_i_i_dTable);
            var recipe_mods_i_i_dTableMapping = new TableMapping(recipeModsIID, recipe_mods_i_i_dTable, true);
            recipe_mods_i_i_dTable.AddTypeMapping(recipe_mods_i_i_dTableMapping, false);
            tableMappings19.Add(recipe_mods_i_i_dTableMapping);
            RelationalModel.CreateColumnMapping(idColumn12, recipeModsIID.FindProperty("Id")!, recipe_mods_i_i_dTableMapping);
            RelationalModel.CreateColumnMapping(enumColumn2, recipeModsIID.FindProperty("Enum")!, recipe_mods_i_i_dTableMapping);
            RelationalModel.CreateColumnMapping(indexColumn2, recipeModsIID.FindProperty("Index")!, recipe_mods_i_i_dTableMapping);
            RelationalModel.CreateColumnMapping(recipe_Mod_IdColumn2, recipeModsIID.FindProperty("RecipeModId")!, recipe_mods_i_i_dTableMapping);
            RelationalModel.CreateColumnMapping(sourceColumn2, recipeModsIID.FindProperty("Source")!, recipe_mods_i_i_dTableMapping);
            RelationalModel.CreateColumnMapping(statColumn2, recipeModsIID.FindProperty("Stat")!, recipe_mods_i_i_dTableMapping);
            RelationalModel.CreateColumnMapping(valueColumn7, recipeModsIID.FindProperty("Value")!, recipe_mods_i_i_dTableMapping);

            var recipeModsInt = FindEntityType("ACE.Database.Models.World.RecipeModsInt")!;

            var defaultTableMappings20 = new List<TableMappingBase<ColumnMappingBase>>();
            recipeModsInt.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings20);
            var aCEDatabaseModelsWorldRecipeModsIntTableBase = new TableBase("ACE.Database.Models.World.RecipeModsInt", null, relationalModel);
            var enumColumnBase3 = new ColumnBase<ColumnMappingBase>("enum", "int", aCEDatabaseModelsWorldRecipeModsIntTableBase);
            aCEDatabaseModelsWorldRecipeModsIntTableBase.Columns.Add("enum", enumColumnBase3);
            var idColumnBase13 = new ColumnBase<ColumnMappingBase>("id", "int unsigned", aCEDatabaseModelsWorldRecipeModsIntTableBase);
            aCEDatabaseModelsWorldRecipeModsIntTableBase.Columns.Add("id", idColumnBase13);
            var indexColumnBase3 = new ColumnBase<ColumnMappingBase>("index", "tinyint", aCEDatabaseModelsWorldRecipeModsIntTableBase);
            aCEDatabaseModelsWorldRecipeModsIntTableBase.Columns.Add("index", indexColumnBase3);
            var recipe_Mod_IdColumnBase3 = new ColumnBase<ColumnMappingBase>("recipe_Mod_Id", "int unsigned", aCEDatabaseModelsWorldRecipeModsIntTableBase);
            aCEDatabaseModelsWorldRecipeModsIntTableBase.Columns.Add("recipe_Mod_Id", recipe_Mod_IdColumnBase3);
            var sourceColumnBase3 = new ColumnBase<ColumnMappingBase>("source", "int", aCEDatabaseModelsWorldRecipeModsIntTableBase);
            aCEDatabaseModelsWorldRecipeModsIntTableBase.Columns.Add("source", sourceColumnBase3);
            var statColumnBase3 = new ColumnBase<ColumnMappingBase>("stat", "int", aCEDatabaseModelsWorldRecipeModsIntTableBase);
            aCEDatabaseModelsWorldRecipeModsIntTableBase.Columns.Add("stat", statColumnBase3);
            var valueColumnBase8 = new ColumnBase<ColumnMappingBase>("value", "int", aCEDatabaseModelsWorldRecipeModsIntTableBase);
            aCEDatabaseModelsWorldRecipeModsIntTableBase.Columns.Add("value", valueColumnBase8);
            relationalModel.DefaultTables.Add("ACE.Database.Models.World.RecipeModsInt", aCEDatabaseModelsWorldRecipeModsIntTableBase);
            var aCEDatabaseModelsWorldRecipeModsIntMappingBase = new TableMappingBase<ColumnMappingBase>(recipeModsInt, aCEDatabaseModelsWorldRecipeModsIntTableBase, true);
            aCEDatabaseModelsWorldRecipeModsIntTableBase.AddTypeMapping(aCEDatabaseModelsWorldRecipeModsIntMappingBase, false);
            defaultTableMappings20.Add(aCEDatabaseModelsWorldRecipeModsIntMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase13, recipeModsInt.FindProperty("Id")!, aCEDatabaseModelsWorldRecipeModsIntMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)enumColumnBase3, recipeModsInt.FindProperty("Enum")!, aCEDatabaseModelsWorldRecipeModsIntMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)indexColumnBase3, recipeModsInt.FindProperty("Index")!, aCEDatabaseModelsWorldRecipeModsIntMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)recipe_Mod_IdColumnBase3, recipeModsInt.FindProperty("RecipeModId")!, aCEDatabaseModelsWorldRecipeModsIntMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)sourceColumnBase3, recipeModsInt.FindProperty("Source")!, aCEDatabaseModelsWorldRecipeModsIntMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)statColumnBase3, recipeModsInt.FindProperty("Stat")!, aCEDatabaseModelsWorldRecipeModsIntMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)valueColumnBase8, recipeModsInt.FindProperty("Value")!, aCEDatabaseModelsWorldRecipeModsIntMappingBase);

            var tableMappings20 = new List<TableMapping>();
            recipeModsInt.SetRuntimeAnnotation("Relational:TableMappings", tableMappings20);
            var recipe_mods_intTable = new Table("recipe_mods_int", null, relationalModel);
            var idColumn13 = new Column("id", "int unsigned", recipe_mods_intTable);
            recipe_mods_intTable.Columns.Add("id", idColumn13);
            var enumColumn3 = new Column("enum", "int", recipe_mods_intTable);
            recipe_mods_intTable.Columns.Add("enum", enumColumn3);
            var indexColumn3 = new Column("index", "tinyint", recipe_mods_intTable);
            recipe_mods_intTable.Columns.Add("index", indexColumn3);
            var recipe_Mod_IdColumn3 = new Column("recipe_Mod_Id", "int unsigned", recipe_mods_intTable);
            recipe_mods_intTable.Columns.Add("recipe_Mod_Id", recipe_Mod_IdColumn3);
            var sourceColumn3 = new Column("source", "int", recipe_mods_intTable);
            recipe_mods_intTable.Columns.Add("source", sourceColumn3);
            var statColumn3 = new Column("stat", "int", recipe_mods_intTable);
            recipe_mods_intTable.Columns.Add("stat", statColumn3);
            var valueColumn8 = new Column("value", "int", recipe_mods_intTable);
            recipe_mods_intTable.Columns.Add("value", valueColumn8);
            var pK_recipe_mods_int = new UniqueConstraint("PK_recipe_mods_int", recipe_mods_intTable, new[] { idColumn13 });
            recipe_mods_intTable.PrimaryKey = pK_recipe_mods_int;
            var pK_recipe_mods_intUc = RelationalModel.GetKey(this,
                "ACE.Database.Models.World.RecipeModsInt",
                new[] { "Id" });
            pK_recipe_mods_int.MappedKeys.Add(pK_recipe_mods_intUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_recipe_mods_intUc).Add(pK_recipe_mods_int);
            recipe_mods_intTable.UniqueConstraints.Add("PK_recipe_mods_int", pK_recipe_mods_int);
            var recipeId_mod_int = new TableIndex(
            "recipeId_mod_int", recipe_mods_intTable, new[] { recipe_Mod_IdColumn3 }, false);
            var recipeId_mod_intIx = RelationalModel.GetIndex(this,
                "ACE.Database.Models.World.RecipeModsInt",
                "recipeId_mod_int");
            recipeId_mod_int.MappedIndexes.Add(recipeId_mod_intIx);
            RelationalModel.GetOrCreateTableIndexes(recipeId_mod_intIx).Add(recipeId_mod_int);
            recipe_mods_intTable.Indexes.Add("recipeId_mod_int", recipeId_mod_int);
            relationalModel.Tables.Add(("recipe_mods_int", null), recipe_mods_intTable);
            var recipe_mods_intTableMapping = new TableMapping(recipeModsInt, recipe_mods_intTable, true);
            recipe_mods_intTable.AddTypeMapping(recipe_mods_intTableMapping, false);
            tableMappings20.Add(recipe_mods_intTableMapping);
            RelationalModel.CreateColumnMapping(idColumn13, recipeModsInt.FindProperty("Id")!, recipe_mods_intTableMapping);
            RelationalModel.CreateColumnMapping(enumColumn3, recipeModsInt.FindProperty("Enum")!, recipe_mods_intTableMapping);
            RelationalModel.CreateColumnMapping(indexColumn3, recipeModsInt.FindProperty("Index")!, recipe_mods_intTableMapping);
            RelationalModel.CreateColumnMapping(recipe_Mod_IdColumn3, recipeModsInt.FindProperty("RecipeModId")!, recipe_mods_intTableMapping);
            RelationalModel.CreateColumnMapping(sourceColumn3, recipeModsInt.FindProperty("Source")!, recipe_mods_intTableMapping);
            RelationalModel.CreateColumnMapping(statColumn3, recipeModsInt.FindProperty("Stat")!, recipe_mods_intTableMapping);
            RelationalModel.CreateColumnMapping(valueColumn8, recipeModsInt.FindProperty("Value")!, recipe_mods_intTableMapping);

            var recipeModsString = FindEntityType("ACE.Database.Models.World.RecipeModsString")!;

            var defaultTableMappings21 = new List<TableMappingBase<ColumnMappingBase>>();
            recipeModsString.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings21);
            var aCEDatabaseModelsWorldRecipeModsStringTableBase = new TableBase("ACE.Database.Models.World.RecipeModsString", null, relationalModel);
            var enumColumnBase4 = new ColumnBase<ColumnMappingBase>("enum", "int", aCEDatabaseModelsWorldRecipeModsStringTableBase);
            aCEDatabaseModelsWorldRecipeModsStringTableBase.Columns.Add("enum", enumColumnBase4);
            var idColumnBase14 = new ColumnBase<ColumnMappingBase>("id", "int unsigned", aCEDatabaseModelsWorldRecipeModsStringTableBase);
            aCEDatabaseModelsWorldRecipeModsStringTableBase.Columns.Add("id", idColumnBase14);
            var indexColumnBase4 = new ColumnBase<ColumnMappingBase>("index", "tinyint", aCEDatabaseModelsWorldRecipeModsStringTableBase);
            aCEDatabaseModelsWorldRecipeModsStringTableBase.Columns.Add("index", indexColumnBase4);
            var recipe_Mod_IdColumnBase4 = new ColumnBase<ColumnMappingBase>("recipe_Mod_Id", "int unsigned", aCEDatabaseModelsWorldRecipeModsStringTableBase);
            aCEDatabaseModelsWorldRecipeModsStringTableBase.Columns.Add("recipe_Mod_Id", recipe_Mod_IdColumnBase4);
            var sourceColumnBase4 = new ColumnBase<ColumnMappingBase>("source", "int", aCEDatabaseModelsWorldRecipeModsStringTableBase);
            aCEDatabaseModelsWorldRecipeModsStringTableBase.Columns.Add("source", sourceColumnBase4);
            var statColumnBase4 = new ColumnBase<ColumnMappingBase>("stat", "int", aCEDatabaseModelsWorldRecipeModsStringTableBase);
            aCEDatabaseModelsWorldRecipeModsStringTableBase.Columns.Add("stat", statColumnBase4);
            var valueColumnBase9 = new ColumnBase<ColumnMappingBase>("value", "text", aCEDatabaseModelsWorldRecipeModsStringTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsWorldRecipeModsStringTableBase.Columns.Add("value", valueColumnBase9);
            relationalModel.DefaultTables.Add("ACE.Database.Models.World.RecipeModsString", aCEDatabaseModelsWorldRecipeModsStringTableBase);
            var aCEDatabaseModelsWorldRecipeModsStringMappingBase = new TableMappingBase<ColumnMappingBase>(recipeModsString, aCEDatabaseModelsWorldRecipeModsStringTableBase, true);
            aCEDatabaseModelsWorldRecipeModsStringTableBase.AddTypeMapping(aCEDatabaseModelsWorldRecipeModsStringMappingBase, false);
            defaultTableMappings21.Add(aCEDatabaseModelsWorldRecipeModsStringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase14, recipeModsString.FindProperty("Id")!, aCEDatabaseModelsWorldRecipeModsStringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)enumColumnBase4, recipeModsString.FindProperty("Enum")!, aCEDatabaseModelsWorldRecipeModsStringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)indexColumnBase4, recipeModsString.FindProperty("Index")!, aCEDatabaseModelsWorldRecipeModsStringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)recipe_Mod_IdColumnBase4, recipeModsString.FindProperty("RecipeModId")!, aCEDatabaseModelsWorldRecipeModsStringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)sourceColumnBase4, recipeModsString.FindProperty("Source")!, aCEDatabaseModelsWorldRecipeModsStringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)statColumnBase4, recipeModsString.FindProperty("Stat")!, aCEDatabaseModelsWorldRecipeModsStringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)valueColumnBase9, recipeModsString.FindProperty("Value")!, aCEDatabaseModelsWorldRecipeModsStringMappingBase);

            var tableMappings21 = new List<TableMapping>();
            recipeModsString.SetRuntimeAnnotation("Relational:TableMappings", tableMappings21);
            var recipe_mods_stringTable = new Table("recipe_mods_string", null, relationalModel);
            var idColumn14 = new Column("id", "int unsigned", recipe_mods_stringTable);
            recipe_mods_stringTable.Columns.Add("id", idColumn14);
            var enumColumn4 = new Column("enum", "int", recipe_mods_stringTable);
            recipe_mods_stringTable.Columns.Add("enum", enumColumn4);
            var indexColumn4 = new Column("index", "tinyint", recipe_mods_stringTable);
            recipe_mods_stringTable.Columns.Add("index", indexColumn4);
            var recipe_Mod_IdColumn4 = new Column("recipe_Mod_Id", "int unsigned", recipe_mods_stringTable);
            recipe_mods_stringTable.Columns.Add("recipe_Mod_Id", recipe_Mod_IdColumn4);
            var sourceColumn4 = new Column("source", "int", recipe_mods_stringTable);
            recipe_mods_stringTable.Columns.Add("source", sourceColumn4);
            var statColumn4 = new Column("stat", "int", recipe_mods_stringTable);
            recipe_mods_stringTable.Columns.Add("stat", statColumn4);
            var valueColumn9 = new Column("value", "text", recipe_mods_stringTable)
            {
                IsNullable = true
            };
            recipe_mods_stringTable.Columns.Add("value", valueColumn9);
            var pK_recipe_mods_string = new UniqueConstraint("PK_recipe_mods_string", recipe_mods_stringTable, new[] { idColumn14 });
            recipe_mods_stringTable.PrimaryKey = pK_recipe_mods_string;
            var pK_recipe_mods_stringUc = RelationalModel.GetKey(this,
                "ACE.Database.Models.World.RecipeModsString",
                new[] { "Id" });
            pK_recipe_mods_string.MappedKeys.Add(pK_recipe_mods_stringUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_recipe_mods_stringUc).Add(pK_recipe_mods_string);
            recipe_mods_stringTable.UniqueConstraints.Add("PK_recipe_mods_string", pK_recipe_mods_string);
            var recipeId_mod_string = new TableIndex(
            "recipeId_mod_string", recipe_mods_stringTable, new[] { recipe_Mod_IdColumn4 }, false);
            var recipeId_mod_stringIx = RelationalModel.GetIndex(this,
                "ACE.Database.Models.World.RecipeModsString",
                "recipeId_mod_string");
            recipeId_mod_string.MappedIndexes.Add(recipeId_mod_stringIx);
            RelationalModel.GetOrCreateTableIndexes(recipeId_mod_stringIx).Add(recipeId_mod_string);
            recipe_mods_stringTable.Indexes.Add("recipeId_mod_string", recipeId_mod_string);
            relationalModel.Tables.Add(("recipe_mods_string", null), recipe_mods_stringTable);
            var recipe_mods_stringTableMapping = new TableMapping(recipeModsString, recipe_mods_stringTable, true);
            recipe_mods_stringTable.AddTypeMapping(recipe_mods_stringTableMapping, false);
            tableMappings21.Add(recipe_mods_stringTableMapping);
            RelationalModel.CreateColumnMapping(idColumn14, recipeModsString.FindProperty("Id")!, recipe_mods_stringTableMapping);
            RelationalModel.CreateColumnMapping(enumColumn4, recipeModsString.FindProperty("Enum")!, recipe_mods_stringTableMapping);
            RelationalModel.CreateColumnMapping(indexColumn4, recipeModsString.FindProperty("Index")!, recipe_mods_stringTableMapping);
            RelationalModel.CreateColumnMapping(recipe_Mod_IdColumn4, recipeModsString.FindProperty("RecipeModId")!, recipe_mods_stringTableMapping);
            RelationalModel.CreateColumnMapping(sourceColumn4, recipeModsString.FindProperty("Source")!, recipe_mods_stringTableMapping);
            RelationalModel.CreateColumnMapping(statColumn4, recipeModsString.FindProperty("Stat")!, recipe_mods_stringTableMapping);
            RelationalModel.CreateColumnMapping(valueColumn9, recipeModsString.FindProperty("Value")!, recipe_mods_stringTableMapping);

            var recipeRequirementsBool = FindEntityType("ACE.Database.Models.World.RecipeRequirementsBool")!;

            var defaultTableMappings22 = new List<TableMappingBase<ColumnMappingBase>>();
            recipeRequirementsBool.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings22);
            var aCEDatabaseModelsWorldRecipeRequirementsBoolTableBase = new TableBase("ACE.Database.Models.World.RecipeRequirementsBool", null, relationalModel);
            var enumColumnBase5 = new ColumnBase<ColumnMappingBase>("enum", "int", aCEDatabaseModelsWorldRecipeRequirementsBoolTableBase);
            aCEDatabaseModelsWorldRecipeRequirementsBoolTableBase.Columns.Add("enum", enumColumnBase5);
            var idColumnBase15 = new ColumnBase<ColumnMappingBase>("id", "int unsigned", aCEDatabaseModelsWorldRecipeRequirementsBoolTableBase);
            aCEDatabaseModelsWorldRecipeRequirementsBoolTableBase.Columns.Add("id", idColumnBase15);
            var indexColumnBase5 = new ColumnBase<ColumnMappingBase>("index", "tinyint", aCEDatabaseModelsWorldRecipeRequirementsBoolTableBase);
            aCEDatabaseModelsWorldRecipeRequirementsBoolTableBase.Columns.Add("index", indexColumnBase5);
            var messageColumnBase0 = new ColumnBase<ColumnMappingBase>("message", "text", aCEDatabaseModelsWorldRecipeRequirementsBoolTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsWorldRecipeRequirementsBoolTableBase.Columns.Add("message", messageColumnBase0);
            var recipe_IdColumnBase1 = new ColumnBase<ColumnMappingBase>("recipe_Id", "int unsigned", aCEDatabaseModelsWorldRecipeRequirementsBoolTableBase);
            aCEDatabaseModelsWorldRecipeRequirementsBoolTableBase.Columns.Add("recipe_Id", recipe_IdColumnBase1);
            var statColumnBase5 = new ColumnBase<ColumnMappingBase>("stat", "int", aCEDatabaseModelsWorldRecipeRequirementsBoolTableBase);
            aCEDatabaseModelsWorldRecipeRequirementsBoolTableBase.Columns.Add("stat", statColumnBase5);
            var valueColumnBase10 = new ColumnBase<ColumnMappingBase>("value", "bit(1)", aCEDatabaseModelsWorldRecipeRequirementsBoolTableBase);
            aCEDatabaseModelsWorldRecipeRequirementsBoolTableBase.Columns.Add("value", valueColumnBase10);
            relationalModel.DefaultTables.Add("ACE.Database.Models.World.RecipeRequirementsBool", aCEDatabaseModelsWorldRecipeRequirementsBoolTableBase);
            var aCEDatabaseModelsWorldRecipeRequirementsBoolMappingBase = new TableMappingBase<ColumnMappingBase>(recipeRequirementsBool, aCEDatabaseModelsWorldRecipeRequirementsBoolTableBase, true);
            aCEDatabaseModelsWorldRecipeRequirementsBoolTableBase.AddTypeMapping(aCEDatabaseModelsWorldRecipeRequirementsBoolMappingBase, false);
            defaultTableMappings22.Add(aCEDatabaseModelsWorldRecipeRequirementsBoolMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase15, recipeRequirementsBool.FindProperty("Id")!, aCEDatabaseModelsWorldRecipeRequirementsBoolMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)enumColumnBase5, recipeRequirementsBool.FindProperty("Enum")!, aCEDatabaseModelsWorldRecipeRequirementsBoolMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)indexColumnBase5, recipeRequirementsBool.FindProperty("Index")!, aCEDatabaseModelsWorldRecipeRequirementsBoolMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)messageColumnBase0, recipeRequirementsBool.FindProperty("Message")!, aCEDatabaseModelsWorldRecipeRequirementsBoolMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)recipe_IdColumnBase1, recipeRequirementsBool.FindProperty("RecipeId")!, aCEDatabaseModelsWorldRecipeRequirementsBoolMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)statColumnBase5, recipeRequirementsBool.FindProperty("Stat")!, aCEDatabaseModelsWorldRecipeRequirementsBoolMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)valueColumnBase10, recipeRequirementsBool.FindProperty("Value")!, aCEDatabaseModelsWorldRecipeRequirementsBoolMappingBase);

            var tableMappings22 = new List<TableMapping>();
            recipeRequirementsBool.SetRuntimeAnnotation("Relational:TableMappings", tableMappings22);
            var recipe_requirements_boolTable = new Table("recipe_requirements_bool", null, relationalModel);
            var idColumn15 = new Column("id", "int unsigned", recipe_requirements_boolTable);
            recipe_requirements_boolTable.Columns.Add("id", idColumn15);
            var enumColumn5 = new Column("enum", "int", recipe_requirements_boolTable);
            recipe_requirements_boolTable.Columns.Add("enum", enumColumn5);
            var indexColumn5 = new Column("index", "tinyint", recipe_requirements_boolTable);
            recipe_requirements_boolTable.Columns.Add("index", indexColumn5);
            var messageColumn0 = new Column("message", "text", recipe_requirements_boolTable)
            {
                IsNullable = true
            };
            recipe_requirements_boolTable.Columns.Add("message", messageColumn0);
            var recipe_IdColumn1 = new Column("recipe_Id", "int unsigned", recipe_requirements_boolTable);
            recipe_requirements_boolTable.Columns.Add("recipe_Id", recipe_IdColumn1);
            var statColumn5 = new Column("stat", "int", recipe_requirements_boolTable);
            recipe_requirements_boolTable.Columns.Add("stat", statColumn5);
            var valueColumn10 = new Column("value", "bit(1)", recipe_requirements_boolTable);
            recipe_requirements_boolTable.Columns.Add("value", valueColumn10);
            var pK_recipe_requirements_bool = new UniqueConstraint("PK_recipe_requirements_bool", recipe_requirements_boolTable, new[] { idColumn15 });
            recipe_requirements_boolTable.PrimaryKey = pK_recipe_requirements_bool;
            var pK_recipe_requirements_boolUc = RelationalModel.GetKey(this,
                "ACE.Database.Models.World.RecipeRequirementsBool",
                new[] { "Id" });
            pK_recipe_requirements_bool.MappedKeys.Add(pK_recipe_requirements_boolUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_recipe_requirements_boolUc).Add(pK_recipe_requirements_bool);
            recipe_requirements_boolTable.UniqueConstraints.Add("PK_recipe_requirements_bool", pK_recipe_requirements_bool);
            var recipeId_req_bool = new TableIndex(
            "recipeId_req_bool", recipe_requirements_boolTable, new[] { recipe_IdColumn1 }, false);
            var recipeId_req_boolIx = RelationalModel.GetIndex(this,
                "ACE.Database.Models.World.RecipeRequirementsBool",
                "recipeId_req_bool");
            recipeId_req_bool.MappedIndexes.Add(recipeId_req_boolIx);
            RelationalModel.GetOrCreateTableIndexes(recipeId_req_boolIx).Add(recipeId_req_bool);
            recipe_requirements_boolTable.Indexes.Add("recipeId_req_bool", recipeId_req_bool);
            relationalModel.Tables.Add(("recipe_requirements_bool", null), recipe_requirements_boolTable);
            var recipe_requirements_boolTableMapping = new TableMapping(recipeRequirementsBool, recipe_requirements_boolTable, true);
            recipe_requirements_boolTable.AddTypeMapping(recipe_requirements_boolTableMapping, false);
            tableMappings22.Add(recipe_requirements_boolTableMapping);
            RelationalModel.CreateColumnMapping(idColumn15, recipeRequirementsBool.FindProperty("Id")!, recipe_requirements_boolTableMapping);
            RelationalModel.CreateColumnMapping(enumColumn5, recipeRequirementsBool.FindProperty("Enum")!, recipe_requirements_boolTableMapping);
            RelationalModel.CreateColumnMapping(indexColumn5, recipeRequirementsBool.FindProperty("Index")!, recipe_requirements_boolTableMapping);
            RelationalModel.CreateColumnMapping(messageColumn0, recipeRequirementsBool.FindProperty("Message")!, recipe_requirements_boolTableMapping);
            RelationalModel.CreateColumnMapping(recipe_IdColumn1, recipeRequirementsBool.FindProperty("RecipeId")!, recipe_requirements_boolTableMapping);
            RelationalModel.CreateColumnMapping(statColumn5, recipeRequirementsBool.FindProperty("Stat")!, recipe_requirements_boolTableMapping);
            RelationalModel.CreateColumnMapping(valueColumn10, recipeRequirementsBool.FindProperty("Value")!, recipe_requirements_boolTableMapping);

            var recipeRequirementsDID = FindEntityType("ACE.Database.Models.World.RecipeRequirementsDID")!;

            var defaultTableMappings23 = new List<TableMappingBase<ColumnMappingBase>>();
            recipeRequirementsDID.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings23);
            var aCEDatabaseModelsWorldRecipeRequirementsDIDTableBase = new TableBase("ACE.Database.Models.World.RecipeRequirementsDID", null, relationalModel);
            var enumColumnBase6 = new ColumnBase<ColumnMappingBase>("enum", "int", aCEDatabaseModelsWorldRecipeRequirementsDIDTableBase);
            aCEDatabaseModelsWorldRecipeRequirementsDIDTableBase.Columns.Add("enum", enumColumnBase6);
            var idColumnBase16 = new ColumnBase<ColumnMappingBase>("id", "int unsigned", aCEDatabaseModelsWorldRecipeRequirementsDIDTableBase);
            aCEDatabaseModelsWorldRecipeRequirementsDIDTableBase.Columns.Add("id", idColumnBase16);
            var indexColumnBase6 = new ColumnBase<ColumnMappingBase>("index", "tinyint", aCEDatabaseModelsWorldRecipeRequirementsDIDTableBase);
            aCEDatabaseModelsWorldRecipeRequirementsDIDTableBase.Columns.Add("index", indexColumnBase6);
            var messageColumnBase1 = new ColumnBase<ColumnMappingBase>("message", "text", aCEDatabaseModelsWorldRecipeRequirementsDIDTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsWorldRecipeRequirementsDIDTableBase.Columns.Add("message", messageColumnBase1);
            var recipe_IdColumnBase2 = new ColumnBase<ColumnMappingBase>("recipe_Id", "int unsigned", aCEDatabaseModelsWorldRecipeRequirementsDIDTableBase);
            aCEDatabaseModelsWorldRecipeRequirementsDIDTableBase.Columns.Add("recipe_Id", recipe_IdColumnBase2);
            var statColumnBase6 = new ColumnBase<ColumnMappingBase>("stat", "int", aCEDatabaseModelsWorldRecipeRequirementsDIDTableBase);
            aCEDatabaseModelsWorldRecipeRequirementsDIDTableBase.Columns.Add("stat", statColumnBase6);
            var valueColumnBase11 = new ColumnBase<ColumnMappingBase>("value", "int unsigned", aCEDatabaseModelsWorldRecipeRequirementsDIDTableBase);
            aCEDatabaseModelsWorldRecipeRequirementsDIDTableBase.Columns.Add("value", valueColumnBase11);
            relationalModel.DefaultTables.Add("ACE.Database.Models.World.RecipeRequirementsDID", aCEDatabaseModelsWorldRecipeRequirementsDIDTableBase);
            var aCEDatabaseModelsWorldRecipeRequirementsDIDMappingBase = new TableMappingBase<ColumnMappingBase>(recipeRequirementsDID, aCEDatabaseModelsWorldRecipeRequirementsDIDTableBase, true);
            aCEDatabaseModelsWorldRecipeRequirementsDIDTableBase.AddTypeMapping(aCEDatabaseModelsWorldRecipeRequirementsDIDMappingBase, false);
            defaultTableMappings23.Add(aCEDatabaseModelsWorldRecipeRequirementsDIDMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase16, recipeRequirementsDID.FindProperty("Id")!, aCEDatabaseModelsWorldRecipeRequirementsDIDMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)enumColumnBase6, recipeRequirementsDID.FindProperty("Enum")!, aCEDatabaseModelsWorldRecipeRequirementsDIDMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)indexColumnBase6, recipeRequirementsDID.FindProperty("Index")!, aCEDatabaseModelsWorldRecipeRequirementsDIDMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)messageColumnBase1, recipeRequirementsDID.FindProperty("Message")!, aCEDatabaseModelsWorldRecipeRequirementsDIDMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)recipe_IdColumnBase2, recipeRequirementsDID.FindProperty("RecipeId")!, aCEDatabaseModelsWorldRecipeRequirementsDIDMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)statColumnBase6, recipeRequirementsDID.FindProperty("Stat")!, aCEDatabaseModelsWorldRecipeRequirementsDIDMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)valueColumnBase11, recipeRequirementsDID.FindProperty("Value")!, aCEDatabaseModelsWorldRecipeRequirementsDIDMappingBase);

            var tableMappings23 = new List<TableMapping>();
            recipeRequirementsDID.SetRuntimeAnnotation("Relational:TableMappings", tableMappings23);
            var recipe_requirements_d_i_dTable = new Table("recipe_requirements_d_i_d", null, relationalModel);
            var idColumn16 = new Column("id", "int unsigned", recipe_requirements_d_i_dTable);
            recipe_requirements_d_i_dTable.Columns.Add("id", idColumn16);
            var enumColumn6 = new Column("enum", "int", recipe_requirements_d_i_dTable);
            recipe_requirements_d_i_dTable.Columns.Add("enum", enumColumn6);
            var indexColumn6 = new Column("index", "tinyint", recipe_requirements_d_i_dTable);
            recipe_requirements_d_i_dTable.Columns.Add("index", indexColumn6);
            var messageColumn1 = new Column("message", "text", recipe_requirements_d_i_dTable)
            {
                IsNullable = true
            };
            recipe_requirements_d_i_dTable.Columns.Add("message", messageColumn1);
            var recipe_IdColumn2 = new Column("recipe_Id", "int unsigned", recipe_requirements_d_i_dTable);
            recipe_requirements_d_i_dTable.Columns.Add("recipe_Id", recipe_IdColumn2);
            var statColumn6 = new Column("stat", "int", recipe_requirements_d_i_dTable);
            recipe_requirements_d_i_dTable.Columns.Add("stat", statColumn6);
            var valueColumn11 = new Column("value", "int unsigned", recipe_requirements_d_i_dTable);
            recipe_requirements_d_i_dTable.Columns.Add("value", valueColumn11);
            var pK_recipe_requirements_d_i_d = new UniqueConstraint("PK_recipe_requirements_d_i_d", recipe_requirements_d_i_dTable, new[] { idColumn16 });
            recipe_requirements_d_i_dTable.PrimaryKey = pK_recipe_requirements_d_i_d;
            var pK_recipe_requirements_d_i_dUc = RelationalModel.GetKey(this,
                "ACE.Database.Models.World.RecipeRequirementsDID",
                new[] { "Id" });
            pK_recipe_requirements_d_i_d.MappedKeys.Add(pK_recipe_requirements_d_i_dUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_recipe_requirements_d_i_dUc).Add(pK_recipe_requirements_d_i_d);
            recipe_requirements_d_i_dTable.UniqueConstraints.Add("PK_recipe_requirements_d_i_d", pK_recipe_requirements_d_i_d);
            var recipeId_req_did = new TableIndex(
            "recipeId_req_did", recipe_requirements_d_i_dTable, new[] { recipe_IdColumn2 }, false);
            var recipeId_req_didIx = RelationalModel.GetIndex(this,
                "ACE.Database.Models.World.RecipeRequirementsDID",
                "recipeId_req_did");
            recipeId_req_did.MappedIndexes.Add(recipeId_req_didIx);
            RelationalModel.GetOrCreateTableIndexes(recipeId_req_didIx).Add(recipeId_req_did);
            recipe_requirements_d_i_dTable.Indexes.Add("recipeId_req_did", recipeId_req_did);
            relationalModel.Tables.Add(("recipe_requirements_d_i_d", null), recipe_requirements_d_i_dTable);
            var recipe_requirements_d_i_dTableMapping = new TableMapping(recipeRequirementsDID, recipe_requirements_d_i_dTable, true);
            recipe_requirements_d_i_dTable.AddTypeMapping(recipe_requirements_d_i_dTableMapping, false);
            tableMappings23.Add(recipe_requirements_d_i_dTableMapping);
            RelationalModel.CreateColumnMapping(idColumn16, recipeRequirementsDID.FindProperty("Id")!, recipe_requirements_d_i_dTableMapping);
            RelationalModel.CreateColumnMapping(enumColumn6, recipeRequirementsDID.FindProperty("Enum")!, recipe_requirements_d_i_dTableMapping);
            RelationalModel.CreateColumnMapping(indexColumn6, recipeRequirementsDID.FindProperty("Index")!, recipe_requirements_d_i_dTableMapping);
            RelationalModel.CreateColumnMapping(messageColumn1, recipeRequirementsDID.FindProperty("Message")!, recipe_requirements_d_i_dTableMapping);
            RelationalModel.CreateColumnMapping(recipe_IdColumn2, recipeRequirementsDID.FindProperty("RecipeId")!, recipe_requirements_d_i_dTableMapping);
            RelationalModel.CreateColumnMapping(statColumn6, recipeRequirementsDID.FindProperty("Stat")!, recipe_requirements_d_i_dTableMapping);
            RelationalModel.CreateColumnMapping(valueColumn11, recipeRequirementsDID.FindProperty("Value")!, recipe_requirements_d_i_dTableMapping);

            var recipeRequirementsFloat = FindEntityType("ACE.Database.Models.World.RecipeRequirementsFloat")!;

            var defaultTableMappings24 = new List<TableMappingBase<ColumnMappingBase>>();
            recipeRequirementsFloat.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings24);
            var aCEDatabaseModelsWorldRecipeRequirementsFloatTableBase = new TableBase("ACE.Database.Models.World.RecipeRequirementsFloat", null, relationalModel);
            var enumColumnBase7 = new ColumnBase<ColumnMappingBase>("enum", "int", aCEDatabaseModelsWorldRecipeRequirementsFloatTableBase);
            aCEDatabaseModelsWorldRecipeRequirementsFloatTableBase.Columns.Add("enum", enumColumnBase7);
            var idColumnBase17 = new ColumnBase<ColumnMappingBase>("id", "int unsigned", aCEDatabaseModelsWorldRecipeRequirementsFloatTableBase);
            aCEDatabaseModelsWorldRecipeRequirementsFloatTableBase.Columns.Add("id", idColumnBase17);
            var indexColumnBase7 = new ColumnBase<ColumnMappingBase>("index", "tinyint", aCEDatabaseModelsWorldRecipeRequirementsFloatTableBase);
            aCEDatabaseModelsWorldRecipeRequirementsFloatTableBase.Columns.Add("index", indexColumnBase7);
            var messageColumnBase2 = new ColumnBase<ColumnMappingBase>("message", "text", aCEDatabaseModelsWorldRecipeRequirementsFloatTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsWorldRecipeRequirementsFloatTableBase.Columns.Add("message", messageColumnBase2);
            var recipe_IdColumnBase3 = new ColumnBase<ColumnMappingBase>("recipe_Id", "int unsigned", aCEDatabaseModelsWorldRecipeRequirementsFloatTableBase);
            aCEDatabaseModelsWorldRecipeRequirementsFloatTableBase.Columns.Add("recipe_Id", recipe_IdColumnBase3);
            var statColumnBase7 = new ColumnBase<ColumnMappingBase>("stat", "int", aCEDatabaseModelsWorldRecipeRequirementsFloatTableBase);
            aCEDatabaseModelsWorldRecipeRequirementsFloatTableBase.Columns.Add("stat", statColumnBase7);
            var valueColumnBase12 = new ColumnBase<ColumnMappingBase>("value", "double", aCEDatabaseModelsWorldRecipeRequirementsFloatTableBase);
            aCEDatabaseModelsWorldRecipeRequirementsFloatTableBase.Columns.Add("value", valueColumnBase12);
            relationalModel.DefaultTables.Add("ACE.Database.Models.World.RecipeRequirementsFloat", aCEDatabaseModelsWorldRecipeRequirementsFloatTableBase);
            var aCEDatabaseModelsWorldRecipeRequirementsFloatMappingBase = new TableMappingBase<ColumnMappingBase>(recipeRequirementsFloat, aCEDatabaseModelsWorldRecipeRequirementsFloatTableBase, true);
            aCEDatabaseModelsWorldRecipeRequirementsFloatTableBase.AddTypeMapping(aCEDatabaseModelsWorldRecipeRequirementsFloatMappingBase, false);
            defaultTableMappings24.Add(aCEDatabaseModelsWorldRecipeRequirementsFloatMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase17, recipeRequirementsFloat.FindProperty("Id")!, aCEDatabaseModelsWorldRecipeRequirementsFloatMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)enumColumnBase7, recipeRequirementsFloat.FindProperty("Enum")!, aCEDatabaseModelsWorldRecipeRequirementsFloatMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)indexColumnBase7, recipeRequirementsFloat.FindProperty("Index")!, aCEDatabaseModelsWorldRecipeRequirementsFloatMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)messageColumnBase2, recipeRequirementsFloat.FindProperty("Message")!, aCEDatabaseModelsWorldRecipeRequirementsFloatMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)recipe_IdColumnBase3, recipeRequirementsFloat.FindProperty("RecipeId")!, aCEDatabaseModelsWorldRecipeRequirementsFloatMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)statColumnBase7, recipeRequirementsFloat.FindProperty("Stat")!, aCEDatabaseModelsWorldRecipeRequirementsFloatMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)valueColumnBase12, recipeRequirementsFloat.FindProperty("Value")!, aCEDatabaseModelsWorldRecipeRequirementsFloatMappingBase);

            var tableMappings24 = new List<TableMapping>();
            recipeRequirementsFloat.SetRuntimeAnnotation("Relational:TableMappings", tableMappings24);
            var recipe_requirements_floatTable = new Table("recipe_requirements_float", null, relationalModel);
            var idColumn17 = new Column("id", "int unsigned", recipe_requirements_floatTable);
            recipe_requirements_floatTable.Columns.Add("id", idColumn17);
            var enumColumn7 = new Column("enum", "int", recipe_requirements_floatTable);
            recipe_requirements_floatTable.Columns.Add("enum", enumColumn7);
            var indexColumn7 = new Column("index", "tinyint", recipe_requirements_floatTable);
            recipe_requirements_floatTable.Columns.Add("index", indexColumn7);
            var messageColumn2 = new Column("message", "text", recipe_requirements_floatTable)
            {
                IsNullable = true
            };
            recipe_requirements_floatTable.Columns.Add("message", messageColumn2);
            var recipe_IdColumn3 = new Column("recipe_Id", "int unsigned", recipe_requirements_floatTable);
            recipe_requirements_floatTable.Columns.Add("recipe_Id", recipe_IdColumn3);
            var statColumn7 = new Column("stat", "int", recipe_requirements_floatTable);
            recipe_requirements_floatTable.Columns.Add("stat", statColumn7);
            var valueColumn12 = new Column("value", "double", recipe_requirements_floatTable);
            recipe_requirements_floatTable.Columns.Add("value", valueColumn12);
            var pK_recipe_requirements_float = new UniqueConstraint("PK_recipe_requirements_float", recipe_requirements_floatTable, new[] { idColumn17 });
            recipe_requirements_floatTable.PrimaryKey = pK_recipe_requirements_float;
            var pK_recipe_requirements_floatUc = RelationalModel.GetKey(this,
                "ACE.Database.Models.World.RecipeRequirementsFloat",
                new[] { "Id" });
            pK_recipe_requirements_float.MappedKeys.Add(pK_recipe_requirements_floatUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_recipe_requirements_floatUc).Add(pK_recipe_requirements_float);
            recipe_requirements_floatTable.UniqueConstraints.Add("PK_recipe_requirements_float", pK_recipe_requirements_float);
            var recipeId_req_float = new TableIndex(
            "recipeId_req_float", recipe_requirements_floatTable, new[] { recipe_IdColumn3 }, false);
            var recipeId_req_floatIx = RelationalModel.GetIndex(this,
                "ACE.Database.Models.World.RecipeRequirementsFloat",
                "recipeId_req_float");
            recipeId_req_float.MappedIndexes.Add(recipeId_req_floatIx);
            RelationalModel.GetOrCreateTableIndexes(recipeId_req_floatIx).Add(recipeId_req_float);
            recipe_requirements_floatTable.Indexes.Add("recipeId_req_float", recipeId_req_float);
            relationalModel.Tables.Add(("recipe_requirements_float", null), recipe_requirements_floatTable);
            var recipe_requirements_floatTableMapping = new TableMapping(recipeRequirementsFloat, recipe_requirements_floatTable, true);
            recipe_requirements_floatTable.AddTypeMapping(recipe_requirements_floatTableMapping, false);
            tableMappings24.Add(recipe_requirements_floatTableMapping);
            RelationalModel.CreateColumnMapping(idColumn17, recipeRequirementsFloat.FindProperty("Id")!, recipe_requirements_floatTableMapping);
            RelationalModel.CreateColumnMapping(enumColumn7, recipeRequirementsFloat.FindProperty("Enum")!, recipe_requirements_floatTableMapping);
            RelationalModel.CreateColumnMapping(indexColumn7, recipeRequirementsFloat.FindProperty("Index")!, recipe_requirements_floatTableMapping);
            RelationalModel.CreateColumnMapping(messageColumn2, recipeRequirementsFloat.FindProperty("Message")!, recipe_requirements_floatTableMapping);
            RelationalModel.CreateColumnMapping(recipe_IdColumn3, recipeRequirementsFloat.FindProperty("RecipeId")!, recipe_requirements_floatTableMapping);
            RelationalModel.CreateColumnMapping(statColumn7, recipeRequirementsFloat.FindProperty("Stat")!, recipe_requirements_floatTableMapping);
            RelationalModel.CreateColumnMapping(valueColumn12, recipeRequirementsFloat.FindProperty("Value")!, recipe_requirements_floatTableMapping);

            var recipeRequirementsIID = FindEntityType("ACE.Database.Models.World.RecipeRequirementsIID")!;

            var defaultTableMappings25 = new List<TableMappingBase<ColumnMappingBase>>();
            recipeRequirementsIID.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings25);
            var aCEDatabaseModelsWorldRecipeRequirementsIIDTableBase = new TableBase("ACE.Database.Models.World.RecipeRequirementsIID", null, relationalModel);
            var enumColumnBase8 = new ColumnBase<ColumnMappingBase>("enum", "int", aCEDatabaseModelsWorldRecipeRequirementsIIDTableBase);
            aCEDatabaseModelsWorldRecipeRequirementsIIDTableBase.Columns.Add("enum", enumColumnBase8);
            var idColumnBase18 = new ColumnBase<ColumnMappingBase>("id", "int unsigned", aCEDatabaseModelsWorldRecipeRequirementsIIDTableBase);
            aCEDatabaseModelsWorldRecipeRequirementsIIDTableBase.Columns.Add("id", idColumnBase18);
            var indexColumnBase8 = new ColumnBase<ColumnMappingBase>("index", "tinyint", aCEDatabaseModelsWorldRecipeRequirementsIIDTableBase);
            aCEDatabaseModelsWorldRecipeRequirementsIIDTableBase.Columns.Add("index", indexColumnBase8);
            var messageColumnBase3 = new ColumnBase<ColumnMappingBase>("message", "text", aCEDatabaseModelsWorldRecipeRequirementsIIDTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsWorldRecipeRequirementsIIDTableBase.Columns.Add("message", messageColumnBase3);
            var recipe_IdColumnBase4 = new ColumnBase<ColumnMappingBase>("recipe_Id", "int unsigned", aCEDatabaseModelsWorldRecipeRequirementsIIDTableBase);
            aCEDatabaseModelsWorldRecipeRequirementsIIDTableBase.Columns.Add("recipe_Id", recipe_IdColumnBase4);
            var statColumnBase8 = new ColumnBase<ColumnMappingBase>("stat", "int", aCEDatabaseModelsWorldRecipeRequirementsIIDTableBase);
            aCEDatabaseModelsWorldRecipeRequirementsIIDTableBase.Columns.Add("stat", statColumnBase8);
            var valueColumnBase13 = new ColumnBase<ColumnMappingBase>("value", "int unsigned", aCEDatabaseModelsWorldRecipeRequirementsIIDTableBase);
            aCEDatabaseModelsWorldRecipeRequirementsIIDTableBase.Columns.Add("value", valueColumnBase13);
            relationalModel.DefaultTables.Add("ACE.Database.Models.World.RecipeRequirementsIID", aCEDatabaseModelsWorldRecipeRequirementsIIDTableBase);
            var aCEDatabaseModelsWorldRecipeRequirementsIIDMappingBase = new TableMappingBase<ColumnMappingBase>(recipeRequirementsIID, aCEDatabaseModelsWorldRecipeRequirementsIIDTableBase, true);
            aCEDatabaseModelsWorldRecipeRequirementsIIDTableBase.AddTypeMapping(aCEDatabaseModelsWorldRecipeRequirementsIIDMappingBase, false);
            defaultTableMappings25.Add(aCEDatabaseModelsWorldRecipeRequirementsIIDMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase18, recipeRequirementsIID.FindProperty("Id")!, aCEDatabaseModelsWorldRecipeRequirementsIIDMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)enumColumnBase8, recipeRequirementsIID.FindProperty("Enum")!, aCEDatabaseModelsWorldRecipeRequirementsIIDMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)indexColumnBase8, recipeRequirementsIID.FindProperty("Index")!, aCEDatabaseModelsWorldRecipeRequirementsIIDMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)messageColumnBase3, recipeRequirementsIID.FindProperty("Message")!, aCEDatabaseModelsWorldRecipeRequirementsIIDMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)recipe_IdColumnBase4, recipeRequirementsIID.FindProperty("RecipeId")!, aCEDatabaseModelsWorldRecipeRequirementsIIDMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)statColumnBase8, recipeRequirementsIID.FindProperty("Stat")!, aCEDatabaseModelsWorldRecipeRequirementsIIDMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)valueColumnBase13, recipeRequirementsIID.FindProperty("Value")!, aCEDatabaseModelsWorldRecipeRequirementsIIDMappingBase);

            var tableMappings25 = new List<TableMapping>();
            recipeRequirementsIID.SetRuntimeAnnotation("Relational:TableMappings", tableMappings25);
            var recipe_requirements_i_i_dTable = new Table("recipe_requirements_i_i_d", null, relationalModel);
            var idColumn18 = new Column("id", "int unsigned", recipe_requirements_i_i_dTable);
            recipe_requirements_i_i_dTable.Columns.Add("id", idColumn18);
            var enumColumn8 = new Column("enum", "int", recipe_requirements_i_i_dTable);
            recipe_requirements_i_i_dTable.Columns.Add("enum", enumColumn8);
            var indexColumn8 = new Column("index", "tinyint", recipe_requirements_i_i_dTable);
            recipe_requirements_i_i_dTable.Columns.Add("index", indexColumn8);
            var messageColumn3 = new Column("message", "text", recipe_requirements_i_i_dTable)
            {
                IsNullable = true
            };
            recipe_requirements_i_i_dTable.Columns.Add("message", messageColumn3);
            var recipe_IdColumn4 = new Column("recipe_Id", "int unsigned", recipe_requirements_i_i_dTable);
            recipe_requirements_i_i_dTable.Columns.Add("recipe_Id", recipe_IdColumn4);
            var statColumn8 = new Column("stat", "int", recipe_requirements_i_i_dTable);
            recipe_requirements_i_i_dTable.Columns.Add("stat", statColumn8);
            var valueColumn13 = new Column("value", "int unsigned", recipe_requirements_i_i_dTable);
            recipe_requirements_i_i_dTable.Columns.Add("value", valueColumn13);
            var pK_recipe_requirements_i_i_d = new UniqueConstraint("PK_recipe_requirements_i_i_d", recipe_requirements_i_i_dTable, new[] { idColumn18 });
            recipe_requirements_i_i_dTable.PrimaryKey = pK_recipe_requirements_i_i_d;
            var pK_recipe_requirements_i_i_dUc = RelationalModel.GetKey(this,
                "ACE.Database.Models.World.RecipeRequirementsIID",
                new[] { "Id" });
            pK_recipe_requirements_i_i_d.MappedKeys.Add(pK_recipe_requirements_i_i_dUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_recipe_requirements_i_i_dUc).Add(pK_recipe_requirements_i_i_d);
            recipe_requirements_i_i_dTable.UniqueConstraints.Add("PK_recipe_requirements_i_i_d", pK_recipe_requirements_i_i_d);
            var recipeId_req_iid = new TableIndex(
            "recipeId_req_iid", recipe_requirements_i_i_dTable, new[] { recipe_IdColumn4 }, false);
            var recipeId_req_iidIx = RelationalModel.GetIndex(this,
                "ACE.Database.Models.World.RecipeRequirementsIID",
                "recipeId_req_iid");
            recipeId_req_iid.MappedIndexes.Add(recipeId_req_iidIx);
            RelationalModel.GetOrCreateTableIndexes(recipeId_req_iidIx).Add(recipeId_req_iid);
            recipe_requirements_i_i_dTable.Indexes.Add("recipeId_req_iid", recipeId_req_iid);
            relationalModel.Tables.Add(("recipe_requirements_i_i_d", null), recipe_requirements_i_i_dTable);
            var recipe_requirements_i_i_dTableMapping = new TableMapping(recipeRequirementsIID, recipe_requirements_i_i_dTable, true);
            recipe_requirements_i_i_dTable.AddTypeMapping(recipe_requirements_i_i_dTableMapping, false);
            tableMappings25.Add(recipe_requirements_i_i_dTableMapping);
            RelationalModel.CreateColumnMapping(idColumn18, recipeRequirementsIID.FindProperty("Id")!, recipe_requirements_i_i_dTableMapping);
            RelationalModel.CreateColumnMapping(enumColumn8, recipeRequirementsIID.FindProperty("Enum")!, recipe_requirements_i_i_dTableMapping);
            RelationalModel.CreateColumnMapping(indexColumn8, recipeRequirementsIID.FindProperty("Index")!, recipe_requirements_i_i_dTableMapping);
            RelationalModel.CreateColumnMapping(messageColumn3, recipeRequirementsIID.FindProperty("Message")!, recipe_requirements_i_i_dTableMapping);
            RelationalModel.CreateColumnMapping(recipe_IdColumn4, recipeRequirementsIID.FindProperty("RecipeId")!, recipe_requirements_i_i_dTableMapping);
            RelationalModel.CreateColumnMapping(statColumn8, recipeRequirementsIID.FindProperty("Stat")!, recipe_requirements_i_i_dTableMapping);
            RelationalModel.CreateColumnMapping(valueColumn13, recipeRequirementsIID.FindProperty("Value")!, recipe_requirements_i_i_dTableMapping);

            var recipeRequirementsInt = FindEntityType("ACE.Database.Models.World.RecipeRequirementsInt")!;

            var defaultTableMappings26 = new List<TableMappingBase<ColumnMappingBase>>();
            recipeRequirementsInt.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings26);
            var aCEDatabaseModelsWorldRecipeRequirementsIntTableBase = new TableBase("ACE.Database.Models.World.RecipeRequirementsInt", null, relationalModel);
            var enumColumnBase9 = new ColumnBase<ColumnMappingBase>("enum", "int", aCEDatabaseModelsWorldRecipeRequirementsIntTableBase);
            aCEDatabaseModelsWorldRecipeRequirementsIntTableBase.Columns.Add("enum", enumColumnBase9);
            var idColumnBase19 = new ColumnBase<ColumnMappingBase>("id", "int unsigned", aCEDatabaseModelsWorldRecipeRequirementsIntTableBase);
            aCEDatabaseModelsWorldRecipeRequirementsIntTableBase.Columns.Add("id", idColumnBase19);
            var indexColumnBase9 = new ColumnBase<ColumnMappingBase>("index", "tinyint", aCEDatabaseModelsWorldRecipeRequirementsIntTableBase);
            aCEDatabaseModelsWorldRecipeRequirementsIntTableBase.Columns.Add("index", indexColumnBase9);
            var messageColumnBase4 = new ColumnBase<ColumnMappingBase>("message", "text", aCEDatabaseModelsWorldRecipeRequirementsIntTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsWorldRecipeRequirementsIntTableBase.Columns.Add("message", messageColumnBase4);
            var recipe_IdColumnBase5 = new ColumnBase<ColumnMappingBase>("recipe_Id", "int unsigned", aCEDatabaseModelsWorldRecipeRequirementsIntTableBase);
            aCEDatabaseModelsWorldRecipeRequirementsIntTableBase.Columns.Add("recipe_Id", recipe_IdColumnBase5);
            var statColumnBase9 = new ColumnBase<ColumnMappingBase>("stat", "int", aCEDatabaseModelsWorldRecipeRequirementsIntTableBase);
            aCEDatabaseModelsWorldRecipeRequirementsIntTableBase.Columns.Add("stat", statColumnBase9);
            var valueColumnBase14 = new ColumnBase<ColumnMappingBase>("value", "int", aCEDatabaseModelsWorldRecipeRequirementsIntTableBase);
            aCEDatabaseModelsWorldRecipeRequirementsIntTableBase.Columns.Add("value", valueColumnBase14);
            relationalModel.DefaultTables.Add("ACE.Database.Models.World.RecipeRequirementsInt", aCEDatabaseModelsWorldRecipeRequirementsIntTableBase);
            var aCEDatabaseModelsWorldRecipeRequirementsIntMappingBase = new TableMappingBase<ColumnMappingBase>(recipeRequirementsInt, aCEDatabaseModelsWorldRecipeRequirementsIntTableBase, true);
            aCEDatabaseModelsWorldRecipeRequirementsIntTableBase.AddTypeMapping(aCEDatabaseModelsWorldRecipeRequirementsIntMappingBase, false);
            defaultTableMappings26.Add(aCEDatabaseModelsWorldRecipeRequirementsIntMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase19, recipeRequirementsInt.FindProperty("Id")!, aCEDatabaseModelsWorldRecipeRequirementsIntMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)enumColumnBase9, recipeRequirementsInt.FindProperty("Enum")!, aCEDatabaseModelsWorldRecipeRequirementsIntMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)indexColumnBase9, recipeRequirementsInt.FindProperty("Index")!, aCEDatabaseModelsWorldRecipeRequirementsIntMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)messageColumnBase4, recipeRequirementsInt.FindProperty("Message")!, aCEDatabaseModelsWorldRecipeRequirementsIntMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)recipe_IdColumnBase5, recipeRequirementsInt.FindProperty("RecipeId")!, aCEDatabaseModelsWorldRecipeRequirementsIntMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)statColumnBase9, recipeRequirementsInt.FindProperty("Stat")!, aCEDatabaseModelsWorldRecipeRequirementsIntMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)valueColumnBase14, recipeRequirementsInt.FindProperty("Value")!, aCEDatabaseModelsWorldRecipeRequirementsIntMappingBase);

            var tableMappings26 = new List<TableMapping>();
            recipeRequirementsInt.SetRuntimeAnnotation("Relational:TableMappings", tableMappings26);
            var recipe_requirements_intTable = new Table("recipe_requirements_int", null, relationalModel);
            var idColumn19 = new Column("id", "int unsigned", recipe_requirements_intTable);
            recipe_requirements_intTable.Columns.Add("id", idColumn19);
            var enumColumn9 = new Column("enum", "int", recipe_requirements_intTable);
            recipe_requirements_intTable.Columns.Add("enum", enumColumn9);
            var indexColumn9 = new Column("index", "tinyint", recipe_requirements_intTable);
            recipe_requirements_intTable.Columns.Add("index", indexColumn9);
            var messageColumn4 = new Column("message", "text", recipe_requirements_intTable)
            {
                IsNullable = true
            };
            recipe_requirements_intTable.Columns.Add("message", messageColumn4);
            var recipe_IdColumn5 = new Column("recipe_Id", "int unsigned", recipe_requirements_intTable);
            recipe_requirements_intTable.Columns.Add("recipe_Id", recipe_IdColumn5);
            var statColumn9 = new Column("stat", "int", recipe_requirements_intTable);
            recipe_requirements_intTable.Columns.Add("stat", statColumn9);
            var valueColumn14 = new Column("value", "int", recipe_requirements_intTable);
            recipe_requirements_intTable.Columns.Add("value", valueColumn14);
            var pK_recipe_requirements_int = new UniqueConstraint("PK_recipe_requirements_int", recipe_requirements_intTable, new[] { idColumn19 });
            recipe_requirements_intTable.PrimaryKey = pK_recipe_requirements_int;
            var pK_recipe_requirements_intUc = RelationalModel.GetKey(this,
                "ACE.Database.Models.World.RecipeRequirementsInt",
                new[] { "Id" });
            pK_recipe_requirements_int.MappedKeys.Add(pK_recipe_requirements_intUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_recipe_requirements_intUc).Add(pK_recipe_requirements_int);
            recipe_requirements_intTable.UniqueConstraints.Add("PK_recipe_requirements_int", pK_recipe_requirements_int);
            var recipeId_req_int = new TableIndex(
            "recipeId_req_int", recipe_requirements_intTable, new[] { recipe_IdColumn5 }, false);
            var recipeId_req_intIx = RelationalModel.GetIndex(this,
                "ACE.Database.Models.World.RecipeRequirementsInt",
                "recipeId_req_int");
            recipeId_req_int.MappedIndexes.Add(recipeId_req_intIx);
            RelationalModel.GetOrCreateTableIndexes(recipeId_req_intIx).Add(recipeId_req_int);
            recipe_requirements_intTable.Indexes.Add("recipeId_req_int", recipeId_req_int);
            relationalModel.Tables.Add(("recipe_requirements_int", null), recipe_requirements_intTable);
            var recipe_requirements_intTableMapping = new TableMapping(recipeRequirementsInt, recipe_requirements_intTable, true);
            recipe_requirements_intTable.AddTypeMapping(recipe_requirements_intTableMapping, false);
            tableMappings26.Add(recipe_requirements_intTableMapping);
            RelationalModel.CreateColumnMapping(idColumn19, recipeRequirementsInt.FindProperty("Id")!, recipe_requirements_intTableMapping);
            RelationalModel.CreateColumnMapping(enumColumn9, recipeRequirementsInt.FindProperty("Enum")!, recipe_requirements_intTableMapping);
            RelationalModel.CreateColumnMapping(indexColumn9, recipeRequirementsInt.FindProperty("Index")!, recipe_requirements_intTableMapping);
            RelationalModel.CreateColumnMapping(messageColumn4, recipeRequirementsInt.FindProperty("Message")!, recipe_requirements_intTableMapping);
            RelationalModel.CreateColumnMapping(recipe_IdColumn5, recipeRequirementsInt.FindProperty("RecipeId")!, recipe_requirements_intTableMapping);
            RelationalModel.CreateColumnMapping(statColumn9, recipeRequirementsInt.FindProperty("Stat")!, recipe_requirements_intTableMapping);
            RelationalModel.CreateColumnMapping(valueColumn14, recipeRequirementsInt.FindProperty("Value")!, recipe_requirements_intTableMapping);

            var recipeRequirementsString = FindEntityType("ACE.Database.Models.World.RecipeRequirementsString")!;

            var defaultTableMappings27 = new List<TableMappingBase<ColumnMappingBase>>();
            recipeRequirementsString.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings27);
            var aCEDatabaseModelsWorldRecipeRequirementsStringTableBase = new TableBase("ACE.Database.Models.World.RecipeRequirementsString", null, relationalModel);
            var enumColumnBase10 = new ColumnBase<ColumnMappingBase>("enum", "int", aCEDatabaseModelsWorldRecipeRequirementsStringTableBase);
            aCEDatabaseModelsWorldRecipeRequirementsStringTableBase.Columns.Add("enum", enumColumnBase10);
            var idColumnBase20 = new ColumnBase<ColumnMappingBase>("id", "int unsigned", aCEDatabaseModelsWorldRecipeRequirementsStringTableBase);
            aCEDatabaseModelsWorldRecipeRequirementsStringTableBase.Columns.Add("id", idColumnBase20);
            var indexColumnBase10 = new ColumnBase<ColumnMappingBase>("index", "tinyint", aCEDatabaseModelsWorldRecipeRequirementsStringTableBase);
            aCEDatabaseModelsWorldRecipeRequirementsStringTableBase.Columns.Add("index", indexColumnBase10);
            var messageColumnBase5 = new ColumnBase<ColumnMappingBase>("message", "text", aCEDatabaseModelsWorldRecipeRequirementsStringTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsWorldRecipeRequirementsStringTableBase.Columns.Add("message", messageColumnBase5);
            var recipe_IdColumnBase6 = new ColumnBase<ColumnMappingBase>("recipe_Id", "int unsigned", aCEDatabaseModelsWorldRecipeRequirementsStringTableBase);
            aCEDatabaseModelsWorldRecipeRequirementsStringTableBase.Columns.Add("recipe_Id", recipe_IdColumnBase6);
            var statColumnBase10 = new ColumnBase<ColumnMappingBase>("stat", "int", aCEDatabaseModelsWorldRecipeRequirementsStringTableBase);
            aCEDatabaseModelsWorldRecipeRequirementsStringTableBase.Columns.Add("stat", statColumnBase10);
            var valueColumnBase15 = new ColumnBase<ColumnMappingBase>("value", "text", aCEDatabaseModelsWorldRecipeRequirementsStringTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsWorldRecipeRequirementsStringTableBase.Columns.Add("value", valueColumnBase15);
            relationalModel.DefaultTables.Add("ACE.Database.Models.World.RecipeRequirementsString", aCEDatabaseModelsWorldRecipeRequirementsStringTableBase);
            var aCEDatabaseModelsWorldRecipeRequirementsStringMappingBase = new TableMappingBase<ColumnMappingBase>(recipeRequirementsString, aCEDatabaseModelsWorldRecipeRequirementsStringTableBase, true);
            aCEDatabaseModelsWorldRecipeRequirementsStringTableBase.AddTypeMapping(aCEDatabaseModelsWorldRecipeRequirementsStringMappingBase, false);
            defaultTableMappings27.Add(aCEDatabaseModelsWorldRecipeRequirementsStringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase20, recipeRequirementsString.FindProperty("Id")!, aCEDatabaseModelsWorldRecipeRequirementsStringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)enumColumnBase10, recipeRequirementsString.FindProperty("Enum")!, aCEDatabaseModelsWorldRecipeRequirementsStringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)indexColumnBase10, recipeRequirementsString.FindProperty("Index")!, aCEDatabaseModelsWorldRecipeRequirementsStringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)messageColumnBase5, recipeRequirementsString.FindProperty("Message")!, aCEDatabaseModelsWorldRecipeRequirementsStringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)recipe_IdColumnBase6, recipeRequirementsString.FindProperty("RecipeId")!, aCEDatabaseModelsWorldRecipeRequirementsStringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)statColumnBase10, recipeRequirementsString.FindProperty("Stat")!, aCEDatabaseModelsWorldRecipeRequirementsStringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)valueColumnBase15, recipeRequirementsString.FindProperty("Value")!, aCEDatabaseModelsWorldRecipeRequirementsStringMappingBase);

            var tableMappings27 = new List<TableMapping>();
            recipeRequirementsString.SetRuntimeAnnotation("Relational:TableMappings", tableMappings27);
            var recipe_requirements_stringTable = new Table("recipe_requirements_string", null, relationalModel);
            var idColumn20 = new Column("id", "int unsigned", recipe_requirements_stringTable);
            recipe_requirements_stringTable.Columns.Add("id", idColumn20);
            var enumColumn10 = new Column("enum", "int", recipe_requirements_stringTable);
            recipe_requirements_stringTable.Columns.Add("enum", enumColumn10);
            var indexColumn10 = new Column("index", "tinyint", recipe_requirements_stringTable);
            recipe_requirements_stringTable.Columns.Add("index", indexColumn10);
            var messageColumn5 = new Column("message", "text", recipe_requirements_stringTable)
            {
                IsNullable = true
            };
            recipe_requirements_stringTable.Columns.Add("message", messageColumn5);
            var recipe_IdColumn6 = new Column("recipe_Id", "int unsigned", recipe_requirements_stringTable);
            recipe_requirements_stringTable.Columns.Add("recipe_Id", recipe_IdColumn6);
            var statColumn10 = new Column("stat", "int", recipe_requirements_stringTable);
            recipe_requirements_stringTable.Columns.Add("stat", statColumn10);
            var valueColumn15 = new Column("value", "text", recipe_requirements_stringTable)
            {
                IsNullable = true
            };
            recipe_requirements_stringTable.Columns.Add("value", valueColumn15);
            var pK_recipe_requirements_string = new UniqueConstraint("PK_recipe_requirements_string", recipe_requirements_stringTable, new[] { idColumn20 });
            recipe_requirements_stringTable.PrimaryKey = pK_recipe_requirements_string;
            var pK_recipe_requirements_stringUc = RelationalModel.GetKey(this,
                "ACE.Database.Models.World.RecipeRequirementsString",
                new[] { "Id" });
            pK_recipe_requirements_string.MappedKeys.Add(pK_recipe_requirements_stringUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_recipe_requirements_stringUc).Add(pK_recipe_requirements_string);
            recipe_requirements_stringTable.UniqueConstraints.Add("PK_recipe_requirements_string", pK_recipe_requirements_string);
            var recipeId_req_string = new TableIndex(
            "recipeId_req_string", recipe_requirements_stringTable, new[] { recipe_IdColumn6 }, false);
            var recipeId_req_stringIx = RelationalModel.GetIndex(this,
                "ACE.Database.Models.World.RecipeRequirementsString",
                "recipeId_req_string");
            recipeId_req_string.MappedIndexes.Add(recipeId_req_stringIx);
            RelationalModel.GetOrCreateTableIndexes(recipeId_req_stringIx).Add(recipeId_req_string);
            recipe_requirements_stringTable.Indexes.Add("recipeId_req_string", recipeId_req_string);
            relationalModel.Tables.Add(("recipe_requirements_string", null), recipe_requirements_stringTable);
            var recipe_requirements_stringTableMapping = new TableMapping(recipeRequirementsString, recipe_requirements_stringTable, true);
            recipe_requirements_stringTable.AddTypeMapping(recipe_requirements_stringTableMapping, false);
            tableMappings27.Add(recipe_requirements_stringTableMapping);
            RelationalModel.CreateColumnMapping(idColumn20, recipeRequirementsString.FindProperty("Id")!, recipe_requirements_stringTableMapping);
            RelationalModel.CreateColumnMapping(enumColumn10, recipeRequirementsString.FindProperty("Enum")!, recipe_requirements_stringTableMapping);
            RelationalModel.CreateColumnMapping(indexColumn10, recipeRequirementsString.FindProperty("Index")!, recipe_requirements_stringTableMapping);
            RelationalModel.CreateColumnMapping(messageColumn5, recipeRequirementsString.FindProperty("Message")!, recipe_requirements_stringTableMapping);
            RelationalModel.CreateColumnMapping(recipe_IdColumn6, recipeRequirementsString.FindProperty("RecipeId")!, recipe_requirements_stringTableMapping);
            RelationalModel.CreateColumnMapping(statColumn10, recipeRequirementsString.FindProperty("Stat")!, recipe_requirements_stringTableMapping);
            RelationalModel.CreateColumnMapping(valueColumn15, recipeRequirementsString.FindProperty("Value")!, recipe_requirements_stringTableMapping);

            var spell = FindEntityType("ACE.Database.Models.World.Spell")!;

            var defaultTableMappings28 = new List<TableMappingBase<ColumnMappingBase>>();
            spell.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings28);
            var aCEDatabaseModelsWorldSpellTableBase = new TableBase("ACE.Database.Models.World.Spell", null, relationalModel);
            var alignColumnBase = new ColumnBase<ColumnMappingBase>("align", "int", aCEDatabaseModelsWorldSpellTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsWorldSpellTableBase.Columns.Add("align", alignColumnBase);
            var base_IntensityColumnBase = new ColumnBase<ColumnMappingBase>("base_Intensity", "int", aCEDatabaseModelsWorldSpellTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsWorldSpellTableBase.Columns.Add("base_Intensity", base_IntensityColumnBase);
            var boostColumnBase = new ColumnBase<ColumnMappingBase>("boost", "int", aCEDatabaseModelsWorldSpellTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsWorldSpellTableBase.Columns.Add("boost", boostColumnBase);
            var boost_VarianceColumnBase = new ColumnBase<ColumnMappingBase>("boost_Variance", "int", aCEDatabaseModelsWorldSpellTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsWorldSpellTableBase.Columns.Add("boost_Variance", boost_VarianceColumnBase);
            var create_Offset_Origin_XColumnBase = new ColumnBase<ColumnMappingBase>("create_Offset_Origin_X", "float", aCEDatabaseModelsWorldSpellTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsWorldSpellTableBase.Columns.Add("create_Offset_Origin_X", create_Offset_Origin_XColumnBase);
            var create_Offset_Origin_YColumnBase = new ColumnBase<ColumnMappingBase>("create_Offset_Origin_Y", "float", aCEDatabaseModelsWorldSpellTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsWorldSpellTableBase.Columns.Add("create_Offset_Origin_Y", create_Offset_Origin_YColumnBase);
            var create_Offset_Origin_ZColumnBase = new ColumnBase<ColumnMappingBase>("create_Offset_Origin_Z", "float", aCEDatabaseModelsWorldSpellTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsWorldSpellTableBase.Columns.Add("create_Offset_Origin_Z", create_Offset_Origin_ZColumnBase);
            var crit_FreqColumnBase = new ColumnBase<ColumnMappingBase>("crit_Freq", "double", aCEDatabaseModelsWorldSpellTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsWorldSpellTableBase.Columns.Add("crit_Freq", crit_FreqColumnBase);
            var crit_MultiplierColumnBase = new ColumnBase<ColumnMappingBase>("crit_Multiplier", "double", aCEDatabaseModelsWorldSpellTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsWorldSpellTableBase.Columns.Add("crit_Multiplier", crit_MultiplierColumnBase);
            var damage_RatioColumnBase = new ColumnBase<ColumnMappingBase>("damage_Ratio", "float", aCEDatabaseModelsWorldSpellTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsWorldSpellTableBase.Columns.Add("damage_Ratio", damage_RatioColumnBase);
            var damage_TypeColumnBase = new ColumnBase<ColumnMappingBase>("damage_Type", "int", aCEDatabaseModelsWorldSpellTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsWorldSpellTableBase.Columns.Add("damage_Type", damage_TypeColumnBase);
            var default_Launch_AngleColumnBase = new ColumnBase<ColumnMappingBase>("default_Launch_Angle", "float", aCEDatabaseModelsWorldSpellTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsWorldSpellTableBase.Columns.Add("default_Launch_Angle", default_Launch_AngleColumnBase);
            var destinationColumnBase = new ColumnBase<ColumnMappingBase>("destination", "int", aCEDatabaseModelsWorldSpellTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsWorldSpellTableBase.Columns.Add("destination", destinationColumnBase);
            var dims_Origin_XColumnBase = new ColumnBase<ColumnMappingBase>("dims_Origin_X", "float", aCEDatabaseModelsWorldSpellTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsWorldSpellTableBase.Columns.Add("dims_Origin_X", dims_Origin_XColumnBase);
            var dims_Origin_YColumnBase = new ColumnBase<ColumnMappingBase>("dims_Origin_Y", "float", aCEDatabaseModelsWorldSpellTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsWorldSpellTableBase.Columns.Add("dims_Origin_Y", dims_Origin_YColumnBase);
            var dims_Origin_ZColumnBase = new ColumnBase<ColumnMappingBase>("dims_Origin_Z", "float", aCEDatabaseModelsWorldSpellTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsWorldSpellTableBase.Columns.Add("dims_Origin_Z", dims_Origin_ZColumnBase);
            var dispel_SchoolColumnBase = new ColumnBase<ColumnMappingBase>("dispel_School", "int", aCEDatabaseModelsWorldSpellTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsWorldSpellTableBase.Columns.Add("dispel_School", dispel_SchoolColumnBase);
            var dot_DurationColumnBase = new ColumnBase<ColumnMappingBase>("dot_Duration", "double", aCEDatabaseModelsWorldSpellTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsWorldSpellTableBase.Columns.Add("dot_Duration", dot_DurationColumnBase);
            var drain_PercentageColumnBase = new ColumnBase<ColumnMappingBase>("drain_Percentage", "float", aCEDatabaseModelsWorldSpellTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsWorldSpellTableBase.Columns.Add("drain_Percentage", drain_PercentageColumnBase);
            var e_TypeColumnBase = new ColumnBase<ColumnMappingBase>("e_Type", "int unsigned", aCEDatabaseModelsWorldSpellTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsWorldSpellTableBase.Columns.Add("e_Type", e_TypeColumnBase);
            var elemental_ModifierColumnBase = new ColumnBase<ColumnMappingBase>("elemental_Modifier", "double", aCEDatabaseModelsWorldSpellTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsWorldSpellTableBase.Columns.Add("elemental_Modifier", elemental_ModifierColumnBase);
            var idColumnBase21 = new ColumnBase<ColumnMappingBase>("id", "int unsigned", aCEDatabaseModelsWorldSpellTableBase);
            aCEDatabaseModelsWorldSpellTableBase.Columns.Add("id", idColumnBase21);
            var ignore_Magic_ResistColumnBase = new ColumnBase<ColumnMappingBase>("ignore_Magic_Resist", "int", aCEDatabaseModelsWorldSpellTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsWorldSpellTableBase.Columns.Add("ignore_Magic_Resist", ignore_Magic_ResistColumnBase);
            var imbued_EffectColumnBase = new ColumnBase<ColumnMappingBase>("imbued_Effect", "int unsigned", aCEDatabaseModelsWorldSpellTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsWorldSpellTableBase.Columns.Add("imbued_Effect", imbued_EffectColumnBase);
            var indexColumnBase11 = new ColumnBase<ColumnMappingBase>("index", "int", aCEDatabaseModelsWorldSpellTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsWorldSpellTableBase.Columns.Add("index", indexColumnBase11);
            var last_ModifiedColumnBase8 = new ColumnBase<ColumnMappingBase>("last_Modified", "datetime", aCEDatabaseModelsWorldSpellTableBase);
            aCEDatabaseModelsWorldSpellTableBase.Columns.Add("last_Modified", last_ModifiedColumnBase8);
            var linkColumnBase = new ColumnBase<ColumnMappingBase>("link", "int", aCEDatabaseModelsWorldSpellTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsWorldSpellTableBase.Columns.Add("link", linkColumnBase);
            var loss_PercentColumnBase = new ColumnBase<ColumnMappingBase>("loss_Percent", "float", aCEDatabaseModelsWorldSpellTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsWorldSpellTableBase.Columns.Add("loss_Percent", loss_PercentColumnBase);
            var max_Boost_AllowedColumnBase = new ColumnBase<ColumnMappingBase>("max_Boost_Allowed", "int", aCEDatabaseModelsWorldSpellTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsWorldSpellTableBase.Columns.Add("max_Boost_Allowed", max_Boost_AllowedColumnBase);
            var max_PowerColumnBase = new ColumnBase<ColumnMappingBase>("max_Power", "int", aCEDatabaseModelsWorldSpellTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsWorldSpellTableBase.Columns.Add("max_Power", max_PowerColumnBase);
            var min_PowerColumnBase = new ColumnBase<ColumnMappingBase>("min_Power", "int", aCEDatabaseModelsWorldSpellTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsWorldSpellTableBase.Columns.Add("min_Power", min_PowerColumnBase);
            var nameColumnBase3 = new ColumnBase<ColumnMappingBase>("name", "text", aCEDatabaseModelsWorldSpellTableBase);
            aCEDatabaseModelsWorldSpellTableBase.Columns.Add("name", nameColumnBase3);
            var non_TrackingColumnBase = new ColumnBase<ColumnMappingBase>("non_Tracking", "bit(1)", aCEDatabaseModelsWorldSpellTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsWorldSpellTableBase.Columns.Add("non_Tracking", non_TrackingColumnBase);
            var num_ProjectilesColumnBase = new ColumnBase<ColumnMappingBase>("num_Projectiles", "int", aCEDatabaseModelsWorldSpellTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsWorldSpellTableBase.Columns.Add("num_Projectiles", num_ProjectilesColumnBase);
            var num_Projectiles_VarianceColumnBase = new ColumnBase<ColumnMappingBase>("num_Projectiles_Variance", "int", aCEDatabaseModelsWorldSpellTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsWorldSpellTableBase.Columns.Add("num_Projectiles_Variance", num_Projectiles_VarianceColumnBase);
            var numberColumnBase = new ColumnBase<ColumnMappingBase>("number", "int", aCEDatabaseModelsWorldSpellTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsWorldSpellTableBase.Columns.Add("number", numberColumnBase);
            var number_VarianceColumnBase = new ColumnBase<ColumnMappingBase>("number_Variance", "float", aCEDatabaseModelsWorldSpellTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsWorldSpellTableBase.Columns.Add("number_Variance", number_VarianceColumnBase);
            var padding_Origin_XColumnBase = new ColumnBase<ColumnMappingBase>("padding_Origin_X", "float", aCEDatabaseModelsWorldSpellTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsWorldSpellTableBase.Columns.Add("padding_Origin_X", padding_Origin_XColumnBase);
            var padding_Origin_YColumnBase = new ColumnBase<ColumnMappingBase>("padding_Origin_Y", "float", aCEDatabaseModelsWorldSpellTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsWorldSpellTableBase.Columns.Add("padding_Origin_Y", padding_Origin_YColumnBase);
            var padding_Origin_ZColumnBase = new ColumnBase<ColumnMappingBase>("padding_Origin_Z", "float", aCEDatabaseModelsWorldSpellTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsWorldSpellTableBase.Columns.Add("padding_Origin_Z", padding_Origin_ZColumnBase);
            var peturbation_Origin_XColumnBase = new ColumnBase<ColumnMappingBase>("peturbation_Origin_X", "float", aCEDatabaseModelsWorldSpellTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsWorldSpellTableBase.Columns.Add("peturbation_Origin_X", peturbation_Origin_XColumnBase);
            var peturbation_Origin_YColumnBase = new ColumnBase<ColumnMappingBase>("peturbation_Origin_Y", "float", aCEDatabaseModelsWorldSpellTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsWorldSpellTableBase.Columns.Add("peturbation_Origin_Y", peturbation_Origin_YColumnBase);
            var peturbation_Origin_ZColumnBase = new ColumnBase<ColumnMappingBase>("peturbation_Origin_Z", "float", aCEDatabaseModelsWorldSpellTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsWorldSpellTableBase.Columns.Add("peturbation_Origin_Z", peturbation_Origin_ZColumnBase);
            var position_Angles_WColumnBase = new ColumnBase<ColumnMappingBase>("position_Angles_W", "float", aCEDatabaseModelsWorldSpellTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsWorldSpellTableBase.Columns.Add("position_Angles_W", position_Angles_WColumnBase);
            var position_Angles_XColumnBase = new ColumnBase<ColumnMappingBase>("position_Angles_X", "float", aCEDatabaseModelsWorldSpellTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsWorldSpellTableBase.Columns.Add("position_Angles_X", position_Angles_XColumnBase);
            var position_Angles_YColumnBase = new ColumnBase<ColumnMappingBase>("position_Angles_Y", "float", aCEDatabaseModelsWorldSpellTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsWorldSpellTableBase.Columns.Add("position_Angles_Y", position_Angles_YColumnBase);
            var position_Angles_ZColumnBase = new ColumnBase<ColumnMappingBase>("position_Angles_Z", "float", aCEDatabaseModelsWorldSpellTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsWorldSpellTableBase.Columns.Add("position_Angles_Z", position_Angles_ZColumnBase);
            var position_Obj_Cell_IDColumnBase = new ColumnBase<ColumnMappingBase>("position_Obj_Cell_ID", "int unsigned", aCEDatabaseModelsWorldSpellTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsWorldSpellTableBase.Columns.Add("position_Obj_Cell_ID", position_Obj_Cell_IDColumnBase);
            var position_Origin_XColumnBase = new ColumnBase<ColumnMappingBase>("position_Origin_X", "float", aCEDatabaseModelsWorldSpellTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsWorldSpellTableBase.Columns.Add("position_Origin_X", position_Origin_XColumnBase);
            var position_Origin_YColumnBase = new ColumnBase<ColumnMappingBase>("position_Origin_Y", "float", aCEDatabaseModelsWorldSpellTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsWorldSpellTableBase.Columns.Add("position_Origin_Y", position_Origin_YColumnBase);
            var position_Origin_ZColumnBase = new ColumnBase<ColumnMappingBase>("position_Origin_Z", "float", aCEDatabaseModelsWorldSpellTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsWorldSpellTableBase.Columns.Add("position_Origin_Z", position_Origin_ZColumnBase);
            var power_VarianceColumnBase = new ColumnBase<ColumnMappingBase>("power_Variance", "float", aCEDatabaseModelsWorldSpellTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsWorldSpellTableBase.Columns.Add("power_Variance", power_VarianceColumnBase);
            var proportionColumnBase = new ColumnBase<ColumnMappingBase>("proportion", "float", aCEDatabaseModelsWorldSpellTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsWorldSpellTableBase.Columns.Add("proportion", proportionColumnBase);
            var slayer_Creature_TypeColumnBase = new ColumnBase<ColumnMappingBase>("slayer_Creature_Type", "int", aCEDatabaseModelsWorldSpellTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsWorldSpellTableBase.Columns.Add("slayer_Creature_Type", slayer_Creature_TypeColumnBase);
            var slayer_Damage_BonusColumnBase = new ColumnBase<ColumnMappingBase>("slayer_Damage_Bonus", "float", aCEDatabaseModelsWorldSpellTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsWorldSpellTableBase.Columns.Add("slayer_Damage_Bonus", slayer_Damage_BonusColumnBase);
            var sourceColumnBase5 = new ColumnBase<ColumnMappingBase>("source", "int", aCEDatabaseModelsWorldSpellTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsWorldSpellTableBase.Columns.Add("source", sourceColumnBase5);
            var source_LossColumnBase = new ColumnBase<ColumnMappingBase>("source_Loss", "int", aCEDatabaseModelsWorldSpellTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsWorldSpellTableBase.Columns.Add("source_Loss", source_LossColumnBase);
            var spread_AngleColumnBase = new ColumnBase<ColumnMappingBase>("spread_Angle", "float", aCEDatabaseModelsWorldSpellTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsWorldSpellTableBase.Columns.Add("spread_Angle", spread_AngleColumnBase);
            var stat_Mod_KeyColumnBase = new ColumnBase<ColumnMappingBase>("stat_Mod_Key", "int unsigned", aCEDatabaseModelsWorldSpellTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsWorldSpellTableBase.Columns.Add("stat_Mod_Key", stat_Mod_KeyColumnBase);
            var stat_Mod_TypeColumnBase = new ColumnBase<ColumnMappingBase>("stat_Mod_Type", "int unsigned", aCEDatabaseModelsWorldSpellTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsWorldSpellTableBase.Columns.Add("stat_Mod_Type", stat_Mod_TypeColumnBase);
            var stat_Mod_ValColumnBase = new ColumnBase<ColumnMappingBase>("stat_Mod_Val", "float", aCEDatabaseModelsWorldSpellTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsWorldSpellTableBase.Columns.Add("stat_Mod_Val", stat_Mod_ValColumnBase);
            var transfer_BitfieldColumnBase = new ColumnBase<ColumnMappingBase>("transfer_Bitfield", "int unsigned", aCEDatabaseModelsWorldSpellTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsWorldSpellTableBase.Columns.Add("transfer_Bitfield", transfer_BitfieldColumnBase);
            var transfer_CapColumnBase = new ColumnBase<ColumnMappingBase>("transfer_Cap", "int", aCEDatabaseModelsWorldSpellTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsWorldSpellTableBase.Columns.Add("transfer_Cap", transfer_CapColumnBase);
            var varianceColumnBase = new ColumnBase<ColumnMappingBase>("variance", "int", aCEDatabaseModelsWorldSpellTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsWorldSpellTableBase.Columns.Add("variance", varianceColumnBase);
            var vertical_AngleColumnBase = new ColumnBase<ColumnMappingBase>("vertical_Angle", "float", aCEDatabaseModelsWorldSpellTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsWorldSpellTableBase.Columns.Add("vertical_Angle", vertical_AngleColumnBase);
            var wcidColumnBase = new ColumnBase<ColumnMappingBase>("wcid", "int unsigned", aCEDatabaseModelsWorldSpellTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsWorldSpellTableBase.Columns.Add("wcid", wcidColumnBase);
            relationalModel.DefaultTables.Add("ACE.Database.Models.World.Spell", aCEDatabaseModelsWorldSpellTableBase);
            var aCEDatabaseModelsWorldSpellMappingBase = new TableMappingBase<ColumnMappingBase>(spell, aCEDatabaseModelsWorldSpellTableBase, true);
            aCEDatabaseModelsWorldSpellTableBase.AddTypeMapping(aCEDatabaseModelsWorldSpellMappingBase, false);
            defaultTableMappings28.Add(aCEDatabaseModelsWorldSpellMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase21, spell.FindProperty("Id")!, aCEDatabaseModelsWorldSpellMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)alignColumnBase, spell.FindProperty("Align")!, aCEDatabaseModelsWorldSpellMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)base_IntensityColumnBase, spell.FindProperty("BaseIntensity")!, aCEDatabaseModelsWorldSpellMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)boostColumnBase, spell.FindProperty("Boost")!, aCEDatabaseModelsWorldSpellMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)boost_VarianceColumnBase, spell.FindProperty("BoostVariance")!, aCEDatabaseModelsWorldSpellMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)create_Offset_Origin_XColumnBase, spell.FindProperty("CreateOffsetOriginX")!, aCEDatabaseModelsWorldSpellMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)create_Offset_Origin_YColumnBase, spell.FindProperty("CreateOffsetOriginY")!, aCEDatabaseModelsWorldSpellMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)create_Offset_Origin_ZColumnBase, spell.FindProperty("CreateOffsetOriginZ")!, aCEDatabaseModelsWorldSpellMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)crit_FreqColumnBase, spell.FindProperty("CritFreq")!, aCEDatabaseModelsWorldSpellMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)crit_MultiplierColumnBase, spell.FindProperty("CritMultiplier")!, aCEDatabaseModelsWorldSpellMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)damage_RatioColumnBase, spell.FindProperty("DamageRatio")!, aCEDatabaseModelsWorldSpellMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)damage_TypeColumnBase, spell.FindProperty("DamageType")!, aCEDatabaseModelsWorldSpellMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)default_Launch_AngleColumnBase, spell.FindProperty("DefaultLaunchAngle")!, aCEDatabaseModelsWorldSpellMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)destinationColumnBase, spell.FindProperty("Destination")!, aCEDatabaseModelsWorldSpellMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)dims_Origin_XColumnBase, spell.FindProperty("DimsOriginX")!, aCEDatabaseModelsWorldSpellMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)dims_Origin_YColumnBase, spell.FindProperty("DimsOriginY")!, aCEDatabaseModelsWorldSpellMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)dims_Origin_ZColumnBase, spell.FindProperty("DimsOriginZ")!, aCEDatabaseModelsWorldSpellMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)dispel_SchoolColumnBase, spell.FindProperty("DispelSchool")!, aCEDatabaseModelsWorldSpellMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)dot_DurationColumnBase, spell.FindProperty("DotDuration")!, aCEDatabaseModelsWorldSpellMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)drain_PercentageColumnBase, spell.FindProperty("DrainPercentage")!, aCEDatabaseModelsWorldSpellMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)e_TypeColumnBase, spell.FindProperty("EType")!, aCEDatabaseModelsWorldSpellMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)elemental_ModifierColumnBase, spell.FindProperty("ElementalModifier")!, aCEDatabaseModelsWorldSpellMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)ignore_Magic_ResistColumnBase, spell.FindProperty("IgnoreMagicResist")!, aCEDatabaseModelsWorldSpellMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)imbued_EffectColumnBase, spell.FindProperty("ImbuedEffect")!, aCEDatabaseModelsWorldSpellMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)indexColumnBase11, spell.FindProperty("Index")!, aCEDatabaseModelsWorldSpellMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)last_ModifiedColumnBase8, spell.FindProperty("LastModified")!, aCEDatabaseModelsWorldSpellMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)linkColumnBase, spell.FindProperty("Link")!, aCEDatabaseModelsWorldSpellMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)loss_PercentColumnBase, spell.FindProperty("LossPercent")!, aCEDatabaseModelsWorldSpellMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)max_Boost_AllowedColumnBase, spell.FindProperty("MaxBoostAllowed")!, aCEDatabaseModelsWorldSpellMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)max_PowerColumnBase, spell.FindProperty("MaxPower")!, aCEDatabaseModelsWorldSpellMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)min_PowerColumnBase, spell.FindProperty("MinPower")!, aCEDatabaseModelsWorldSpellMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nameColumnBase3, spell.FindProperty("Name")!, aCEDatabaseModelsWorldSpellMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)non_TrackingColumnBase, spell.FindProperty("NonTracking")!, aCEDatabaseModelsWorldSpellMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)num_ProjectilesColumnBase, spell.FindProperty("NumProjectiles")!, aCEDatabaseModelsWorldSpellMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)num_Projectiles_VarianceColumnBase, spell.FindProperty("NumProjectilesVariance")!, aCEDatabaseModelsWorldSpellMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)numberColumnBase, spell.FindProperty("Number")!, aCEDatabaseModelsWorldSpellMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)number_VarianceColumnBase, spell.FindProperty("NumberVariance")!, aCEDatabaseModelsWorldSpellMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)padding_Origin_XColumnBase, spell.FindProperty("PaddingOriginX")!, aCEDatabaseModelsWorldSpellMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)padding_Origin_YColumnBase, spell.FindProperty("PaddingOriginY")!, aCEDatabaseModelsWorldSpellMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)padding_Origin_ZColumnBase, spell.FindProperty("PaddingOriginZ")!, aCEDatabaseModelsWorldSpellMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)peturbation_Origin_XColumnBase, spell.FindProperty("PeturbationOriginX")!, aCEDatabaseModelsWorldSpellMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)peturbation_Origin_YColumnBase, spell.FindProperty("PeturbationOriginY")!, aCEDatabaseModelsWorldSpellMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)peturbation_Origin_ZColumnBase, spell.FindProperty("PeturbationOriginZ")!, aCEDatabaseModelsWorldSpellMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)position_Angles_WColumnBase, spell.FindProperty("PositionAnglesW")!, aCEDatabaseModelsWorldSpellMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)position_Angles_XColumnBase, spell.FindProperty("PositionAnglesX")!, aCEDatabaseModelsWorldSpellMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)position_Angles_YColumnBase, spell.FindProperty("PositionAnglesY")!, aCEDatabaseModelsWorldSpellMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)position_Angles_ZColumnBase, spell.FindProperty("PositionAnglesZ")!, aCEDatabaseModelsWorldSpellMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)position_Obj_Cell_IDColumnBase, spell.FindProperty("PositionObjCellId")!, aCEDatabaseModelsWorldSpellMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)position_Origin_XColumnBase, spell.FindProperty("PositionOriginX")!, aCEDatabaseModelsWorldSpellMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)position_Origin_YColumnBase, spell.FindProperty("PositionOriginY")!, aCEDatabaseModelsWorldSpellMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)position_Origin_ZColumnBase, spell.FindProperty("PositionOriginZ")!, aCEDatabaseModelsWorldSpellMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)power_VarianceColumnBase, spell.FindProperty("PowerVariance")!, aCEDatabaseModelsWorldSpellMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)proportionColumnBase, spell.FindProperty("Proportion")!, aCEDatabaseModelsWorldSpellMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)slayer_Creature_TypeColumnBase, spell.FindProperty("SlayerCreatureType")!, aCEDatabaseModelsWorldSpellMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)slayer_Damage_BonusColumnBase, spell.FindProperty("SlayerDamageBonus")!, aCEDatabaseModelsWorldSpellMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)sourceColumnBase5, spell.FindProperty("Source")!, aCEDatabaseModelsWorldSpellMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)source_LossColumnBase, spell.FindProperty("SourceLoss")!, aCEDatabaseModelsWorldSpellMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)spread_AngleColumnBase, spell.FindProperty("SpreadAngle")!, aCEDatabaseModelsWorldSpellMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)stat_Mod_KeyColumnBase, spell.FindProperty("StatModKey")!, aCEDatabaseModelsWorldSpellMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)stat_Mod_TypeColumnBase, spell.FindProperty("StatModType")!, aCEDatabaseModelsWorldSpellMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)stat_Mod_ValColumnBase, spell.FindProperty("StatModVal")!, aCEDatabaseModelsWorldSpellMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)transfer_BitfieldColumnBase, spell.FindProperty("TransferBitfield")!, aCEDatabaseModelsWorldSpellMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)transfer_CapColumnBase, spell.FindProperty("TransferCap")!, aCEDatabaseModelsWorldSpellMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)varianceColumnBase, spell.FindProperty("Variance")!, aCEDatabaseModelsWorldSpellMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)vertical_AngleColumnBase, spell.FindProperty("VerticalAngle")!, aCEDatabaseModelsWorldSpellMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)wcidColumnBase, spell.FindProperty("Wcid")!, aCEDatabaseModelsWorldSpellMappingBase);

            var tableMappings28 = new List<TableMapping>();
            spell.SetRuntimeAnnotation("Relational:TableMappings", tableMappings28);
            var spellTable = new Table("spell", null, relationalModel);
            var idColumn21 = new Column("id", "int unsigned", spellTable);
            spellTable.Columns.Add("id", idColumn21);
            var alignColumn = new Column("align", "int", spellTable)
            {
                IsNullable = true
            };
            spellTable.Columns.Add("align", alignColumn);
            var base_IntensityColumn = new Column("base_Intensity", "int", spellTable)
            {
                IsNullable = true
            };
            spellTable.Columns.Add("base_Intensity", base_IntensityColumn);
            var boostColumn = new Column("boost", "int", spellTable)
            {
                IsNullable = true
            };
            spellTable.Columns.Add("boost", boostColumn);
            var boost_VarianceColumn = new Column("boost_Variance", "int", spellTable)
            {
                IsNullable = true
            };
            spellTable.Columns.Add("boost_Variance", boost_VarianceColumn);
            var create_Offset_Origin_XColumn = new Column("create_Offset_Origin_X", "float", spellTable)
            {
                IsNullable = true
            };
            spellTable.Columns.Add("create_Offset_Origin_X", create_Offset_Origin_XColumn);
            var create_Offset_Origin_YColumn = new Column("create_Offset_Origin_Y", "float", spellTable)
            {
                IsNullable = true
            };
            spellTable.Columns.Add("create_Offset_Origin_Y", create_Offset_Origin_YColumn);
            var create_Offset_Origin_ZColumn = new Column("create_Offset_Origin_Z", "float", spellTable)
            {
                IsNullable = true
            };
            spellTable.Columns.Add("create_Offset_Origin_Z", create_Offset_Origin_ZColumn);
            var crit_FreqColumn = new Column("crit_Freq", "double", spellTable)
            {
                IsNullable = true
            };
            spellTable.Columns.Add("crit_Freq", crit_FreqColumn);
            var crit_MultiplierColumn = new Column("crit_Multiplier", "double", spellTable)
            {
                IsNullable = true
            };
            spellTable.Columns.Add("crit_Multiplier", crit_MultiplierColumn);
            var damage_RatioColumn = new Column("damage_Ratio", "float", spellTable)
            {
                IsNullable = true
            };
            spellTable.Columns.Add("damage_Ratio", damage_RatioColumn);
            var damage_TypeColumn = new Column("damage_Type", "int", spellTable)
            {
                IsNullable = true
            };
            spellTable.Columns.Add("damage_Type", damage_TypeColumn);
            var default_Launch_AngleColumn = new Column("default_Launch_Angle", "float", spellTable)
            {
                IsNullable = true
            };
            spellTable.Columns.Add("default_Launch_Angle", default_Launch_AngleColumn);
            var destinationColumn = new Column("destination", "int", spellTable)
            {
                IsNullable = true
            };
            spellTable.Columns.Add("destination", destinationColumn);
            var dims_Origin_XColumn = new Column("dims_Origin_X", "float", spellTable)
            {
                IsNullable = true
            };
            spellTable.Columns.Add("dims_Origin_X", dims_Origin_XColumn);
            var dims_Origin_YColumn = new Column("dims_Origin_Y", "float", spellTable)
            {
                IsNullable = true
            };
            spellTable.Columns.Add("dims_Origin_Y", dims_Origin_YColumn);
            var dims_Origin_ZColumn = new Column("dims_Origin_Z", "float", spellTable)
            {
                IsNullable = true
            };
            spellTable.Columns.Add("dims_Origin_Z", dims_Origin_ZColumn);
            var dispel_SchoolColumn = new Column("dispel_School", "int", spellTable)
            {
                IsNullable = true
            };
            spellTable.Columns.Add("dispel_School", dispel_SchoolColumn);
            var dot_DurationColumn = new Column("dot_Duration", "double", spellTable)
            {
                IsNullable = true
            };
            spellTable.Columns.Add("dot_Duration", dot_DurationColumn);
            var drain_PercentageColumn = new Column("drain_Percentage", "float", spellTable)
            {
                IsNullable = true
            };
            spellTable.Columns.Add("drain_Percentage", drain_PercentageColumn);
            var e_TypeColumn = new Column("e_Type", "int unsigned", spellTable)
            {
                IsNullable = true
            };
            spellTable.Columns.Add("e_Type", e_TypeColumn);
            var elemental_ModifierColumn = new Column("elemental_Modifier", "double", spellTable)
            {
                IsNullable = true
            };
            spellTable.Columns.Add("elemental_Modifier", elemental_ModifierColumn);
            var ignore_Magic_ResistColumn = new Column("ignore_Magic_Resist", "int", spellTable)
            {
                IsNullable = true
            };
            spellTable.Columns.Add("ignore_Magic_Resist", ignore_Magic_ResistColumn);
            var imbued_EffectColumn = new Column("imbued_Effect", "int unsigned", spellTable)
            {
                IsNullable = true
            };
            spellTable.Columns.Add("imbued_Effect", imbued_EffectColumn);
            var indexColumn11 = new Column("index", "int", spellTable)
            {
                IsNullable = true
            };
            spellTable.Columns.Add("index", indexColumn11);
            var last_ModifiedColumn8 = new Column("last_Modified", "datetime", spellTable);
            spellTable.Columns.Add("last_Modified", last_ModifiedColumn8);
            var linkColumn = new Column("link", "int", spellTable)
            {
                IsNullable = true
            };
            spellTable.Columns.Add("link", linkColumn);
            var loss_PercentColumn = new Column("loss_Percent", "float", spellTable)
            {
                IsNullable = true
            };
            spellTable.Columns.Add("loss_Percent", loss_PercentColumn);
            var max_Boost_AllowedColumn = new Column("max_Boost_Allowed", "int", spellTable)
            {
                IsNullable = true
            };
            spellTable.Columns.Add("max_Boost_Allowed", max_Boost_AllowedColumn);
            var max_PowerColumn = new Column("max_Power", "int", spellTable)
            {
                IsNullable = true
            };
            spellTable.Columns.Add("max_Power", max_PowerColumn);
            var min_PowerColumn = new Column("min_Power", "int", spellTable)
            {
                IsNullable = true
            };
            spellTable.Columns.Add("min_Power", min_PowerColumn);
            var nameColumn3 = new Column("name", "text", spellTable);
            spellTable.Columns.Add("name", nameColumn3);
            var non_TrackingColumn = new Column("non_Tracking", "bit(1)", spellTable)
            {
                IsNullable = true
            };
            spellTable.Columns.Add("non_Tracking", non_TrackingColumn);
            var num_ProjectilesColumn = new Column("num_Projectiles", "int", spellTable)
            {
                IsNullable = true
            };
            spellTable.Columns.Add("num_Projectiles", num_ProjectilesColumn);
            var num_Projectiles_VarianceColumn = new Column("num_Projectiles_Variance", "int", spellTable)
            {
                IsNullable = true
            };
            spellTable.Columns.Add("num_Projectiles_Variance", num_Projectiles_VarianceColumn);
            var numberColumn = new Column("number", "int", spellTable)
            {
                IsNullable = true
            };
            spellTable.Columns.Add("number", numberColumn);
            var number_VarianceColumn = new Column("number_Variance", "float", spellTable)
            {
                IsNullable = true
            };
            spellTable.Columns.Add("number_Variance", number_VarianceColumn);
            var padding_Origin_XColumn = new Column("padding_Origin_X", "float", spellTable)
            {
                IsNullable = true
            };
            spellTable.Columns.Add("padding_Origin_X", padding_Origin_XColumn);
            var padding_Origin_YColumn = new Column("padding_Origin_Y", "float", spellTable)
            {
                IsNullable = true
            };
            spellTable.Columns.Add("padding_Origin_Y", padding_Origin_YColumn);
            var padding_Origin_ZColumn = new Column("padding_Origin_Z", "float", spellTable)
            {
                IsNullable = true
            };
            spellTable.Columns.Add("padding_Origin_Z", padding_Origin_ZColumn);
            var peturbation_Origin_XColumn = new Column("peturbation_Origin_X", "float", spellTable)
            {
                IsNullable = true
            };
            spellTable.Columns.Add("peturbation_Origin_X", peturbation_Origin_XColumn);
            var peturbation_Origin_YColumn = new Column("peturbation_Origin_Y", "float", spellTable)
            {
                IsNullable = true
            };
            spellTable.Columns.Add("peturbation_Origin_Y", peturbation_Origin_YColumn);
            var peturbation_Origin_ZColumn = new Column("peturbation_Origin_Z", "float", spellTable)
            {
                IsNullable = true
            };
            spellTable.Columns.Add("peturbation_Origin_Z", peturbation_Origin_ZColumn);
            var position_Angles_WColumn = new Column("position_Angles_W", "float", spellTable)
            {
                IsNullable = true
            };
            spellTable.Columns.Add("position_Angles_W", position_Angles_WColumn);
            var position_Angles_XColumn = new Column("position_Angles_X", "float", spellTable)
            {
                IsNullable = true
            };
            spellTable.Columns.Add("position_Angles_X", position_Angles_XColumn);
            var position_Angles_YColumn = new Column("position_Angles_Y", "float", spellTable)
            {
                IsNullable = true
            };
            spellTable.Columns.Add("position_Angles_Y", position_Angles_YColumn);
            var position_Angles_ZColumn = new Column("position_Angles_Z", "float", spellTable)
            {
                IsNullable = true
            };
            spellTable.Columns.Add("position_Angles_Z", position_Angles_ZColumn);
            var position_Obj_Cell_IDColumn = new Column("position_Obj_Cell_ID", "int unsigned", spellTable)
            {
                IsNullable = true
            };
            spellTable.Columns.Add("position_Obj_Cell_ID", position_Obj_Cell_IDColumn);
            var position_Origin_XColumn = new Column("position_Origin_X", "float", spellTable)
            {
                IsNullable = true
            };
            spellTable.Columns.Add("position_Origin_X", position_Origin_XColumn);
            var position_Origin_YColumn = new Column("position_Origin_Y", "float", spellTable)
            {
                IsNullable = true
            };
            spellTable.Columns.Add("position_Origin_Y", position_Origin_YColumn);
            var position_Origin_ZColumn = new Column("position_Origin_Z", "float", spellTable)
            {
                IsNullable = true
            };
            spellTable.Columns.Add("position_Origin_Z", position_Origin_ZColumn);
            var power_VarianceColumn = new Column("power_Variance", "float", spellTable)
            {
                IsNullable = true
            };
            spellTable.Columns.Add("power_Variance", power_VarianceColumn);
            var proportionColumn = new Column("proportion", "float", spellTable)
            {
                IsNullable = true
            };
            spellTable.Columns.Add("proportion", proportionColumn);
            var slayer_Creature_TypeColumn = new Column("slayer_Creature_Type", "int", spellTable)
            {
                IsNullable = true
            };
            spellTable.Columns.Add("slayer_Creature_Type", slayer_Creature_TypeColumn);
            var slayer_Damage_BonusColumn = new Column("slayer_Damage_Bonus", "float", spellTable)
            {
                IsNullable = true
            };
            spellTable.Columns.Add("slayer_Damage_Bonus", slayer_Damage_BonusColumn);
            var sourceColumn5 = new Column("source", "int", spellTable)
            {
                IsNullable = true
            };
            spellTable.Columns.Add("source", sourceColumn5);
            var source_LossColumn = new Column("source_Loss", "int", spellTable)
            {
                IsNullable = true
            };
            spellTable.Columns.Add("source_Loss", source_LossColumn);
            var spread_AngleColumn = new Column("spread_Angle", "float", spellTable)
            {
                IsNullable = true
            };
            spellTable.Columns.Add("spread_Angle", spread_AngleColumn);
            var stat_Mod_KeyColumn = new Column("stat_Mod_Key", "int unsigned", spellTable)
            {
                IsNullable = true
            };
            spellTable.Columns.Add("stat_Mod_Key", stat_Mod_KeyColumn);
            var stat_Mod_TypeColumn = new Column("stat_Mod_Type", "int unsigned", spellTable)
            {
                IsNullable = true
            };
            spellTable.Columns.Add("stat_Mod_Type", stat_Mod_TypeColumn);
            var stat_Mod_ValColumn = new Column("stat_Mod_Val", "float", spellTable)
            {
                IsNullable = true
            };
            spellTable.Columns.Add("stat_Mod_Val", stat_Mod_ValColumn);
            var transfer_BitfieldColumn = new Column("transfer_Bitfield", "int unsigned", spellTable)
            {
                IsNullable = true
            };
            spellTable.Columns.Add("transfer_Bitfield", transfer_BitfieldColumn);
            var transfer_CapColumn = new Column("transfer_Cap", "int", spellTable)
            {
                IsNullable = true
            };
            spellTable.Columns.Add("transfer_Cap", transfer_CapColumn);
            var varianceColumn = new Column("variance", "int", spellTable)
            {
                IsNullable = true
            };
            spellTable.Columns.Add("variance", varianceColumn);
            var vertical_AngleColumn = new Column("vertical_Angle", "float", spellTable)
            {
                IsNullable = true
            };
            spellTable.Columns.Add("vertical_Angle", vertical_AngleColumn);
            var wcidColumn = new Column("wcid", "int unsigned", spellTable)
            {
                IsNullable = true
            };
            spellTable.Columns.Add("wcid", wcidColumn);
            var pK_spell = new UniqueConstraint("PK_spell", spellTable, new[] { idColumn21 });
            spellTable.PrimaryKey = pK_spell;
            var pK_spellUc = RelationalModel.GetKey(this,
                "ACE.Database.Models.World.Spell",
                new[] { "Id" });
            pK_spell.MappedKeys.Add(pK_spellUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_spellUc).Add(pK_spell);
            spellTable.UniqueConstraints.Add("PK_spell", pK_spell);
            relationalModel.Tables.Add(("spell", null), spellTable);
            var spellTableMapping = new TableMapping(spell, spellTable, true);
            spellTable.AddTypeMapping(spellTableMapping, false);
            tableMappings28.Add(spellTableMapping);
            RelationalModel.CreateColumnMapping(idColumn21, spell.FindProperty("Id")!, spellTableMapping);
            RelationalModel.CreateColumnMapping(alignColumn, spell.FindProperty("Align")!, spellTableMapping);
            RelationalModel.CreateColumnMapping(base_IntensityColumn, spell.FindProperty("BaseIntensity")!, spellTableMapping);
            RelationalModel.CreateColumnMapping(boostColumn, spell.FindProperty("Boost")!, spellTableMapping);
            RelationalModel.CreateColumnMapping(boost_VarianceColumn, spell.FindProperty("BoostVariance")!, spellTableMapping);
            RelationalModel.CreateColumnMapping(create_Offset_Origin_XColumn, spell.FindProperty("CreateOffsetOriginX")!, spellTableMapping);
            RelationalModel.CreateColumnMapping(create_Offset_Origin_YColumn, spell.FindProperty("CreateOffsetOriginY")!, spellTableMapping);
            RelationalModel.CreateColumnMapping(create_Offset_Origin_ZColumn, spell.FindProperty("CreateOffsetOriginZ")!, spellTableMapping);
            RelationalModel.CreateColumnMapping(crit_FreqColumn, spell.FindProperty("CritFreq")!, spellTableMapping);
            RelationalModel.CreateColumnMapping(crit_MultiplierColumn, spell.FindProperty("CritMultiplier")!, spellTableMapping);
            RelationalModel.CreateColumnMapping(damage_RatioColumn, spell.FindProperty("DamageRatio")!, spellTableMapping);
            RelationalModel.CreateColumnMapping(damage_TypeColumn, spell.FindProperty("DamageType")!, spellTableMapping);
            RelationalModel.CreateColumnMapping(default_Launch_AngleColumn, spell.FindProperty("DefaultLaunchAngle")!, spellTableMapping);
            RelationalModel.CreateColumnMapping(destinationColumn, spell.FindProperty("Destination")!, spellTableMapping);
            RelationalModel.CreateColumnMapping(dims_Origin_XColumn, spell.FindProperty("DimsOriginX")!, spellTableMapping);
            RelationalModel.CreateColumnMapping(dims_Origin_YColumn, spell.FindProperty("DimsOriginY")!, spellTableMapping);
            RelationalModel.CreateColumnMapping(dims_Origin_ZColumn, spell.FindProperty("DimsOriginZ")!, spellTableMapping);
            RelationalModel.CreateColumnMapping(dispel_SchoolColumn, spell.FindProperty("DispelSchool")!, spellTableMapping);
            RelationalModel.CreateColumnMapping(dot_DurationColumn, spell.FindProperty("DotDuration")!, spellTableMapping);
            RelationalModel.CreateColumnMapping(drain_PercentageColumn, spell.FindProperty("DrainPercentage")!, spellTableMapping);
            RelationalModel.CreateColumnMapping(e_TypeColumn, spell.FindProperty("EType")!, spellTableMapping);
            RelationalModel.CreateColumnMapping(elemental_ModifierColumn, spell.FindProperty("ElementalModifier")!, spellTableMapping);
            RelationalModel.CreateColumnMapping(ignore_Magic_ResistColumn, spell.FindProperty("IgnoreMagicResist")!, spellTableMapping);
            RelationalModel.CreateColumnMapping(imbued_EffectColumn, spell.FindProperty("ImbuedEffect")!, spellTableMapping);
            RelationalModel.CreateColumnMapping(indexColumn11, spell.FindProperty("Index")!, spellTableMapping);
            RelationalModel.CreateColumnMapping(last_ModifiedColumn8, spell.FindProperty("LastModified")!, spellTableMapping);
            RelationalModel.CreateColumnMapping(linkColumn, spell.FindProperty("Link")!, spellTableMapping);
            RelationalModel.CreateColumnMapping(loss_PercentColumn, spell.FindProperty("LossPercent")!, spellTableMapping);
            RelationalModel.CreateColumnMapping(max_Boost_AllowedColumn, spell.FindProperty("MaxBoostAllowed")!, spellTableMapping);
            RelationalModel.CreateColumnMapping(max_PowerColumn, spell.FindProperty("MaxPower")!, spellTableMapping);
            RelationalModel.CreateColumnMapping(min_PowerColumn, spell.FindProperty("MinPower")!, spellTableMapping);
            RelationalModel.CreateColumnMapping(nameColumn3, spell.FindProperty("Name")!, spellTableMapping);
            RelationalModel.CreateColumnMapping(non_TrackingColumn, spell.FindProperty("NonTracking")!, spellTableMapping);
            RelationalModel.CreateColumnMapping(num_ProjectilesColumn, spell.FindProperty("NumProjectiles")!, spellTableMapping);
            RelationalModel.CreateColumnMapping(num_Projectiles_VarianceColumn, spell.FindProperty("NumProjectilesVariance")!, spellTableMapping);
            RelationalModel.CreateColumnMapping(numberColumn, spell.FindProperty("Number")!, spellTableMapping);
            RelationalModel.CreateColumnMapping(number_VarianceColumn, spell.FindProperty("NumberVariance")!, spellTableMapping);
            RelationalModel.CreateColumnMapping(padding_Origin_XColumn, spell.FindProperty("PaddingOriginX")!, spellTableMapping);
            RelationalModel.CreateColumnMapping(padding_Origin_YColumn, spell.FindProperty("PaddingOriginY")!, spellTableMapping);
            RelationalModel.CreateColumnMapping(padding_Origin_ZColumn, spell.FindProperty("PaddingOriginZ")!, spellTableMapping);
            RelationalModel.CreateColumnMapping(peturbation_Origin_XColumn, spell.FindProperty("PeturbationOriginX")!, spellTableMapping);
            RelationalModel.CreateColumnMapping(peturbation_Origin_YColumn, spell.FindProperty("PeturbationOriginY")!, spellTableMapping);
            RelationalModel.CreateColumnMapping(peturbation_Origin_ZColumn, spell.FindProperty("PeturbationOriginZ")!, spellTableMapping);
            RelationalModel.CreateColumnMapping(position_Angles_WColumn, spell.FindProperty("PositionAnglesW")!, spellTableMapping);
            RelationalModel.CreateColumnMapping(position_Angles_XColumn, spell.FindProperty("PositionAnglesX")!, spellTableMapping);
            RelationalModel.CreateColumnMapping(position_Angles_YColumn, spell.FindProperty("PositionAnglesY")!, spellTableMapping);
            RelationalModel.CreateColumnMapping(position_Angles_ZColumn, spell.FindProperty("PositionAnglesZ")!, spellTableMapping);
            RelationalModel.CreateColumnMapping(position_Obj_Cell_IDColumn, spell.FindProperty("PositionObjCellId")!, spellTableMapping);
            RelationalModel.CreateColumnMapping(position_Origin_XColumn, spell.FindProperty("PositionOriginX")!, spellTableMapping);
            RelationalModel.CreateColumnMapping(position_Origin_YColumn, spell.FindProperty("PositionOriginY")!, spellTableMapping);
            RelationalModel.CreateColumnMapping(position_Origin_ZColumn, spell.FindProperty("PositionOriginZ")!, spellTableMapping);
            RelationalModel.CreateColumnMapping(power_VarianceColumn, spell.FindProperty("PowerVariance")!, spellTableMapping);
            RelationalModel.CreateColumnMapping(proportionColumn, spell.FindProperty("Proportion")!, spellTableMapping);
            RelationalModel.CreateColumnMapping(slayer_Creature_TypeColumn, spell.FindProperty("SlayerCreatureType")!, spellTableMapping);
            RelationalModel.CreateColumnMapping(slayer_Damage_BonusColumn, spell.FindProperty("SlayerDamageBonus")!, spellTableMapping);
            RelationalModel.CreateColumnMapping(sourceColumn5, spell.FindProperty("Source")!, spellTableMapping);
            RelationalModel.CreateColumnMapping(source_LossColumn, spell.FindProperty("SourceLoss")!, spellTableMapping);
            RelationalModel.CreateColumnMapping(spread_AngleColumn, spell.FindProperty("SpreadAngle")!, spellTableMapping);
            RelationalModel.CreateColumnMapping(stat_Mod_KeyColumn, spell.FindProperty("StatModKey")!, spellTableMapping);
            RelationalModel.CreateColumnMapping(stat_Mod_TypeColumn, spell.FindProperty("StatModType")!, spellTableMapping);
            RelationalModel.CreateColumnMapping(stat_Mod_ValColumn, spell.FindProperty("StatModVal")!, spellTableMapping);
            RelationalModel.CreateColumnMapping(transfer_BitfieldColumn, spell.FindProperty("TransferBitfield")!, spellTableMapping);
            RelationalModel.CreateColumnMapping(transfer_CapColumn, spell.FindProperty("TransferCap")!, spellTableMapping);
            RelationalModel.CreateColumnMapping(varianceColumn, spell.FindProperty("Variance")!, spellTableMapping);
            RelationalModel.CreateColumnMapping(vertical_AngleColumn, spell.FindProperty("VerticalAngle")!, spellTableMapping);
            RelationalModel.CreateColumnMapping(wcidColumn, spell.FindProperty("Wcid")!, spellTableMapping);

            var treasureDeath = FindEntityType("ACE.Database.Models.World.TreasureDeath")!;

            var defaultTableMappings29 = new List<TableMappingBase<ColumnMappingBase>>();
            treasureDeath.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings29);
            var aCEDatabaseModelsWorldTreasureDeathTableBase = new TableBase("ACE.Database.Models.World.TreasureDeath", null, relationalModel);
            var idColumnBase22 = new ColumnBase<ColumnMappingBase>("id", "int unsigned", aCEDatabaseModelsWorldTreasureDeathTableBase);
            aCEDatabaseModelsWorldTreasureDeathTableBase.Columns.Add("id", idColumnBase22);
            var item_ChanceColumnBase = new ColumnBase<ColumnMappingBase>("item_Chance", "int", aCEDatabaseModelsWorldTreasureDeathTableBase);
            aCEDatabaseModelsWorldTreasureDeathTableBase.Columns.Add("item_Chance", item_ChanceColumnBase);
            var item_Max_AmountColumnBase = new ColumnBase<ColumnMappingBase>("item_Max_Amount", "int", aCEDatabaseModelsWorldTreasureDeathTableBase);
            aCEDatabaseModelsWorldTreasureDeathTableBase.Columns.Add("item_Max_Amount", item_Max_AmountColumnBase);
            var item_Min_AmountColumnBase = new ColumnBase<ColumnMappingBase>("item_Min_Amount", "int", aCEDatabaseModelsWorldTreasureDeathTableBase);
            aCEDatabaseModelsWorldTreasureDeathTableBase.Columns.Add("item_Min_Amount", item_Min_AmountColumnBase);
            var item_Treasure_Type_Selection_ChancesColumnBase = new ColumnBase<ColumnMappingBase>("item_Treasure_Type_Selection_Chances", "int", aCEDatabaseModelsWorldTreasureDeathTableBase);
            aCEDatabaseModelsWorldTreasureDeathTableBase.Columns.Add("item_Treasure_Type_Selection_Chances", item_Treasure_Type_Selection_ChancesColumnBase);
            var last_ModifiedColumnBase9 = new ColumnBase<ColumnMappingBase>("last_Modified", "datetime", aCEDatabaseModelsWorldTreasureDeathTableBase);
            aCEDatabaseModelsWorldTreasureDeathTableBase.Columns.Add("last_Modified", last_ModifiedColumnBase9);
            var loot_Quality_ModColumnBase = new ColumnBase<ColumnMappingBase>("loot_Quality_Mod", "float", aCEDatabaseModelsWorldTreasureDeathTableBase);
            aCEDatabaseModelsWorldTreasureDeathTableBase.Columns.Add("loot_Quality_Mod", loot_Quality_ModColumnBase);
            var magic_Item_ChanceColumnBase = new ColumnBase<ColumnMappingBase>("magic_Item_Chance", "int", aCEDatabaseModelsWorldTreasureDeathTableBase);
            aCEDatabaseModelsWorldTreasureDeathTableBase.Columns.Add("magic_Item_Chance", magic_Item_ChanceColumnBase);
            var magic_Item_Max_AmountColumnBase = new ColumnBase<ColumnMappingBase>("magic_Item_Max_Amount", "int", aCEDatabaseModelsWorldTreasureDeathTableBase);
            aCEDatabaseModelsWorldTreasureDeathTableBase.Columns.Add("magic_Item_Max_Amount", magic_Item_Max_AmountColumnBase);
            var magic_Item_Min_AmountColumnBase = new ColumnBase<ColumnMappingBase>("magic_Item_Min_Amount", "int", aCEDatabaseModelsWorldTreasureDeathTableBase);
            aCEDatabaseModelsWorldTreasureDeathTableBase.Columns.Add("magic_Item_Min_Amount", magic_Item_Min_AmountColumnBase);
            var magic_Item_Treasure_Type_Selection_ChancesColumnBase = new ColumnBase<ColumnMappingBase>("magic_Item_Treasure_Type_Selection_Chances", "int", aCEDatabaseModelsWorldTreasureDeathTableBase);
            aCEDatabaseModelsWorldTreasureDeathTableBase.Columns.Add("magic_Item_Treasure_Type_Selection_Chances", magic_Item_Treasure_Type_Selection_ChancesColumnBase);
            var mundane_Item_ChanceColumnBase = new ColumnBase<ColumnMappingBase>("mundane_Item_Chance", "int", aCEDatabaseModelsWorldTreasureDeathTableBase);
            aCEDatabaseModelsWorldTreasureDeathTableBase.Columns.Add("mundane_Item_Chance", mundane_Item_ChanceColumnBase);
            var mundane_Item_Max_AmountColumnBase = new ColumnBase<ColumnMappingBase>("mundane_Item_Max_Amount", "int", aCEDatabaseModelsWorldTreasureDeathTableBase);
            aCEDatabaseModelsWorldTreasureDeathTableBase.Columns.Add("mundane_Item_Max_Amount", mundane_Item_Max_AmountColumnBase);
            var mundane_Item_Min_AmountColumnBase = new ColumnBase<ColumnMappingBase>("mundane_Item_Min_Amount", "int", aCEDatabaseModelsWorldTreasureDeathTableBase);
            aCEDatabaseModelsWorldTreasureDeathTableBase.Columns.Add("mundane_Item_Min_Amount", mundane_Item_Min_AmountColumnBase);
            var mundane_Item_Type_Selection_ChancesColumnBase = new ColumnBase<ColumnMappingBase>("mundane_Item_Type_Selection_Chances", "int", aCEDatabaseModelsWorldTreasureDeathTableBase);
            aCEDatabaseModelsWorldTreasureDeathTableBase.Columns.Add("mundane_Item_Type_Selection_Chances", mundane_Item_Type_Selection_ChancesColumnBase);
            var tierColumnBase = new ColumnBase<ColumnMappingBase>("tier", "int", aCEDatabaseModelsWorldTreasureDeathTableBase);
            aCEDatabaseModelsWorldTreasureDeathTableBase.Columns.Add("tier", tierColumnBase);
            var treasure_TypeColumnBase = new ColumnBase<ColumnMappingBase>("treasure_Type", "int unsigned", aCEDatabaseModelsWorldTreasureDeathTableBase);
            aCEDatabaseModelsWorldTreasureDeathTableBase.Columns.Add("treasure_Type", treasure_TypeColumnBase);
            var unknown_ChancesColumnBase = new ColumnBase<ColumnMappingBase>("unknown_Chances", "int", aCEDatabaseModelsWorldTreasureDeathTableBase);
            aCEDatabaseModelsWorldTreasureDeathTableBase.Columns.Add("unknown_Chances", unknown_ChancesColumnBase);
            relationalModel.DefaultTables.Add("ACE.Database.Models.World.TreasureDeath", aCEDatabaseModelsWorldTreasureDeathTableBase);
            var aCEDatabaseModelsWorldTreasureDeathMappingBase = new TableMappingBase<ColumnMappingBase>(treasureDeath, aCEDatabaseModelsWorldTreasureDeathTableBase, true);
            aCEDatabaseModelsWorldTreasureDeathTableBase.AddTypeMapping(aCEDatabaseModelsWorldTreasureDeathMappingBase, false);
            defaultTableMappings29.Add(aCEDatabaseModelsWorldTreasureDeathMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase22, treasureDeath.FindProperty("Id")!, aCEDatabaseModelsWorldTreasureDeathMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)item_ChanceColumnBase, treasureDeath.FindProperty("ItemChance")!, aCEDatabaseModelsWorldTreasureDeathMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)item_Max_AmountColumnBase, treasureDeath.FindProperty("ItemMaxAmount")!, aCEDatabaseModelsWorldTreasureDeathMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)item_Min_AmountColumnBase, treasureDeath.FindProperty("ItemMinAmount")!, aCEDatabaseModelsWorldTreasureDeathMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)item_Treasure_Type_Selection_ChancesColumnBase, treasureDeath.FindProperty("ItemTreasureTypeSelectionChances")!, aCEDatabaseModelsWorldTreasureDeathMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)last_ModifiedColumnBase9, treasureDeath.FindProperty("LastModified")!, aCEDatabaseModelsWorldTreasureDeathMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)loot_Quality_ModColumnBase, treasureDeath.FindProperty("LootQualityMod")!, aCEDatabaseModelsWorldTreasureDeathMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)magic_Item_ChanceColumnBase, treasureDeath.FindProperty("MagicItemChance")!, aCEDatabaseModelsWorldTreasureDeathMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)magic_Item_Max_AmountColumnBase, treasureDeath.FindProperty("MagicItemMaxAmount")!, aCEDatabaseModelsWorldTreasureDeathMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)magic_Item_Min_AmountColumnBase, treasureDeath.FindProperty("MagicItemMinAmount")!, aCEDatabaseModelsWorldTreasureDeathMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)magic_Item_Treasure_Type_Selection_ChancesColumnBase, treasureDeath.FindProperty("MagicItemTreasureTypeSelectionChances")!, aCEDatabaseModelsWorldTreasureDeathMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)mundane_Item_ChanceColumnBase, treasureDeath.FindProperty("MundaneItemChance")!, aCEDatabaseModelsWorldTreasureDeathMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)mundane_Item_Max_AmountColumnBase, treasureDeath.FindProperty("MundaneItemMaxAmount")!, aCEDatabaseModelsWorldTreasureDeathMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)mundane_Item_Min_AmountColumnBase, treasureDeath.FindProperty("MundaneItemMinAmount")!, aCEDatabaseModelsWorldTreasureDeathMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)mundane_Item_Type_Selection_ChancesColumnBase, treasureDeath.FindProperty("MundaneItemTypeSelectionChances")!, aCEDatabaseModelsWorldTreasureDeathMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)tierColumnBase, treasureDeath.FindProperty("Tier")!, aCEDatabaseModelsWorldTreasureDeathMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)treasure_TypeColumnBase, treasureDeath.FindProperty("TreasureType")!, aCEDatabaseModelsWorldTreasureDeathMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)unknown_ChancesColumnBase, treasureDeath.FindProperty("UnknownChances")!, aCEDatabaseModelsWorldTreasureDeathMappingBase);

            var tableMappings29 = new List<TableMapping>();
            treasureDeath.SetRuntimeAnnotation("Relational:TableMappings", tableMappings29);
            var treasure_deathTable = new Table("treasure_death", null, relationalModel);
            var idColumn22 = new Column("id", "int unsigned", treasure_deathTable);
            treasure_deathTable.Columns.Add("id", idColumn22);
            var item_ChanceColumn = new Column("item_Chance", "int", treasure_deathTable);
            treasure_deathTable.Columns.Add("item_Chance", item_ChanceColumn);
            var item_Max_AmountColumn = new Column("item_Max_Amount", "int", treasure_deathTable);
            treasure_deathTable.Columns.Add("item_Max_Amount", item_Max_AmountColumn);
            var item_Min_AmountColumn = new Column("item_Min_Amount", "int", treasure_deathTable);
            treasure_deathTable.Columns.Add("item_Min_Amount", item_Min_AmountColumn);
            var item_Treasure_Type_Selection_ChancesColumn = new Column("item_Treasure_Type_Selection_Chances", "int", treasure_deathTable);
            treasure_deathTable.Columns.Add("item_Treasure_Type_Selection_Chances", item_Treasure_Type_Selection_ChancesColumn);
            var last_ModifiedColumn9 = new Column("last_Modified", "datetime", treasure_deathTable);
            treasure_deathTable.Columns.Add("last_Modified", last_ModifiedColumn9);
            var loot_Quality_ModColumn = new Column("loot_Quality_Mod", "float", treasure_deathTable);
            treasure_deathTable.Columns.Add("loot_Quality_Mod", loot_Quality_ModColumn);
            var magic_Item_ChanceColumn = new Column("magic_Item_Chance", "int", treasure_deathTable);
            treasure_deathTable.Columns.Add("magic_Item_Chance", magic_Item_ChanceColumn);
            var magic_Item_Max_AmountColumn = new Column("magic_Item_Max_Amount", "int", treasure_deathTable);
            treasure_deathTable.Columns.Add("magic_Item_Max_Amount", magic_Item_Max_AmountColumn);
            var magic_Item_Min_AmountColumn = new Column("magic_Item_Min_Amount", "int", treasure_deathTable);
            treasure_deathTable.Columns.Add("magic_Item_Min_Amount", magic_Item_Min_AmountColumn);
            var magic_Item_Treasure_Type_Selection_ChancesColumn = new Column("magic_Item_Treasure_Type_Selection_Chances", "int", treasure_deathTable);
            treasure_deathTable.Columns.Add("magic_Item_Treasure_Type_Selection_Chances", magic_Item_Treasure_Type_Selection_ChancesColumn);
            var mundane_Item_ChanceColumn = new Column("mundane_Item_Chance", "int", treasure_deathTable);
            treasure_deathTable.Columns.Add("mundane_Item_Chance", mundane_Item_ChanceColumn);
            var mundane_Item_Max_AmountColumn = new Column("mundane_Item_Max_Amount", "int", treasure_deathTable);
            treasure_deathTable.Columns.Add("mundane_Item_Max_Amount", mundane_Item_Max_AmountColumn);
            var mundane_Item_Min_AmountColumn = new Column("mundane_Item_Min_Amount", "int", treasure_deathTable);
            treasure_deathTable.Columns.Add("mundane_Item_Min_Amount", mundane_Item_Min_AmountColumn);
            var mundane_Item_Type_Selection_ChancesColumn = new Column("mundane_Item_Type_Selection_Chances", "int", treasure_deathTable);
            treasure_deathTable.Columns.Add("mundane_Item_Type_Selection_Chances", mundane_Item_Type_Selection_ChancesColumn);
            var tierColumn = new Column("tier", "int", treasure_deathTable);
            treasure_deathTable.Columns.Add("tier", tierColumn);
            var treasure_TypeColumn = new Column("treasure_Type", "int unsigned", treasure_deathTable);
            treasure_deathTable.Columns.Add("treasure_Type", treasure_TypeColumn);
            var unknown_ChancesColumn = new Column("unknown_Chances", "int", treasure_deathTable);
            treasure_deathTable.Columns.Add("unknown_Chances", unknown_ChancesColumn);
            var pK_treasure_death = new UniqueConstraint("PK_treasure_death", treasure_deathTable, new[] { idColumn22 });
            treasure_deathTable.PrimaryKey = pK_treasure_death;
            var pK_treasure_deathUc = RelationalModel.GetKey(this,
                "ACE.Database.Models.World.TreasureDeath",
                new[] { "Id" });
            pK_treasure_death.MappedKeys.Add(pK_treasure_deathUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_treasure_deathUc).Add(pK_treasure_death);
            treasure_deathTable.UniqueConstraints.Add("PK_treasure_death", pK_treasure_death);
            var treasureType_idx = new TableIndex(
            "treasureType_idx", treasure_deathTable, new[] { treasure_TypeColumn }, false);
            var treasureType_idxIx = RelationalModel.GetIndex(this,
                "ACE.Database.Models.World.TreasureDeath",
                "treasureType_idx");
            treasureType_idx.MappedIndexes.Add(treasureType_idxIx);
            RelationalModel.GetOrCreateTableIndexes(treasureType_idxIx).Add(treasureType_idx);
            treasure_deathTable.Indexes.Add("treasureType_idx", treasureType_idx);
            relationalModel.Tables.Add(("treasure_death", null), treasure_deathTable);
            var treasure_deathTableMapping = new TableMapping(treasureDeath, treasure_deathTable, true);
            treasure_deathTable.AddTypeMapping(treasure_deathTableMapping, false);
            tableMappings29.Add(treasure_deathTableMapping);
            RelationalModel.CreateColumnMapping(idColumn22, treasureDeath.FindProperty("Id")!, treasure_deathTableMapping);
            RelationalModel.CreateColumnMapping(item_ChanceColumn, treasureDeath.FindProperty("ItemChance")!, treasure_deathTableMapping);
            RelationalModel.CreateColumnMapping(item_Max_AmountColumn, treasureDeath.FindProperty("ItemMaxAmount")!, treasure_deathTableMapping);
            RelationalModel.CreateColumnMapping(item_Min_AmountColumn, treasureDeath.FindProperty("ItemMinAmount")!, treasure_deathTableMapping);
            RelationalModel.CreateColumnMapping(item_Treasure_Type_Selection_ChancesColumn, treasureDeath.FindProperty("ItemTreasureTypeSelectionChances")!, treasure_deathTableMapping);
            RelationalModel.CreateColumnMapping(last_ModifiedColumn9, treasureDeath.FindProperty("LastModified")!, treasure_deathTableMapping);
            RelationalModel.CreateColumnMapping(loot_Quality_ModColumn, treasureDeath.FindProperty("LootQualityMod")!, treasure_deathTableMapping);
            RelationalModel.CreateColumnMapping(magic_Item_ChanceColumn, treasureDeath.FindProperty("MagicItemChance")!, treasure_deathTableMapping);
            RelationalModel.CreateColumnMapping(magic_Item_Max_AmountColumn, treasureDeath.FindProperty("MagicItemMaxAmount")!, treasure_deathTableMapping);
            RelationalModel.CreateColumnMapping(magic_Item_Min_AmountColumn, treasureDeath.FindProperty("MagicItemMinAmount")!, treasure_deathTableMapping);
            RelationalModel.CreateColumnMapping(magic_Item_Treasure_Type_Selection_ChancesColumn, treasureDeath.FindProperty("MagicItemTreasureTypeSelectionChances")!, treasure_deathTableMapping);
            RelationalModel.CreateColumnMapping(mundane_Item_ChanceColumn, treasureDeath.FindProperty("MundaneItemChance")!, treasure_deathTableMapping);
            RelationalModel.CreateColumnMapping(mundane_Item_Max_AmountColumn, treasureDeath.FindProperty("MundaneItemMaxAmount")!, treasure_deathTableMapping);
            RelationalModel.CreateColumnMapping(mundane_Item_Min_AmountColumn, treasureDeath.FindProperty("MundaneItemMinAmount")!, treasure_deathTableMapping);
            RelationalModel.CreateColumnMapping(mundane_Item_Type_Selection_ChancesColumn, treasureDeath.FindProperty("MundaneItemTypeSelectionChances")!, treasure_deathTableMapping);
            RelationalModel.CreateColumnMapping(tierColumn, treasureDeath.FindProperty("Tier")!, treasure_deathTableMapping);
            RelationalModel.CreateColumnMapping(treasure_TypeColumn, treasureDeath.FindProperty("TreasureType")!, treasure_deathTableMapping);
            RelationalModel.CreateColumnMapping(unknown_ChancesColumn, treasureDeath.FindProperty("UnknownChances")!, treasure_deathTableMapping);

            var treasureGemCount = FindEntityType("ACE.Database.Models.World.TreasureGemCount")!;

            var defaultTableMappings30 = new List<TableMappingBase<ColumnMappingBase>>();
            treasureGemCount.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings30);
            var aCEDatabaseModelsWorldTreasureGemCountTableBase = new TableBase("ACE.Database.Models.World.TreasureGemCount", null, relationalModel);
            var chanceColumnBase = new ColumnBase<ColumnMappingBase>("chance", "float", aCEDatabaseModelsWorldTreasureGemCountTableBase);
            aCEDatabaseModelsWorldTreasureGemCountTableBase.Columns.Add("chance", chanceColumnBase);
            var countColumnBase = new ColumnBase<ColumnMappingBase>("count", "int", aCEDatabaseModelsWorldTreasureGemCountTableBase);
            aCEDatabaseModelsWorldTreasureGemCountTableBase.Columns.Add("count", countColumnBase);
            var gem_CodeColumnBase = new ColumnBase<ColumnMappingBase>("gem_Code", "tinyint unsigned", aCEDatabaseModelsWorldTreasureGemCountTableBase);
            aCEDatabaseModelsWorldTreasureGemCountTableBase.Columns.Add("gem_Code", gem_CodeColumnBase);
            var idColumnBase23 = new ColumnBase<ColumnMappingBase>("id", "int unsigned", aCEDatabaseModelsWorldTreasureGemCountTableBase);
            aCEDatabaseModelsWorldTreasureGemCountTableBase.Columns.Add("id", idColumnBase23);
            var tierColumnBase0 = new ColumnBase<ColumnMappingBase>("tier", "int", aCEDatabaseModelsWorldTreasureGemCountTableBase);
            aCEDatabaseModelsWorldTreasureGemCountTableBase.Columns.Add("tier", tierColumnBase0);
            relationalModel.DefaultTables.Add("ACE.Database.Models.World.TreasureGemCount", aCEDatabaseModelsWorldTreasureGemCountTableBase);
            var aCEDatabaseModelsWorldTreasureGemCountMappingBase = new TableMappingBase<ColumnMappingBase>(treasureGemCount, aCEDatabaseModelsWorldTreasureGemCountTableBase, true);
            aCEDatabaseModelsWorldTreasureGemCountTableBase.AddTypeMapping(aCEDatabaseModelsWorldTreasureGemCountMappingBase, false);
            defaultTableMappings30.Add(aCEDatabaseModelsWorldTreasureGemCountMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase23, treasureGemCount.FindProperty("Id")!, aCEDatabaseModelsWorldTreasureGemCountMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)chanceColumnBase, treasureGemCount.FindProperty("Chance")!, aCEDatabaseModelsWorldTreasureGemCountMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)countColumnBase, treasureGemCount.FindProperty("Count")!, aCEDatabaseModelsWorldTreasureGemCountMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)gem_CodeColumnBase, treasureGemCount.FindProperty("GemCode")!, aCEDatabaseModelsWorldTreasureGemCountMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)tierColumnBase0, treasureGemCount.FindProperty("Tier")!, aCEDatabaseModelsWorldTreasureGemCountMappingBase);

            var tableMappings30 = new List<TableMapping>();
            treasureGemCount.SetRuntimeAnnotation("Relational:TableMappings", tableMappings30);
            var treasure_gem_countTable = new Table("treasure_gem_count", null, relationalModel);
            var idColumn23 = new Column("id", "int unsigned", treasure_gem_countTable);
            treasure_gem_countTable.Columns.Add("id", idColumn23);
            var chanceColumn = new Column("chance", "float", treasure_gem_countTable);
            treasure_gem_countTable.Columns.Add("chance", chanceColumn);
            var countColumn = new Column("count", "int", treasure_gem_countTable);
            treasure_gem_countTable.Columns.Add("count", countColumn);
            var gem_CodeColumn = new Column("gem_Code", "tinyint unsigned", treasure_gem_countTable);
            treasure_gem_countTable.Columns.Add("gem_Code", gem_CodeColumn);
            var tierColumn0 = new Column("tier", "int", treasure_gem_countTable);
            treasure_gem_countTable.Columns.Add("tier", tierColumn0);
            var pK_treasure_gem_count = new UniqueConstraint("PK_treasure_gem_count", treasure_gem_countTable, new[] { idColumn23 });
            treasure_gem_countTable.PrimaryKey = pK_treasure_gem_count;
            var pK_treasure_gem_countUc = RelationalModel.GetKey(this,
                "ACE.Database.Models.World.TreasureGemCount",
                new[] { "Id" });
            pK_treasure_gem_count.MappedKeys.Add(pK_treasure_gem_countUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_treasure_gem_countUc).Add(pK_treasure_gem_count);
            treasure_gem_countTable.UniqueConstraints.Add("PK_treasure_gem_count", pK_treasure_gem_count);
            relationalModel.Tables.Add(("treasure_gem_count", null), treasure_gem_countTable);
            var treasure_gem_countTableMapping = new TableMapping(treasureGemCount, treasure_gem_countTable, true);
            treasure_gem_countTable.AddTypeMapping(treasure_gem_countTableMapping, false);
            tableMappings30.Add(treasure_gem_countTableMapping);
            RelationalModel.CreateColumnMapping(idColumn23, treasureGemCount.FindProperty("Id")!, treasure_gem_countTableMapping);
            RelationalModel.CreateColumnMapping(chanceColumn, treasureGemCount.FindProperty("Chance")!, treasure_gem_countTableMapping);
            RelationalModel.CreateColumnMapping(countColumn, treasureGemCount.FindProperty("Count")!, treasure_gem_countTableMapping);
            RelationalModel.CreateColumnMapping(gem_CodeColumn, treasureGemCount.FindProperty("GemCode")!, treasure_gem_countTableMapping);
            RelationalModel.CreateColumnMapping(tierColumn0, treasureGemCount.FindProperty("Tier")!, treasure_gem_countTableMapping);

            var treasureMaterialBase = FindEntityType("ACE.Database.Models.World.TreasureMaterialBase")!;

            var defaultTableMappings31 = new List<TableMappingBase<ColumnMappingBase>>();
            treasureMaterialBase.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings31);
            var aCEDatabaseModelsWorldTreasureMaterialBaseTableBase = new TableBase("ACE.Database.Models.World.TreasureMaterialBase", null, relationalModel);
            var idColumnBase24 = new ColumnBase<ColumnMappingBase>("id", "int unsigned", aCEDatabaseModelsWorldTreasureMaterialBaseTableBase);
            aCEDatabaseModelsWorldTreasureMaterialBaseTableBase.Columns.Add("id", idColumnBase24);
            var material_CodeColumnBase = new ColumnBase<ColumnMappingBase>("material_Code", "int unsigned", aCEDatabaseModelsWorldTreasureMaterialBaseTableBase);
            aCEDatabaseModelsWorldTreasureMaterialBaseTableBase.Columns.Add("material_Code", material_CodeColumnBase);
            var material_IdColumnBase = new ColumnBase<ColumnMappingBase>("material_Id", "int unsigned", aCEDatabaseModelsWorldTreasureMaterialBaseTableBase);
            aCEDatabaseModelsWorldTreasureMaterialBaseTableBase.Columns.Add("material_Id", material_IdColumnBase);
            var probabilityColumnBase5 = new ColumnBase<ColumnMappingBase>("probability", "float", aCEDatabaseModelsWorldTreasureMaterialBaseTableBase);
            aCEDatabaseModelsWorldTreasureMaterialBaseTableBase.Columns.Add("probability", probabilityColumnBase5);
            var tierColumnBase1 = new ColumnBase<ColumnMappingBase>("tier", "int unsigned", aCEDatabaseModelsWorldTreasureMaterialBaseTableBase);
            aCEDatabaseModelsWorldTreasureMaterialBaseTableBase.Columns.Add("tier", tierColumnBase1);
            relationalModel.DefaultTables.Add("ACE.Database.Models.World.TreasureMaterialBase", aCEDatabaseModelsWorldTreasureMaterialBaseTableBase);
            var aCEDatabaseModelsWorldTreasureMaterialBaseMappingBase = new TableMappingBase<ColumnMappingBase>(treasureMaterialBase, aCEDatabaseModelsWorldTreasureMaterialBaseTableBase, true);
            aCEDatabaseModelsWorldTreasureMaterialBaseTableBase.AddTypeMapping(aCEDatabaseModelsWorldTreasureMaterialBaseMappingBase, false);
            defaultTableMappings31.Add(aCEDatabaseModelsWorldTreasureMaterialBaseMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase24, treasureMaterialBase.FindProperty("Id")!, aCEDatabaseModelsWorldTreasureMaterialBaseMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)material_CodeColumnBase, treasureMaterialBase.FindProperty("MaterialCode")!, aCEDatabaseModelsWorldTreasureMaterialBaseMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)material_IdColumnBase, treasureMaterialBase.FindProperty("MaterialId")!, aCEDatabaseModelsWorldTreasureMaterialBaseMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)probabilityColumnBase5, treasureMaterialBase.FindProperty("Probability")!, aCEDatabaseModelsWorldTreasureMaterialBaseMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)tierColumnBase1, treasureMaterialBase.FindProperty("Tier")!, aCEDatabaseModelsWorldTreasureMaterialBaseMappingBase);

            var tableMappings31 = new List<TableMapping>();
            treasureMaterialBase.SetRuntimeAnnotation("Relational:TableMappings", tableMappings31);
            var treasure_material_baseTable = new Table("treasure_material_base", null, relationalModel);
            var idColumn24 = new Column("id", "int unsigned", treasure_material_baseTable);
            treasure_material_baseTable.Columns.Add("id", idColumn24);
            var material_CodeColumn = new Column("material_Code", "int unsigned", treasure_material_baseTable);
            treasure_material_baseTable.Columns.Add("material_Code", material_CodeColumn);
            var material_IdColumn = new Column("material_Id", "int unsigned", treasure_material_baseTable);
            treasure_material_baseTable.Columns.Add("material_Id", material_IdColumn);
            var probabilityColumn5 = new Column("probability", "float", treasure_material_baseTable);
            treasure_material_baseTable.Columns.Add("probability", probabilityColumn5);
            var tierColumn1 = new Column("tier", "int unsigned", treasure_material_baseTable);
            treasure_material_baseTable.Columns.Add("tier", tierColumn1);
            var pK_treasure_material_base = new UniqueConstraint("PK_treasure_material_base", treasure_material_baseTable, new[] { idColumn24 });
            treasure_material_baseTable.PrimaryKey = pK_treasure_material_base;
            var pK_treasure_material_baseUc = RelationalModel.GetKey(this,
                "ACE.Database.Models.World.TreasureMaterialBase",
                new[] { "Id" });
            pK_treasure_material_base.MappedKeys.Add(pK_treasure_material_baseUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_treasure_material_baseUc).Add(pK_treasure_material_base);
            treasure_material_baseTable.UniqueConstraints.Add("PK_treasure_material_base", pK_treasure_material_base);
            var tier = new TableIndex(
            "tier", treasure_material_baseTable, new[] { tierColumn1 }, false);
            var tierIx = RelationalModel.GetIndex(this,
                "ACE.Database.Models.World.TreasureMaterialBase",
                "tier");
            tier.MappedIndexes.Add(tierIx);
            RelationalModel.GetOrCreateTableIndexes(tierIx).Add(tier);
            treasure_material_baseTable.Indexes.Add("tier", tier);
            relationalModel.Tables.Add(("treasure_material_base", null), treasure_material_baseTable);
            var treasure_material_baseTableMapping = new TableMapping(treasureMaterialBase, treasure_material_baseTable, true);
            treasure_material_baseTable.AddTypeMapping(treasure_material_baseTableMapping, false);
            tableMappings31.Add(treasure_material_baseTableMapping);
            RelationalModel.CreateColumnMapping(idColumn24, treasureMaterialBase.FindProperty("Id")!, treasure_material_baseTableMapping);
            RelationalModel.CreateColumnMapping(material_CodeColumn, treasureMaterialBase.FindProperty("MaterialCode")!, treasure_material_baseTableMapping);
            RelationalModel.CreateColumnMapping(material_IdColumn, treasureMaterialBase.FindProperty("MaterialId")!, treasure_material_baseTableMapping);
            RelationalModel.CreateColumnMapping(probabilityColumn5, treasureMaterialBase.FindProperty("Probability")!, treasure_material_baseTableMapping);
            RelationalModel.CreateColumnMapping(tierColumn1, treasureMaterialBase.FindProperty("Tier")!, treasure_material_baseTableMapping);

            var treasureMaterialColor = FindEntityType("ACE.Database.Models.World.TreasureMaterialColor")!;

            var defaultTableMappings32 = new List<TableMappingBase<ColumnMappingBase>>();
            treasureMaterialColor.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings32);
            var aCEDatabaseModelsWorldTreasureMaterialColorTableBase = new TableBase("ACE.Database.Models.World.TreasureMaterialColor", null, relationalModel);
            var color_CodeColumnBase = new ColumnBase<ColumnMappingBase>("color_Code", "int unsigned", aCEDatabaseModelsWorldTreasureMaterialColorTableBase);
            aCEDatabaseModelsWorldTreasureMaterialColorTableBase.Columns.Add("color_Code", color_CodeColumnBase);
            var idColumnBase25 = new ColumnBase<ColumnMappingBase>("id", "int unsigned", aCEDatabaseModelsWorldTreasureMaterialColorTableBase);
            aCEDatabaseModelsWorldTreasureMaterialColorTableBase.Columns.Add("id", idColumnBase25);
            var material_IdColumnBase0 = new ColumnBase<ColumnMappingBase>("material_Id", "int unsigned", aCEDatabaseModelsWorldTreasureMaterialColorTableBase);
            aCEDatabaseModelsWorldTreasureMaterialColorTableBase.Columns.Add("material_Id", material_IdColumnBase0);
            var palette_TemplateColumnBase = new ColumnBase<ColumnMappingBase>("palette_Template", "int unsigned", aCEDatabaseModelsWorldTreasureMaterialColorTableBase);
            aCEDatabaseModelsWorldTreasureMaterialColorTableBase.Columns.Add("palette_Template", palette_TemplateColumnBase);
            var probabilityColumnBase6 = new ColumnBase<ColumnMappingBase>("probability", "float", aCEDatabaseModelsWorldTreasureMaterialColorTableBase);
            aCEDatabaseModelsWorldTreasureMaterialColorTableBase.Columns.Add("probability", probabilityColumnBase6);
            relationalModel.DefaultTables.Add("ACE.Database.Models.World.TreasureMaterialColor", aCEDatabaseModelsWorldTreasureMaterialColorTableBase);
            var aCEDatabaseModelsWorldTreasureMaterialColorMappingBase = new TableMappingBase<ColumnMappingBase>(treasureMaterialColor, aCEDatabaseModelsWorldTreasureMaterialColorTableBase, true);
            aCEDatabaseModelsWorldTreasureMaterialColorTableBase.AddTypeMapping(aCEDatabaseModelsWorldTreasureMaterialColorMappingBase, false);
            defaultTableMappings32.Add(aCEDatabaseModelsWorldTreasureMaterialColorMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase25, treasureMaterialColor.FindProperty("Id")!, aCEDatabaseModelsWorldTreasureMaterialColorMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)color_CodeColumnBase, treasureMaterialColor.FindProperty("ColorCode")!, aCEDatabaseModelsWorldTreasureMaterialColorMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)material_IdColumnBase0, treasureMaterialColor.FindProperty("MaterialId")!, aCEDatabaseModelsWorldTreasureMaterialColorMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)palette_TemplateColumnBase, treasureMaterialColor.FindProperty("PaletteTemplate")!, aCEDatabaseModelsWorldTreasureMaterialColorMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)probabilityColumnBase6, treasureMaterialColor.FindProperty("Probability")!, aCEDatabaseModelsWorldTreasureMaterialColorMappingBase);

            var tableMappings32 = new List<TableMapping>();
            treasureMaterialColor.SetRuntimeAnnotation("Relational:TableMappings", tableMappings32);
            var treasure_material_colorTable = new Table("treasure_material_color", null, relationalModel);
            var idColumn25 = new Column("id", "int unsigned", treasure_material_colorTable);
            treasure_material_colorTable.Columns.Add("id", idColumn25);
            var color_CodeColumn = new Column("color_Code", "int unsigned", treasure_material_colorTable);
            treasure_material_colorTable.Columns.Add("color_Code", color_CodeColumn);
            var material_IdColumn0 = new Column("material_Id", "int unsigned", treasure_material_colorTable);
            treasure_material_colorTable.Columns.Add("material_Id", material_IdColumn0);
            var palette_TemplateColumn = new Column("palette_Template", "int unsigned", treasure_material_colorTable);
            treasure_material_colorTable.Columns.Add("palette_Template", palette_TemplateColumn);
            var probabilityColumn6 = new Column("probability", "float", treasure_material_colorTable);
            treasure_material_colorTable.Columns.Add("probability", probabilityColumn6);
            var pK_treasure_material_color = new UniqueConstraint("PK_treasure_material_color", treasure_material_colorTable, new[] { idColumn25 });
            treasure_material_colorTable.PrimaryKey = pK_treasure_material_color;
            var pK_treasure_material_colorUc = RelationalModel.GetKey(this,
                "ACE.Database.Models.World.TreasureMaterialColor",
                new[] { "Id" });
            pK_treasure_material_color.MappedKeys.Add(pK_treasure_material_colorUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_treasure_material_colorUc).Add(pK_treasure_material_color);
            treasure_material_colorTable.UniqueConstraints.Add("PK_treasure_material_color", pK_treasure_material_color);
            var material_Id = new TableIndex(
            "material_Id", treasure_material_colorTable, new[] { material_IdColumn0 }, false);
            var material_IdIx = RelationalModel.GetIndex(this,
                "ACE.Database.Models.World.TreasureMaterialColor",
                "material_Id");
            material_Id.MappedIndexes.Add(material_IdIx);
            RelationalModel.GetOrCreateTableIndexes(material_IdIx).Add(material_Id);
            treasure_material_colorTable.Indexes.Add("material_Id", material_Id);
            var tsys_Mutation_Color = new TableIndex(
            "tsys_Mutation_Color", treasure_material_colorTable, new[] { color_CodeColumn }, false);
            var tsys_Mutation_ColorIx = RelationalModel.GetIndex(this,
                "ACE.Database.Models.World.TreasureMaterialColor",
                "tsys_Mutation_Color");
            tsys_Mutation_Color.MappedIndexes.Add(tsys_Mutation_ColorIx);
            RelationalModel.GetOrCreateTableIndexes(tsys_Mutation_ColorIx).Add(tsys_Mutation_Color);
            treasure_material_colorTable.Indexes.Add("tsys_Mutation_Color", tsys_Mutation_Color);
            relationalModel.Tables.Add(("treasure_material_color", null), treasure_material_colorTable);
            var treasure_material_colorTableMapping = new TableMapping(treasureMaterialColor, treasure_material_colorTable, true);
            treasure_material_colorTable.AddTypeMapping(treasure_material_colorTableMapping, false);
            tableMappings32.Add(treasure_material_colorTableMapping);
            RelationalModel.CreateColumnMapping(idColumn25, treasureMaterialColor.FindProperty("Id")!, treasure_material_colorTableMapping);
            RelationalModel.CreateColumnMapping(color_CodeColumn, treasureMaterialColor.FindProperty("ColorCode")!, treasure_material_colorTableMapping);
            RelationalModel.CreateColumnMapping(material_IdColumn0, treasureMaterialColor.FindProperty("MaterialId")!, treasure_material_colorTableMapping);
            RelationalModel.CreateColumnMapping(palette_TemplateColumn, treasureMaterialColor.FindProperty("PaletteTemplate")!, treasure_material_colorTableMapping);
            RelationalModel.CreateColumnMapping(probabilityColumn6, treasureMaterialColor.FindProperty("Probability")!, treasure_material_colorTableMapping);

            var treasureMaterialGroups = FindEntityType("ACE.Database.Models.World.TreasureMaterialGroups")!;

            var defaultTableMappings33 = new List<TableMappingBase<ColumnMappingBase>>();
            treasureMaterialGroups.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings33);
            var aCEDatabaseModelsWorldTreasureMaterialGroupsTableBase = new TableBase("ACE.Database.Models.World.TreasureMaterialGroups", null, relationalModel);
            var idColumnBase26 = new ColumnBase<ColumnMappingBase>("id", "int unsigned", aCEDatabaseModelsWorldTreasureMaterialGroupsTableBase);
            aCEDatabaseModelsWorldTreasureMaterialGroupsTableBase.Columns.Add("id", idColumnBase26);
            var material_GroupColumnBase = new ColumnBase<ColumnMappingBase>("material_Group", "int unsigned", aCEDatabaseModelsWorldTreasureMaterialGroupsTableBase);
            aCEDatabaseModelsWorldTreasureMaterialGroupsTableBase.Columns.Add("material_Group", material_GroupColumnBase);
            var material_IdColumnBase1 = new ColumnBase<ColumnMappingBase>("material_Id", "int unsigned", aCEDatabaseModelsWorldTreasureMaterialGroupsTableBase);
            aCEDatabaseModelsWorldTreasureMaterialGroupsTableBase.Columns.Add("material_Id", material_IdColumnBase1);
            var probabilityColumnBase7 = new ColumnBase<ColumnMappingBase>("probability", "float", aCEDatabaseModelsWorldTreasureMaterialGroupsTableBase);
            aCEDatabaseModelsWorldTreasureMaterialGroupsTableBase.Columns.Add("probability", probabilityColumnBase7);
            var tierColumnBase2 = new ColumnBase<ColumnMappingBase>("tier", "int unsigned", aCEDatabaseModelsWorldTreasureMaterialGroupsTableBase);
            aCEDatabaseModelsWorldTreasureMaterialGroupsTableBase.Columns.Add("tier", tierColumnBase2);
            relationalModel.DefaultTables.Add("ACE.Database.Models.World.TreasureMaterialGroups", aCEDatabaseModelsWorldTreasureMaterialGroupsTableBase);
            var aCEDatabaseModelsWorldTreasureMaterialGroupsMappingBase = new TableMappingBase<ColumnMappingBase>(treasureMaterialGroups, aCEDatabaseModelsWorldTreasureMaterialGroupsTableBase, true);
            aCEDatabaseModelsWorldTreasureMaterialGroupsTableBase.AddTypeMapping(aCEDatabaseModelsWorldTreasureMaterialGroupsMappingBase, false);
            defaultTableMappings33.Add(aCEDatabaseModelsWorldTreasureMaterialGroupsMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase26, treasureMaterialGroups.FindProperty("Id")!, aCEDatabaseModelsWorldTreasureMaterialGroupsMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)material_GroupColumnBase, treasureMaterialGroups.FindProperty("MaterialGroup")!, aCEDatabaseModelsWorldTreasureMaterialGroupsMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)material_IdColumnBase1, treasureMaterialGroups.FindProperty("MaterialId")!, aCEDatabaseModelsWorldTreasureMaterialGroupsMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)probabilityColumnBase7, treasureMaterialGroups.FindProperty("Probability")!, aCEDatabaseModelsWorldTreasureMaterialGroupsMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)tierColumnBase2, treasureMaterialGroups.FindProperty("Tier")!, aCEDatabaseModelsWorldTreasureMaterialGroupsMappingBase);

            var tableMappings33 = new List<TableMapping>();
            treasureMaterialGroups.SetRuntimeAnnotation("Relational:TableMappings", tableMappings33);
            var treasure_material_groupsTable = new Table("treasure_material_groups", null, relationalModel);
            var idColumn26 = new Column("id", "int unsigned", treasure_material_groupsTable);
            treasure_material_groupsTable.Columns.Add("id", idColumn26);
            var material_GroupColumn = new Column("material_Group", "int unsigned", treasure_material_groupsTable);
            treasure_material_groupsTable.Columns.Add("material_Group", material_GroupColumn);
            var material_IdColumn1 = new Column("material_Id", "int unsigned", treasure_material_groupsTable);
            treasure_material_groupsTable.Columns.Add("material_Id", material_IdColumn1);
            var probabilityColumn7 = new Column("probability", "float", treasure_material_groupsTable);
            treasure_material_groupsTable.Columns.Add("probability", probabilityColumn7);
            var tierColumn2 = new Column("tier", "int unsigned", treasure_material_groupsTable);
            treasure_material_groupsTable.Columns.Add("tier", tierColumn2);
            var pK_treasure_material_groups = new UniqueConstraint("PK_treasure_material_groups", treasure_material_groupsTable, new[] { idColumn26 });
            treasure_material_groupsTable.PrimaryKey = pK_treasure_material_groups;
            var pK_treasure_material_groupsUc = RelationalModel.GetKey(this,
                "ACE.Database.Models.World.TreasureMaterialGroups",
                new[] { "Id" });
            pK_treasure_material_groups.MappedKeys.Add(pK_treasure_material_groupsUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_treasure_material_groupsUc).Add(pK_treasure_material_groups);
            treasure_material_groupsTable.UniqueConstraints.Add("PK_treasure_material_groups", pK_treasure_material_groups);
            var tier1 = new TableIndex(
            "tier1", treasure_material_groupsTable, new[] { tierColumn2 }, false);
            var tier1Ix = RelationalModel.GetIndex(this,
                "ACE.Database.Models.World.TreasureMaterialGroups",
                "tier");
            tier1.MappedIndexes.Add(tier1Ix);
            RelationalModel.GetOrCreateTableIndexes(tier1Ix).Add(tier1);
            treasure_material_groupsTable.Indexes.Add("tier1", tier1);
            relationalModel.Tables.Add(("treasure_material_groups", null), treasure_material_groupsTable);
            var treasure_material_groupsTableMapping = new TableMapping(treasureMaterialGroups, treasure_material_groupsTable, true);
            treasure_material_groupsTable.AddTypeMapping(treasure_material_groupsTableMapping, false);
            tableMappings33.Add(treasure_material_groupsTableMapping);
            RelationalModel.CreateColumnMapping(idColumn26, treasureMaterialGroups.FindProperty("Id")!, treasure_material_groupsTableMapping);
            RelationalModel.CreateColumnMapping(material_GroupColumn, treasureMaterialGroups.FindProperty("MaterialGroup")!, treasure_material_groupsTableMapping);
            RelationalModel.CreateColumnMapping(material_IdColumn1, treasureMaterialGroups.FindProperty("MaterialId")!, treasure_material_groupsTableMapping);
            RelationalModel.CreateColumnMapping(probabilityColumn7, treasureMaterialGroups.FindProperty("Probability")!, treasure_material_groupsTableMapping);
            RelationalModel.CreateColumnMapping(tierColumn2, treasureMaterialGroups.FindProperty("Tier")!, treasure_material_groupsTableMapping);

            var treasureWielded = FindEntityType("ACE.Database.Models.World.TreasureWielded")!;

            var defaultTableMappings34 = new List<TableMappingBase<ColumnMappingBase>>();
            treasureWielded.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings34);
            var aCEDatabaseModelsWorldTreasureWieldedTableBase = new TableBase("ACE.Database.Models.World.TreasureWielded", null, relationalModel);
            var continues_Previous_SetColumnBase = new ColumnBase<ColumnMappingBase>("continues_Previous_Set", "bit(1)", aCEDatabaseModelsWorldTreasureWieldedTableBase);
            aCEDatabaseModelsWorldTreasureWieldedTableBase.Columns.Add("continues_Previous_Set", continues_Previous_SetColumnBase);
            var has_Sub_SetColumnBase = new ColumnBase<ColumnMappingBase>("has_Sub_Set", "bit(1)", aCEDatabaseModelsWorldTreasureWieldedTableBase);
            aCEDatabaseModelsWorldTreasureWieldedTableBase.Columns.Add("has_Sub_Set", has_Sub_SetColumnBase);
            var idColumnBase27 = new ColumnBase<ColumnMappingBase>("id", "int unsigned", aCEDatabaseModelsWorldTreasureWieldedTableBase);
            aCEDatabaseModelsWorldTreasureWieldedTableBase.Columns.Add("id", idColumnBase27);
            var last_ModifiedColumnBase10 = new ColumnBase<ColumnMappingBase>("last_Modified", "datetime", aCEDatabaseModelsWorldTreasureWieldedTableBase);
            aCEDatabaseModelsWorldTreasureWieldedTableBase.Columns.Add("last_Modified", last_ModifiedColumnBase10);
            var palette_IdColumnBase = new ColumnBase<ColumnMappingBase>("palette_Id", "int unsigned", aCEDatabaseModelsWorldTreasureWieldedTableBase);
            aCEDatabaseModelsWorldTreasureWieldedTableBase.Columns.Add("palette_Id", palette_IdColumnBase);
            var probabilityColumnBase8 = new ColumnBase<ColumnMappingBase>("probability", "float", aCEDatabaseModelsWorldTreasureWieldedTableBase);
            aCEDatabaseModelsWorldTreasureWieldedTableBase.Columns.Add("probability", probabilityColumnBase8);
            var set_StartColumnBase = new ColumnBase<ColumnMappingBase>("set_Start", "bit(1)", aCEDatabaseModelsWorldTreasureWieldedTableBase);
            aCEDatabaseModelsWorldTreasureWieldedTableBase.Columns.Add("set_Start", set_StartColumnBase);
            var shadeColumnBase = new ColumnBase<ColumnMappingBase>("shade", "float", aCEDatabaseModelsWorldTreasureWieldedTableBase);
            aCEDatabaseModelsWorldTreasureWieldedTableBase.Columns.Add("shade", shadeColumnBase);
            var stack_SizeColumnBase = new ColumnBase<ColumnMappingBase>("stack_Size", "int", aCEDatabaseModelsWorldTreasureWieldedTableBase);
            aCEDatabaseModelsWorldTreasureWieldedTableBase.Columns.Add("stack_Size", stack_SizeColumnBase);
            var stack_Size_VarianceColumnBase = new ColumnBase<ColumnMappingBase>("stack_Size_Variance", "float", aCEDatabaseModelsWorldTreasureWieldedTableBase);
            aCEDatabaseModelsWorldTreasureWieldedTableBase.Columns.Add("stack_Size_Variance", stack_Size_VarianceColumnBase);
            var treasure_TypeColumnBase0 = new ColumnBase<ColumnMappingBase>("treasure_Type", "int unsigned", aCEDatabaseModelsWorldTreasureWieldedTableBase);
            aCEDatabaseModelsWorldTreasureWieldedTableBase.Columns.Add("treasure_Type", treasure_TypeColumnBase0);
            var unknown_1ColumnBase0 = new ColumnBase<ColumnMappingBase>("unknown_1", "int unsigned", aCEDatabaseModelsWorldTreasureWieldedTableBase);
            aCEDatabaseModelsWorldTreasureWieldedTableBase.Columns.Add("unknown_1", unknown_1ColumnBase0);
            var unknown_10ColumnBase = new ColumnBase<ColumnMappingBase>("unknown_10", "int unsigned", aCEDatabaseModelsWorldTreasureWieldedTableBase);
            aCEDatabaseModelsWorldTreasureWieldedTableBase.Columns.Add("unknown_10", unknown_10ColumnBase);
            var unknown_11ColumnBase = new ColumnBase<ColumnMappingBase>("unknown_11", "int unsigned", aCEDatabaseModelsWorldTreasureWieldedTableBase);
            aCEDatabaseModelsWorldTreasureWieldedTableBase.Columns.Add("unknown_11", unknown_11ColumnBase);
            var unknown_12ColumnBase = new ColumnBase<ColumnMappingBase>("unknown_12", "int unsigned", aCEDatabaseModelsWorldTreasureWieldedTableBase);
            aCEDatabaseModelsWorldTreasureWieldedTableBase.Columns.Add("unknown_12", unknown_12ColumnBase);
            var unknown_3ColumnBase = new ColumnBase<ColumnMappingBase>("unknown_3", "int unsigned", aCEDatabaseModelsWorldTreasureWieldedTableBase);
            aCEDatabaseModelsWorldTreasureWieldedTableBase.Columns.Add("unknown_3", unknown_3ColumnBase);
            var unknown_4ColumnBase = new ColumnBase<ColumnMappingBase>("unknown_4", "int unsigned", aCEDatabaseModelsWorldTreasureWieldedTableBase);
            aCEDatabaseModelsWorldTreasureWieldedTableBase.Columns.Add("unknown_4", unknown_4ColumnBase);
            var unknown_5ColumnBase = new ColumnBase<ColumnMappingBase>("unknown_5", "int unsigned", aCEDatabaseModelsWorldTreasureWieldedTableBase);
            aCEDatabaseModelsWorldTreasureWieldedTableBase.Columns.Add("unknown_5", unknown_5ColumnBase);
            var unknown_9ColumnBase0 = new ColumnBase<ColumnMappingBase>("unknown_9", "int unsigned", aCEDatabaseModelsWorldTreasureWieldedTableBase);
            aCEDatabaseModelsWorldTreasureWieldedTableBase.Columns.Add("unknown_9", unknown_9ColumnBase0);
            var weenie_Class_IdColumnBase2 = new ColumnBase<ColumnMappingBase>("weenie_Class_Id", "int unsigned", aCEDatabaseModelsWorldTreasureWieldedTableBase);
            aCEDatabaseModelsWorldTreasureWieldedTableBase.Columns.Add("weenie_Class_Id", weenie_Class_IdColumnBase2);
            relationalModel.DefaultTables.Add("ACE.Database.Models.World.TreasureWielded", aCEDatabaseModelsWorldTreasureWieldedTableBase);
            var aCEDatabaseModelsWorldTreasureWieldedMappingBase = new TableMappingBase<ColumnMappingBase>(treasureWielded, aCEDatabaseModelsWorldTreasureWieldedTableBase, true);
            aCEDatabaseModelsWorldTreasureWieldedTableBase.AddTypeMapping(aCEDatabaseModelsWorldTreasureWieldedMappingBase, false);
            defaultTableMappings34.Add(aCEDatabaseModelsWorldTreasureWieldedMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase27, treasureWielded.FindProperty("Id")!, aCEDatabaseModelsWorldTreasureWieldedMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)continues_Previous_SetColumnBase, treasureWielded.FindProperty("ContinuesPreviousSet")!, aCEDatabaseModelsWorldTreasureWieldedMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)has_Sub_SetColumnBase, treasureWielded.FindProperty("HasSubSet")!, aCEDatabaseModelsWorldTreasureWieldedMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)last_ModifiedColumnBase10, treasureWielded.FindProperty("LastModified")!, aCEDatabaseModelsWorldTreasureWieldedMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)palette_IdColumnBase, treasureWielded.FindProperty("PaletteId")!, aCEDatabaseModelsWorldTreasureWieldedMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)probabilityColumnBase8, treasureWielded.FindProperty("Probability")!, aCEDatabaseModelsWorldTreasureWieldedMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)set_StartColumnBase, treasureWielded.FindProperty("SetStart")!, aCEDatabaseModelsWorldTreasureWieldedMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)shadeColumnBase, treasureWielded.FindProperty("Shade")!, aCEDatabaseModelsWorldTreasureWieldedMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)stack_SizeColumnBase, treasureWielded.FindProperty("StackSize")!, aCEDatabaseModelsWorldTreasureWieldedMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)stack_Size_VarianceColumnBase, treasureWielded.FindProperty("StackSizeVariance")!, aCEDatabaseModelsWorldTreasureWieldedMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)treasure_TypeColumnBase0, treasureWielded.FindProperty("TreasureType")!, aCEDatabaseModelsWorldTreasureWieldedMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)unknown_1ColumnBase0, treasureWielded.FindProperty("Unknown1")!, aCEDatabaseModelsWorldTreasureWieldedMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)unknown_10ColumnBase, treasureWielded.FindProperty("Unknown10")!, aCEDatabaseModelsWorldTreasureWieldedMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)unknown_11ColumnBase, treasureWielded.FindProperty("Unknown11")!, aCEDatabaseModelsWorldTreasureWieldedMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)unknown_12ColumnBase, treasureWielded.FindProperty("Unknown12")!, aCEDatabaseModelsWorldTreasureWieldedMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)unknown_3ColumnBase, treasureWielded.FindProperty("Unknown3")!, aCEDatabaseModelsWorldTreasureWieldedMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)unknown_4ColumnBase, treasureWielded.FindProperty("Unknown4")!, aCEDatabaseModelsWorldTreasureWieldedMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)unknown_5ColumnBase, treasureWielded.FindProperty("Unknown5")!, aCEDatabaseModelsWorldTreasureWieldedMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)unknown_9ColumnBase0, treasureWielded.FindProperty("Unknown9")!, aCEDatabaseModelsWorldTreasureWieldedMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)weenie_Class_IdColumnBase2, treasureWielded.FindProperty("WeenieClassId")!, aCEDatabaseModelsWorldTreasureWieldedMappingBase);

            var tableMappings34 = new List<TableMapping>();
            treasureWielded.SetRuntimeAnnotation("Relational:TableMappings", tableMappings34);
            var treasure_wieldedTable = new Table("treasure_wielded", null, relationalModel);
            var idColumn27 = new Column("id", "int unsigned", treasure_wieldedTable);
            treasure_wieldedTable.Columns.Add("id", idColumn27);
            var continues_Previous_SetColumn = new Column("continues_Previous_Set", "bit(1)", treasure_wieldedTable);
            treasure_wieldedTable.Columns.Add("continues_Previous_Set", continues_Previous_SetColumn);
            var has_Sub_SetColumn = new Column("has_Sub_Set", "bit(1)", treasure_wieldedTable);
            treasure_wieldedTable.Columns.Add("has_Sub_Set", has_Sub_SetColumn);
            var last_ModifiedColumn10 = new Column("last_Modified", "datetime", treasure_wieldedTable);
            treasure_wieldedTable.Columns.Add("last_Modified", last_ModifiedColumn10);
            var palette_IdColumn = new Column("palette_Id", "int unsigned", treasure_wieldedTable);
            treasure_wieldedTable.Columns.Add("palette_Id", palette_IdColumn);
            var probabilityColumn8 = new Column("probability", "float", treasure_wieldedTable);
            treasure_wieldedTable.Columns.Add("probability", probabilityColumn8);
            var set_StartColumn = new Column("set_Start", "bit(1)", treasure_wieldedTable);
            treasure_wieldedTable.Columns.Add("set_Start", set_StartColumn);
            var shadeColumn = new Column("shade", "float", treasure_wieldedTable);
            treasure_wieldedTable.Columns.Add("shade", shadeColumn);
            var stack_SizeColumn = new Column("stack_Size", "int", treasure_wieldedTable);
            treasure_wieldedTable.Columns.Add("stack_Size", stack_SizeColumn);
            var stack_Size_VarianceColumn = new Column("stack_Size_Variance", "float", treasure_wieldedTable);
            treasure_wieldedTable.Columns.Add("stack_Size_Variance", stack_Size_VarianceColumn);
            var treasure_TypeColumn0 = new Column("treasure_Type", "int unsigned", treasure_wieldedTable);
            treasure_wieldedTable.Columns.Add("treasure_Type", treasure_TypeColumn0);
            var unknown_1Column0 = new Column("unknown_1", "int unsigned", treasure_wieldedTable);
            treasure_wieldedTable.Columns.Add("unknown_1", unknown_1Column0);
            var unknown_10Column = new Column("unknown_10", "int unsigned", treasure_wieldedTable);
            treasure_wieldedTable.Columns.Add("unknown_10", unknown_10Column);
            var unknown_11Column = new Column("unknown_11", "int unsigned", treasure_wieldedTable);
            treasure_wieldedTable.Columns.Add("unknown_11", unknown_11Column);
            var unknown_12Column = new Column("unknown_12", "int unsigned", treasure_wieldedTable);
            treasure_wieldedTable.Columns.Add("unknown_12", unknown_12Column);
            var unknown_3Column = new Column("unknown_3", "int unsigned", treasure_wieldedTable);
            treasure_wieldedTable.Columns.Add("unknown_3", unknown_3Column);
            var unknown_4Column = new Column("unknown_4", "int unsigned", treasure_wieldedTable);
            treasure_wieldedTable.Columns.Add("unknown_4", unknown_4Column);
            var unknown_5Column = new Column("unknown_5", "int unsigned", treasure_wieldedTable);
            treasure_wieldedTable.Columns.Add("unknown_5", unknown_5Column);
            var unknown_9Column0 = new Column("unknown_9", "int unsigned", treasure_wieldedTable);
            treasure_wieldedTable.Columns.Add("unknown_9", unknown_9Column0);
            var weenie_Class_IdColumn2 = new Column("weenie_Class_Id", "int unsigned", treasure_wieldedTable);
            treasure_wieldedTable.Columns.Add("weenie_Class_Id", weenie_Class_IdColumn2);
            var pK_treasure_wielded = new UniqueConstraint("PK_treasure_wielded", treasure_wieldedTable, new[] { idColumn27 });
            treasure_wieldedTable.PrimaryKey = pK_treasure_wielded;
            var pK_treasure_wieldedUc = RelationalModel.GetKey(this,
                "ACE.Database.Models.World.TreasureWielded",
                new[] { "Id" });
            pK_treasure_wielded.MappedKeys.Add(pK_treasure_wieldedUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_treasure_wieldedUc).Add(pK_treasure_wielded);
            treasure_wieldedTable.UniqueConstraints.Add("PK_treasure_wielded", pK_treasure_wielded);
            var treasureType_idx1 = new TableIndex(
            "treasureType_idx1", treasure_wieldedTable, new[] { treasure_TypeColumn0 }, false);
            var treasureType_idx1Ix = RelationalModel.GetIndex(this,
                "ACE.Database.Models.World.TreasureWielded",
                "treasureType_idx");
            treasureType_idx1.MappedIndexes.Add(treasureType_idx1Ix);
            RelationalModel.GetOrCreateTableIndexes(treasureType_idx1Ix).Add(treasureType_idx1);
            treasure_wieldedTable.Indexes.Add("treasureType_idx1", treasureType_idx1);
            relationalModel.Tables.Add(("treasure_wielded", null), treasure_wieldedTable);
            var treasure_wieldedTableMapping = new TableMapping(treasureWielded, treasure_wieldedTable, true);
            treasure_wieldedTable.AddTypeMapping(treasure_wieldedTableMapping, false);
            tableMappings34.Add(treasure_wieldedTableMapping);
            RelationalModel.CreateColumnMapping(idColumn27, treasureWielded.FindProperty("Id")!, treasure_wieldedTableMapping);
            RelationalModel.CreateColumnMapping(continues_Previous_SetColumn, treasureWielded.FindProperty("ContinuesPreviousSet")!, treasure_wieldedTableMapping);
            RelationalModel.CreateColumnMapping(has_Sub_SetColumn, treasureWielded.FindProperty("HasSubSet")!, treasure_wieldedTableMapping);
            RelationalModel.CreateColumnMapping(last_ModifiedColumn10, treasureWielded.FindProperty("LastModified")!, treasure_wieldedTableMapping);
            RelationalModel.CreateColumnMapping(palette_IdColumn, treasureWielded.FindProperty("PaletteId")!, treasure_wieldedTableMapping);
            RelationalModel.CreateColumnMapping(probabilityColumn8, treasureWielded.FindProperty("Probability")!, treasure_wieldedTableMapping);
            RelationalModel.CreateColumnMapping(set_StartColumn, treasureWielded.FindProperty("SetStart")!, treasure_wieldedTableMapping);
            RelationalModel.CreateColumnMapping(shadeColumn, treasureWielded.FindProperty("Shade")!, treasure_wieldedTableMapping);
            RelationalModel.CreateColumnMapping(stack_SizeColumn, treasureWielded.FindProperty("StackSize")!, treasure_wieldedTableMapping);
            RelationalModel.CreateColumnMapping(stack_Size_VarianceColumn, treasureWielded.FindProperty("StackSizeVariance")!, treasure_wieldedTableMapping);
            RelationalModel.CreateColumnMapping(treasure_TypeColumn0, treasureWielded.FindProperty("TreasureType")!, treasure_wieldedTableMapping);
            RelationalModel.CreateColumnMapping(unknown_1Column0, treasureWielded.FindProperty("Unknown1")!, treasure_wieldedTableMapping);
            RelationalModel.CreateColumnMapping(unknown_10Column, treasureWielded.FindProperty("Unknown10")!, treasure_wieldedTableMapping);
            RelationalModel.CreateColumnMapping(unknown_11Column, treasureWielded.FindProperty("Unknown11")!, treasure_wieldedTableMapping);
            RelationalModel.CreateColumnMapping(unknown_12Column, treasureWielded.FindProperty("Unknown12")!, treasure_wieldedTableMapping);
            RelationalModel.CreateColumnMapping(unknown_3Column, treasureWielded.FindProperty("Unknown3")!, treasure_wieldedTableMapping);
            RelationalModel.CreateColumnMapping(unknown_4Column, treasureWielded.FindProperty("Unknown4")!, treasure_wieldedTableMapping);
            RelationalModel.CreateColumnMapping(unknown_5Column, treasureWielded.FindProperty("Unknown5")!, treasure_wieldedTableMapping);
            RelationalModel.CreateColumnMapping(unknown_9Column0, treasureWielded.FindProperty("Unknown9")!, treasure_wieldedTableMapping);
            RelationalModel.CreateColumnMapping(weenie_Class_IdColumn2, treasureWielded.FindProperty("WeenieClassId")!, treasure_wieldedTableMapping);

            var version = FindEntityType("ACE.Database.Models.World.Version")!;

            var defaultTableMappings35 = new List<TableMappingBase<ColumnMappingBase>>();
            version.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings35);
            var aCEDatabaseModelsWorldVersionTableBase = new TableBase("ACE.Database.Models.World.Version", null, relationalModel);
            var base_VersionColumnBase = new ColumnBase<ColumnMappingBase>("base_Version", "varchar(45)", aCEDatabaseModelsWorldVersionTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsWorldVersionTableBase.Columns.Add("base_Version", base_VersionColumnBase);
            var idColumnBase28 = new ColumnBase<ColumnMappingBase>("id", "int unsigned", aCEDatabaseModelsWorldVersionTableBase);
            aCEDatabaseModelsWorldVersionTableBase.Columns.Add("id", idColumnBase28);
            var last_ModifiedColumnBase11 = new ColumnBase<ColumnMappingBase>("last_Modified", "datetime", aCEDatabaseModelsWorldVersionTableBase);
            aCEDatabaseModelsWorldVersionTableBase.Columns.Add("last_Modified", last_ModifiedColumnBase11);
            var patch_VersionColumnBase = new ColumnBase<ColumnMappingBase>("patch_Version", "varchar(45)", aCEDatabaseModelsWorldVersionTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsWorldVersionTableBase.Columns.Add("patch_Version", patch_VersionColumnBase);
            relationalModel.DefaultTables.Add("ACE.Database.Models.World.Version", aCEDatabaseModelsWorldVersionTableBase);
            var aCEDatabaseModelsWorldVersionMappingBase = new TableMappingBase<ColumnMappingBase>(version, aCEDatabaseModelsWorldVersionTableBase, true);
            aCEDatabaseModelsWorldVersionTableBase.AddTypeMapping(aCEDatabaseModelsWorldVersionMappingBase, false);
            defaultTableMappings35.Add(aCEDatabaseModelsWorldVersionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase28, version.FindProperty("Id")!, aCEDatabaseModelsWorldVersionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)base_VersionColumnBase, version.FindProperty("BaseVersion")!, aCEDatabaseModelsWorldVersionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)last_ModifiedColumnBase11, version.FindProperty("LastModified")!, aCEDatabaseModelsWorldVersionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)patch_VersionColumnBase, version.FindProperty("PatchVersion")!, aCEDatabaseModelsWorldVersionMappingBase);

            var tableMappings35 = new List<TableMapping>();
            version.SetRuntimeAnnotation("Relational:TableMappings", tableMappings35);
            var versionTable = new Table("version", null, relationalModel);
            var idColumn28 = new Column("id", "int unsigned", versionTable);
            versionTable.Columns.Add("id", idColumn28);
            var base_VersionColumn = new Column("base_Version", "varchar(45)", versionTable)
            {
                IsNullable = true
            };
            versionTable.Columns.Add("base_Version", base_VersionColumn);
            var last_ModifiedColumn11 = new Column("last_Modified", "datetime", versionTable);
            versionTable.Columns.Add("last_Modified", last_ModifiedColumn11);
            var patch_VersionColumn = new Column("patch_Version", "varchar(45)", versionTable)
            {
                IsNullable = true
            };
            versionTable.Columns.Add("patch_Version", patch_VersionColumn);
            var pK_version = new UniqueConstraint("PK_version", versionTable, new[] { idColumn28 });
            versionTable.PrimaryKey = pK_version;
            var pK_versionUc = RelationalModel.GetKey(this,
                "ACE.Database.Models.World.Version",
                new[] { "Id" });
            pK_version.MappedKeys.Add(pK_versionUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_versionUc).Add(pK_version);
            versionTable.UniqueConstraints.Add("PK_version", pK_version);
            relationalModel.Tables.Add(("version", null), versionTable);
            var versionTableMapping = new TableMapping(version, versionTable, true);
            versionTable.AddTypeMapping(versionTableMapping, false);
            tableMappings35.Add(versionTableMapping);
            RelationalModel.CreateColumnMapping(idColumn28, version.FindProperty("Id")!, versionTableMapping);
            RelationalModel.CreateColumnMapping(base_VersionColumn, version.FindProperty("BaseVersion")!, versionTableMapping);
            RelationalModel.CreateColumnMapping(last_ModifiedColumn11, version.FindProperty("LastModified")!, versionTableMapping);
            RelationalModel.CreateColumnMapping(patch_VersionColumn, version.FindProperty("PatchVersion")!, versionTableMapping);

            var weenie = FindEntityType("ACE.Database.Models.World.Weenie")!;

            var defaultTableMappings36 = new List<TableMappingBase<ColumnMappingBase>>();
            weenie.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings36);
            var aCEDatabaseModelsWorldWeenieTableBase = new TableBase("ACE.Database.Models.World.Weenie", null, relationalModel);
            var class_IdColumnBase = new ColumnBase<ColumnMappingBase>("class_Id", "int unsigned", aCEDatabaseModelsWorldWeenieTableBase);
            aCEDatabaseModelsWorldWeenieTableBase.Columns.Add("class_Id", class_IdColumnBase);
            var class_NameColumnBase = new ColumnBase<ColumnMappingBase>("class_Name", "varchar(100)", aCEDatabaseModelsWorldWeenieTableBase);
            aCEDatabaseModelsWorldWeenieTableBase.Columns.Add("class_Name", class_NameColumnBase);
            var last_ModifiedColumnBase12 = new ColumnBase<ColumnMappingBase>("last_Modified", "datetime", aCEDatabaseModelsWorldWeenieTableBase);
            aCEDatabaseModelsWorldWeenieTableBase.Columns.Add("last_Modified", last_ModifiedColumnBase12);
            var typeColumnBase5 = new ColumnBase<ColumnMappingBase>("type", "int", aCEDatabaseModelsWorldWeenieTableBase);
            aCEDatabaseModelsWorldWeenieTableBase.Columns.Add("type", typeColumnBase5);
            relationalModel.DefaultTables.Add("ACE.Database.Models.World.Weenie", aCEDatabaseModelsWorldWeenieTableBase);
            var aCEDatabaseModelsWorldWeenieMappingBase = new TableMappingBase<ColumnMappingBase>(weenie, aCEDatabaseModelsWorldWeenieTableBase, true);
            aCEDatabaseModelsWorldWeenieTableBase.AddTypeMapping(aCEDatabaseModelsWorldWeenieMappingBase, false);
            defaultTableMappings36.Add(aCEDatabaseModelsWorldWeenieMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)class_IdColumnBase, weenie.FindProperty("ClassId")!, aCEDatabaseModelsWorldWeenieMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)class_NameColumnBase, weenie.FindProperty("ClassName")!, aCEDatabaseModelsWorldWeenieMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)last_ModifiedColumnBase12, weenie.FindProperty("LastModified")!, aCEDatabaseModelsWorldWeenieMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)typeColumnBase5, weenie.FindProperty("Type")!, aCEDatabaseModelsWorldWeenieMappingBase);

            var tableMappings36 = new List<TableMapping>();
            weenie.SetRuntimeAnnotation("Relational:TableMappings", tableMappings36);
            var weenieTable = new Table("weenie", null, relationalModel);
            var class_IdColumn = new Column("class_Id", "int unsigned", weenieTable);
            weenieTable.Columns.Add("class_Id", class_IdColumn);
            var class_NameColumn = new Column("class_Name", "varchar(100)", weenieTable);
            weenieTable.Columns.Add("class_Name", class_NameColumn);
            var last_ModifiedColumn12 = new Column("last_Modified", "datetime", weenieTable);
            weenieTable.Columns.Add("last_Modified", last_ModifiedColumn12);
            var typeColumn5 = new Column("type", "int", weenieTable);
            weenieTable.Columns.Add("type", typeColumn5);
            var pRIMARY6 = new UniqueConstraint("PRIMARY", weenieTable, new[] { class_IdColumn });
            weenieTable.PrimaryKey = pRIMARY6;
            var pRIMARY6Uc = RelationalModel.GetKey(this,
                "ACE.Database.Models.World.Weenie",
                new[] { "ClassId" });
            pRIMARY6.MappedKeys.Add(pRIMARY6Uc);
            RelationalModel.GetOrCreateUniqueConstraints(pRIMARY6Uc).Add(pRIMARY6);
            weenieTable.UniqueConstraints.Add("PRIMARY", pRIMARY6);
            var className_UNIQUE = new TableIndex(
            "className_UNIQUE", weenieTable, new[] { class_NameColumn }, true);
            var className_UNIQUEIx = RelationalModel.GetIndex(this,
                "ACE.Database.Models.World.Weenie",
                "className_UNIQUE");
            className_UNIQUE.MappedIndexes.Add(className_UNIQUEIx);
            RelationalModel.GetOrCreateTableIndexes(className_UNIQUEIx).Add(className_UNIQUE);
            weenieTable.Indexes.Add("className_UNIQUE", className_UNIQUE);
            relationalModel.Tables.Add(("weenie", null), weenieTable);
            var weenieTableMapping = new TableMapping(weenie, weenieTable, true);
            weenieTable.AddTypeMapping(weenieTableMapping, false);
            tableMappings36.Add(weenieTableMapping);
            RelationalModel.CreateColumnMapping(class_IdColumn, weenie.FindProperty("ClassId")!, weenieTableMapping);
            RelationalModel.CreateColumnMapping(class_NameColumn, weenie.FindProperty("ClassName")!, weenieTableMapping);
            RelationalModel.CreateColumnMapping(last_ModifiedColumn12, weenie.FindProperty("LastModified")!, weenieTableMapping);
            RelationalModel.CreateColumnMapping(typeColumn5, weenie.FindProperty("Type")!, weenieTableMapping);

            var weeniePropertiesAnimPart = FindEntityType("ACE.Database.Models.World.WeeniePropertiesAnimPart")!;

            var defaultTableMappings37 = new List<TableMappingBase<ColumnMappingBase>>();
            weeniePropertiesAnimPart.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings37);
            var aCEDatabaseModelsWorldWeeniePropertiesAnimPartTableBase = new TableBase("ACE.Database.Models.World.WeeniePropertiesAnimPart", null, relationalModel);
            var animation_IdColumnBase = new ColumnBase<ColumnMappingBase>("animation_Id", "int unsigned", aCEDatabaseModelsWorldWeeniePropertiesAnimPartTableBase);
            aCEDatabaseModelsWorldWeeniePropertiesAnimPartTableBase.Columns.Add("animation_Id", animation_IdColumnBase);
            var idColumnBase29 = new ColumnBase<ColumnMappingBase>("id", "int unsigned", aCEDatabaseModelsWorldWeeniePropertiesAnimPartTableBase);
            aCEDatabaseModelsWorldWeeniePropertiesAnimPartTableBase.Columns.Add("id", idColumnBase29);
            var indexColumnBase12 = new ColumnBase<ColumnMappingBase>("index", "tinyint unsigned", aCEDatabaseModelsWorldWeeniePropertiesAnimPartTableBase);
            aCEDatabaseModelsWorldWeeniePropertiesAnimPartTableBase.Columns.Add("index", indexColumnBase12);
            var object_IdColumnBase = new ColumnBase<ColumnMappingBase>("object_Id", "int unsigned", aCEDatabaseModelsWorldWeeniePropertiesAnimPartTableBase);
            aCEDatabaseModelsWorldWeeniePropertiesAnimPartTableBase.Columns.Add("object_Id", object_IdColumnBase);
            relationalModel.DefaultTables.Add("ACE.Database.Models.World.WeeniePropertiesAnimPart", aCEDatabaseModelsWorldWeeniePropertiesAnimPartTableBase);
            var aCEDatabaseModelsWorldWeeniePropertiesAnimPartMappingBase = new TableMappingBase<ColumnMappingBase>(weeniePropertiesAnimPart, aCEDatabaseModelsWorldWeeniePropertiesAnimPartTableBase, true);
            aCEDatabaseModelsWorldWeeniePropertiesAnimPartTableBase.AddTypeMapping(aCEDatabaseModelsWorldWeeniePropertiesAnimPartMappingBase, false);
            defaultTableMappings37.Add(aCEDatabaseModelsWorldWeeniePropertiesAnimPartMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase29, weeniePropertiesAnimPart.FindProperty("Id")!, aCEDatabaseModelsWorldWeeniePropertiesAnimPartMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)animation_IdColumnBase, weeniePropertiesAnimPart.FindProperty("AnimationId")!, aCEDatabaseModelsWorldWeeniePropertiesAnimPartMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)indexColumnBase12, weeniePropertiesAnimPart.FindProperty("Index")!, aCEDatabaseModelsWorldWeeniePropertiesAnimPartMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)object_IdColumnBase, weeniePropertiesAnimPart.FindProperty("ObjectId")!, aCEDatabaseModelsWorldWeeniePropertiesAnimPartMappingBase);

            var tableMappings37 = new List<TableMapping>();
            weeniePropertiesAnimPart.SetRuntimeAnnotation("Relational:TableMappings", tableMappings37);
            var weenie_properties_anim_partTable = new Table("weenie_properties_anim_part", null, relationalModel);
            var idColumn29 = new Column("id", "int unsigned", weenie_properties_anim_partTable);
            weenie_properties_anim_partTable.Columns.Add("id", idColumn29);
            var animation_IdColumn = new Column("animation_Id", "int unsigned", weenie_properties_anim_partTable);
            weenie_properties_anim_partTable.Columns.Add("animation_Id", animation_IdColumn);
            var indexColumn12 = new Column("index", "tinyint unsigned", weenie_properties_anim_partTable);
            weenie_properties_anim_partTable.Columns.Add("index", indexColumn12);
            var object_IdColumn = new Column("object_Id", "int unsigned", weenie_properties_anim_partTable);
            weenie_properties_anim_partTable.Columns.Add("object_Id", object_IdColumn);
            var pK_weenie_properties_anim_part = new UniqueConstraint("PK_weenie_properties_anim_part", weenie_properties_anim_partTable, new[] { idColumn29 });
            weenie_properties_anim_partTable.PrimaryKey = pK_weenie_properties_anim_part;
            var pK_weenie_properties_anim_partUc = RelationalModel.GetKey(this,
                "ACE.Database.Models.World.WeeniePropertiesAnimPart",
                new[] { "Id" });
            pK_weenie_properties_anim_part.MappedKeys.Add(pK_weenie_properties_anim_partUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_weenie_properties_anim_partUc).Add(pK_weenie_properties_anim_part);
            weenie_properties_anim_partTable.UniqueConstraints.Add("PK_weenie_properties_anim_part", pK_weenie_properties_anim_part);
            var object_Id_index_uidx = new TableIndex(
            "object_Id_index_uidx", weenie_properties_anim_partTable, new[] { object_IdColumn, indexColumn12 }, true);
            var object_Id_index_uidxIx = RelationalModel.GetIndex(this,
                "ACE.Database.Models.World.WeeniePropertiesAnimPart",
                "object_Id_index_uidx");
            object_Id_index_uidx.MappedIndexes.Add(object_Id_index_uidxIx);
            RelationalModel.GetOrCreateTableIndexes(object_Id_index_uidxIx).Add(object_Id_index_uidx);
            weenie_properties_anim_partTable.Indexes.Add("object_Id_index_uidx", object_Id_index_uidx);
            relationalModel.Tables.Add(("weenie_properties_anim_part", null), weenie_properties_anim_partTable);
            var weenie_properties_anim_partTableMapping = new TableMapping(weeniePropertiesAnimPart, weenie_properties_anim_partTable, true);
            weenie_properties_anim_partTable.AddTypeMapping(weenie_properties_anim_partTableMapping, false);
            tableMappings37.Add(weenie_properties_anim_partTableMapping);
            RelationalModel.CreateColumnMapping(idColumn29, weeniePropertiesAnimPart.FindProperty("Id")!, weenie_properties_anim_partTableMapping);
            RelationalModel.CreateColumnMapping(animation_IdColumn, weeniePropertiesAnimPart.FindProperty("AnimationId")!, weenie_properties_anim_partTableMapping);
            RelationalModel.CreateColumnMapping(indexColumn12, weeniePropertiesAnimPart.FindProperty("Index")!, weenie_properties_anim_partTableMapping);
            RelationalModel.CreateColumnMapping(object_IdColumn, weeniePropertiesAnimPart.FindProperty("ObjectId")!, weenie_properties_anim_partTableMapping);

            var weeniePropertiesAttribute = FindEntityType("ACE.Database.Models.World.WeeniePropertiesAttribute")!;

            var defaultTableMappings38 = new List<TableMappingBase<ColumnMappingBase>>();
            weeniePropertiesAttribute.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings38);
            var aCEDatabaseModelsWorldWeeniePropertiesAttributeTableBase = new TableBase("ACE.Database.Models.World.WeeniePropertiesAttribute", null, relationalModel);
            var c_P_SpentColumnBase = new ColumnBase<ColumnMappingBase>("c_P_Spent", "int unsigned", aCEDatabaseModelsWorldWeeniePropertiesAttributeTableBase);
            aCEDatabaseModelsWorldWeeniePropertiesAttributeTableBase.Columns.Add("c_P_Spent", c_P_SpentColumnBase);
            var idColumnBase30 = new ColumnBase<ColumnMappingBase>("id", "int unsigned", aCEDatabaseModelsWorldWeeniePropertiesAttributeTableBase);
            aCEDatabaseModelsWorldWeeniePropertiesAttributeTableBase.Columns.Add("id", idColumnBase30);
            var init_LevelColumnBase = new ColumnBase<ColumnMappingBase>("init_Level", "int unsigned", aCEDatabaseModelsWorldWeeniePropertiesAttributeTableBase);
            aCEDatabaseModelsWorldWeeniePropertiesAttributeTableBase.Columns.Add("init_Level", init_LevelColumnBase);
            var level_From_C_PColumnBase = new ColumnBase<ColumnMappingBase>("level_From_C_P", "int unsigned", aCEDatabaseModelsWorldWeeniePropertiesAttributeTableBase);
            aCEDatabaseModelsWorldWeeniePropertiesAttributeTableBase.Columns.Add("level_From_C_P", level_From_C_PColumnBase);
            var object_IdColumnBase0 = new ColumnBase<ColumnMappingBase>("object_Id", "int unsigned", aCEDatabaseModelsWorldWeeniePropertiesAttributeTableBase);
            aCEDatabaseModelsWorldWeeniePropertiesAttributeTableBase.Columns.Add("object_Id", object_IdColumnBase0);
            var typeColumnBase6 = new ColumnBase<ColumnMappingBase>("type", "smallint unsigned", aCEDatabaseModelsWorldWeeniePropertiesAttributeTableBase);
            aCEDatabaseModelsWorldWeeniePropertiesAttributeTableBase.Columns.Add("type", typeColumnBase6);
            relationalModel.DefaultTables.Add("ACE.Database.Models.World.WeeniePropertiesAttribute", aCEDatabaseModelsWorldWeeniePropertiesAttributeTableBase);
            var aCEDatabaseModelsWorldWeeniePropertiesAttributeMappingBase = new TableMappingBase<ColumnMappingBase>(weeniePropertiesAttribute, aCEDatabaseModelsWorldWeeniePropertiesAttributeTableBase, true);
            aCEDatabaseModelsWorldWeeniePropertiesAttributeTableBase.AddTypeMapping(aCEDatabaseModelsWorldWeeniePropertiesAttributeMappingBase, false);
            defaultTableMappings38.Add(aCEDatabaseModelsWorldWeeniePropertiesAttributeMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase30, weeniePropertiesAttribute.FindProperty("Id")!, aCEDatabaseModelsWorldWeeniePropertiesAttributeMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)c_P_SpentColumnBase, weeniePropertiesAttribute.FindProperty("CPSpent")!, aCEDatabaseModelsWorldWeeniePropertiesAttributeMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)init_LevelColumnBase, weeniePropertiesAttribute.FindProperty("InitLevel")!, aCEDatabaseModelsWorldWeeniePropertiesAttributeMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)level_From_C_PColumnBase, weeniePropertiesAttribute.FindProperty("LevelFromCP")!, aCEDatabaseModelsWorldWeeniePropertiesAttributeMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)object_IdColumnBase0, weeniePropertiesAttribute.FindProperty("ObjectId")!, aCEDatabaseModelsWorldWeeniePropertiesAttributeMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)typeColumnBase6, weeniePropertiesAttribute.FindProperty("Type")!, aCEDatabaseModelsWorldWeeniePropertiesAttributeMappingBase);

            var tableMappings38 = new List<TableMapping>();
            weeniePropertiesAttribute.SetRuntimeAnnotation("Relational:TableMappings", tableMappings38);
            var weenie_properties_attributeTable = new Table("weenie_properties_attribute", null, relationalModel);
            var idColumn30 = new Column("id", "int unsigned", weenie_properties_attributeTable);
            weenie_properties_attributeTable.Columns.Add("id", idColumn30);
            var c_P_SpentColumn = new Column("c_P_Spent", "int unsigned", weenie_properties_attributeTable);
            weenie_properties_attributeTable.Columns.Add("c_P_Spent", c_P_SpentColumn);
            var init_LevelColumn = new Column("init_Level", "int unsigned", weenie_properties_attributeTable);
            weenie_properties_attributeTable.Columns.Add("init_Level", init_LevelColumn);
            var level_From_C_PColumn = new Column("level_From_C_P", "int unsigned", weenie_properties_attributeTable);
            weenie_properties_attributeTable.Columns.Add("level_From_C_P", level_From_C_PColumn);
            var object_IdColumn0 = new Column("object_Id", "int unsigned", weenie_properties_attributeTable);
            weenie_properties_attributeTable.Columns.Add("object_Id", object_IdColumn0);
            var typeColumn6 = new Column("type", "smallint unsigned", weenie_properties_attributeTable);
            weenie_properties_attributeTable.Columns.Add("type", typeColumn6);
            var pK_weenie_properties_attribute = new UniqueConstraint("PK_weenie_properties_attribute", weenie_properties_attributeTable, new[] { idColumn30 });
            weenie_properties_attributeTable.PrimaryKey = pK_weenie_properties_attribute;
            var pK_weenie_properties_attributeUc = RelationalModel.GetKey(this,
                "ACE.Database.Models.World.WeeniePropertiesAttribute",
                new[] { "Id" });
            pK_weenie_properties_attribute.MappedKeys.Add(pK_weenie_properties_attributeUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_weenie_properties_attributeUc).Add(pK_weenie_properties_attribute);
            weenie_properties_attributeTable.UniqueConstraints.Add("PK_weenie_properties_attribute", pK_weenie_properties_attribute);
            var wcid_attribute_type_uidx = new TableIndex(
            "wcid_attribute_type_uidx", weenie_properties_attributeTable, new[] { object_IdColumn0, typeColumn6 }, true);
            var wcid_attribute_type_uidxIx = RelationalModel.GetIndex(this,
                "ACE.Database.Models.World.WeeniePropertiesAttribute",
                "wcid_attribute_type_uidx");
            wcid_attribute_type_uidx.MappedIndexes.Add(wcid_attribute_type_uidxIx);
            RelationalModel.GetOrCreateTableIndexes(wcid_attribute_type_uidxIx).Add(wcid_attribute_type_uidx);
            weenie_properties_attributeTable.Indexes.Add("wcid_attribute_type_uidx", wcid_attribute_type_uidx);
            relationalModel.Tables.Add(("weenie_properties_attribute", null), weenie_properties_attributeTable);
            var weenie_properties_attributeTableMapping = new TableMapping(weeniePropertiesAttribute, weenie_properties_attributeTable, true);
            weenie_properties_attributeTable.AddTypeMapping(weenie_properties_attributeTableMapping, false);
            tableMappings38.Add(weenie_properties_attributeTableMapping);
            RelationalModel.CreateColumnMapping(idColumn30, weeniePropertiesAttribute.FindProperty("Id")!, weenie_properties_attributeTableMapping);
            RelationalModel.CreateColumnMapping(c_P_SpentColumn, weeniePropertiesAttribute.FindProperty("CPSpent")!, weenie_properties_attributeTableMapping);
            RelationalModel.CreateColumnMapping(init_LevelColumn, weeniePropertiesAttribute.FindProperty("InitLevel")!, weenie_properties_attributeTableMapping);
            RelationalModel.CreateColumnMapping(level_From_C_PColumn, weeniePropertiesAttribute.FindProperty("LevelFromCP")!, weenie_properties_attributeTableMapping);
            RelationalModel.CreateColumnMapping(object_IdColumn0, weeniePropertiesAttribute.FindProperty("ObjectId")!, weenie_properties_attributeTableMapping);
            RelationalModel.CreateColumnMapping(typeColumn6, weeniePropertiesAttribute.FindProperty("Type")!, weenie_properties_attributeTableMapping);

            var weeniePropertiesAttribute2nd = FindEntityType("ACE.Database.Models.World.WeeniePropertiesAttribute2nd")!;

            var defaultTableMappings39 = new List<TableMappingBase<ColumnMappingBase>>();
            weeniePropertiesAttribute2nd.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings39);
            var aCEDatabaseModelsWorldWeeniePropertiesAttribute2ndTableBase = new TableBase("ACE.Database.Models.World.WeeniePropertiesAttribute2nd", null, relationalModel);
            var c_P_SpentColumnBase0 = new ColumnBase<ColumnMappingBase>("c_P_Spent", "int unsigned", aCEDatabaseModelsWorldWeeniePropertiesAttribute2ndTableBase);
            aCEDatabaseModelsWorldWeeniePropertiesAttribute2ndTableBase.Columns.Add("c_P_Spent", c_P_SpentColumnBase0);
            var current_LevelColumnBase = new ColumnBase<ColumnMappingBase>("current_Level", "int unsigned", aCEDatabaseModelsWorldWeeniePropertiesAttribute2ndTableBase);
            aCEDatabaseModelsWorldWeeniePropertiesAttribute2ndTableBase.Columns.Add("current_Level", current_LevelColumnBase);
            var idColumnBase31 = new ColumnBase<ColumnMappingBase>("id", "int unsigned", aCEDatabaseModelsWorldWeeniePropertiesAttribute2ndTableBase);
            aCEDatabaseModelsWorldWeeniePropertiesAttribute2ndTableBase.Columns.Add("id", idColumnBase31);
            var init_LevelColumnBase0 = new ColumnBase<ColumnMappingBase>("init_Level", "int unsigned", aCEDatabaseModelsWorldWeeniePropertiesAttribute2ndTableBase);
            aCEDatabaseModelsWorldWeeniePropertiesAttribute2ndTableBase.Columns.Add("init_Level", init_LevelColumnBase0);
            var level_From_C_PColumnBase0 = new ColumnBase<ColumnMappingBase>("level_From_C_P", "int unsigned", aCEDatabaseModelsWorldWeeniePropertiesAttribute2ndTableBase);
            aCEDatabaseModelsWorldWeeniePropertiesAttribute2ndTableBase.Columns.Add("level_From_C_P", level_From_C_PColumnBase0);
            var object_IdColumnBase1 = new ColumnBase<ColumnMappingBase>("object_Id", "int unsigned", aCEDatabaseModelsWorldWeeniePropertiesAttribute2ndTableBase);
            aCEDatabaseModelsWorldWeeniePropertiesAttribute2ndTableBase.Columns.Add("object_Id", object_IdColumnBase1);
            var typeColumnBase7 = new ColumnBase<ColumnMappingBase>("type", "smallint unsigned", aCEDatabaseModelsWorldWeeniePropertiesAttribute2ndTableBase);
            aCEDatabaseModelsWorldWeeniePropertiesAttribute2ndTableBase.Columns.Add("type", typeColumnBase7);
            relationalModel.DefaultTables.Add("ACE.Database.Models.World.WeeniePropertiesAttribute2nd", aCEDatabaseModelsWorldWeeniePropertiesAttribute2ndTableBase);
            var aCEDatabaseModelsWorldWeeniePropertiesAttribute2ndMappingBase = new TableMappingBase<ColumnMappingBase>(weeniePropertiesAttribute2nd, aCEDatabaseModelsWorldWeeniePropertiesAttribute2ndTableBase, true);
            aCEDatabaseModelsWorldWeeniePropertiesAttribute2ndTableBase.AddTypeMapping(aCEDatabaseModelsWorldWeeniePropertiesAttribute2ndMappingBase, false);
            defaultTableMappings39.Add(aCEDatabaseModelsWorldWeeniePropertiesAttribute2ndMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase31, weeniePropertiesAttribute2nd.FindProperty("Id")!, aCEDatabaseModelsWorldWeeniePropertiesAttribute2ndMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)c_P_SpentColumnBase0, weeniePropertiesAttribute2nd.FindProperty("CPSpent")!, aCEDatabaseModelsWorldWeeniePropertiesAttribute2ndMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)current_LevelColumnBase, weeniePropertiesAttribute2nd.FindProperty("CurrentLevel")!, aCEDatabaseModelsWorldWeeniePropertiesAttribute2ndMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)init_LevelColumnBase0, weeniePropertiesAttribute2nd.FindProperty("InitLevel")!, aCEDatabaseModelsWorldWeeniePropertiesAttribute2ndMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)level_From_C_PColumnBase0, weeniePropertiesAttribute2nd.FindProperty("LevelFromCP")!, aCEDatabaseModelsWorldWeeniePropertiesAttribute2ndMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)object_IdColumnBase1, weeniePropertiesAttribute2nd.FindProperty("ObjectId")!, aCEDatabaseModelsWorldWeeniePropertiesAttribute2ndMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)typeColumnBase7, weeniePropertiesAttribute2nd.FindProperty("Type")!, aCEDatabaseModelsWorldWeeniePropertiesAttribute2ndMappingBase);

            var tableMappings39 = new List<TableMapping>();
            weeniePropertiesAttribute2nd.SetRuntimeAnnotation("Relational:TableMappings", tableMappings39);
            var weenie_properties_attribute_2ndTable = new Table("weenie_properties_attribute_2nd", null, relationalModel);
            var idColumn31 = new Column("id", "int unsigned", weenie_properties_attribute_2ndTable);
            weenie_properties_attribute_2ndTable.Columns.Add("id", idColumn31);
            var c_P_SpentColumn0 = new Column("c_P_Spent", "int unsigned", weenie_properties_attribute_2ndTable);
            weenie_properties_attribute_2ndTable.Columns.Add("c_P_Spent", c_P_SpentColumn0);
            var current_LevelColumn = new Column("current_Level", "int unsigned", weenie_properties_attribute_2ndTable);
            weenie_properties_attribute_2ndTable.Columns.Add("current_Level", current_LevelColumn);
            var init_LevelColumn0 = new Column("init_Level", "int unsigned", weenie_properties_attribute_2ndTable);
            weenie_properties_attribute_2ndTable.Columns.Add("init_Level", init_LevelColumn0);
            var level_From_C_PColumn0 = new Column("level_From_C_P", "int unsigned", weenie_properties_attribute_2ndTable);
            weenie_properties_attribute_2ndTable.Columns.Add("level_From_C_P", level_From_C_PColumn0);
            var object_IdColumn1 = new Column("object_Id", "int unsigned", weenie_properties_attribute_2ndTable);
            weenie_properties_attribute_2ndTable.Columns.Add("object_Id", object_IdColumn1);
            var typeColumn7 = new Column("type", "smallint unsigned", weenie_properties_attribute_2ndTable);
            weenie_properties_attribute_2ndTable.Columns.Add("type", typeColumn7);
            var pK_weenie_properties_attribute_2nd = new UniqueConstraint("PK_weenie_properties_attribute_2nd", weenie_properties_attribute_2ndTable, new[] { idColumn31 });
            weenie_properties_attribute_2ndTable.PrimaryKey = pK_weenie_properties_attribute_2nd;
            var pK_weenie_properties_attribute_2ndUc = RelationalModel.GetKey(this,
                "ACE.Database.Models.World.WeeniePropertiesAttribute2nd",
                new[] { "Id" });
            pK_weenie_properties_attribute_2nd.MappedKeys.Add(pK_weenie_properties_attribute_2ndUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_weenie_properties_attribute_2ndUc).Add(pK_weenie_properties_attribute_2nd);
            weenie_properties_attribute_2ndTable.UniqueConstraints.Add("PK_weenie_properties_attribute_2nd", pK_weenie_properties_attribute_2nd);
            var wcid_attribute2nd_type_uidx = new TableIndex(
            "wcid_attribute2nd_type_uidx", weenie_properties_attribute_2ndTable, new[] { object_IdColumn1, typeColumn7 }, true);
            var wcid_attribute2nd_type_uidxIx = RelationalModel.GetIndex(this,
                "ACE.Database.Models.World.WeeniePropertiesAttribute2nd",
                "wcid_attribute2nd_type_uidx");
            wcid_attribute2nd_type_uidx.MappedIndexes.Add(wcid_attribute2nd_type_uidxIx);
            RelationalModel.GetOrCreateTableIndexes(wcid_attribute2nd_type_uidxIx).Add(wcid_attribute2nd_type_uidx);
            weenie_properties_attribute_2ndTable.Indexes.Add("wcid_attribute2nd_type_uidx", wcid_attribute2nd_type_uidx);
            relationalModel.Tables.Add(("weenie_properties_attribute_2nd", null), weenie_properties_attribute_2ndTable);
            var weenie_properties_attribute_2ndTableMapping = new TableMapping(weeniePropertiesAttribute2nd, weenie_properties_attribute_2ndTable, true);
            weenie_properties_attribute_2ndTable.AddTypeMapping(weenie_properties_attribute_2ndTableMapping, false);
            tableMappings39.Add(weenie_properties_attribute_2ndTableMapping);
            RelationalModel.CreateColumnMapping(idColumn31, weeniePropertiesAttribute2nd.FindProperty("Id")!, weenie_properties_attribute_2ndTableMapping);
            RelationalModel.CreateColumnMapping(c_P_SpentColumn0, weeniePropertiesAttribute2nd.FindProperty("CPSpent")!, weenie_properties_attribute_2ndTableMapping);
            RelationalModel.CreateColumnMapping(current_LevelColumn, weeniePropertiesAttribute2nd.FindProperty("CurrentLevel")!, weenie_properties_attribute_2ndTableMapping);
            RelationalModel.CreateColumnMapping(init_LevelColumn0, weeniePropertiesAttribute2nd.FindProperty("InitLevel")!, weenie_properties_attribute_2ndTableMapping);
            RelationalModel.CreateColumnMapping(level_From_C_PColumn0, weeniePropertiesAttribute2nd.FindProperty("LevelFromCP")!, weenie_properties_attribute_2ndTableMapping);
            RelationalModel.CreateColumnMapping(object_IdColumn1, weeniePropertiesAttribute2nd.FindProperty("ObjectId")!, weenie_properties_attribute_2ndTableMapping);
            RelationalModel.CreateColumnMapping(typeColumn7, weeniePropertiesAttribute2nd.FindProperty("Type")!, weenie_properties_attribute_2ndTableMapping);

            var weeniePropertiesBodyPart = FindEntityType("ACE.Database.Models.World.WeeniePropertiesBodyPart")!;

            var defaultTableMappings40 = new List<TableMappingBase<ColumnMappingBase>>();
            weeniePropertiesBodyPart.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings40);
            var aCEDatabaseModelsWorldWeeniePropertiesBodyPartTableBase = new TableBase("ACE.Database.Models.World.WeeniePropertiesBodyPart", null, relationalModel);
            var armor_Vs_AcidColumnBase = new ColumnBase<ColumnMappingBase>("armor_Vs_Acid", "int", aCEDatabaseModelsWorldWeeniePropertiesBodyPartTableBase);
            aCEDatabaseModelsWorldWeeniePropertiesBodyPartTableBase.Columns.Add("armor_Vs_Acid", armor_Vs_AcidColumnBase);
            var armor_Vs_BludgeonColumnBase = new ColumnBase<ColumnMappingBase>("armor_Vs_Bludgeon", "int", aCEDatabaseModelsWorldWeeniePropertiesBodyPartTableBase);
            aCEDatabaseModelsWorldWeeniePropertiesBodyPartTableBase.Columns.Add("armor_Vs_Bludgeon", armor_Vs_BludgeonColumnBase);
            var armor_Vs_ColdColumnBase = new ColumnBase<ColumnMappingBase>("armor_Vs_Cold", "int", aCEDatabaseModelsWorldWeeniePropertiesBodyPartTableBase);
            aCEDatabaseModelsWorldWeeniePropertiesBodyPartTableBase.Columns.Add("armor_Vs_Cold", armor_Vs_ColdColumnBase);
            var armor_Vs_ElectricColumnBase = new ColumnBase<ColumnMappingBase>("armor_Vs_Electric", "int", aCEDatabaseModelsWorldWeeniePropertiesBodyPartTableBase);
            aCEDatabaseModelsWorldWeeniePropertiesBodyPartTableBase.Columns.Add("armor_Vs_Electric", armor_Vs_ElectricColumnBase);
            var armor_Vs_FireColumnBase = new ColumnBase<ColumnMappingBase>("armor_Vs_Fire", "int", aCEDatabaseModelsWorldWeeniePropertiesBodyPartTableBase);
            aCEDatabaseModelsWorldWeeniePropertiesBodyPartTableBase.Columns.Add("armor_Vs_Fire", armor_Vs_FireColumnBase);
            var armor_Vs_NetherColumnBase = new ColumnBase<ColumnMappingBase>("armor_Vs_Nether", "int", aCEDatabaseModelsWorldWeeniePropertiesBodyPartTableBase);
            aCEDatabaseModelsWorldWeeniePropertiesBodyPartTableBase.Columns.Add("armor_Vs_Nether", armor_Vs_NetherColumnBase);
            var armor_Vs_PierceColumnBase = new ColumnBase<ColumnMappingBase>("armor_Vs_Pierce", "int", aCEDatabaseModelsWorldWeeniePropertiesBodyPartTableBase);
            aCEDatabaseModelsWorldWeeniePropertiesBodyPartTableBase.Columns.Add("armor_Vs_Pierce", armor_Vs_PierceColumnBase);
            var armor_Vs_SlashColumnBase = new ColumnBase<ColumnMappingBase>("armor_Vs_Slash", "int", aCEDatabaseModelsWorldWeeniePropertiesBodyPartTableBase);
            aCEDatabaseModelsWorldWeeniePropertiesBodyPartTableBase.Columns.Add("armor_Vs_Slash", armor_Vs_SlashColumnBase);
            var b_hColumnBase = new ColumnBase<ColumnMappingBase>("b_h", "int", aCEDatabaseModelsWorldWeeniePropertiesBodyPartTableBase);
            aCEDatabaseModelsWorldWeeniePropertiesBodyPartTableBase.Columns.Add("b_h", b_hColumnBase);
            var base_ArmorColumnBase = new ColumnBase<ColumnMappingBase>("base_Armor", "int", aCEDatabaseModelsWorldWeeniePropertiesBodyPartTableBase);
            aCEDatabaseModelsWorldWeeniePropertiesBodyPartTableBase.Columns.Add("base_Armor", base_ArmorColumnBase);
            var d_TypeColumnBase = new ColumnBase<ColumnMappingBase>("d_Type", "int", aCEDatabaseModelsWorldWeeniePropertiesBodyPartTableBase);
            aCEDatabaseModelsWorldWeeniePropertiesBodyPartTableBase.Columns.Add("d_Type", d_TypeColumnBase);
            var d_ValColumnBase = new ColumnBase<ColumnMappingBase>("d_Val", "int", aCEDatabaseModelsWorldWeeniePropertiesBodyPartTableBase);
            aCEDatabaseModelsWorldWeeniePropertiesBodyPartTableBase.Columns.Add("d_Val", d_ValColumnBase);
            var d_VarColumnBase = new ColumnBase<ColumnMappingBase>("d_Var", "float", aCEDatabaseModelsWorldWeeniePropertiesBodyPartTableBase);
            aCEDatabaseModelsWorldWeeniePropertiesBodyPartTableBase.Columns.Add("d_Var", d_VarColumnBase);
            var h_l_bColumnBase = new ColumnBase<ColumnMappingBase>("h_l_b", "float", aCEDatabaseModelsWorldWeeniePropertiesBodyPartTableBase);
            aCEDatabaseModelsWorldWeeniePropertiesBodyPartTableBase.Columns.Add("h_l_b", h_l_bColumnBase);
            var h_l_fColumnBase = new ColumnBase<ColumnMappingBase>("h_l_f", "float", aCEDatabaseModelsWorldWeeniePropertiesBodyPartTableBase);
            aCEDatabaseModelsWorldWeeniePropertiesBodyPartTableBase.Columns.Add("h_l_f", h_l_fColumnBase);
            var h_r_bColumnBase = new ColumnBase<ColumnMappingBase>("h_r_b", "float", aCEDatabaseModelsWorldWeeniePropertiesBodyPartTableBase);
            aCEDatabaseModelsWorldWeeniePropertiesBodyPartTableBase.Columns.Add("h_r_b", h_r_bColumnBase);
            var h_r_fColumnBase = new ColumnBase<ColumnMappingBase>("h_r_f", "float", aCEDatabaseModelsWorldWeeniePropertiesBodyPartTableBase);
            aCEDatabaseModelsWorldWeeniePropertiesBodyPartTableBase.Columns.Add("h_r_f", h_r_fColumnBase);
            var idColumnBase32 = new ColumnBase<ColumnMappingBase>("id", "int unsigned", aCEDatabaseModelsWorldWeeniePropertiesBodyPartTableBase);
            aCEDatabaseModelsWorldWeeniePropertiesBodyPartTableBase.Columns.Add("id", idColumnBase32);
            var keyColumnBase = new ColumnBase<ColumnMappingBase>("key", "smallint unsigned", aCEDatabaseModelsWorldWeeniePropertiesBodyPartTableBase);
            aCEDatabaseModelsWorldWeeniePropertiesBodyPartTableBase.Columns.Add("key", keyColumnBase);
            var l_l_bColumnBase = new ColumnBase<ColumnMappingBase>("l_l_b", "float", aCEDatabaseModelsWorldWeeniePropertiesBodyPartTableBase);
            aCEDatabaseModelsWorldWeeniePropertiesBodyPartTableBase.Columns.Add("l_l_b", l_l_bColumnBase);
            var l_l_fColumnBase = new ColumnBase<ColumnMappingBase>("l_l_f", "float", aCEDatabaseModelsWorldWeeniePropertiesBodyPartTableBase);
            aCEDatabaseModelsWorldWeeniePropertiesBodyPartTableBase.Columns.Add("l_l_f", l_l_fColumnBase);
            var l_r_bColumnBase = new ColumnBase<ColumnMappingBase>("l_r_b", "float", aCEDatabaseModelsWorldWeeniePropertiesBodyPartTableBase);
            aCEDatabaseModelsWorldWeeniePropertiesBodyPartTableBase.Columns.Add("l_r_b", l_r_bColumnBase);
            var l_r_fColumnBase = new ColumnBase<ColumnMappingBase>("l_r_f", "float", aCEDatabaseModelsWorldWeeniePropertiesBodyPartTableBase);
            aCEDatabaseModelsWorldWeeniePropertiesBodyPartTableBase.Columns.Add("l_r_f", l_r_fColumnBase);
            var m_l_bColumnBase = new ColumnBase<ColumnMappingBase>("m_l_b", "float", aCEDatabaseModelsWorldWeeniePropertiesBodyPartTableBase);
            aCEDatabaseModelsWorldWeeniePropertiesBodyPartTableBase.Columns.Add("m_l_b", m_l_bColumnBase);
            var m_l_fColumnBase = new ColumnBase<ColumnMappingBase>("m_l_f", "float", aCEDatabaseModelsWorldWeeniePropertiesBodyPartTableBase);
            aCEDatabaseModelsWorldWeeniePropertiesBodyPartTableBase.Columns.Add("m_l_f", m_l_fColumnBase);
            var m_r_bColumnBase = new ColumnBase<ColumnMappingBase>("m_r_b", "float", aCEDatabaseModelsWorldWeeniePropertiesBodyPartTableBase);
            aCEDatabaseModelsWorldWeeniePropertiesBodyPartTableBase.Columns.Add("m_r_b", m_r_bColumnBase);
            var m_r_fColumnBase = new ColumnBase<ColumnMappingBase>("m_r_f", "float", aCEDatabaseModelsWorldWeeniePropertiesBodyPartTableBase);
            aCEDatabaseModelsWorldWeeniePropertiesBodyPartTableBase.Columns.Add("m_r_f", m_r_fColumnBase);
            var object_IdColumnBase2 = new ColumnBase<ColumnMappingBase>("object_Id", "int unsigned", aCEDatabaseModelsWorldWeeniePropertiesBodyPartTableBase);
            aCEDatabaseModelsWorldWeeniePropertiesBodyPartTableBase.Columns.Add("object_Id", object_IdColumnBase2);
            relationalModel.DefaultTables.Add("ACE.Database.Models.World.WeeniePropertiesBodyPart", aCEDatabaseModelsWorldWeeniePropertiesBodyPartTableBase);
            var aCEDatabaseModelsWorldWeeniePropertiesBodyPartMappingBase = new TableMappingBase<ColumnMappingBase>(weeniePropertiesBodyPart, aCEDatabaseModelsWorldWeeniePropertiesBodyPartTableBase, true);
            aCEDatabaseModelsWorldWeeniePropertiesBodyPartTableBase.AddTypeMapping(aCEDatabaseModelsWorldWeeniePropertiesBodyPartMappingBase, false);
            defaultTableMappings40.Add(aCEDatabaseModelsWorldWeeniePropertiesBodyPartMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase32, weeniePropertiesBodyPart.FindProperty("Id")!, aCEDatabaseModelsWorldWeeniePropertiesBodyPartMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)armor_Vs_AcidColumnBase, weeniePropertiesBodyPart.FindProperty("ArmorVsAcid")!, aCEDatabaseModelsWorldWeeniePropertiesBodyPartMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)armor_Vs_BludgeonColumnBase, weeniePropertiesBodyPart.FindProperty("ArmorVsBludgeon")!, aCEDatabaseModelsWorldWeeniePropertiesBodyPartMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)armor_Vs_ColdColumnBase, weeniePropertiesBodyPart.FindProperty("ArmorVsCold")!, aCEDatabaseModelsWorldWeeniePropertiesBodyPartMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)armor_Vs_ElectricColumnBase, weeniePropertiesBodyPart.FindProperty("ArmorVsElectric")!, aCEDatabaseModelsWorldWeeniePropertiesBodyPartMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)armor_Vs_FireColumnBase, weeniePropertiesBodyPart.FindProperty("ArmorVsFire")!, aCEDatabaseModelsWorldWeeniePropertiesBodyPartMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)armor_Vs_NetherColumnBase, weeniePropertiesBodyPart.FindProperty("ArmorVsNether")!, aCEDatabaseModelsWorldWeeniePropertiesBodyPartMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)armor_Vs_PierceColumnBase, weeniePropertiesBodyPart.FindProperty("ArmorVsPierce")!, aCEDatabaseModelsWorldWeeniePropertiesBodyPartMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)armor_Vs_SlashColumnBase, weeniePropertiesBodyPart.FindProperty("ArmorVsSlash")!, aCEDatabaseModelsWorldWeeniePropertiesBodyPartMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)b_hColumnBase, weeniePropertiesBodyPart.FindProperty("BH")!, aCEDatabaseModelsWorldWeeniePropertiesBodyPartMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)base_ArmorColumnBase, weeniePropertiesBodyPart.FindProperty("BaseArmor")!, aCEDatabaseModelsWorldWeeniePropertiesBodyPartMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)d_TypeColumnBase, weeniePropertiesBodyPart.FindProperty("DType")!, aCEDatabaseModelsWorldWeeniePropertiesBodyPartMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)d_ValColumnBase, weeniePropertiesBodyPart.FindProperty("DVal")!, aCEDatabaseModelsWorldWeeniePropertiesBodyPartMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)d_VarColumnBase, weeniePropertiesBodyPart.FindProperty("DVar")!, aCEDatabaseModelsWorldWeeniePropertiesBodyPartMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)h_l_bColumnBase, weeniePropertiesBodyPart.FindProperty("HLB")!, aCEDatabaseModelsWorldWeeniePropertiesBodyPartMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)h_l_fColumnBase, weeniePropertiesBodyPart.FindProperty("HLF")!, aCEDatabaseModelsWorldWeeniePropertiesBodyPartMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)h_r_bColumnBase, weeniePropertiesBodyPart.FindProperty("HRB")!, aCEDatabaseModelsWorldWeeniePropertiesBodyPartMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)h_r_fColumnBase, weeniePropertiesBodyPart.FindProperty("HRF")!, aCEDatabaseModelsWorldWeeniePropertiesBodyPartMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)keyColumnBase, weeniePropertiesBodyPart.FindProperty("Key")!, aCEDatabaseModelsWorldWeeniePropertiesBodyPartMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)l_l_bColumnBase, weeniePropertiesBodyPart.FindProperty("LLB")!, aCEDatabaseModelsWorldWeeniePropertiesBodyPartMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)l_l_fColumnBase, weeniePropertiesBodyPart.FindProperty("LLF")!, aCEDatabaseModelsWorldWeeniePropertiesBodyPartMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)l_r_bColumnBase, weeniePropertiesBodyPart.FindProperty("LRB")!, aCEDatabaseModelsWorldWeeniePropertiesBodyPartMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)l_r_fColumnBase, weeniePropertiesBodyPart.FindProperty("LRF")!, aCEDatabaseModelsWorldWeeniePropertiesBodyPartMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)m_l_bColumnBase, weeniePropertiesBodyPart.FindProperty("MLB")!, aCEDatabaseModelsWorldWeeniePropertiesBodyPartMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)m_l_fColumnBase, weeniePropertiesBodyPart.FindProperty("MLF")!, aCEDatabaseModelsWorldWeeniePropertiesBodyPartMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)m_r_bColumnBase, weeniePropertiesBodyPart.FindProperty("MRB")!, aCEDatabaseModelsWorldWeeniePropertiesBodyPartMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)m_r_fColumnBase, weeniePropertiesBodyPart.FindProperty("MRF")!, aCEDatabaseModelsWorldWeeniePropertiesBodyPartMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)object_IdColumnBase2, weeniePropertiesBodyPart.FindProperty("ObjectId")!, aCEDatabaseModelsWorldWeeniePropertiesBodyPartMappingBase);

            var tableMappings40 = new List<TableMapping>();
            weeniePropertiesBodyPart.SetRuntimeAnnotation("Relational:TableMappings", tableMappings40);
            var weenie_properties_body_partTable = new Table("weenie_properties_body_part", null, relationalModel);
            var idColumn32 = new Column("id", "int unsigned", weenie_properties_body_partTable);
            weenie_properties_body_partTable.Columns.Add("id", idColumn32);
            var armor_Vs_AcidColumn = new Column("armor_Vs_Acid", "int", weenie_properties_body_partTable);
            weenie_properties_body_partTable.Columns.Add("armor_Vs_Acid", armor_Vs_AcidColumn);
            var armor_Vs_BludgeonColumn = new Column("armor_Vs_Bludgeon", "int", weenie_properties_body_partTable);
            weenie_properties_body_partTable.Columns.Add("armor_Vs_Bludgeon", armor_Vs_BludgeonColumn);
            var armor_Vs_ColdColumn = new Column("armor_Vs_Cold", "int", weenie_properties_body_partTable);
            weenie_properties_body_partTable.Columns.Add("armor_Vs_Cold", armor_Vs_ColdColumn);
            var armor_Vs_ElectricColumn = new Column("armor_Vs_Electric", "int", weenie_properties_body_partTable);
            weenie_properties_body_partTable.Columns.Add("armor_Vs_Electric", armor_Vs_ElectricColumn);
            var armor_Vs_FireColumn = new Column("armor_Vs_Fire", "int", weenie_properties_body_partTable);
            weenie_properties_body_partTable.Columns.Add("armor_Vs_Fire", armor_Vs_FireColumn);
            var armor_Vs_NetherColumn = new Column("armor_Vs_Nether", "int", weenie_properties_body_partTable);
            weenie_properties_body_partTable.Columns.Add("armor_Vs_Nether", armor_Vs_NetherColumn);
            var armor_Vs_PierceColumn = new Column("armor_Vs_Pierce", "int", weenie_properties_body_partTable);
            weenie_properties_body_partTable.Columns.Add("armor_Vs_Pierce", armor_Vs_PierceColumn);
            var armor_Vs_SlashColumn = new Column("armor_Vs_Slash", "int", weenie_properties_body_partTable);
            weenie_properties_body_partTable.Columns.Add("armor_Vs_Slash", armor_Vs_SlashColumn);
            var b_hColumn = new Column("b_h", "int", weenie_properties_body_partTable);
            weenie_properties_body_partTable.Columns.Add("b_h", b_hColumn);
            var base_ArmorColumn = new Column("base_Armor", "int", weenie_properties_body_partTable);
            weenie_properties_body_partTable.Columns.Add("base_Armor", base_ArmorColumn);
            var d_TypeColumn = new Column("d_Type", "int", weenie_properties_body_partTable);
            weenie_properties_body_partTable.Columns.Add("d_Type", d_TypeColumn);
            var d_ValColumn = new Column("d_Val", "int", weenie_properties_body_partTable);
            weenie_properties_body_partTable.Columns.Add("d_Val", d_ValColumn);
            var d_VarColumn = new Column("d_Var", "float", weenie_properties_body_partTable);
            weenie_properties_body_partTable.Columns.Add("d_Var", d_VarColumn);
            var h_l_bColumn = new Column("h_l_b", "float", weenie_properties_body_partTable);
            weenie_properties_body_partTable.Columns.Add("h_l_b", h_l_bColumn);
            var h_l_fColumn = new Column("h_l_f", "float", weenie_properties_body_partTable);
            weenie_properties_body_partTable.Columns.Add("h_l_f", h_l_fColumn);
            var h_r_bColumn = new Column("h_r_b", "float", weenie_properties_body_partTable);
            weenie_properties_body_partTable.Columns.Add("h_r_b", h_r_bColumn);
            var h_r_fColumn = new Column("h_r_f", "float", weenie_properties_body_partTable);
            weenie_properties_body_partTable.Columns.Add("h_r_f", h_r_fColumn);
            var keyColumn = new Column("key", "smallint unsigned", weenie_properties_body_partTable);
            weenie_properties_body_partTable.Columns.Add("key", keyColumn);
            var l_l_bColumn = new Column("l_l_b", "float", weenie_properties_body_partTable);
            weenie_properties_body_partTable.Columns.Add("l_l_b", l_l_bColumn);
            var l_l_fColumn = new Column("l_l_f", "float", weenie_properties_body_partTable);
            weenie_properties_body_partTable.Columns.Add("l_l_f", l_l_fColumn);
            var l_r_bColumn = new Column("l_r_b", "float", weenie_properties_body_partTable);
            weenie_properties_body_partTable.Columns.Add("l_r_b", l_r_bColumn);
            var l_r_fColumn = new Column("l_r_f", "float", weenie_properties_body_partTable);
            weenie_properties_body_partTable.Columns.Add("l_r_f", l_r_fColumn);
            var m_l_bColumn = new Column("m_l_b", "float", weenie_properties_body_partTable);
            weenie_properties_body_partTable.Columns.Add("m_l_b", m_l_bColumn);
            var m_l_fColumn = new Column("m_l_f", "float", weenie_properties_body_partTable);
            weenie_properties_body_partTable.Columns.Add("m_l_f", m_l_fColumn);
            var m_r_bColumn = new Column("m_r_b", "float", weenie_properties_body_partTable);
            weenie_properties_body_partTable.Columns.Add("m_r_b", m_r_bColumn);
            var m_r_fColumn = new Column("m_r_f", "float", weenie_properties_body_partTable);
            weenie_properties_body_partTable.Columns.Add("m_r_f", m_r_fColumn);
            var object_IdColumn2 = new Column("object_Id", "int unsigned", weenie_properties_body_partTable);
            weenie_properties_body_partTable.Columns.Add("object_Id", object_IdColumn2);
            var pK_weenie_properties_body_part = new UniqueConstraint("PK_weenie_properties_body_part", weenie_properties_body_partTable, new[] { idColumn32 });
            weenie_properties_body_partTable.PrimaryKey = pK_weenie_properties_body_part;
            var pK_weenie_properties_body_partUc = RelationalModel.GetKey(this,
                "ACE.Database.Models.World.WeeniePropertiesBodyPart",
                new[] { "Id" });
            pK_weenie_properties_body_part.MappedKeys.Add(pK_weenie_properties_body_partUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_weenie_properties_body_partUc).Add(pK_weenie_properties_body_part);
            weenie_properties_body_partTable.UniqueConstraints.Add("PK_weenie_properties_body_part", pK_weenie_properties_body_part);
            var wcid_bodypart_type_uidx = new TableIndex(
            "wcid_bodypart_type_uidx", weenie_properties_body_partTable, new[] { object_IdColumn2, keyColumn }, true);
            var wcid_bodypart_type_uidxIx = RelationalModel.GetIndex(this,
                "ACE.Database.Models.World.WeeniePropertiesBodyPart",
                "wcid_bodypart_type_uidx");
            wcid_bodypart_type_uidx.MappedIndexes.Add(wcid_bodypart_type_uidxIx);
            RelationalModel.GetOrCreateTableIndexes(wcid_bodypart_type_uidxIx).Add(wcid_bodypart_type_uidx);
            weenie_properties_body_partTable.Indexes.Add("wcid_bodypart_type_uidx", wcid_bodypart_type_uidx);
            relationalModel.Tables.Add(("weenie_properties_body_part", null), weenie_properties_body_partTable);
            var weenie_properties_body_partTableMapping = new TableMapping(weeniePropertiesBodyPart, weenie_properties_body_partTable, true);
            weenie_properties_body_partTable.AddTypeMapping(weenie_properties_body_partTableMapping, false);
            tableMappings40.Add(weenie_properties_body_partTableMapping);
            RelationalModel.CreateColumnMapping(idColumn32, weeniePropertiesBodyPart.FindProperty("Id")!, weenie_properties_body_partTableMapping);
            RelationalModel.CreateColumnMapping(armor_Vs_AcidColumn, weeniePropertiesBodyPart.FindProperty("ArmorVsAcid")!, weenie_properties_body_partTableMapping);
            RelationalModel.CreateColumnMapping(armor_Vs_BludgeonColumn, weeniePropertiesBodyPart.FindProperty("ArmorVsBludgeon")!, weenie_properties_body_partTableMapping);
            RelationalModel.CreateColumnMapping(armor_Vs_ColdColumn, weeniePropertiesBodyPart.FindProperty("ArmorVsCold")!, weenie_properties_body_partTableMapping);
            RelationalModel.CreateColumnMapping(armor_Vs_ElectricColumn, weeniePropertiesBodyPart.FindProperty("ArmorVsElectric")!, weenie_properties_body_partTableMapping);
            RelationalModel.CreateColumnMapping(armor_Vs_FireColumn, weeniePropertiesBodyPart.FindProperty("ArmorVsFire")!, weenie_properties_body_partTableMapping);
            RelationalModel.CreateColumnMapping(armor_Vs_NetherColumn, weeniePropertiesBodyPart.FindProperty("ArmorVsNether")!, weenie_properties_body_partTableMapping);
            RelationalModel.CreateColumnMapping(armor_Vs_PierceColumn, weeniePropertiesBodyPart.FindProperty("ArmorVsPierce")!, weenie_properties_body_partTableMapping);
            RelationalModel.CreateColumnMapping(armor_Vs_SlashColumn, weeniePropertiesBodyPart.FindProperty("ArmorVsSlash")!, weenie_properties_body_partTableMapping);
            RelationalModel.CreateColumnMapping(b_hColumn, weeniePropertiesBodyPart.FindProperty("BH")!, weenie_properties_body_partTableMapping);
            RelationalModel.CreateColumnMapping(base_ArmorColumn, weeniePropertiesBodyPart.FindProperty("BaseArmor")!, weenie_properties_body_partTableMapping);
            RelationalModel.CreateColumnMapping(d_TypeColumn, weeniePropertiesBodyPart.FindProperty("DType")!, weenie_properties_body_partTableMapping);
            RelationalModel.CreateColumnMapping(d_ValColumn, weeniePropertiesBodyPart.FindProperty("DVal")!, weenie_properties_body_partTableMapping);
            RelationalModel.CreateColumnMapping(d_VarColumn, weeniePropertiesBodyPart.FindProperty("DVar")!, weenie_properties_body_partTableMapping);
            RelationalModel.CreateColumnMapping(h_l_bColumn, weeniePropertiesBodyPart.FindProperty("HLB")!, weenie_properties_body_partTableMapping);
            RelationalModel.CreateColumnMapping(h_l_fColumn, weeniePropertiesBodyPart.FindProperty("HLF")!, weenie_properties_body_partTableMapping);
            RelationalModel.CreateColumnMapping(h_r_bColumn, weeniePropertiesBodyPart.FindProperty("HRB")!, weenie_properties_body_partTableMapping);
            RelationalModel.CreateColumnMapping(h_r_fColumn, weeniePropertiesBodyPart.FindProperty("HRF")!, weenie_properties_body_partTableMapping);
            RelationalModel.CreateColumnMapping(keyColumn, weeniePropertiesBodyPart.FindProperty("Key")!, weenie_properties_body_partTableMapping);
            RelationalModel.CreateColumnMapping(l_l_bColumn, weeniePropertiesBodyPart.FindProperty("LLB")!, weenie_properties_body_partTableMapping);
            RelationalModel.CreateColumnMapping(l_l_fColumn, weeniePropertiesBodyPart.FindProperty("LLF")!, weenie_properties_body_partTableMapping);
            RelationalModel.CreateColumnMapping(l_r_bColumn, weeniePropertiesBodyPart.FindProperty("LRB")!, weenie_properties_body_partTableMapping);
            RelationalModel.CreateColumnMapping(l_r_fColumn, weeniePropertiesBodyPart.FindProperty("LRF")!, weenie_properties_body_partTableMapping);
            RelationalModel.CreateColumnMapping(m_l_bColumn, weeniePropertiesBodyPart.FindProperty("MLB")!, weenie_properties_body_partTableMapping);
            RelationalModel.CreateColumnMapping(m_l_fColumn, weeniePropertiesBodyPart.FindProperty("MLF")!, weenie_properties_body_partTableMapping);
            RelationalModel.CreateColumnMapping(m_r_bColumn, weeniePropertiesBodyPart.FindProperty("MRB")!, weenie_properties_body_partTableMapping);
            RelationalModel.CreateColumnMapping(m_r_fColumn, weeniePropertiesBodyPart.FindProperty("MRF")!, weenie_properties_body_partTableMapping);
            RelationalModel.CreateColumnMapping(object_IdColumn2, weeniePropertiesBodyPart.FindProperty("ObjectId")!, weenie_properties_body_partTableMapping);

            var weeniePropertiesBook = FindEntityType("ACE.Database.Models.World.WeeniePropertiesBook")!;

            var defaultTableMappings41 = new List<TableMappingBase<ColumnMappingBase>>();
            weeniePropertiesBook.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings41);
            var aCEDatabaseModelsWorldWeeniePropertiesBookTableBase = new TableBase("ACE.Database.Models.World.WeeniePropertiesBook", null, relationalModel);
            var idColumnBase33 = new ColumnBase<ColumnMappingBase>("id", "int unsigned", aCEDatabaseModelsWorldWeeniePropertiesBookTableBase);
            aCEDatabaseModelsWorldWeeniePropertiesBookTableBase.Columns.Add("id", idColumnBase33);
            var max_Num_Chars_Per_PageColumnBase = new ColumnBase<ColumnMappingBase>("max_Num_Chars_Per_Page", "int", aCEDatabaseModelsWorldWeeniePropertiesBookTableBase);
            aCEDatabaseModelsWorldWeeniePropertiesBookTableBase.Columns.Add("max_Num_Chars_Per_Page", max_Num_Chars_Per_PageColumnBase);
            var max_Num_PagesColumnBase = new ColumnBase<ColumnMappingBase>("max_Num_Pages", "int", aCEDatabaseModelsWorldWeeniePropertiesBookTableBase);
            aCEDatabaseModelsWorldWeeniePropertiesBookTableBase.Columns.Add("max_Num_Pages", max_Num_PagesColumnBase);
            var object_IdColumnBase3 = new ColumnBase<ColumnMappingBase>("object_Id", "int unsigned", aCEDatabaseModelsWorldWeeniePropertiesBookTableBase);
            aCEDatabaseModelsWorldWeeniePropertiesBookTableBase.Columns.Add("object_Id", object_IdColumnBase3);
            relationalModel.DefaultTables.Add("ACE.Database.Models.World.WeeniePropertiesBook", aCEDatabaseModelsWorldWeeniePropertiesBookTableBase);
            var aCEDatabaseModelsWorldWeeniePropertiesBookMappingBase = new TableMappingBase<ColumnMappingBase>(weeniePropertiesBook, aCEDatabaseModelsWorldWeeniePropertiesBookTableBase, true);
            aCEDatabaseModelsWorldWeeniePropertiesBookTableBase.AddTypeMapping(aCEDatabaseModelsWorldWeeniePropertiesBookMappingBase, false);
            defaultTableMappings41.Add(aCEDatabaseModelsWorldWeeniePropertiesBookMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase33, weeniePropertiesBook.FindProperty("Id")!, aCEDatabaseModelsWorldWeeniePropertiesBookMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)max_Num_Chars_Per_PageColumnBase, weeniePropertiesBook.FindProperty("MaxNumCharsPerPage")!, aCEDatabaseModelsWorldWeeniePropertiesBookMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)max_Num_PagesColumnBase, weeniePropertiesBook.FindProperty("MaxNumPages")!, aCEDatabaseModelsWorldWeeniePropertiesBookMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)object_IdColumnBase3, weeniePropertiesBook.FindProperty("ObjectId")!, aCEDatabaseModelsWorldWeeniePropertiesBookMappingBase);

            var tableMappings41 = new List<TableMapping>();
            weeniePropertiesBook.SetRuntimeAnnotation("Relational:TableMappings", tableMappings41);
            var weenie_properties_bookTable = new Table("weenie_properties_book", null, relationalModel);
            var idColumn33 = new Column("id", "int unsigned", weenie_properties_bookTable);
            weenie_properties_bookTable.Columns.Add("id", idColumn33);
            var max_Num_Chars_Per_PageColumn = new Column("max_Num_Chars_Per_Page", "int", weenie_properties_bookTable);
            weenie_properties_bookTable.Columns.Add("max_Num_Chars_Per_Page", max_Num_Chars_Per_PageColumn);
            var max_Num_PagesColumn = new Column("max_Num_Pages", "int", weenie_properties_bookTable);
            weenie_properties_bookTable.Columns.Add("max_Num_Pages", max_Num_PagesColumn);
            var object_IdColumn3 = new Column("object_Id", "int unsigned", weenie_properties_bookTable);
            weenie_properties_bookTable.Columns.Add("object_Id", object_IdColumn3);
            var pK_weenie_properties_book = new UniqueConstraint("PK_weenie_properties_book", weenie_properties_bookTable, new[] { idColumn33 });
            weenie_properties_bookTable.PrimaryKey = pK_weenie_properties_book;
            var pK_weenie_properties_bookUc = RelationalModel.GetKey(this,
                "ACE.Database.Models.World.WeeniePropertiesBook",
                new[] { "Id" });
            pK_weenie_properties_book.MappedKeys.Add(pK_weenie_properties_bookUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_weenie_properties_bookUc).Add(pK_weenie_properties_book);
            weenie_properties_bookTable.UniqueConstraints.Add("PK_weenie_properties_book", pK_weenie_properties_book);
            var wcid_bookdata_uidx = new TableIndex(
            "wcid_bookdata_uidx", weenie_properties_bookTable, new[] { object_IdColumn3 }, true);
            var wcid_bookdata_uidxIx = RelationalModel.GetIndex(this,
                "ACE.Database.Models.World.WeeniePropertiesBook",
                "wcid_bookdata_uidx");
            wcid_bookdata_uidx.MappedIndexes.Add(wcid_bookdata_uidxIx);
            RelationalModel.GetOrCreateTableIndexes(wcid_bookdata_uidxIx).Add(wcid_bookdata_uidx);
            weenie_properties_bookTable.Indexes.Add("wcid_bookdata_uidx", wcid_bookdata_uidx);
            relationalModel.Tables.Add(("weenie_properties_book", null), weenie_properties_bookTable);
            var weenie_properties_bookTableMapping = new TableMapping(weeniePropertiesBook, weenie_properties_bookTable, true);
            weenie_properties_bookTable.AddTypeMapping(weenie_properties_bookTableMapping, false);
            tableMappings41.Add(weenie_properties_bookTableMapping);
            RelationalModel.CreateColumnMapping(idColumn33, weeniePropertiesBook.FindProperty("Id")!, weenie_properties_bookTableMapping);
            RelationalModel.CreateColumnMapping(max_Num_Chars_Per_PageColumn, weeniePropertiesBook.FindProperty("MaxNumCharsPerPage")!, weenie_properties_bookTableMapping);
            RelationalModel.CreateColumnMapping(max_Num_PagesColumn, weeniePropertiesBook.FindProperty("MaxNumPages")!, weenie_properties_bookTableMapping);
            RelationalModel.CreateColumnMapping(object_IdColumn3, weeniePropertiesBook.FindProperty("ObjectId")!, weenie_properties_bookTableMapping);

            var weeniePropertiesBookPageData = FindEntityType("ACE.Database.Models.World.WeeniePropertiesBookPageData")!;

            var defaultTableMappings42 = new List<TableMappingBase<ColumnMappingBase>>();
            weeniePropertiesBookPageData.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings42);
            var aCEDatabaseModelsWorldWeeniePropertiesBookPageDataTableBase = new TableBase("ACE.Database.Models.World.WeeniePropertiesBookPageData", null, relationalModel);
            var author_AccountColumnBase = new ColumnBase<ColumnMappingBase>("author_Account", "varchar(255)", aCEDatabaseModelsWorldWeeniePropertiesBookPageDataTableBase);
            aCEDatabaseModelsWorldWeeniePropertiesBookPageDataTableBase.Columns.Add("author_Account", author_AccountColumnBase);
            var author_IdColumnBase = new ColumnBase<ColumnMappingBase>("author_Id", "int unsigned", aCEDatabaseModelsWorldWeeniePropertiesBookPageDataTableBase);
            aCEDatabaseModelsWorldWeeniePropertiesBookPageDataTableBase.Columns.Add("author_Id", author_IdColumnBase);
            var author_NameColumnBase = new ColumnBase<ColumnMappingBase>("author_Name", "varchar(255)", aCEDatabaseModelsWorldWeeniePropertiesBookPageDataTableBase);
            aCEDatabaseModelsWorldWeeniePropertiesBookPageDataTableBase.Columns.Add("author_Name", author_NameColumnBase);
            var idColumnBase34 = new ColumnBase<ColumnMappingBase>("id", "int unsigned", aCEDatabaseModelsWorldWeeniePropertiesBookPageDataTableBase);
            aCEDatabaseModelsWorldWeeniePropertiesBookPageDataTableBase.Columns.Add("id", idColumnBase34);
            var ignore_AuthorColumnBase = new ColumnBase<ColumnMappingBase>("ignore_Author", "bit(1)", aCEDatabaseModelsWorldWeeniePropertiesBookPageDataTableBase);
            aCEDatabaseModelsWorldWeeniePropertiesBookPageDataTableBase.Columns.Add("ignore_Author", ignore_AuthorColumnBase);
            var object_IdColumnBase4 = new ColumnBase<ColumnMappingBase>("object_Id", "int unsigned", aCEDatabaseModelsWorldWeeniePropertiesBookPageDataTableBase);
            aCEDatabaseModelsWorldWeeniePropertiesBookPageDataTableBase.Columns.Add("object_Id", object_IdColumnBase4);
            var page_IdColumnBase = new ColumnBase<ColumnMappingBase>("page_Id", "int unsigned", aCEDatabaseModelsWorldWeeniePropertiesBookPageDataTableBase);
            aCEDatabaseModelsWorldWeeniePropertiesBookPageDataTableBase.Columns.Add("page_Id", page_IdColumnBase);
            var page_TextColumnBase = new ColumnBase<ColumnMappingBase>("page_Text", "text", aCEDatabaseModelsWorldWeeniePropertiesBookPageDataTableBase);
            aCEDatabaseModelsWorldWeeniePropertiesBookPageDataTableBase.Columns.Add("page_Text", page_TextColumnBase);
            relationalModel.DefaultTables.Add("ACE.Database.Models.World.WeeniePropertiesBookPageData", aCEDatabaseModelsWorldWeeniePropertiesBookPageDataTableBase);
            var aCEDatabaseModelsWorldWeeniePropertiesBookPageDataMappingBase = new TableMappingBase<ColumnMappingBase>(weeniePropertiesBookPageData, aCEDatabaseModelsWorldWeeniePropertiesBookPageDataTableBase, true);
            aCEDatabaseModelsWorldWeeniePropertiesBookPageDataTableBase.AddTypeMapping(aCEDatabaseModelsWorldWeeniePropertiesBookPageDataMappingBase, false);
            defaultTableMappings42.Add(aCEDatabaseModelsWorldWeeniePropertiesBookPageDataMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase34, weeniePropertiesBookPageData.FindProperty("Id")!, aCEDatabaseModelsWorldWeeniePropertiesBookPageDataMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)author_AccountColumnBase, weeniePropertiesBookPageData.FindProperty("AuthorAccount")!, aCEDatabaseModelsWorldWeeniePropertiesBookPageDataMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)author_IdColumnBase, weeniePropertiesBookPageData.FindProperty("AuthorId")!, aCEDatabaseModelsWorldWeeniePropertiesBookPageDataMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)author_NameColumnBase, weeniePropertiesBookPageData.FindProperty("AuthorName")!, aCEDatabaseModelsWorldWeeniePropertiesBookPageDataMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)ignore_AuthorColumnBase, weeniePropertiesBookPageData.FindProperty("IgnoreAuthor")!, aCEDatabaseModelsWorldWeeniePropertiesBookPageDataMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)object_IdColumnBase4, weeniePropertiesBookPageData.FindProperty("ObjectId")!, aCEDatabaseModelsWorldWeeniePropertiesBookPageDataMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)page_IdColumnBase, weeniePropertiesBookPageData.FindProperty("PageId")!, aCEDatabaseModelsWorldWeeniePropertiesBookPageDataMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)page_TextColumnBase, weeniePropertiesBookPageData.FindProperty("PageText")!, aCEDatabaseModelsWorldWeeniePropertiesBookPageDataMappingBase);

            var tableMappings42 = new List<TableMapping>();
            weeniePropertiesBookPageData.SetRuntimeAnnotation("Relational:TableMappings", tableMappings42);
            var weenie_properties_book_page_dataTable = new Table("weenie_properties_book_page_data", null, relationalModel);
            var idColumn34 = new Column("id", "int unsigned", weenie_properties_book_page_dataTable);
            weenie_properties_book_page_dataTable.Columns.Add("id", idColumn34);
            var author_AccountColumn = new Column("author_Account", "varchar(255)", weenie_properties_book_page_dataTable);
            weenie_properties_book_page_dataTable.Columns.Add("author_Account", author_AccountColumn);
            var author_IdColumn = new Column("author_Id", "int unsigned", weenie_properties_book_page_dataTable);
            weenie_properties_book_page_dataTable.Columns.Add("author_Id", author_IdColumn);
            var author_NameColumn = new Column("author_Name", "varchar(255)", weenie_properties_book_page_dataTable);
            weenie_properties_book_page_dataTable.Columns.Add("author_Name", author_NameColumn);
            var ignore_AuthorColumn = new Column("ignore_Author", "bit(1)", weenie_properties_book_page_dataTable);
            weenie_properties_book_page_dataTable.Columns.Add("ignore_Author", ignore_AuthorColumn);
            var object_IdColumn4 = new Column("object_Id", "int unsigned", weenie_properties_book_page_dataTable);
            weenie_properties_book_page_dataTable.Columns.Add("object_Id", object_IdColumn4);
            var page_IdColumn = new Column("page_Id", "int unsigned", weenie_properties_book_page_dataTable);
            weenie_properties_book_page_dataTable.Columns.Add("page_Id", page_IdColumn);
            var page_TextColumn = new Column("page_Text", "text", weenie_properties_book_page_dataTable);
            weenie_properties_book_page_dataTable.Columns.Add("page_Text", page_TextColumn);
            var pK_weenie_properties_book_page_data = new UniqueConstraint("PK_weenie_properties_book_page_data", weenie_properties_book_page_dataTable, new[] { idColumn34 });
            weenie_properties_book_page_dataTable.PrimaryKey = pK_weenie_properties_book_page_data;
            var pK_weenie_properties_book_page_dataUc = RelationalModel.GetKey(this,
                "ACE.Database.Models.World.WeeniePropertiesBookPageData",
                new[] { "Id" });
            pK_weenie_properties_book_page_data.MappedKeys.Add(pK_weenie_properties_book_page_dataUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_weenie_properties_book_page_dataUc).Add(pK_weenie_properties_book_page_data);
            weenie_properties_book_page_dataTable.UniqueConstraints.Add("PK_weenie_properties_book_page_data", pK_weenie_properties_book_page_data);
            var wcid_pageid_uidx = new TableIndex(
            "wcid_pageid_uidx", weenie_properties_book_page_dataTable, new[] { object_IdColumn4, page_IdColumn }, true);
            var wcid_pageid_uidxIx = RelationalModel.GetIndex(this,
                "ACE.Database.Models.World.WeeniePropertiesBookPageData",
                "wcid_pageid_uidx");
            wcid_pageid_uidx.MappedIndexes.Add(wcid_pageid_uidxIx);
            RelationalModel.GetOrCreateTableIndexes(wcid_pageid_uidxIx).Add(wcid_pageid_uidx);
            weenie_properties_book_page_dataTable.Indexes.Add("wcid_pageid_uidx", wcid_pageid_uidx);
            relationalModel.Tables.Add(("weenie_properties_book_page_data", null), weenie_properties_book_page_dataTable);
            var weenie_properties_book_page_dataTableMapping = new TableMapping(weeniePropertiesBookPageData, weenie_properties_book_page_dataTable, true);
            weenie_properties_book_page_dataTable.AddTypeMapping(weenie_properties_book_page_dataTableMapping, false);
            tableMappings42.Add(weenie_properties_book_page_dataTableMapping);
            RelationalModel.CreateColumnMapping(idColumn34, weeniePropertiesBookPageData.FindProperty("Id")!, weenie_properties_book_page_dataTableMapping);
            RelationalModel.CreateColumnMapping(author_AccountColumn, weeniePropertiesBookPageData.FindProperty("AuthorAccount")!, weenie_properties_book_page_dataTableMapping);
            RelationalModel.CreateColumnMapping(author_IdColumn, weeniePropertiesBookPageData.FindProperty("AuthorId")!, weenie_properties_book_page_dataTableMapping);
            RelationalModel.CreateColumnMapping(author_NameColumn, weeniePropertiesBookPageData.FindProperty("AuthorName")!, weenie_properties_book_page_dataTableMapping);
            RelationalModel.CreateColumnMapping(ignore_AuthorColumn, weeniePropertiesBookPageData.FindProperty("IgnoreAuthor")!, weenie_properties_book_page_dataTableMapping);
            RelationalModel.CreateColumnMapping(object_IdColumn4, weeniePropertiesBookPageData.FindProperty("ObjectId")!, weenie_properties_book_page_dataTableMapping);
            RelationalModel.CreateColumnMapping(page_IdColumn, weeniePropertiesBookPageData.FindProperty("PageId")!, weenie_properties_book_page_dataTableMapping);
            RelationalModel.CreateColumnMapping(page_TextColumn, weeniePropertiesBookPageData.FindProperty("PageText")!, weenie_properties_book_page_dataTableMapping);

            var weeniePropertiesBool = FindEntityType("ACE.Database.Models.World.WeeniePropertiesBool")!;

            var defaultTableMappings43 = new List<TableMappingBase<ColumnMappingBase>>();
            weeniePropertiesBool.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings43);
            var aCEDatabaseModelsWorldWeeniePropertiesBoolTableBase = new TableBase("ACE.Database.Models.World.WeeniePropertiesBool", null, relationalModel);
            var idColumnBase35 = new ColumnBase<ColumnMappingBase>("id", "int unsigned", aCEDatabaseModelsWorldWeeniePropertiesBoolTableBase);
            aCEDatabaseModelsWorldWeeniePropertiesBoolTableBase.Columns.Add("id", idColumnBase35);
            var object_IdColumnBase5 = new ColumnBase<ColumnMappingBase>("object_Id", "int unsigned", aCEDatabaseModelsWorldWeeniePropertiesBoolTableBase);
            aCEDatabaseModelsWorldWeeniePropertiesBoolTableBase.Columns.Add("object_Id", object_IdColumnBase5);
            var typeColumnBase8 = new ColumnBase<ColumnMappingBase>("type", "smallint unsigned", aCEDatabaseModelsWorldWeeniePropertiesBoolTableBase);
            aCEDatabaseModelsWorldWeeniePropertiesBoolTableBase.Columns.Add("type", typeColumnBase8);
            var valueColumnBase16 = new ColumnBase<ColumnMappingBase>("value", "bit(1)", aCEDatabaseModelsWorldWeeniePropertiesBoolTableBase);
            aCEDatabaseModelsWorldWeeniePropertiesBoolTableBase.Columns.Add("value", valueColumnBase16);
            relationalModel.DefaultTables.Add("ACE.Database.Models.World.WeeniePropertiesBool", aCEDatabaseModelsWorldWeeniePropertiesBoolTableBase);
            var aCEDatabaseModelsWorldWeeniePropertiesBoolMappingBase = new TableMappingBase<ColumnMappingBase>(weeniePropertiesBool, aCEDatabaseModelsWorldWeeniePropertiesBoolTableBase, true);
            aCEDatabaseModelsWorldWeeniePropertiesBoolTableBase.AddTypeMapping(aCEDatabaseModelsWorldWeeniePropertiesBoolMappingBase, false);
            defaultTableMappings43.Add(aCEDatabaseModelsWorldWeeniePropertiesBoolMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase35, weeniePropertiesBool.FindProperty("Id")!, aCEDatabaseModelsWorldWeeniePropertiesBoolMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)object_IdColumnBase5, weeniePropertiesBool.FindProperty("ObjectId")!, aCEDatabaseModelsWorldWeeniePropertiesBoolMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)typeColumnBase8, weeniePropertiesBool.FindProperty("Type")!, aCEDatabaseModelsWorldWeeniePropertiesBoolMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)valueColumnBase16, weeniePropertiesBool.FindProperty("Value")!, aCEDatabaseModelsWorldWeeniePropertiesBoolMappingBase);

            var tableMappings43 = new List<TableMapping>();
            weeniePropertiesBool.SetRuntimeAnnotation("Relational:TableMappings", tableMappings43);
            var weenie_properties_boolTable = new Table("weenie_properties_bool", null, relationalModel);
            var idColumn35 = new Column("id", "int unsigned", weenie_properties_boolTable);
            weenie_properties_boolTable.Columns.Add("id", idColumn35);
            var object_IdColumn5 = new Column("object_Id", "int unsigned", weenie_properties_boolTable);
            weenie_properties_boolTable.Columns.Add("object_Id", object_IdColumn5);
            var typeColumn8 = new Column("type", "smallint unsigned", weenie_properties_boolTable);
            weenie_properties_boolTable.Columns.Add("type", typeColumn8);
            var valueColumn16 = new Column("value", "bit(1)", weenie_properties_boolTable);
            weenie_properties_boolTable.Columns.Add("value", valueColumn16);
            var pK_weenie_properties_bool = new UniqueConstraint("PK_weenie_properties_bool", weenie_properties_boolTable, new[] { idColumn35 });
            weenie_properties_boolTable.PrimaryKey = pK_weenie_properties_bool;
            var pK_weenie_properties_boolUc = RelationalModel.GetKey(this,
                "ACE.Database.Models.World.WeeniePropertiesBool",
                new[] { "Id" });
            pK_weenie_properties_bool.MappedKeys.Add(pK_weenie_properties_boolUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_weenie_properties_boolUc).Add(pK_weenie_properties_bool);
            weenie_properties_boolTable.UniqueConstraints.Add("PK_weenie_properties_bool", pK_weenie_properties_bool);
            var wcid_bool_type_uidx = new TableIndex(
            "wcid_bool_type_uidx", weenie_properties_boolTable, new[] { object_IdColumn5, typeColumn8 }, true);
            var wcid_bool_type_uidxIx = RelationalModel.GetIndex(this,
                "ACE.Database.Models.World.WeeniePropertiesBool",
                "wcid_bool_type_uidx");
            wcid_bool_type_uidx.MappedIndexes.Add(wcid_bool_type_uidxIx);
            RelationalModel.GetOrCreateTableIndexes(wcid_bool_type_uidxIx).Add(wcid_bool_type_uidx);
            weenie_properties_boolTable.Indexes.Add("wcid_bool_type_uidx", wcid_bool_type_uidx);
            relationalModel.Tables.Add(("weenie_properties_bool", null), weenie_properties_boolTable);
            var weenie_properties_boolTableMapping = new TableMapping(weeniePropertiesBool, weenie_properties_boolTable, true);
            weenie_properties_boolTable.AddTypeMapping(weenie_properties_boolTableMapping, false);
            tableMappings43.Add(weenie_properties_boolTableMapping);
            RelationalModel.CreateColumnMapping(idColumn35, weeniePropertiesBool.FindProperty("Id")!, weenie_properties_boolTableMapping);
            RelationalModel.CreateColumnMapping(object_IdColumn5, weeniePropertiesBool.FindProperty("ObjectId")!, weenie_properties_boolTableMapping);
            RelationalModel.CreateColumnMapping(typeColumn8, weeniePropertiesBool.FindProperty("Type")!, weenie_properties_boolTableMapping);
            RelationalModel.CreateColumnMapping(valueColumn16, weeniePropertiesBool.FindProperty("Value")!, weenie_properties_boolTableMapping);

            var weeniePropertiesCreateList = FindEntityType("ACE.Database.Models.World.WeeniePropertiesCreateList")!;

            var defaultTableMappings44 = new List<TableMappingBase<ColumnMappingBase>>();
            weeniePropertiesCreateList.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings44);
            var aCEDatabaseModelsWorldWeeniePropertiesCreateListTableBase = new TableBase("ACE.Database.Models.World.WeeniePropertiesCreateList", null, relationalModel);
            var destination_TypeColumnBase = new ColumnBase<ColumnMappingBase>("destination_Type", "tinyint", aCEDatabaseModelsWorldWeeniePropertiesCreateListTableBase);
            aCEDatabaseModelsWorldWeeniePropertiesCreateListTableBase.Columns.Add("destination_Type", destination_TypeColumnBase);
            var idColumnBase36 = new ColumnBase<ColumnMappingBase>("id", "int unsigned", aCEDatabaseModelsWorldWeeniePropertiesCreateListTableBase);
            aCEDatabaseModelsWorldWeeniePropertiesCreateListTableBase.Columns.Add("id", idColumnBase36);
            var object_IdColumnBase6 = new ColumnBase<ColumnMappingBase>("object_Id", "int unsigned", aCEDatabaseModelsWorldWeeniePropertiesCreateListTableBase);
            aCEDatabaseModelsWorldWeeniePropertiesCreateListTableBase.Columns.Add("object_Id", object_IdColumnBase6);
            var paletteColumnBase = new ColumnBase<ColumnMappingBase>("palette", "tinyint", aCEDatabaseModelsWorldWeeniePropertiesCreateListTableBase);
            aCEDatabaseModelsWorldWeeniePropertiesCreateListTableBase.Columns.Add("palette", paletteColumnBase);
            var shadeColumnBase0 = new ColumnBase<ColumnMappingBase>("shade", "float", aCEDatabaseModelsWorldWeeniePropertiesCreateListTableBase);
            aCEDatabaseModelsWorldWeeniePropertiesCreateListTableBase.Columns.Add("shade", shadeColumnBase0);
            var stack_SizeColumnBase0 = new ColumnBase<ColumnMappingBase>("stack_Size", "int", aCEDatabaseModelsWorldWeeniePropertiesCreateListTableBase);
            aCEDatabaseModelsWorldWeeniePropertiesCreateListTableBase.Columns.Add("stack_Size", stack_SizeColumnBase0);
            var try_To_BondColumnBase = new ColumnBase<ColumnMappingBase>("try_To_Bond", "bit(1)", aCEDatabaseModelsWorldWeeniePropertiesCreateListTableBase);
            aCEDatabaseModelsWorldWeeniePropertiesCreateListTableBase.Columns.Add("try_To_Bond", try_To_BondColumnBase);
            var weenie_Class_IdColumnBase3 = new ColumnBase<ColumnMappingBase>("weenie_Class_Id", "int unsigned", aCEDatabaseModelsWorldWeeniePropertiesCreateListTableBase);
            aCEDatabaseModelsWorldWeeniePropertiesCreateListTableBase.Columns.Add("weenie_Class_Id", weenie_Class_IdColumnBase3);
            relationalModel.DefaultTables.Add("ACE.Database.Models.World.WeeniePropertiesCreateList", aCEDatabaseModelsWorldWeeniePropertiesCreateListTableBase);
            var aCEDatabaseModelsWorldWeeniePropertiesCreateListMappingBase = new TableMappingBase<ColumnMappingBase>(weeniePropertiesCreateList, aCEDatabaseModelsWorldWeeniePropertiesCreateListTableBase, true);
            aCEDatabaseModelsWorldWeeniePropertiesCreateListTableBase.AddTypeMapping(aCEDatabaseModelsWorldWeeniePropertiesCreateListMappingBase, false);
            defaultTableMappings44.Add(aCEDatabaseModelsWorldWeeniePropertiesCreateListMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase36, weeniePropertiesCreateList.FindProperty("Id")!, aCEDatabaseModelsWorldWeeniePropertiesCreateListMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)destination_TypeColumnBase, weeniePropertiesCreateList.FindProperty("DestinationType")!, aCEDatabaseModelsWorldWeeniePropertiesCreateListMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)object_IdColumnBase6, weeniePropertiesCreateList.FindProperty("ObjectId")!, aCEDatabaseModelsWorldWeeniePropertiesCreateListMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)paletteColumnBase, weeniePropertiesCreateList.FindProperty("Palette")!, aCEDatabaseModelsWorldWeeniePropertiesCreateListMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)shadeColumnBase0, weeniePropertiesCreateList.FindProperty("Shade")!, aCEDatabaseModelsWorldWeeniePropertiesCreateListMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)stack_SizeColumnBase0, weeniePropertiesCreateList.FindProperty("StackSize")!, aCEDatabaseModelsWorldWeeniePropertiesCreateListMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)try_To_BondColumnBase, weeniePropertiesCreateList.FindProperty("TryToBond")!, aCEDatabaseModelsWorldWeeniePropertiesCreateListMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)weenie_Class_IdColumnBase3, weeniePropertiesCreateList.FindProperty("WeenieClassId")!, aCEDatabaseModelsWorldWeeniePropertiesCreateListMappingBase);

            var tableMappings44 = new List<TableMapping>();
            weeniePropertiesCreateList.SetRuntimeAnnotation("Relational:TableMappings", tableMappings44);
            var weenie_properties_create_listTable = new Table("weenie_properties_create_list", null, relationalModel);
            var idColumn36 = new Column("id", "int unsigned", weenie_properties_create_listTable);
            weenie_properties_create_listTable.Columns.Add("id", idColumn36);
            var destination_TypeColumn = new Column("destination_Type", "tinyint", weenie_properties_create_listTable);
            weenie_properties_create_listTable.Columns.Add("destination_Type", destination_TypeColumn);
            var object_IdColumn6 = new Column("object_Id", "int unsigned", weenie_properties_create_listTable);
            weenie_properties_create_listTable.Columns.Add("object_Id", object_IdColumn6);
            var paletteColumn = new Column("palette", "tinyint", weenie_properties_create_listTable);
            weenie_properties_create_listTable.Columns.Add("palette", paletteColumn);
            var shadeColumn0 = new Column("shade", "float", weenie_properties_create_listTable);
            weenie_properties_create_listTable.Columns.Add("shade", shadeColumn0);
            var stack_SizeColumn0 = new Column("stack_Size", "int", weenie_properties_create_listTable);
            weenie_properties_create_listTable.Columns.Add("stack_Size", stack_SizeColumn0);
            var try_To_BondColumn = new Column("try_To_Bond", "bit(1)", weenie_properties_create_listTable);
            weenie_properties_create_listTable.Columns.Add("try_To_Bond", try_To_BondColumn);
            var weenie_Class_IdColumn3 = new Column("weenie_Class_Id", "int unsigned", weenie_properties_create_listTable);
            weenie_properties_create_listTable.Columns.Add("weenie_Class_Id", weenie_Class_IdColumn3);
            var pK_weenie_properties_create_list = new UniqueConstraint("PK_weenie_properties_create_list", weenie_properties_create_listTable, new[] { idColumn36 });
            weenie_properties_create_listTable.PrimaryKey = pK_weenie_properties_create_list;
            var pK_weenie_properties_create_listUc = RelationalModel.GetKey(this,
                "ACE.Database.Models.World.WeeniePropertiesCreateList",
                new[] { "Id" });
            pK_weenie_properties_create_list.MappedKeys.Add(pK_weenie_properties_create_listUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_weenie_properties_create_listUc).Add(pK_weenie_properties_create_list);
            weenie_properties_create_listTable.UniqueConstraints.Add("PK_weenie_properties_create_list", pK_weenie_properties_create_list);
            var wcid_createlist = new TableIndex(
            "wcid_createlist", weenie_properties_create_listTable, new[] { object_IdColumn6 }, false);
            var wcid_createlistIx = RelationalModel.GetIndex(this,
                "ACE.Database.Models.World.WeeniePropertiesCreateList",
                "wcid_createlist");
            wcid_createlist.MappedIndexes.Add(wcid_createlistIx);
            RelationalModel.GetOrCreateTableIndexes(wcid_createlistIx).Add(wcid_createlist);
            weenie_properties_create_listTable.Indexes.Add("wcid_createlist", wcid_createlist);
            relationalModel.Tables.Add(("weenie_properties_create_list", null), weenie_properties_create_listTable);
            var weenie_properties_create_listTableMapping = new TableMapping(weeniePropertiesCreateList, weenie_properties_create_listTable, true);
            weenie_properties_create_listTable.AddTypeMapping(weenie_properties_create_listTableMapping, false);
            tableMappings44.Add(weenie_properties_create_listTableMapping);
            RelationalModel.CreateColumnMapping(idColumn36, weeniePropertiesCreateList.FindProperty("Id")!, weenie_properties_create_listTableMapping);
            RelationalModel.CreateColumnMapping(destination_TypeColumn, weeniePropertiesCreateList.FindProperty("DestinationType")!, weenie_properties_create_listTableMapping);
            RelationalModel.CreateColumnMapping(object_IdColumn6, weeniePropertiesCreateList.FindProperty("ObjectId")!, weenie_properties_create_listTableMapping);
            RelationalModel.CreateColumnMapping(paletteColumn, weeniePropertiesCreateList.FindProperty("Palette")!, weenie_properties_create_listTableMapping);
            RelationalModel.CreateColumnMapping(shadeColumn0, weeniePropertiesCreateList.FindProperty("Shade")!, weenie_properties_create_listTableMapping);
            RelationalModel.CreateColumnMapping(stack_SizeColumn0, weeniePropertiesCreateList.FindProperty("StackSize")!, weenie_properties_create_listTableMapping);
            RelationalModel.CreateColumnMapping(try_To_BondColumn, weeniePropertiesCreateList.FindProperty("TryToBond")!, weenie_properties_create_listTableMapping);
            RelationalModel.CreateColumnMapping(weenie_Class_IdColumn3, weeniePropertiesCreateList.FindProperty("WeenieClassId")!, weenie_properties_create_listTableMapping);

            var weeniePropertiesDID = FindEntityType("ACE.Database.Models.World.WeeniePropertiesDID")!;

            var defaultTableMappings45 = new List<TableMappingBase<ColumnMappingBase>>();
            weeniePropertiesDID.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings45);
            var aCEDatabaseModelsWorldWeeniePropertiesDIDTableBase = new TableBase("ACE.Database.Models.World.WeeniePropertiesDID", null, relationalModel);
            var idColumnBase37 = new ColumnBase<ColumnMappingBase>("id", "int unsigned", aCEDatabaseModelsWorldWeeniePropertiesDIDTableBase);
            aCEDatabaseModelsWorldWeeniePropertiesDIDTableBase.Columns.Add("id", idColumnBase37);
            var object_IdColumnBase7 = new ColumnBase<ColumnMappingBase>("object_Id", "int unsigned", aCEDatabaseModelsWorldWeeniePropertiesDIDTableBase);
            aCEDatabaseModelsWorldWeeniePropertiesDIDTableBase.Columns.Add("object_Id", object_IdColumnBase7);
            var typeColumnBase9 = new ColumnBase<ColumnMappingBase>("type", "smallint unsigned", aCEDatabaseModelsWorldWeeniePropertiesDIDTableBase);
            aCEDatabaseModelsWorldWeeniePropertiesDIDTableBase.Columns.Add("type", typeColumnBase9);
            var valueColumnBase17 = new ColumnBase<ColumnMappingBase>("value", "int unsigned", aCEDatabaseModelsWorldWeeniePropertiesDIDTableBase);
            aCEDatabaseModelsWorldWeeniePropertiesDIDTableBase.Columns.Add("value", valueColumnBase17);
            relationalModel.DefaultTables.Add("ACE.Database.Models.World.WeeniePropertiesDID", aCEDatabaseModelsWorldWeeniePropertiesDIDTableBase);
            var aCEDatabaseModelsWorldWeeniePropertiesDIDMappingBase = new TableMappingBase<ColumnMappingBase>(weeniePropertiesDID, aCEDatabaseModelsWorldWeeniePropertiesDIDTableBase, true);
            aCEDatabaseModelsWorldWeeniePropertiesDIDTableBase.AddTypeMapping(aCEDatabaseModelsWorldWeeniePropertiesDIDMappingBase, false);
            defaultTableMappings45.Add(aCEDatabaseModelsWorldWeeniePropertiesDIDMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase37, weeniePropertiesDID.FindProperty("Id")!, aCEDatabaseModelsWorldWeeniePropertiesDIDMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)object_IdColumnBase7, weeniePropertiesDID.FindProperty("ObjectId")!, aCEDatabaseModelsWorldWeeniePropertiesDIDMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)typeColumnBase9, weeniePropertiesDID.FindProperty("Type")!, aCEDatabaseModelsWorldWeeniePropertiesDIDMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)valueColumnBase17, weeniePropertiesDID.FindProperty("Value")!, aCEDatabaseModelsWorldWeeniePropertiesDIDMappingBase);

            var tableMappings45 = new List<TableMapping>();
            weeniePropertiesDID.SetRuntimeAnnotation("Relational:TableMappings", tableMappings45);
            var weenie_properties_d_i_dTable = new Table("weenie_properties_d_i_d", null, relationalModel);
            var idColumn37 = new Column("id", "int unsigned", weenie_properties_d_i_dTable);
            weenie_properties_d_i_dTable.Columns.Add("id", idColumn37);
            var object_IdColumn7 = new Column("object_Id", "int unsigned", weenie_properties_d_i_dTable);
            weenie_properties_d_i_dTable.Columns.Add("object_Id", object_IdColumn7);
            var typeColumn9 = new Column("type", "smallint unsigned", weenie_properties_d_i_dTable);
            weenie_properties_d_i_dTable.Columns.Add("type", typeColumn9);
            var valueColumn17 = new Column("value", "int unsigned", weenie_properties_d_i_dTable);
            weenie_properties_d_i_dTable.Columns.Add("value", valueColumn17);
            var pK_weenie_properties_d_i_d = new UniqueConstraint("PK_weenie_properties_d_i_d", weenie_properties_d_i_dTable, new[] { idColumn37 });
            weenie_properties_d_i_dTable.PrimaryKey = pK_weenie_properties_d_i_d;
            var pK_weenie_properties_d_i_dUc = RelationalModel.GetKey(this,
                "ACE.Database.Models.World.WeeniePropertiesDID",
                new[] { "Id" });
            pK_weenie_properties_d_i_d.MappedKeys.Add(pK_weenie_properties_d_i_dUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_weenie_properties_d_i_dUc).Add(pK_weenie_properties_d_i_d);
            weenie_properties_d_i_dTable.UniqueConstraints.Add("PK_weenie_properties_d_i_d", pK_weenie_properties_d_i_d);
            var wcid_did_type_uidx = new TableIndex(
            "wcid_did_type_uidx", weenie_properties_d_i_dTable, new[] { object_IdColumn7, typeColumn9 }, true);
            var wcid_did_type_uidxIx = RelationalModel.GetIndex(this,
                "ACE.Database.Models.World.WeeniePropertiesDID",
                "wcid_did_type_uidx");
            wcid_did_type_uidx.MappedIndexes.Add(wcid_did_type_uidxIx);
            RelationalModel.GetOrCreateTableIndexes(wcid_did_type_uidxIx).Add(wcid_did_type_uidx);
            weenie_properties_d_i_dTable.Indexes.Add("wcid_did_type_uidx", wcid_did_type_uidx);
            relationalModel.Tables.Add(("weenie_properties_d_i_d", null), weenie_properties_d_i_dTable);
            var weenie_properties_d_i_dTableMapping = new TableMapping(weeniePropertiesDID, weenie_properties_d_i_dTable, true);
            weenie_properties_d_i_dTable.AddTypeMapping(weenie_properties_d_i_dTableMapping, false);
            tableMappings45.Add(weenie_properties_d_i_dTableMapping);
            RelationalModel.CreateColumnMapping(idColumn37, weeniePropertiesDID.FindProperty("Id")!, weenie_properties_d_i_dTableMapping);
            RelationalModel.CreateColumnMapping(object_IdColumn7, weeniePropertiesDID.FindProperty("ObjectId")!, weenie_properties_d_i_dTableMapping);
            RelationalModel.CreateColumnMapping(typeColumn9, weeniePropertiesDID.FindProperty("Type")!, weenie_properties_d_i_dTableMapping);
            RelationalModel.CreateColumnMapping(valueColumn17, weeniePropertiesDID.FindProperty("Value")!, weenie_properties_d_i_dTableMapping);

            var weeniePropertiesEmote = FindEntityType("ACE.Database.Models.World.WeeniePropertiesEmote")!;

            var defaultTableMappings46 = new List<TableMappingBase<ColumnMappingBase>>();
            weeniePropertiesEmote.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings46);
            var aCEDatabaseModelsWorldWeeniePropertiesEmoteTableBase = new TableBase("ACE.Database.Models.World.WeeniePropertiesEmote", null, relationalModel);
            var categoryColumnBase = new ColumnBase<ColumnMappingBase>("category", "int unsigned", aCEDatabaseModelsWorldWeeniePropertiesEmoteTableBase);
            aCEDatabaseModelsWorldWeeniePropertiesEmoteTableBase.Columns.Add("category", categoryColumnBase);
            var idColumnBase38 = new ColumnBase<ColumnMappingBase>("id", "int unsigned", aCEDatabaseModelsWorldWeeniePropertiesEmoteTableBase);
            aCEDatabaseModelsWorldWeeniePropertiesEmoteTableBase.Columns.Add("id", idColumnBase38);
            var max_HealthColumnBase = new ColumnBase<ColumnMappingBase>("max_Health", "float", aCEDatabaseModelsWorldWeeniePropertiesEmoteTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsWorldWeeniePropertiesEmoteTableBase.Columns.Add("max_Health", max_HealthColumnBase);
            var min_HealthColumnBase = new ColumnBase<ColumnMappingBase>("min_Health", "float", aCEDatabaseModelsWorldWeeniePropertiesEmoteTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsWorldWeeniePropertiesEmoteTableBase.Columns.Add("min_Health", min_HealthColumnBase);
            var object_IdColumnBase8 = new ColumnBase<ColumnMappingBase>("object_Id", "int unsigned", aCEDatabaseModelsWorldWeeniePropertiesEmoteTableBase);
            aCEDatabaseModelsWorldWeeniePropertiesEmoteTableBase.Columns.Add("object_Id", object_IdColumnBase8);
            var probabilityColumnBase9 = new ColumnBase<ColumnMappingBase>("probability", "float", aCEDatabaseModelsWorldWeeniePropertiesEmoteTableBase);
            aCEDatabaseModelsWorldWeeniePropertiesEmoteTableBase.Columns.Add("probability", probabilityColumnBase9);
            var questColumnBase = new ColumnBase<ColumnMappingBase>("quest", "text", aCEDatabaseModelsWorldWeeniePropertiesEmoteTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsWorldWeeniePropertiesEmoteTableBase.Columns.Add("quest", questColumnBase);
            var styleColumnBase = new ColumnBase<ColumnMappingBase>("style", "int unsigned", aCEDatabaseModelsWorldWeeniePropertiesEmoteTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsWorldWeeniePropertiesEmoteTableBase.Columns.Add("style", styleColumnBase);
            var substyleColumnBase = new ColumnBase<ColumnMappingBase>("substyle", "int unsigned", aCEDatabaseModelsWorldWeeniePropertiesEmoteTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsWorldWeeniePropertiesEmoteTableBase.Columns.Add("substyle", substyleColumnBase);
            var vendor_TypeColumnBase = new ColumnBase<ColumnMappingBase>("vendor_Type", "int", aCEDatabaseModelsWorldWeeniePropertiesEmoteTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsWorldWeeniePropertiesEmoteTableBase.Columns.Add("vendor_Type", vendor_TypeColumnBase);
            var weenie_Class_IdColumnBase4 = new ColumnBase<ColumnMappingBase>("weenie_Class_Id", "int unsigned", aCEDatabaseModelsWorldWeeniePropertiesEmoteTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsWorldWeeniePropertiesEmoteTableBase.Columns.Add("weenie_Class_Id", weenie_Class_IdColumnBase4);
            relationalModel.DefaultTables.Add("ACE.Database.Models.World.WeeniePropertiesEmote", aCEDatabaseModelsWorldWeeniePropertiesEmoteTableBase);
            var aCEDatabaseModelsWorldWeeniePropertiesEmoteMappingBase = new TableMappingBase<ColumnMappingBase>(weeniePropertiesEmote, aCEDatabaseModelsWorldWeeniePropertiesEmoteTableBase, true);
            aCEDatabaseModelsWorldWeeniePropertiesEmoteTableBase.AddTypeMapping(aCEDatabaseModelsWorldWeeniePropertiesEmoteMappingBase, false);
            defaultTableMappings46.Add(aCEDatabaseModelsWorldWeeniePropertiesEmoteMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase38, weeniePropertiesEmote.FindProperty("Id")!, aCEDatabaseModelsWorldWeeniePropertiesEmoteMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)categoryColumnBase, weeniePropertiesEmote.FindProperty("Category")!, aCEDatabaseModelsWorldWeeniePropertiesEmoteMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)max_HealthColumnBase, weeniePropertiesEmote.FindProperty("MaxHealth")!, aCEDatabaseModelsWorldWeeniePropertiesEmoteMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)min_HealthColumnBase, weeniePropertiesEmote.FindProperty("MinHealth")!, aCEDatabaseModelsWorldWeeniePropertiesEmoteMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)object_IdColumnBase8, weeniePropertiesEmote.FindProperty("ObjectId")!, aCEDatabaseModelsWorldWeeniePropertiesEmoteMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)probabilityColumnBase9, weeniePropertiesEmote.FindProperty("Probability")!, aCEDatabaseModelsWorldWeeniePropertiesEmoteMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)questColumnBase, weeniePropertiesEmote.FindProperty("Quest")!, aCEDatabaseModelsWorldWeeniePropertiesEmoteMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)styleColumnBase, weeniePropertiesEmote.FindProperty("Style")!, aCEDatabaseModelsWorldWeeniePropertiesEmoteMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)substyleColumnBase, weeniePropertiesEmote.FindProperty("Substyle")!, aCEDatabaseModelsWorldWeeniePropertiesEmoteMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)vendor_TypeColumnBase, weeniePropertiesEmote.FindProperty("VendorType")!, aCEDatabaseModelsWorldWeeniePropertiesEmoteMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)weenie_Class_IdColumnBase4, weeniePropertiesEmote.FindProperty("WeenieClassId")!, aCEDatabaseModelsWorldWeeniePropertiesEmoteMappingBase);

            var tableMappings46 = new List<TableMapping>();
            weeniePropertiesEmote.SetRuntimeAnnotation("Relational:TableMappings", tableMappings46);
            var weenie_properties_emoteTable = new Table("weenie_properties_emote", null, relationalModel);
            var idColumn38 = new Column("id", "int unsigned", weenie_properties_emoteTable);
            weenie_properties_emoteTable.Columns.Add("id", idColumn38);
            var categoryColumn = new Column("category", "int unsigned", weenie_properties_emoteTable);
            weenie_properties_emoteTable.Columns.Add("category", categoryColumn);
            var max_HealthColumn = new Column("max_Health", "float", weenie_properties_emoteTable)
            {
                IsNullable = true
            };
            weenie_properties_emoteTable.Columns.Add("max_Health", max_HealthColumn);
            var min_HealthColumn = new Column("min_Health", "float", weenie_properties_emoteTable)
            {
                IsNullable = true
            };
            weenie_properties_emoteTable.Columns.Add("min_Health", min_HealthColumn);
            var object_IdColumn8 = new Column("object_Id", "int unsigned", weenie_properties_emoteTable);
            weenie_properties_emoteTable.Columns.Add("object_Id", object_IdColumn8);
            var probabilityColumn9 = new Column("probability", "float", weenie_properties_emoteTable);
            weenie_properties_emoteTable.Columns.Add("probability", probabilityColumn9);
            var questColumn = new Column("quest", "text", weenie_properties_emoteTable)
            {
                IsNullable = true
            };
            weenie_properties_emoteTable.Columns.Add("quest", questColumn);
            var styleColumn = new Column("style", "int unsigned", weenie_properties_emoteTable)
            {
                IsNullable = true
            };
            weenie_properties_emoteTable.Columns.Add("style", styleColumn);
            var substyleColumn = new Column("substyle", "int unsigned", weenie_properties_emoteTable)
            {
                IsNullable = true
            };
            weenie_properties_emoteTable.Columns.Add("substyle", substyleColumn);
            var vendor_TypeColumn = new Column("vendor_Type", "int", weenie_properties_emoteTable)
            {
                IsNullable = true
            };
            weenie_properties_emoteTable.Columns.Add("vendor_Type", vendor_TypeColumn);
            var weenie_Class_IdColumn4 = new Column("weenie_Class_Id", "int unsigned", weenie_properties_emoteTable)
            {
                IsNullable = true
            };
            weenie_properties_emoteTable.Columns.Add("weenie_Class_Id", weenie_Class_IdColumn4);
            var pK_weenie_properties_emote = new UniqueConstraint("PK_weenie_properties_emote", weenie_properties_emoteTable, new[] { idColumn38 });
            weenie_properties_emoteTable.PrimaryKey = pK_weenie_properties_emote;
            var pK_weenie_properties_emoteUc = RelationalModel.GetKey(this,
                "ACE.Database.Models.World.WeeniePropertiesEmote",
                new[] { "Id" });
            pK_weenie_properties_emote.MappedKeys.Add(pK_weenie_properties_emoteUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_weenie_properties_emoteUc).Add(pK_weenie_properties_emote);
            weenie_properties_emoteTable.UniqueConstraints.Add("PK_weenie_properties_emote", pK_weenie_properties_emote);
            var wcid_emote = new TableIndex(
            "wcid_emote", weenie_properties_emoteTable, new[] { object_IdColumn8 }, false);
            var wcid_emoteIx = RelationalModel.GetIndex(this,
                "ACE.Database.Models.World.WeeniePropertiesEmote",
                "wcid_emote");
            wcid_emote.MappedIndexes.Add(wcid_emoteIx);
            RelationalModel.GetOrCreateTableIndexes(wcid_emoteIx).Add(wcid_emote);
            weenie_properties_emoteTable.Indexes.Add("wcid_emote", wcid_emote);
            relationalModel.Tables.Add(("weenie_properties_emote", null), weenie_properties_emoteTable);
            var weenie_properties_emoteTableMapping = new TableMapping(weeniePropertiesEmote, weenie_properties_emoteTable, true);
            weenie_properties_emoteTable.AddTypeMapping(weenie_properties_emoteTableMapping, false);
            tableMappings46.Add(weenie_properties_emoteTableMapping);
            RelationalModel.CreateColumnMapping(idColumn38, weeniePropertiesEmote.FindProperty("Id")!, weenie_properties_emoteTableMapping);
            RelationalModel.CreateColumnMapping(categoryColumn, weeniePropertiesEmote.FindProperty("Category")!, weenie_properties_emoteTableMapping);
            RelationalModel.CreateColumnMapping(max_HealthColumn, weeniePropertiesEmote.FindProperty("MaxHealth")!, weenie_properties_emoteTableMapping);
            RelationalModel.CreateColumnMapping(min_HealthColumn, weeniePropertiesEmote.FindProperty("MinHealth")!, weenie_properties_emoteTableMapping);
            RelationalModel.CreateColumnMapping(object_IdColumn8, weeniePropertiesEmote.FindProperty("ObjectId")!, weenie_properties_emoteTableMapping);
            RelationalModel.CreateColumnMapping(probabilityColumn9, weeniePropertiesEmote.FindProperty("Probability")!, weenie_properties_emoteTableMapping);
            RelationalModel.CreateColumnMapping(questColumn, weeniePropertiesEmote.FindProperty("Quest")!, weenie_properties_emoteTableMapping);
            RelationalModel.CreateColumnMapping(styleColumn, weeniePropertiesEmote.FindProperty("Style")!, weenie_properties_emoteTableMapping);
            RelationalModel.CreateColumnMapping(substyleColumn, weeniePropertiesEmote.FindProperty("Substyle")!, weenie_properties_emoteTableMapping);
            RelationalModel.CreateColumnMapping(vendor_TypeColumn, weeniePropertiesEmote.FindProperty("VendorType")!, weenie_properties_emoteTableMapping);
            RelationalModel.CreateColumnMapping(weenie_Class_IdColumn4, weeniePropertiesEmote.FindProperty("WeenieClassId")!, weenie_properties_emoteTableMapping);

            var weeniePropertiesEmoteAction = FindEntityType("ACE.Database.Models.World.WeeniePropertiesEmoteAction")!;

            var defaultTableMappings47 = new List<TableMappingBase<ColumnMappingBase>>();
            weeniePropertiesEmoteAction.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings47);
            var aCEDatabaseModelsWorldWeeniePropertiesEmoteActionTableBase = new TableBase("ACE.Database.Models.World.WeeniePropertiesEmoteAction", null, relationalModel);
            var amountColumnBase = new ColumnBase<ColumnMappingBase>("amount", "int", aCEDatabaseModelsWorldWeeniePropertiesEmoteActionTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsWorldWeeniePropertiesEmoteActionTableBase.Columns.Add("amount", amountColumnBase);
            var amount_64ColumnBase = new ColumnBase<ColumnMappingBase>("amount_64", "bigint", aCEDatabaseModelsWorldWeeniePropertiesEmoteActionTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsWorldWeeniePropertiesEmoteActionTableBase.Columns.Add("amount_64", amount_64ColumnBase);
            var angles_WColumnBase1 = new ColumnBase<ColumnMappingBase>("angles_W", "float", aCEDatabaseModelsWorldWeeniePropertiesEmoteActionTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsWorldWeeniePropertiesEmoteActionTableBase.Columns.Add("angles_W", angles_WColumnBase1);
            var angles_XColumnBase1 = new ColumnBase<ColumnMappingBase>("angles_X", "float", aCEDatabaseModelsWorldWeeniePropertiesEmoteActionTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsWorldWeeniePropertiesEmoteActionTableBase.Columns.Add("angles_X", angles_XColumnBase1);
            var angles_YColumnBase1 = new ColumnBase<ColumnMappingBase>("angles_Y", "float", aCEDatabaseModelsWorldWeeniePropertiesEmoteActionTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsWorldWeeniePropertiesEmoteActionTableBase.Columns.Add("angles_Y", angles_YColumnBase1);
            var angles_ZColumnBase1 = new ColumnBase<ColumnMappingBase>("angles_Z", "float", aCEDatabaseModelsWorldWeeniePropertiesEmoteActionTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsWorldWeeniePropertiesEmoteActionTableBase.Columns.Add("angles_Z", angles_ZColumnBase1);
            var delayColumnBase = new ColumnBase<ColumnMappingBase>("delay", "float", aCEDatabaseModelsWorldWeeniePropertiesEmoteActionTableBase);
            aCEDatabaseModelsWorldWeeniePropertiesEmoteActionTableBase.Columns.Add("delay", delayColumnBase);
            var destination_TypeColumnBase0 = new ColumnBase<ColumnMappingBase>("destination_Type", "tinyint", aCEDatabaseModelsWorldWeeniePropertiesEmoteActionTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsWorldWeeniePropertiesEmoteActionTableBase.Columns.Add("destination_Type", destination_TypeColumnBase0);
            var displayColumnBase = new ColumnBase<ColumnMappingBase>("display", "bit(1)", aCEDatabaseModelsWorldWeeniePropertiesEmoteActionTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsWorldWeeniePropertiesEmoteActionTableBase.Columns.Add("display", displayColumnBase);
            var emote_IdColumnBase = new ColumnBase<ColumnMappingBase>("emote_Id", "int unsigned", aCEDatabaseModelsWorldWeeniePropertiesEmoteActionTableBase);
            aCEDatabaseModelsWorldWeeniePropertiesEmoteActionTableBase.Columns.Add("emote_Id", emote_IdColumnBase);
            var extentColumnBase = new ColumnBase<ColumnMappingBase>("extent", "float", aCEDatabaseModelsWorldWeeniePropertiesEmoteActionTableBase);
            aCEDatabaseModelsWorldWeeniePropertiesEmoteActionTableBase.Columns.Add("extent", extentColumnBase);
            var hero_X_P_64ColumnBase = new ColumnBase<ColumnMappingBase>("hero_X_P_64", "bigint", aCEDatabaseModelsWorldWeeniePropertiesEmoteActionTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsWorldWeeniePropertiesEmoteActionTableBase.Columns.Add("hero_X_P_64", hero_X_P_64ColumnBase);
            var idColumnBase39 = new ColumnBase<ColumnMappingBase>("id", "int unsigned", aCEDatabaseModelsWorldWeeniePropertiesEmoteActionTableBase);
            aCEDatabaseModelsWorldWeeniePropertiesEmoteActionTableBase.Columns.Add("id", idColumnBase39);
            var maxColumnBase = new ColumnBase<ColumnMappingBase>("max", "int", aCEDatabaseModelsWorldWeeniePropertiesEmoteActionTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsWorldWeeniePropertiesEmoteActionTableBase.Columns.Add("max", maxColumnBase);
            var max_64ColumnBase = new ColumnBase<ColumnMappingBase>("max_64", "bigint", aCEDatabaseModelsWorldWeeniePropertiesEmoteActionTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsWorldWeeniePropertiesEmoteActionTableBase.Columns.Add("max_64", max_64ColumnBase);
            var max_DblColumnBase = new ColumnBase<ColumnMappingBase>("max_Dbl", "double", aCEDatabaseModelsWorldWeeniePropertiesEmoteActionTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsWorldWeeniePropertiesEmoteActionTableBase.Columns.Add("max_Dbl", max_DblColumnBase);
            var messageColumnBase6 = new ColumnBase<ColumnMappingBase>("message", "text", aCEDatabaseModelsWorldWeeniePropertiesEmoteActionTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsWorldWeeniePropertiesEmoteActionTableBase.Columns.Add("message", messageColumnBase6);
            var minColumnBase = new ColumnBase<ColumnMappingBase>("min", "int", aCEDatabaseModelsWorldWeeniePropertiesEmoteActionTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsWorldWeeniePropertiesEmoteActionTableBase.Columns.Add("min", minColumnBase);
            var min_64ColumnBase = new ColumnBase<ColumnMappingBase>("min_64", "bigint", aCEDatabaseModelsWorldWeeniePropertiesEmoteActionTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsWorldWeeniePropertiesEmoteActionTableBase.Columns.Add("min_64", min_64ColumnBase);
            var min_DblColumnBase = new ColumnBase<ColumnMappingBase>("min_Dbl", "double", aCEDatabaseModelsWorldWeeniePropertiesEmoteActionTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsWorldWeeniePropertiesEmoteActionTableBase.Columns.Add("min_Dbl", min_DblColumnBase);
            var motionColumnBase = new ColumnBase<ColumnMappingBase>("motion", "int unsigned", aCEDatabaseModelsWorldWeeniePropertiesEmoteActionTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsWorldWeeniePropertiesEmoteActionTableBase.Columns.Add("motion", motionColumnBase);
            var obj_Cell_IdColumnBase1 = new ColumnBase<ColumnMappingBase>("obj_Cell_Id", "int unsigned", aCEDatabaseModelsWorldWeeniePropertiesEmoteActionTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsWorldWeeniePropertiesEmoteActionTableBase.Columns.Add("obj_Cell_Id", obj_Cell_IdColumnBase1);
            var orderColumnBase0 = new ColumnBase<ColumnMappingBase>("order", "int unsigned", aCEDatabaseModelsWorldWeeniePropertiesEmoteActionTableBase);
            aCEDatabaseModelsWorldWeeniePropertiesEmoteActionTableBase.Columns.Add("order", orderColumnBase0);
            var origin_XColumnBase1 = new ColumnBase<ColumnMappingBase>("origin_X", "float", aCEDatabaseModelsWorldWeeniePropertiesEmoteActionTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsWorldWeeniePropertiesEmoteActionTableBase.Columns.Add("origin_X", origin_XColumnBase1);
            var origin_YColumnBase1 = new ColumnBase<ColumnMappingBase>("origin_Y", "float", aCEDatabaseModelsWorldWeeniePropertiesEmoteActionTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsWorldWeeniePropertiesEmoteActionTableBase.Columns.Add("origin_Y", origin_YColumnBase1);
            var origin_ZColumnBase1 = new ColumnBase<ColumnMappingBase>("origin_Z", "float", aCEDatabaseModelsWorldWeeniePropertiesEmoteActionTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsWorldWeeniePropertiesEmoteActionTableBase.Columns.Add("origin_Z", origin_ZColumnBase1);
            var p_ScriptColumnBase = new ColumnBase<ColumnMappingBase>("p_Script", "int", aCEDatabaseModelsWorldWeeniePropertiesEmoteActionTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsWorldWeeniePropertiesEmoteActionTableBase.Columns.Add("p_Script", p_ScriptColumnBase);
            var paletteColumnBase0 = new ColumnBase<ColumnMappingBase>("palette", "int", aCEDatabaseModelsWorldWeeniePropertiesEmoteActionTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsWorldWeeniePropertiesEmoteActionTableBase.Columns.Add("palette", paletteColumnBase0);
            var percentColumnBase = new ColumnBase<ColumnMappingBase>("percent", "double", aCEDatabaseModelsWorldWeeniePropertiesEmoteActionTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsWorldWeeniePropertiesEmoteActionTableBase.Columns.Add("percent", percentColumnBase);
            var shadeColumnBase1 = new ColumnBase<ColumnMappingBase>("shade", "float", aCEDatabaseModelsWorldWeeniePropertiesEmoteActionTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsWorldWeeniePropertiesEmoteActionTableBase.Columns.Add("shade", shadeColumnBase1);
            var soundColumnBase = new ColumnBase<ColumnMappingBase>("sound", "int", aCEDatabaseModelsWorldWeeniePropertiesEmoteActionTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsWorldWeeniePropertiesEmoteActionTableBase.Columns.Add("sound", soundColumnBase);
            var spell_IdColumnBase = new ColumnBase<ColumnMappingBase>("spell_Id", "int", aCEDatabaseModelsWorldWeeniePropertiesEmoteActionTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsWorldWeeniePropertiesEmoteActionTableBase.Columns.Add("spell_Id", spell_IdColumnBase);
            var stack_SizeColumnBase1 = new ColumnBase<ColumnMappingBase>("stack_Size", "int", aCEDatabaseModelsWorldWeeniePropertiesEmoteActionTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsWorldWeeniePropertiesEmoteActionTableBase.Columns.Add("stack_Size", stack_SizeColumnBase1);
            var statColumnBase11 = new ColumnBase<ColumnMappingBase>("stat", "int", aCEDatabaseModelsWorldWeeniePropertiesEmoteActionTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsWorldWeeniePropertiesEmoteActionTableBase.Columns.Add("stat", statColumnBase11);
            var test_StringColumnBase = new ColumnBase<ColumnMappingBase>("test_String", "text", aCEDatabaseModelsWorldWeeniePropertiesEmoteActionTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsWorldWeeniePropertiesEmoteActionTableBase.Columns.Add("test_String", test_StringColumnBase);
            var treasure_ClassColumnBase = new ColumnBase<ColumnMappingBase>("treasure_Class", "int", aCEDatabaseModelsWorldWeeniePropertiesEmoteActionTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsWorldWeeniePropertiesEmoteActionTableBase.Columns.Add("treasure_Class", treasure_ClassColumnBase);
            var treasure_TypeColumnBase1 = new ColumnBase<ColumnMappingBase>("treasure_Type", "int", aCEDatabaseModelsWorldWeeniePropertiesEmoteActionTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsWorldWeeniePropertiesEmoteActionTableBase.Columns.Add("treasure_Type", treasure_TypeColumnBase1);
            var try_To_BondColumnBase0 = new ColumnBase<ColumnMappingBase>("try_To_Bond", "bit(1)", aCEDatabaseModelsWorldWeeniePropertiesEmoteActionTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsWorldWeeniePropertiesEmoteActionTableBase.Columns.Add("try_To_Bond", try_To_BondColumnBase0);
            var typeColumnBase10 = new ColumnBase<ColumnMappingBase>("type", "int unsigned", aCEDatabaseModelsWorldWeeniePropertiesEmoteActionTableBase);
            aCEDatabaseModelsWorldWeeniePropertiesEmoteActionTableBase.Columns.Add("type", typeColumnBase10);
            var wealth_RatingColumnBase = new ColumnBase<ColumnMappingBase>("wealth_Rating", "int", aCEDatabaseModelsWorldWeeniePropertiesEmoteActionTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsWorldWeeniePropertiesEmoteActionTableBase.Columns.Add("wealth_Rating", wealth_RatingColumnBase);
            var weenie_Class_IdColumnBase5 = new ColumnBase<ColumnMappingBase>("weenie_Class_Id", "int unsigned", aCEDatabaseModelsWorldWeeniePropertiesEmoteActionTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsWorldWeeniePropertiesEmoteActionTableBase.Columns.Add("weenie_Class_Id", weenie_Class_IdColumnBase5);
            relationalModel.DefaultTables.Add("ACE.Database.Models.World.WeeniePropertiesEmoteAction", aCEDatabaseModelsWorldWeeniePropertiesEmoteActionTableBase);
            var aCEDatabaseModelsWorldWeeniePropertiesEmoteActionMappingBase = new TableMappingBase<ColumnMappingBase>(weeniePropertiesEmoteAction, aCEDatabaseModelsWorldWeeniePropertiesEmoteActionTableBase, true);
            aCEDatabaseModelsWorldWeeniePropertiesEmoteActionTableBase.AddTypeMapping(aCEDatabaseModelsWorldWeeniePropertiesEmoteActionMappingBase, false);
            defaultTableMappings47.Add(aCEDatabaseModelsWorldWeeniePropertiesEmoteActionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase39, weeniePropertiesEmoteAction.FindProperty("Id")!, aCEDatabaseModelsWorldWeeniePropertiesEmoteActionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)amountColumnBase, weeniePropertiesEmoteAction.FindProperty("Amount")!, aCEDatabaseModelsWorldWeeniePropertiesEmoteActionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)amount_64ColumnBase, weeniePropertiesEmoteAction.FindProperty("Amount64")!, aCEDatabaseModelsWorldWeeniePropertiesEmoteActionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)angles_WColumnBase1, weeniePropertiesEmoteAction.FindProperty("AnglesW")!, aCEDatabaseModelsWorldWeeniePropertiesEmoteActionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)angles_XColumnBase1, weeniePropertiesEmoteAction.FindProperty("AnglesX")!, aCEDatabaseModelsWorldWeeniePropertiesEmoteActionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)angles_YColumnBase1, weeniePropertiesEmoteAction.FindProperty("AnglesY")!, aCEDatabaseModelsWorldWeeniePropertiesEmoteActionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)angles_ZColumnBase1, weeniePropertiesEmoteAction.FindProperty("AnglesZ")!, aCEDatabaseModelsWorldWeeniePropertiesEmoteActionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)delayColumnBase, weeniePropertiesEmoteAction.FindProperty("Delay")!, aCEDatabaseModelsWorldWeeniePropertiesEmoteActionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)destination_TypeColumnBase0, weeniePropertiesEmoteAction.FindProperty("DestinationType")!, aCEDatabaseModelsWorldWeeniePropertiesEmoteActionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)displayColumnBase, weeniePropertiesEmoteAction.FindProperty("Display")!, aCEDatabaseModelsWorldWeeniePropertiesEmoteActionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)emote_IdColumnBase, weeniePropertiesEmoteAction.FindProperty("EmoteId")!, aCEDatabaseModelsWorldWeeniePropertiesEmoteActionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)extentColumnBase, weeniePropertiesEmoteAction.FindProperty("Extent")!, aCEDatabaseModelsWorldWeeniePropertiesEmoteActionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)hero_X_P_64ColumnBase, weeniePropertiesEmoteAction.FindProperty("HeroXP64")!, aCEDatabaseModelsWorldWeeniePropertiesEmoteActionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)maxColumnBase, weeniePropertiesEmoteAction.FindProperty("Max")!, aCEDatabaseModelsWorldWeeniePropertiesEmoteActionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)max_64ColumnBase, weeniePropertiesEmoteAction.FindProperty("Max64")!, aCEDatabaseModelsWorldWeeniePropertiesEmoteActionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)max_DblColumnBase, weeniePropertiesEmoteAction.FindProperty("MaxDbl")!, aCEDatabaseModelsWorldWeeniePropertiesEmoteActionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)messageColumnBase6, weeniePropertiesEmoteAction.FindProperty("Message")!, aCEDatabaseModelsWorldWeeniePropertiesEmoteActionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)minColumnBase, weeniePropertiesEmoteAction.FindProperty("Min")!, aCEDatabaseModelsWorldWeeniePropertiesEmoteActionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)min_64ColumnBase, weeniePropertiesEmoteAction.FindProperty("Min64")!, aCEDatabaseModelsWorldWeeniePropertiesEmoteActionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)min_DblColumnBase, weeniePropertiesEmoteAction.FindProperty("MinDbl")!, aCEDatabaseModelsWorldWeeniePropertiesEmoteActionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)motionColumnBase, weeniePropertiesEmoteAction.FindProperty("Motion")!, aCEDatabaseModelsWorldWeeniePropertiesEmoteActionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)obj_Cell_IdColumnBase1, weeniePropertiesEmoteAction.FindProperty("ObjCellId")!, aCEDatabaseModelsWorldWeeniePropertiesEmoteActionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)orderColumnBase0, weeniePropertiesEmoteAction.FindProperty("Order")!, aCEDatabaseModelsWorldWeeniePropertiesEmoteActionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)origin_XColumnBase1, weeniePropertiesEmoteAction.FindProperty("OriginX")!, aCEDatabaseModelsWorldWeeniePropertiesEmoteActionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)origin_YColumnBase1, weeniePropertiesEmoteAction.FindProperty("OriginY")!, aCEDatabaseModelsWorldWeeniePropertiesEmoteActionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)origin_ZColumnBase1, weeniePropertiesEmoteAction.FindProperty("OriginZ")!, aCEDatabaseModelsWorldWeeniePropertiesEmoteActionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)p_ScriptColumnBase, weeniePropertiesEmoteAction.FindProperty("PScript")!, aCEDatabaseModelsWorldWeeniePropertiesEmoteActionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)paletteColumnBase0, weeniePropertiesEmoteAction.FindProperty("Palette")!, aCEDatabaseModelsWorldWeeniePropertiesEmoteActionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)percentColumnBase, weeniePropertiesEmoteAction.FindProperty("Percent")!, aCEDatabaseModelsWorldWeeniePropertiesEmoteActionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)shadeColumnBase1, weeniePropertiesEmoteAction.FindProperty("Shade")!, aCEDatabaseModelsWorldWeeniePropertiesEmoteActionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)soundColumnBase, weeniePropertiesEmoteAction.FindProperty("Sound")!, aCEDatabaseModelsWorldWeeniePropertiesEmoteActionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)spell_IdColumnBase, weeniePropertiesEmoteAction.FindProperty("SpellId")!, aCEDatabaseModelsWorldWeeniePropertiesEmoteActionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)stack_SizeColumnBase1, weeniePropertiesEmoteAction.FindProperty("StackSize")!, aCEDatabaseModelsWorldWeeniePropertiesEmoteActionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)statColumnBase11, weeniePropertiesEmoteAction.FindProperty("Stat")!, aCEDatabaseModelsWorldWeeniePropertiesEmoteActionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)test_StringColumnBase, weeniePropertiesEmoteAction.FindProperty("TestString")!, aCEDatabaseModelsWorldWeeniePropertiesEmoteActionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)treasure_ClassColumnBase, weeniePropertiesEmoteAction.FindProperty("TreasureClass")!, aCEDatabaseModelsWorldWeeniePropertiesEmoteActionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)treasure_TypeColumnBase1, weeniePropertiesEmoteAction.FindProperty("TreasureType")!, aCEDatabaseModelsWorldWeeniePropertiesEmoteActionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)try_To_BondColumnBase0, weeniePropertiesEmoteAction.FindProperty("TryToBond")!, aCEDatabaseModelsWorldWeeniePropertiesEmoteActionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)typeColumnBase10, weeniePropertiesEmoteAction.FindProperty("Type")!, aCEDatabaseModelsWorldWeeniePropertiesEmoteActionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)wealth_RatingColumnBase, weeniePropertiesEmoteAction.FindProperty("WealthRating")!, aCEDatabaseModelsWorldWeeniePropertiesEmoteActionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)weenie_Class_IdColumnBase5, weeniePropertiesEmoteAction.FindProperty("WeenieClassId")!, aCEDatabaseModelsWorldWeeniePropertiesEmoteActionMappingBase);

            var tableMappings47 = new List<TableMapping>();
            weeniePropertiesEmoteAction.SetRuntimeAnnotation("Relational:TableMappings", tableMappings47);
            var weenie_properties_emote_actionTable = new Table("weenie_properties_emote_action", null, relationalModel);
            var idColumn39 = new Column("id", "int unsigned", weenie_properties_emote_actionTable);
            weenie_properties_emote_actionTable.Columns.Add("id", idColumn39);
            var amountColumn = new Column("amount", "int", weenie_properties_emote_actionTable)
            {
                IsNullable = true
            };
            weenie_properties_emote_actionTable.Columns.Add("amount", amountColumn);
            var amount_64Column = new Column("amount_64", "bigint", weenie_properties_emote_actionTable)
            {
                IsNullable = true
            };
            weenie_properties_emote_actionTable.Columns.Add("amount_64", amount_64Column);
            var angles_WColumn1 = new Column("angles_W", "float", weenie_properties_emote_actionTable)
            {
                IsNullable = true
            };
            weenie_properties_emote_actionTable.Columns.Add("angles_W", angles_WColumn1);
            var angles_XColumn1 = new Column("angles_X", "float", weenie_properties_emote_actionTable)
            {
                IsNullable = true
            };
            weenie_properties_emote_actionTable.Columns.Add("angles_X", angles_XColumn1);
            var angles_YColumn1 = new Column("angles_Y", "float", weenie_properties_emote_actionTable)
            {
                IsNullable = true
            };
            weenie_properties_emote_actionTable.Columns.Add("angles_Y", angles_YColumn1);
            var angles_ZColumn1 = new Column("angles_Z", "float", weenie_properties_emote_actionTable)
            {
                IsNullable = true
            };
            weenie_properties_emote_actionTable.Columns.Add("angles_Z", angles_ZColumn1);
            var delayColumn = new Column("delay", "float", weenie_properties_emote_actionTable);
            weenie_properties_emote_actionTable.Columns.Add("delay", delayColumn);
            var destination_TypeColumn0 = new Column("destination_Type", "tinyint", weenie_properties_emote_actionTable)
            {
                IsNullable = true
            };
            weenie_properties_emote_actionTable.Columns.Add("destination_Type", destination_TypeColumn0);
            var displayColumn = new Column("display", "bit(1)", weenie_properties_emote_actionTable)
            {
                IsNullable = true
            };
            weenie_properties_emote_actionTable.Columns.Add("display", displayColumn);
            var emote_IdColumn = new Column("emote_Id", "int unsigned", weenie_properties_emote_actionTable);
            weenie_properties_emote_actionTable.Columns.Add("emote_Id", emote_IdColumn);
            var extentColumn = new Column("extent", "float", weenie_properties_emote_actionTable);
            weenie_properties_emote_actionTable.Columns.Add("extent", extentColumn);
            var hero_X_P_64Column = new Column("hero_X_P_64", "bigint", weenie_properties_emote_actionTable)
            {
                IsNullable = true
            };
            weenie_properties_emote_actionTable.Columns.Add("hero_X_P_64", hero_X_P_64Column);
            var maxColumn = new Column("max", "int", weenie_properties_emote_actionTable)
            {
                IsNullable = true
            };
            weenie_properties_emote_actionTable.Columns.Add("max", maxColumn);
            var max_64Column = new Column("max_64", "bigint", weenie_properties_emote_actionTable)
            {
                IsNullable = true
            };
            weenie_properties_emote_actionTable.Columns.Add("max_64", max_64Column);
            var max_DblColumn = new Column("max_Dbl", "double", weenie_properties_emote_actionTable)
            {
                IsNullable = true
            };
            weenie_properties_emote_actionTable.Columns.Add("max_Dbl", max_DblColumn);
            var messageColumn6 = new Column("message", "text", weenie_properties_emote_actionTable)
            {
                IsNullable = true
            };
            weenie_properties_emote_actionTable.Columns.Add("message", messageColumn6);
            var minColumn = new Column("min", "int", weenie_properties_emote_actionTable)
            {
                IsNullable = true
            };
            weenie_properties_emote_actionTable.Columns.Add("min", minColumn);
            var min_64Column = new Column("min_64", "bigint", weenie_properties_emote_actionTable)
            {
                IsNullable = true
            };
            weenie_properties_emote_actionTable.Columns.Add("min_64", min_64Column);
            var min_DblColumn = new Column("min_Dbl", "double", weenie_properties_emote_actionTable)
            {
                IsNullable = true
            };
            weenie_properties_emote_actionTable.Columns.Add("min_Dbl", min_DblColumn);
            var motionColumn = new Column("motion", "int unsigned", weenie_properties_emote_actionTable)
            {
                IsNullable = true
            };
            weenie_properties_emote_actionTable.Columns.Add("motion", motionColumn);
            var obj_Cell_IdColumn1 = new Column("obj_Cell_Id", "int unsigned", weenie_properties_emote_actionTable)
            {
                IsNullable = true
            };
            weenie_properties_emote_actionTable.Columns.Add("obj_Cell_Id", obj_Cell_IdColumn1);
            var orderColumn0 = new Column("order", "int unsigned", weenie_properties_emote_actionTable);
            weenie_properties_emote_actionTable.Columns.Add("order", orderColumn0);
            var origin_XColumn1 = new Column("origin_X", "float", weenie_properties_emote_actionTable)
            {
                IsNullable = true
            };
            weenie_properties_emote_actionTable.Columns.Add("origin_X", origin_XColumn1);
            var origin_YColumn1 = new Column("origin_Y", "float", weenie_properties_emote_actionTable)
            {
                IsNullable = true
            };
            weenie_properties_emote_actionTable.Columns.Add("origin_Y", origin_YColumn1);
            var origin_ZColumn1 = new Column("origin_Z", "float", weenie_properties_emote_actionTable)
            {
                IsNullable = true
            };
            weenie_properties_emote_actionTable.Columns.Add("origin_Z", origin_ZColumn1);
            var p_ScriptColumn = new Column("p_Script", "int", weenie_properties_emote_actionTable)
            {
                IsNullable = true
            };
            weenie_properties_emote_actionTable.Columns.Add("p_Script", p_ScriptColumn);
            var paletteColumn0 = new Column("palette", "int", weenie_properties_emote_actionTable)
            {
                IsNullable = true
            };
            weenie_properties_emote_actionTable.Columns.Add("palette", paletteColumn0);
            var percentColumn = new Column("percent", "double", weenie_properties_emote_actionTable)
            {
                IsNullable = true
            };
            weenie_properties_emote_actionTable.Columns.Add("percent", percentColumn);
            var shadeColumn1 = new Column("shade", "float", weenie_properties_emote_actionTable)
            {
                IsNullable = true
            };
            weenie_properties_emote_actionTable.Columns.Add("shade", shadeColumn1);
            var soundColumn = new Column("sound", "int", weenie_properties_emote_actionTable)
            {
                IsNullable = true
            };
            weenie_properties_emote_actionTable.Columns.Add("sound", soundColumn);
            var spell_IdColumn = new Column("spell_Id", "int", weenie_properties_emote_actionTable)
            {
                IsNullable = true
            };
            weenie_properties_emote_actionTable.Columns.Add("spell_Id", spell_IdColumn);
            var stack_SizeColumn1 = new Column("stack_Size", "int", weenie_properties_emote_actionTable)
            {
                IsNullable = true
            };
            weenie_properties_emote_actionTable.Columns.Add("stack_Size", stack_SizeColumn1);
            var statColumn11 = new Column("stat", "int", weenie_properties_emote_actionTable)
            {
                IsNullable = true
            };
            weenie_properties_emote_actionTable.Columns.Add("stat", statColumn11);
            var test_StringColumn = new Column("test_String", "text", weenie_properties_emote_actionTable)
            {
                IsNullable = true
            };
            weenie_properties_emote_actionTable.Columns.Add("test_String", test_StringColumn);
            var treasure_ClassColumn = new Column("treasure_Class", "int", weenie_properties_emote_actionTable)
            {
                IsNullable = true
            };
            weenie_properties_emote_actionTable.Columns.Add("treasure_Class", treasure_ClassColumn);
            var treasure_TypeColumn1 = new Column("treasure_Type", "int", weenie_properties_emote_actionTable)
            {
                IsNullable = true
            };
            weenie_properties_emote_actionTable.Columns.Add("treasure_Type", treasure_TypeColumn1);
            var try_To_BondColumn0 = new Column("try_To_Bond", "bit(1)", weenie_properties_emote_actionTable)
            {
                IsNullable = true
            };
            weenie_properties_emote_actionTable.Columns.Add("try_To_Bond", try_To_BondColumn0);
            var typeColumn10 = new Column("type", "int unsigned", weenie_properties_emote_actionTable);
            weenie_properties_emote_actionTable.Columns.Add("type", typeColumn10);
            var wealth_RatingColumn = new Column("wealth_Rating", "int", weenie_properties_emote_actionTable)
            {
                IsNullable = true
            };
            weenie_properties_emote_actionTable.Columns.Add("wealth_Rating", wealth_RatingColumn);
            var weenie_Class_IdColumn5 = new Column("weenie_Class_Id", "int unsigned", weenie_properties_emote_actionTable)
            {
                IsNullable = true
            };
            weenie_properties_emote_actionTable.Columns.Add("weenie_Class_Id", weenie_Class_IdColumn5);
            var pK_weenie_properties_emote_action = new UniqueConstraint("PK_weenie_properties_emote_action", weenie_properties_emote_actionTable, new[] { idColumn39 });
            weenie_properties_emote_actionTable.PrimaryKey = pK_weenie_properties_emote_action;
            var pK_weenie_properties_emote_actionUc = RelationalModel.GetKey(this,
                "ACE.Database.Models.World.WeeniePropertiesEmoteAction",
                new[] { "Id" });
            pK_weenie_properties_emote_action.MappedKeys.Add(pK_weenie_properties_emote_actionUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_weenie_properties_emote_actionUc).Add(pK_weenie_properties_emote_action);
            weenie_properties_emote_actionTable.UniqueConstraints.Add("PK_weenie_properties_emote_action", pK_weenie_properties_emote_action);
            var emoteid_order_uidx = new TableIndex(
            "emoteid_order_uidx", weenie_properties_emote_actionTable, new[] { emote_IdColumn, orderColumn0 }, true);
            var emoteid_order_uidxIx = RelationalModel.GetIndex(this,
                "ACE.Database.Models.World.WeeniePropertiesEmoteAction",
                "emoteid_order_uidx");
            emoteid_order_uidx.MappedIndexes.Add(emoteid_order_uidxIx);
            RelationalModel.GetOrCreateTableIndexes(emoteid_order_uidxIx).Add(emoteid_order_uidx);
            weenie_properties_emote_actionTable.Indexes.Add("emoteid_order_uidx", emoteid_order_uidx);
            relationalModel.Tables.Add(("weenie_properties_emote_action", null), weenie_properties_emote_actionTable);
            var weenie_properties_emote_actionTableMapping = new TableMapping(weeniePropertiesEmoteAction, weenie_properties_emote_actionTable, true);
            weenie_properties_emote_actionTable.AddTypeMapping(weenie_properties_emote_actionTableMapping, false);
            tableMappings47.Add(weenie_properties_emote_actionTableMapping);
            RelationalModel.CreateColumnMapping(idColumn39, weeniePropertiesEmoteAction.FindProperty("Id")!, weenie_properties_emote_actionTableMapping);
            RelationalModel.CreateColumnMapping(amountColumn, weeniePropertiesEmoteAction.FindProperty("Amount")!, weenie_properties_emote_actionTableMapping);
            RelationalModel.CreateColumnMapping(amount_64Column, weeniePropertiesEmoteAction.FindProperty("Amount64")!, weenie_properties_emote_actionTableMapping);
            RelationalModel.CreateColumnMapping(angles_WColumn1, weeniePropertiesEmoteAction.FindProperty("AnglesW")!, weenie_properties_emote_actionTableMapping);
            RelationalModel.CreateColumnMapping(angles_XColumn1, weeniePropertiesEmoteAction.FindProperty("AnglesX")!, weenie_properties_emote_actionTableMapping);
            RelationalModel.CreateColumnMapping(angles_YColumn1, weeniePropertiesEmoteAction.FindProperty("AnglesY")!, weenie_properties_emote_actionTableMapping);
            RelationalModel.CreateColumnMapping(angles_ZColumn1, weeniePropertiesEmoteAction.FindProperty("AnglesZ")!, weenie_properties_emote_actionTableMapping);
            RelationalModel.CreateColumnMapping(delayColumn, weeniePropertiesEmoteAction.FindProperty("Delay")!, weenie_properties_emote_actionTableMapping);
            RelationalModel.CreateColumnMapping(destination_TypeColumn0, weeniePropertiesEmoteAction.FindProperty("DestinationType")!, weenie_properties_emote_actionTableMapping);
            RelationalModel.CreateColumnMapping(displayColumn, weeniePropertiesEmoteAction.FindProperty("Display")!, weenie_properties_emote_actionTableMapping);
            RelationalModel.CreateColumnMapping(emote_IdColumn, weeniePropertiesEmoteAction.FindProperty("EmoteId")!, weenie_properties_emote_actionTableMapping);
            RelationalModel.CreateColumnMapping(extentColumn, weeniePropertiesEmoteAction.FindProperty("Extent")!, weenie_properties_emote_actionTableMapping);
            RelationalModel.CreateColumnMapping(hero_X_P_64Column, weeniePropertiesEmoteAction.FindProperty("HeroXP64")!, weenie_properties_emote_actionTableMapping);
            RelationalModel.CreateColumnMapping(maxColumn, weeniePropertiesEmoteAction.FindProperty("Max")!, weenie_properties_emote_actionTableMapping);
            RelationalModel.CreateColumnMapping(max_64Column, weeniePropertiesEmoteAction.FindProperty("Max64")!, weenie_properties_emote_actionTableMapping);
            RelationalModel.CreateColumnMapping(max_DblColumn, weeniePropertiesEmoteAction.FindProperty("MaxDbl")!, weenie_properties_emote_actionTableMapping);
            RelationalModel.CreateColumnMapping(messageColumn6, weeniePropertiesEmoteAction.FindProperty("Message")!, weenie_properties_emote_actionTableMapping);
            RelationalModel.CreateColumnMapping(minColumn, weeniePropertiesEmoteAction.FindProperty("Min")!, weenie_properties_emote_actionTableMapping);
            RelationalModel.CreateColumnMapping(min_64Column, weeniePropertiesEmoteAction.FindProperty("Min64")!, weenie_properties_emote_actionTableMapping);
            RelationalModel.CreateColumnMapping(min_DblColumn, weeniePropertiesEmoteAction.FindProperty("MinDbl")!, weenie_properties_emote_actionTableMapping);
            RelationalModel.CreateColumnMapping(motionColumn, weeniePropertiesEmoteAction.FindProperty("Motion")!, weenie_properties_emote_actionTableMapping);
            RelationalModel.CreateColumnMapping(obj_Cell_IdColumn1, weeniePropertiesEmoteAction.FindProperty("ObjCellId")!, weenie_properties_emote_actionTableMapping);
            RelationalModel.CreateColumnMapping(orderColumn0, weeniePropertiesEmoteAction.FindProperty("Order")!, weenie_properties_emote_actionTableMapping);
            RelationalModel.CreateColumnMapping(origin_XColumn1, weeniePropertiesEmoteAction.FindProperty("OriginX")!, weenie_properties_emote_actionTableMapping);
            RelationalModel.CreateColumnMapping(origin_YColumn1, weeniePropertiesEmoteAction.FindProperty("OriginY")!, weenie_properties_emote_actionTableMapping);
            RelationalModel.CreateColumnMapping(origin_ZColumn1, weeniePropertiesEmoteAction.FindProperty("OriginZ")!, weenie_properties_emote_actionTableMapping);
            RelationalModel.CreateColumnMapping(p_ScriptColumn, weeniePropertiesEmoteAction.FindProperty("PScript")!, weenie_properties_emote_actionTableMapping);
            RelationalModel.CreateColumnMapping(paletteColumn0, weeniePropertiesEmoteAction.FindProperty("Palette")!, weenie_properties_emote_actionTableMapping);
            RelationalModel.CreateColumnMapping(percentColumn, weeniePropertiesEmoteAction.FindProperty("Percent")!, weenie_properties_emote_actionTableMapping);
            RelationalModel.CreateColumnMapping(shadeColumn1, weeniePropertiesEmoteAction.FindProperty("Shade")!, weenie_properties_emote_actionTableMapping);
            RelationalModel.CreateColumnMapping(soundColumn, weeniePropertiesEmoteAction.FindProperty("Sound")!, weenie_properties_emote_actionTableMapping);
            RelationalModel.CreateColumnMapping(spell_IdColumn, weeniePropertiesEmoteAction.FindProperty("SpellId")!, weenie_properties_emote_actionTableMapping);
            RelationalModel.CreateColumnMapping(stack_SizeColumn1, weeniePropertiesEmoteAction.FindProperty("StackSize")!, weenie_properties_emote_actionTableMapping);
            RelationalModel.CreateColumnMapping(statColumn11, weeniePropertiesEmoteAction.FindProperty("Stat")!, weenie_properties_emote_actionTableMapping);
            RelationalModel.CreateColumnMapping(test_StringColumn, weeniePropertiesEmoteAction.FindProperty("TestString")!, weenie_properties_emote_actionTableMapping);
            RelationalModel.CreateColumnMapping(treasure_ClassColumn, weeniePropertiesEmoteAction.FindProperty("TreasureClass")!, weenie_properties_emote_actionTableMapping);
            RelationalModel.CreateColumnMapping(treasure_TypeColumn1, weeniePropertiesEmoteAction.FindProperty("TreasureType")!, weenie_properties_emote_actionTableMapping);
            RelationalModel.CreateColumnMapping(try_To_BondColumn0, weeniePropertiesEmoteAction.FindProperty("TryToBond")!, weenie_properties_emote_actionTableMapping);
            RelationalModel.CreateColumnMapping(typeColumn10, weeniePropertiesEmoteAction.FindProperty("Type")!, weenie_properties_emote_actionTableMapping);
            RelationalModel.CreateColumnMapping(wealth_RatingColumn, weeniePropertiesEmoteAction.FindProperty("WealthRating")!, weenie_properties_emote_actionTableMapping);
            RelationalModel.CreateColumnMapping(weenie_Class_IdColumn5, weeniePropertiesEmoteAction.FindProperty("WeenieClassId")!, weenie_properties_emote_actionTableMapping);

            var weeniePropertiesEventFilter = FindEntityType("ACE.Database.Models.World.WeeniePropertiesEventFilter")!;

            var defaultTableMappings48 = new List<TableMappingBase<ColumnMappingBase>>();
            weeniePropertiesEventFilter.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings48);
            var aCEDatabaseModelsWorldWeeniePropertiesEventFilterTableBase = new TableBase("ACE.Database.Models.World.WeeniePropertiesEventFilter", null, relationalModel);
            var eventColumnBase = new ColumnBase<ColumnMappingBase>("event", "int", aCEDatabaseModelsWorldWeeniePropertiesEventFilterTableBase);
            aCEDatabaseModelsWorldWeeniePropertiesEventFilterTableBase.Columns.Add("event", eventColumnBase);
            var idColumnBase40 = new ColumnBase<ColumnMappingBase>("id", "int unsigned", aCEDatabaseModelsWorldWeeniePropertiesEventFilterTableBase);
            aCEDatabaseModelsWorldWeeniePropertiesEventFilterTableBase.Columns.Add("id", idColumnBase40);
            var object_IdColumnBase9 = new ColumnBase<ColumnMappingBase>("object_Id", "int unsigned", aCEDatabaseModelsWorldWeeniePropertiesEventFilterTableBase);
            aCEDatabaseModelsWorldWeeniePropertiesEventFilterTableBase.Columns.Add("object_Id", object_IdColumnBase9);
            relationalModel.DefaultTables.Add("ACE.Database.Models.World.WeeniePropertiesEventFilter", aCEDatabaseModelsWorldWeeniePropertiesEventFilterTableBase);
            var aCEDatabaseModelsWorldWeeniePropertiesEventFilterMappingBase = new TableMappingBase<ColumnMappingBase>(weeniePropertiesEventFilter, aCEDatabaseModelsWorldWeeniePropertiesEventFilterTableBase, true);
            aCEDatabaseModelsWorldWeeniePropertiesEventFilterTableBase.AddTypeMapping(aCEDatabaseModelsWorldWeeniePropertiesEventFilterMappingBase, false);
            defaultTableMappings48.Add(aCEDatabaseModelsWorldWeeniePropertiesEventFilterMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase40, weeniePropertiesEventFilter.FindProperty("Id")!, aCEDatabaseModelsWorldWeeniePropertiesEventFilterMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)eventColumnBase, weeniePropertiesEventFilter.FindProperty("Event")!, aCEDatabaseModelsWorldWeeniePropertiesEventFilterMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)object_IdColumnBase9, weeniePropertiesEventFilter.FindProperty("ObjectId")!, aCEDatabaseModelsWorldWeeniePropertiesEventFilterMappingBase);

            var tableMappings48 = new List<TableMapping>();
            weeniePropertiesEventFilter.SetRuntimeAnnotation("Relational:TableMappings", tableMappings48);
            var weenie_properties_event_filterTable = new Table("weenie_properties_event_filter", null, relationalModel);
            var idColumn40 = new Column("id", "int unsigned", weenie_properties_event_filterTable);
            weenie_properties_event_filterTable.Columns.Add("id", idColumn40);
            var eventColumn = new Column("event", "int", weenie_properties_event_filterTable);
            weenie_properties_event_filterTable.Columns.Add("event", eventColumn);
            var object_IdColumn9 = new Column("object_Id", "int unsigned", weenie_properties_event_filterTable);
            weenie_properties_event_filterTable.Columns.Add("object_Id", object_IdColumn9);
            var pK_weenie_properties_event_filter = new UniqueConstraint("PK_weenie_properties_event_filter", weenie_properties_event_filterTable, new[] { idColumn40 });
            weenie_properties_event_filterTable.PrimaryKey = pK_weenie_properties_event_filter;
            var pK_weenie_properties_event_filterUc = RelationalModel.GetKey(this,
                "ACE.Database.Models.World.WeeniePropertiesEventFilter",
                new[] { "Id" });
            pK_weenie_properties_event_filter.MappedKeys.Add(pK_weenie_properties_event_filterUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_weenie_properties_event_filterUc).Add(pK_weenie_properties_event_filter);
            weenie_properties_event_filterTable.UniqueConstraints.Add("PK_weenie_properties_event_filter", pK_weenie_properties_event_filter);
            var wcid_eventfilter_type_uidx = new TableIndex(
            "wcid_eventfilter_type_uidx", weenie_properties_event_filterTable, new[] { object_IdColumn9, eventColumn }, true);
            var wcid_eventfilter_type_uidxIx = RelationalModel.GetIndex(this,
                "ACE.Database.Models.World.WeeniePropertiesEventFilter",
                "wcid_eventfilter_type_uidx");
            wcid_eventfilter_type_uidx.MappedIndexes.Add(wcid_eventfilter_type_uidxIx);
            RelationalModel.GetOrCreateTableIndexes(wcid_eventfilter_type_uidxIx).Add(wcid_eventfilter_type_uidx);
            weenie_properties_event_filterTable.Indexes.Add("wcid_eventfilter_type_uidx", wcid_eventfilter_type_uidx);
            relationalModel.Tables.Add(("weenie_properties_event_filter", null), weenie_properties_event_filterTable);
            var weenie_properties_event_filterTableMapping = new TableMapping(weeniePropertiesEventFilter, weenie_properties_event_filterTable, true);
            weenie_properties_event_filterTable.AddTypeMapping(weenie_properties_event_filterTableMapping, false);
            tableMappings48.Add(weenie_properties_event_filterTableMapping);
            RelationalModel.CreateColumnMapping(idColumn40, weeniePropertiesEventFilter.FindProperty("Id")!, weenie_properties_event_filterTableMapping);
            RelationalModel.CreateColumnMapping(eventColumn, weeniePropertiesEventFilter.FindProperty("Event")!, weenie_properties_event_filterTableMapping);
            RelationalModel.CreateColumnMapping(object_IdColumn9, weeniePropertiesEventFilter.FindProperty("ObjectId")!, weenie_properties_event_filterTableMapping);

            var weeniePropertiesFloat = FindEntityType("ACE.Database.Models.World.WeeniePropertiesFloat")!;

            var defaultTableMappings49 = new List<TableMappingBase<ColumnMappingBase>>();
            weeniePropertiesFloat.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings49);
            var aCEDatabaseModelsWorldWeeniePropertiesFloatTableBase = new TableBase("ACE.Database.Models.World.WeeniePropertiesFloat", null, relationalModel);
            var idColumnBase41 = new ColumnBase<ColumnMappingBase>("id", "int unsigned", aCEDatabaseModelsWorldWeeniePropertiesFloatTableBase);
            aCEDatabaseModelsWorldWeeniePropertiesFloatTableBase.Columns.Add("id", idColumnBase41);
            var object_IdColumnBase10 = new ColumnBase<ColumnMappingBase>("object_Id", "int unsigned", aCEDatabaseModelsWorldWeeniePropertiesFloatTableBase);
            aCEDatabaseModelsWorldWeeniePropertiesFloatTableBase.Columns.Add("object_Id", object_IdColumnBase10);
            var typeColumnBase11 = new ColumnBase<ColumnMappingBase>("type", "smallint unsigned", aCEDatabaseModelsWorldWeeniePropertiesFloatTableBase);
            aCEDatabaseModelsWorldWeeniePropertiesFloatTableBase.Columns.Add("type", typeColumnBase11);
            var valueColumnBase18 = new ColumnBase<ColumnMappingBase>("value", "double", aCEDatabaseModelsWorldWeeniePropertiesFloatTableBase);
            aCEDatabaseModelsWorldWeeniePropertiesFloatTableBase.Columns.Add("value", valueColumnBase18);
            relationalModel.DefaultTables.Add("ACE.Database.Models.World.WeeniePropertiesFloat", aCEDatabaseModelsWorldWeeniePropertiesFloatTableBase);
            var aCEDatabaseModelsWorldWeeniePropertiesFloatMappingBase = new TableMappingBase<ColumnMappingBase>(weeniePropertiesFloat, aCEDatabaseModelsWorldWeeniePropertiesFloatTableBase, true);
            aCEDatabaseModelsWorldWeeniePropertiesFloatTableBase.AddTypeMapping(aCEDatabaseModelsWorldWeeniePropertiesFloatMappingBase, false);
            defaultTableMappings49.Add(aCEDatabaseModelsWorldWeeniePropertiesFloatMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase41, weeniePropertiesFloat.FindProperty("Id")!, aCEDatabaseModelsWorldWeeniePropertiesFloatMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)object_IdColumnBase10, weeniePropertiesFloat.FindProperty("ObjectId")!, aCEDatabaseModelsWorldWeeniePropertiesFloatMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)typeColumnBase11, weeniePropertiesFloat.FindProperty("Type")!, aCEDatabaseModelsWorldWeeniePropertiesFloatMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)valueColumnBase18, weeniePropertiesFloat.FindProperty("Value")!, aCEDatabaseModelsWorldWeeniePropertiesFloatMappingBase);

            var tableMappings49 = new List<TableMapping>();
            weeniePropertiesFloat.SetRuntimeAnnotation("Relational:TableMappings", tableMappings49);
            var weenie_properties_floatTable = new Table("weenie_properties_float", null, relationalModel);
            var idColumn41 = new Column("id", "int unsigned", weenie_properties_floatTable);
            weenie_properties_floatTable.Columns.Add("id", idColumn41);
            var object_IdColumn10 = new Column("object_Id", "int unsigned", weenie_properties_floatTable);
            weenie_properties_floatTable.Columns.Add("object_Id", object_IdColumn10);
            var typeColumn11 = new Column("type", "smallint unsigned", weenie_properties_floatTable);
            weenie_properties_floatTable.Columns.Add("type", typeColumn11);
            var valueColumn18 = new Column("value", "double", weenie_properties_floatTable);
            weenie_properties_floatTable.Columns.Add("value", valueColumn18);
            var pK_weenie_properties_float = new UniqueConstraint("PK_weenie_properties_float", weenie_properties_floatTable, new[] { idColumn41 });
            weenie_properties_floatTable.PrimaryKey = pK_weenie_properties_float;
            var pK_weenie_properties_floatUc = RelationalModel.GetKey(this,
                "ACE.Database.Models.World.WeeniePropertiesFloat",
                new[] { "Id" });
            pK_weenie_properties_float.MappedKeys.Add(pK_weenie_properties_floatUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_weenie_properties_floatUc).Add(pK_weenie_properties_float);
            weenie_properties_floatTable.UniqueConstraints.Add("PK_weenie_properties_float", pK_weenie_properties_float);
            var wcid_float_type_uidx = new TableIndex(
            "wcid_float_type_uidx", weenie_properties_floatTable, new[] { object_IdColumn10, typeColumn11 }, true);
            var wcid_float_type_uidxIx = RelationalModel.GetIndex(this,
                "ACE.Database.Models.World.WeeniePropertiesFloat",
                "wcid_float_type_uidx");
            wcid_float_type_uidx.MappedIndexes.Add(wcid_float_type_uidxIx);
            RelationalModel.GetOrCreateTableIndexes(wcid_float_type_uidxIx).Add(wcid_float_type_uidx);
            weenie_properties_floatTable.Indexes.Add("wcid_float_type_uidx", wcid_float_type_uidx);
            relationalModel.Tables.Add(("weenie_properties_float", null), weenie_properties_floatTable);
            var weenie_properties_floatTableMapping = new TableMapping(weeniePropertiesFloat, weenie_properties_floatTable, true);
            weenie_properties_floatTable.AddTypeMapping(weenie_properties_floatTableMapping, false);
            tableMappings49.Add(weenie_properties_floatTableMapping);
            RelationalModel.CreateColumnMapping(idColumn41, weeniePropertiesFloat.FindProperty("Id")!, weenie_properties_floatTableMapping);
            RelationalModel.CreateColumnMapping(object_IdColumn10, weeniePropertiesFloat.FindProperty("ObjectId")!, weenie_properties_floatTableMapping);
            RelationalModel.CreateColumnMapping(typeColumn11, weeniePropertiesFloat.FindProperty("Type")!, weenie_properties_floatTableMapping);
            RelationalModel.CreateColumnMapping(valueColumn18, weeniePropertiesFloat.FindProperty("Value")!, weenie_properties_floatTableMapping);

            var weeniePropertiesGenerator = FindEntityType("ACE.Database.Models.World.WeeniePropertiesGenerator")!;

            var defaultTableMappings50 = new List<TableMappingBase<ColumnMappingBase>>();
            weeniePropertiesGenerator.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings50);
            var aCEDatabaseModelsWorldWeeniePropertiesGeneratorTableBase = new TableBase("ACE.Database.Models.World.WeeniePropertiesGenerator", null, relationalModel);
            var angles_WColumnBase2 = new ColumnBase<ColumnMappingBase>("angles_W", "float", aCEDatabaseModelsWorldWeeniePropertiesGeneratorTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsWorldWeeniePropertiesGeneratorTableBase.Columns.Add("angles_W", angles_WColumnBase2);
            var angles_XColumnBase2 = new ColumnBase<ColumnMappingBase>("angles_X", "float", aCEDatabaseModelsWorldWeeniePropertiesGeneratorTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsWorldWeeniePropertiesGeneratorTableBase.Columns.Add("angles_X", angles_XColumnBase2);
            var angles_YColumnBase2 = new ColumnBase<ColumnMappingBase>("angles_Y", "float", aCEDatabaseModelsWorldWeeniePropertiesGeneratorTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsWorldWeeniePropertiesGeneratorTableBase.Columns.Add("angles_Y", angles_YColumnBase2);
            var angles_ZColumnBase2 = new ColumnBase<ColumnMappingBase>("angles_Z", "float", aCEDatabaseModelsWorldWeeniePropertiesGeneratorTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsWorldWeeniePropertiesGeneratorTableBase.Columns.Add("angles_Z", angles_ZColumnBase2);
            var delayColumnBase0 = new ColumnBase<ColumnMappingBase>("delay", "float", aCEDatabaseModelsWorldWeeniePropertiesGeneratorTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsWorldWeeniePropertiesGeneratorTableBase.Columns.Add("delay", delayColumnBase0);
            var idColumnBase42 = new ColumnBase<ColumnMappingBase>("id", "int unsigned", aCEDatabaseModelsWorldWeeniePropertiesGeneratorTableBase);
            aCEDatabaseModelsWorldWeeniePropertiesGeneratorTableBase.Columns.Add("id", idColumnBase42);
            var init_CreateColumnBase = new ColumnBase<ColumnMappingBase>("init_Create", "int", aCEDatabaseModelsWorldWeeniePropertiesGeneratorTableBase);
            aCEDatabaseModelsWorldWeeniePropertiesGeneratorTableBase.Columns.Add("init_Create", init_CreateColumnBase);
            var max_CreateColumnBase = new ColumnBase<ColumnMappingBase>("max_Create", "int", aCEDatabaseModelsWorldWeeniePropertiesGeneratorTableBase);
            aCEDatabaseModelsWorldWeeniePropertiesGeneratorTableBase.Columns.Add("max_Create", max_CreateColumnBase);
            var obj_Cell_IdColumnBase2 = new ColumnBase<ColumnMappingBase>("obj_Cell_Id", "int unsigned", aCEDatabaseModelsWorldWeeniePropertiesGeneratorTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsWorldWeeniePropertiesGeneratorTableBase.Columns.Add("obj_Cell_Id", obj_Cell_IdColumnBase2);
            var object_IdColumnBase11 = new ColumnBase<ColumnMappingBase>("object_Id", "int unsigned", aCEDatabaseModelsWorldWeeniePropertiesGeneratorTableBase);
            aCEDatabaseModelsWorldWeeniePropertiesGeneratorTableBase.Columns.Add("object_Id", object_IdColumnBase11);
            var origin_XColumnBase2 = new ColumnBase<ColumnMappingBase>("origin_X", "float", aCEDatabaseModelsWorldWeeniePropertiesGeneratorTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsWorldWeeniePropertiesGeneratorTableBase.Columns.Add("origin_X", origin_XColumnBase2);
            var origin_YColumnBase2 = new ColumnBase<ColumnMappingBase>("origin_Y", "float", aCEDatabaseModelsWorldWeeniePropertiesGeneratorTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsWorldWeeniePropertiesGeneratorTableBase.Columns.Add("origin_Y", origin_YColumnBase2);
            var origin_ZColumnBase2 = new ColumnBase<ColumnMappingBase>("origin_Z", "float", aCEDatabaseModelsWorldWeeniePropertiesGeneratorTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsWorldWeeniePropertiesGeneratorTableBase.Columns.Add("origin_Z", origin_ZColumnBase2);
            var palette_IdColumnBase0 = new ColumnBase<ColumnMappingBase>("palette_Id", "int unsigned", aCEDatabaseModelsWorldWeeniePropertiesGeneratorTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsWorldWeeniePropertiesGeneratorTableBase.Columns.Add("palette_Id", palette_IdColumnBase0);
            var probabilityColumnBase10 = new ColumnBase<ColumnMappingBase>("probability", "float", aCEDatabaseModelsWorldWeeniePropertiesGeneratorTableBase);
            aCEDatabaseModelsWorldWeeniePropertiesGeneratorTableBase.Columns.Add("probability", probabilityColumnBase10);
            var shadeColumnBase2 = new ColumnBase<ColumnMappingBase>("shade", "float", aCEDatabaseModelsWorldWeeniePropertiesGeneratorTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsWorldWeeniePropertiesGeneratorTableBase.Columns.Add("shade", shadeColumnBase2);
            var stack_SizeColumnBase2 = new ColumnBase<ColumnMappingBase>("stack_Size", "int", aCEDatabaseModelsWorldWeeniePropertiesGeneratorTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsWorldWeeniePropertiesGeneratorTableBase.Columns.Add("stack_Size", stack_SizeColumnBase2);
            var weenie_Class_IdColumnBase6 = new ColumnBase<ColumnMappingBase>("weenie_Class_Id", "int unsigned", aCEDatabaseModelsWorldWeeniePropertiesGeneratorTableBase);
            aCEDatabaseModelsWorldWeeniePropertiesGeneratorTableBase.Columns.Add("weenie_Class_Id", weenie_Class_IdColumnBase6);
            var when_CreateColumnBase = new ColumnBase<ColumnMappingBase>("when_Create", "int unsigned", aCEDatabaseModelsWorldWeeniePropertiesGeneratorTableBase);
            aCEDatabaseModelsWorldWeeniePropertiesGeneratorTableBase.Columns.Add("when_Create", when_CreateColumnBase);
            var where_CreateColumnBase = new ColumnBase<ColumnMappingBase>("where_Create", "int unsigned", aCEDatabaseModelsWorldWeeniePropertiesGeneratorTableBase);
            aCEDatabaseModelsWorldWeeniePropertiesGeneratorTableBase.Columns.Add("where_Create", where_CreateColumnBase);
            relationalModel.DefaultTables.Add("ACE.Database.Models.World.WeeniePropertiesGenerator", aCEDatabaseModelsWorldWeeniePropertiesGeneratorTableBase);
            var aCEDatabaseModelsWorldWeeniePropertiesGeneratorMappingBase = new TableMappingBase<ColumnMappingBase>(weeniePropertiesGenerator, aCEDatabaseModelsWorldWeeniePropertiesGeneratorTableBase, true);
            aCEDatabaseModelsWorldWeeniePropertiesGeneratorTableBase.AddTypeMapping(aCEDatabaseModelsWorldWeeniePropertiesGeneratorMappingBase, false);
            defaultTableMappings50.Add(aCEDatabaseModelsWorldWeeniePropertiesGeneratorMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase42, weeniePropertiesGenerator.FindProperty("Id")!, aCEDatabaseModelsWorldWeeniePropertiesGeneratorMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)angles_WColumnBase2, weeniePropertiesGenerator.FindProperty("AnglesW")!, aCEDatabaseModelsWorldWeeniePropertiesGeneratorMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)angles_XColumnBase2, weeniePropertiesGenerator.FindProperty("AnglesX")!, aCEDatabaseModelsWorldWeeniePropertiesGeneratorMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)angles_YColumnBase2, weeniePropertiesGenerator.FindProperty("AnglesY")!, aCEDatabaseModelsWorldWeeniePropertiesGeneratorMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)angles_ZColumnBase2, weeniePropertiesGenerator.FindProperty("AnglesZ")!, aCEDatabaseModelsWorldWeeniePropertiesGeneratorMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)delayColumnBase0, weeniePropertiesGenerator.FindProperty("Delay")!, aCEDatabaseModelsWorldWeeniePropertiesGeneratorMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)init_CreateColumnBase, weeniePropertiesGenerator.FindProperty("InitCreate")!, aCEDatabaseModelsWorldWeeniePropertiesGeneratorMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)max_CreateColumnBase, weeniePropertiesGenerator.FindProperty("MaxCreate")!, aCEDatabaseModelsWorldWeeniePropertiesGeneratorMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)obj_Cell_IdColumnBase2, weeniePropertiesGenerator.FindProperty("ObjCellId")!, aCEDatabaseModelsWorldWeeniePropertiesGeneratorMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)object_IdColumnBase11, weeniePropertiesGenerator.FindProperty("ObjectId")!, aCEDatabaseModelsWorldWeeniePropertiesGeneratorMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)origin_XColumnBase2, weeniePropertiesGenerator.FindProperty("OriginX")!, aCEDatabaseModelsWorldWeeniePropertiesGeneratorMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)origin_YColumnBase2, weeniePropertiesGenerator.FindProperty("OriginY")!, aCEDatabaseModelsWorldWeeniePropertiesGeneratorMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)origin_ZColumnBase2, weeniePropertiesGenerator.FindProperty("OriginZ")!, aCEDatabaseModelsWorldWeeniePropertiesGeneratorMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)palette_IdColumnBase0, weeniePropertiesGenerator.FindProperty("PaletteId")!, aCEDatabaseModelsWorldWeeniePropertiesGeneratorMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)probabilityColumnBase10, weeniePropertiesGenerator.FindProperty("Probability")!, aCEDatabaseModelsWorldWeeniePropertiesGeneratorMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)shadeColumnBase2, weeniePropertiesGenerator.FindProperty("Shade")!, aCEDatabaseModelsWorldWeeniePropertiesGeneratorMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)stack_SizeColumnBase2, weeniePropertiesGenerator.FindProperty("StackSize")!, aCEDatabaseModelsWorldWeeniePropertiesGeneratorMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)weenie_Class_IdColumnBase6, weeniePropertiesGenerator.FindProperty("WeenieClassId")!, aCEDatabaseModelsWorldWeeniePropertiesGeneratorMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)when_CreateColumnBase, weeniePropertiesGenerator.FindProperty("WhenCreate")!, aCEDatabaseModelsWorldWeeniePropertiesGeneratorMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)where_CreateColumnBase, weeniePropertiesGenerator.FindProperty("WhereCreate")!, aCEDatabaseModelsWorldWeeniePropertiesGeneratorMappingBase);

            var tableMappings50 = new List<TableMapping>();
            weeniePropertiesGenerator.SetRuntimeAnnotation("Relational:TableMappings", tableMappings50);
            var weenie_properties_generatorTable = new Table("weenie_properties_generator", null, relationalModel);
            var idColumn42 = new Column("id", "int unsigned", weenie_properties_generatorTable);
            weenie_properties_generatorTable.Columns.Add("id", idColumn42);
            var angles_WColumn2 = new Column("angles_W", "float", weenie_properties_generatorTable)
            {
                IsNullable = true
            };
            weenie_properties_generatorTable.Columns.Add("angles_W", angles_WColumn2);
            var angles_XColumn2 = new Column("angles_X", "float", weenie_properties_generatorTable)
            {
                IsNullable = true
            };
            weenie_properties_generatorTable.Columns.Add("angles_X", angles_XColumn2);
            var angles_YColumn2 = new Column("angles_Y", "float", weenie_properties_generatorTable)
            {
                IsNullable = true
            };
            weenie_properties_generatorTable.Columns.Add("angles_Y", angles_YColumn2);
            var angles_ZColumn2 = new Column("angles_Z", "float", weenie_properties_generatorTable)
            {
                IsNullable = true
            };
            weenie_properties_generatorTable.Columns.Add("angles_Z", angles_ZColumn2);
            var delayColumn0 = new Column("delay", "float", weenie_properties_generatorTable)
            {
                IsNullable = true
            };
            weenie_properties_generatorTable.Columns.Add("delay", delayColumn0);
            var init_CreateColumn = new Column("init_Create", "int", weenie_properties_generatorTable);
            weenie_properties_generatorTable.Columns.Add("init_Create", init_CreateColumn);
            var max_CreateColumn = new Column("max_Create", "int", weenie_properties_generatorTable);
            weenie_properties_generatorTable.Columns.Add("max_Create", max_CreateColumn);
            var obj_Cell_IdColumn2 = new Column("obj_Cell_Id", "int unsigned", weenie_properties_generatorTable)
            {
                IsNullable = true
            };
            weenie_properties_generatorTable.Columns.Add("obj_Cell_Id", obj_Cell_IdColumn2);
            var object_IdColumn11 = new Column("object_Id", "int unsigned", weenie_properties_generatorTable);
            weenie_properties_generatorTable.Columns.Add("object_Id", object_IdColumn11);
            var origin_XColumn2 = new Column("origin_X", "float", weenie_properties_generatorTable)
            {
                IsNullable = true
            };
            weenie_properties_generatorTable.Columns.Add("origin_X", origin_XColumn2);
            var origin_YColumn2 = new Column("origin_Y", "float", weenie_properties_generatorTable)
            {
                IsNullable = true
            };
            weenie_properties_generatorTable.Columns.Add("origin_Y", origin_YColumn2);
            var origin_ZColumn2 = new Column("origin_Z", "float", weenie_properties_generatorTable)
            {
                IsNullable = true
            };
            weenie_properties_generatorTable.Columns.Add("origin_Z", origin_ZColumn2);
            var palette_IdColumn0 = new Column("palette_Id", "int unsigned", weenie_properties_generatorTable)
            {
                IsNullable = true
            };
            weenie_properties_generatorTable.Columns.Add("palette_Id", palette_IdColumn0);
            var probabilityColumn10 = new Column("probability", "float", weenie_properties_generatorTable);
            weenie_properties_generatorTable.Columns.Add("probability", probabilityColumn10);
            var shadeColumn2 = new Column("shade", "float", weenie_properties_generatorTable)
            {
                IsNullable = true
            };
            weenie_properties_generatorTable.Columns.Add("shade", shadeColumn2);
            var stack_SizeColumn2 = new Column("stack_Size", "int", weenie_properties_generatorTable)
            {
                IsNullable = true
            };
            weenie_properties_generatorTable.Columns.Add("stack_Size", stack_SizeColumn2);
            var weenie_Class_IdColumn6 = new Column("weenie_Class_Id", "int unsigned", weenie_properties_generatorTable);
            weenie_properties_generatorTable.Columns.Add("weenie_Class_Id", weenie_Class_IdColumn6);
            var when_CreateColumn = new Column("when_Create", "int unsigned", weenie_properties_generatorTable);
            weenie_properties_generatorTable.Columns.Add("when_Create", when_CreateColumn);
            var where_CreateColumn = new Column("where_Create", "int unsigned", weenie_properties_generatorTable);
            weenie_properties_generatorTable.Columns.Add("where_Create", where_CreateColumn);
            var pK_weenie_properties_generator = new UniqueConstraint("PK_weenie_properties_generator", weenie_properties_generatorTable, new[] { idColumn42 });
            weenie_properties_generatorTable.PrimaryKey = pK_weenie_properties_generator;
            var pK_weenie_properties_generatorUc = RelationalModel.GetKey(this,
                "ACE.Database.Models.World.WeeniePropertiesGenerator",
                new[] { "Id" });
            pK_weenie_properties_generator.MappedKeys.Add(pK_weenie_properties_generatorUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_weenie_properties_generatorUc).Add(pK_weenie_properties_generator);
            weenie_properties_generatorTable.UniqueConstraints.Add("PK_weenie_properties_generator", pK_weenie_properties_generator);
            var wcid_generator = new TableIndex(
            "wcid_generator", weenie_properties_generatorTable, new[] { object_IdColumn11 }, false);
            var wcid_generatorIx = RelationalModel.GetIndex(this,
                "ACE.Database.Models.World.WeeniePropertiesGenerator",
                "wcid_generator");
            wcid_generator.MappedIndexes.Add(wcid_generatorIx);
            RelationalModel.GetOrCreateTableIndexes(wcid_generatorIx).Add(wcid_generator);
            weenie_properties_generatorTable.Indexes.Add("wcid_generator", wcid_generator);
            relationalModel.Tables.Add(("weenie_properties_generator", null), weenie_properties_generatorTable);
            var weenie_properties_generatorTableMapping = new TableMapping(weeniePropertiesGenerator, weenie_properties_generatorTable, true);
            weenie_properties_generatorTable.AddTypeMapping(weenie_properties_generatorTableMapping, false);
            tableMappings50.Add(weenie_properties_generatorTableMapping);
            RelationalModel.CreateColumnMapping(idColumn42, weeniePropertiesGenerator.FindProperty("Id")!, weenie_properties_generatorTableMapping);
            RelationalModel.CreateColumnMapping(angles_WColumn2, weeniePropertiesGenerator.FindProperty("AnglesW")!, weenie_properties_generatorTableMapping);
            RelationalModel.CreateColumnMapping(angles_XColumn2, weeniePropertiesGenerator.FindProperty("AnglesX")!, weenie_properties_generatorTableMapping);
            RelationalModel.CreateColumnMapping(angles_YColumn2, weeniePropertiesGenerator.FindProperty("AnglesY")!, weenie_properties_generatorTableMapping);
            RelationalModel.CreateColumnMapping(angles_ZColumn2, weeniePropertiesGenerator.FindProperty("AnglesZ")!, weenie_properties_generatorTableMapping);
            RelationalModel.CreateColumnMapping(delayColumn0, weeniePropertiesGenerator.FindProperty("Delay")!, weenie_properties_generatorTableMapping);
            RelationalModel.CreateColumnMapping(init_CreateColumn, weeniePropertiesGenerator.FindProperty("InitCreate")!, weenie_properties_generatorTableMapping);
            RelationalModel.CreateColumnMapping(max_CreateColumn, weeniePropertiesGenerator.FindProperty("MaxCreate")!, weenie_properties_generatorTableMapping);
            RelationalModel.CreateColumnMapping(obj_Cell_IdColumn2, weeniePropertiesGenerator.FindProperty("ObjCellId")!, weenie_properties_generatorTableMapping);
            RelationalModel.CreateColumnMapping(object_IdColumn11, weeniePropertiesGenerator.FindProperty("ObjectId")!, weenie_properties_generatorTableMapping);
            RelationalModel.CreateColumnMapping(origin_XColumn2, weeniePropertiesGenerator.FindProperty("OriginX")!, weenie_properties_generatorTableMapping);
            RelationalModel.CreateColumnMapping(origin_YColumn2, weeniePropertiesGenerator.FindProperty("OriginY")!, weenie_properties_generatorTableMapping);
            RelationalModel.CreateColumnMapping(origin_ZColumn2, weeniePropertiesGenerator.FindProperty("OriginZ")!, weenie_properties_generatorTableMapping);
            RelationalModel.CreateColumnMapping(palette_IdColumn0, weeniePropertiesGenerator.FindProperty("PaletteId")!, weenie_properties_generatorTableMapping);
            RelationalModel.CreateColumnMapping(probabilityColumn10, weeniePropertiesGenerator.FindProperty("Probability")!, weenie_properties_generatorTableMapping);
            RelationalModel.CreateColumnMapping(shadeColumn2, weeniePropertiesGenerator.FindProperty("Shade")!, weenie_properties_generatorTableMapping);
            RelationalModel.CreateColumnMapping(stack_SizeColumn2, weeniePropertiesGenerator.FindProperty("StackSize")!, weenie_properties_generatorTableMapping);
            RelationalModel.CreateColumnMapping(weenie_Class_IdColumn6, weeniePropertiesGenerator.FindProperty("WeenieClassId")!, weenie_properties_generatorTableMapping);
            RelationalModel.CreateColumnMapping(when_CreateColumn, weeniePropertiesGenerator.FindProperty("WhenCreate")!, weenie_properties_generatorTableMapping);
            RelationalModel.CreateColumnMapping(where_CreateColumn, weeniePropertiesGenerator.FindProperty("WhereCreate")!, weenie_properties_generatorTableMapping);

            var weeniePropertiesIID = FindEntityType("ACE.Database.Models.World.WeeniePropertiesIID")!;

            var defaultTableMappings51 = new List<TableMappingBase<ColumnMappingBase>>();
            weeniePropertiesIID.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings51);
            var aCEDatabaseModelsWorldWeeniePropertiesIIDTableBase = new TableBase("ACE.Database.Models.World.WeeniePropertiesIID", null, relationalModel);
            var idColumnBase43 = new ColumnBase<ColumnMappingBase>("id", "int unsigned", aCEDatabaseModelsWorldWeeniePropertiesIIDTableBase);
            aCEDatabaseModelsWorldWeeniePropertiesIIDTableBase.Columns.Add("id", idColumnBase43);
            var object_IdColumnBase12 = new ColumnBase<ColumnMappingBase>("object_Id", "int unsigned", aCEDatabaseModelsWorldWeeniePropertiesIIDTableBase);
            aCEDatabaseModelsWorldWeeniePropertiesIIDTableBase.Columns.Add("object_Id", object_IdColumnBase12);
            var typeColumnBase12 = new ColumnBase<ColumnMappingBase>("type", "smallint unsigned", aCEDatabaseModelsWorldWeeniePropertiesIIDTableBase);
            aCEDatabaseModelsWorldWeeniePropertiesIIDTableBase.Columns.Add("type", typeColumnBase12);
            var valueColumnBase19 = new ColumnBase<ColumnMappingBase>("value", "int unsigned", aCEDatabaseModelsWorldWeeniePropertiesIIDTableBase);
            aCEDatabaseModelsWorldWeeniePropertiesIIDTableBase.Columns.Add("value", valueColumnBase19);
            relationalModel.DefaultTables.Add("ACE.Database.Models.World.WeeniePropertiesIID", aCEDatabaseModelsWorldWeeniePropertiesIIDTableBase);
            var aCEDatabaseModelsWorldWeeniePropertiesIIDMappingBase = new TableMappingBase<ColumnMappingBase>(weeniePropertiesIID, aCEDatabaseModelsWorldWeeniePropertiesIIDTableBase, true);
            aCEDatabaseModelsWorldWeeniePropertiesIIDTableBase.AddTypeMapping(aCEDatabaseModelsWorldWeeniePropertiesIIDMappingBase, false);
            defaultTableMappings51.Add(aCEDatabaseModelsWorldWeeniePropertiesIIDMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase43, weeniePropertiesIID.FindProperty("Id")!, aCEDatabaseModelsWorldWeeniePropertiesIIDMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)object_IdColumnBase12, weeniePropertiesIID.FindProperty("ObjectId")!, aCEDatabaseModelsWorldWeeniePropertiesIIDMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)typeColumnBase12, weeniePropertiesIID.FindProperty("Type")!, aCEDatabaseModelsWorldWeeniePropertiesIIDMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)valueColumnBase19, weeniePropertiesIID.FindProperty("Value")!, aCEDatabaseModelsWorldWeeniePropertiesIIDMappingBase);

            var tableMappings51 = new List<TableMapping>();
            weeniePropertiesIID.SetRuntimeAnnotation("Relational:TableMappings", tableMappings51);
            var weenie_properties_i_i_dTable = new Table("weenie_properties_i_i_d", null, relationalModel);
            var idColumn43 = new Column("id", "int unsigned", weenie_properties_i_i_dTable);
            weenie_properties_i_i_dTable.Columns.Add("id", idColumn43);
            var object_IdColumn12 = new Column("object_Id", "int unsigned", weenie_properties_i_i_dTable);
            weenie_properties_i_i_dTable.Columns.Add("object_Id", object_IdColumn12);
            var typeColumn12 = new Column("type", "smallint unsigned", weenie_properties_i_i_dTable);
            weenie_properties_i_i_dTable.Columns.Add("type", typeColumn12);
            var valueColumn19 = new Column("value", "int unsigned", weenie_properties_i_i_dTable);
            weenie_properties_i_i_dTable.Columns.Add("value", valueColumn19);
            var pK_weenie_properties_i_i_d = new UniqueConstraint("PK_weenie_properties_i_i_d", weenie_properties_i_i_dTable, new[] { idColumn43 });
            weenie_properties_i_i_dTable.PrimaryKey = pK_weenie_properties_i_i_d;
            var pK_weenie_properties_i_i_dUc = RelationalModel.GetKey(this,
                "ACE.Database.Models.World.WeeniePropertiesIID",
                new[] { "Id" });
            pK_weenie_properties_i_i_d.MappedKeys.Add(pK_weenie_properties_i_i_dUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_weenie_properties_i_i_dUc).Add(pK_weenie_properties_i_i_d);
            weenie_properties_i_i_dTable.UniqueConstraints.Add("PK_weenie_properties_i_i_d", pK_weenie_properties_i_i_d);
            var wcid_iid_type_uidx = new TableIndex(
            "wcid_iid_type_uidx", weenie_properties_i_i_dTable, new[] { object_IdColumn12, typeColumn12 }, true);
            var wcid_iid_type_uidxIx = RelationalModel.GetIndex(this,
                "ACE.Database.Models.World.WeeniePropertiesIID",
                "wcid_iid_type_uidx");
            wcid_iid_type_uidx.MappedIndexes.Add(wcid_iid_type_uidxIx);
            RelationalModel.GetOrCreateTableIndexes(wcid_iid_type_uidxIx).Add(wcid_iid_type_uidx);
            weenie_properties_i_i_dTable.Indexes.Add("wcid_iid_type_uidx", wcid_iid_type_uidx);
            relationalModel.Tables.Add(("weenie_properties_i_i_d", null), weenie_properties_i_i_dTable);
            var weenie_properties_i_i_dTableMapping = new TableMapping(weeniePropertiesIID, weenie_properties_i_i_dTable, true);
            weenie_properties_i_i_dTable.AddTypeMapping(weenie_properties_i_i_dTableMapping, false);
            tableMappings51.Add(weenie_properties_i_i_dTableMapping);
            RelationalModel.CreateColumnMapping(idColumn43, weeniePropertiesIID.FindProperty("Id")!, weenie_properties_i_i_dTableMapping);
            RelationalModel.CreateColumnMapping(object_IdColumn12, weeniePropertiesIID.FindProperty("ObjectId")!, weenie_properties_i_i_dTableMapping);
            RelationalModel.CreateColumnMapping(typeColumn12, weeniePropertiesIID.FindProperty("Type")!, weenie_properties_i_i_dTableMapping);
            RelationalModel.CreateColumnMapping(valueColumn19, weeniePropertiesIID.FindProperty("Value")!, weenie_properties_i_i_dTableMapping);

            var weeniePropertiesInt = FindEntityType("ACE.Database.Models.World.WeeniePropertiesInt")!;

            var defaultTableMappings52 = new List<TableMappingBase<ColumnMappingBase>>();
            weeniePropertiesInt.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings52);
            var aCEDatabaseModelsWorldWeeniePropertiesIntTableBase = new TableBase("ACE.Database.Models.World.WeeniePropertiesInt", null, relationalModel);
            var idColumnBase44 = new ColumnBase<ColumnMappingBase>("id", "int unsigned", aCEDatabaseModelsWorldWeeniePropertiesIntTableBase);
            aCEDatabaseModelsWorldWeeniePropertiesIntTableBase.Columns.Add("id", idColumnBase44);
            var object_IdColumnBase13 = new ColumnBase<ColumnMappingBase>("object_Id", "int unsigned", aCEDatabaseModelsWorldWeeniePropertiesIntTableBase);
            aCEDatabaseModelsWorldWeeniePropertiesIntTableBase.Columns.Add("object_Id", object_IdColumnBase13);
            var typeColumnBase13 = new ColumnBase<ColumnMappingBase>("type", "smallint unsigned", aCEDatabaseModelsWorldWeeniePropertiesIntTableBase);
            aCEDatabaseModelsWorldWeeniePropertiesIntTableBase.Columns.Add("type", typeColumnBase13);
            var valueColumnBase20 = new ColumnBase<ColumnMappingBase>("value", "int", aCEDatabaseModelsWorldWeeniePropertiesIntTableBase);
            aCEDatabaseModelsWorldWeeniePropertiesIntTableBase.Columns.Add("value", valueColumnBase20);
            relationalModel.DefaultTables.Add("ACE.Database.Models.World.WeeniePropertiesInt", aCEDatabaseModelsWorldWeeniePropertiesIntTableBase);
            var aCEDatabaseModelsWorldWeeniePropertiesIntMappingBase = new TableMappingBase<ColumnMappingBase>(weeniePropertiesInt, aCEDatabaseModelsWorldWeeniePropertiesIntTableBase, true);
            aCEDatabaseModelsWorldWeeniePropertiesIntTableBase.AddTypeMapping(aCEDatabaseModelsWorldWeeniePropertiesIntMappingBase, false);
            defaultTableMappings52.Add(aCEDatabaseModelsWorldWeeniePropertiesIntMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase44, weeniePropertiesInt.FindProperty("Id")!, aCEDatabaseModelsWorldWeeniePropertiesIntMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)object_IdColumnBase13, weeniePropertiesInt.FindProperty("ObjectId")!, aCEDatabaseModelsWorldWeeniePropertiesIntMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)typeColumnBase13, weeniePropertiesInt.FindProperty("Type")!, aCEDatabaseModelsWorldWeeniePropertiesIntMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)valueColumnBase20, weeniePropertiesInt.FindProperty("Value")!, aCEDatabaseModelsWorldWeeniePropertiesIntMappingBase);

            var tableMappings52 = new List<TableMapping>();
            weeniePropertiesInt.SetRuntimeAnnotation("Relational:TableMappings", tableMappings52);
            var weenie_properties_intTable = new Table("weenie_properties_int", null, relationalModel);
            var idColumn44 = new Column("id", "int unsigned", weenie_properties_intTable);
            weenie_properties_intTable.Columns.Add("id", idColumn44);
            var object_IdColumn13 = new Column("object_Id", "int unsigned", weenie_properties_intTable);
            weenie_properties_intTable.Columns.Add("object_Id", object_IdColumn13);
            var typeColumn13 = new Column("type", "smallint unsigned", weenie_properties_intTable);
            weenie_properties_intTable.Columns.Add("type", typeColumn13);
            var valueColumn20 = new Column("value", "int", weenie_properties_intTable);
            weenie_properties_intTable.Columns.Add("value", valueColumn20);
            var pK_weenie_properties_int = new UniqueConstraint("PK_weenie_properties_int", weenie_properties_intTable, new[] { idColumn44 });
            weenie_properties_intTable.PrimaryKey = pK_weenie_properties_int;
            var pK_weenie_properties_intUc = RelationalModel.GetKey(this,
                "ACE.Database.Models.World.WeeniePropertiesInt",
                new[] { "Id" });
            pK_weenie_properties_int.MappedKeys.Add(pK_weenie_properties_intUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_weenie_properties_intUc).Add(pK_weenie_properties_int);
            weenie_properties_intTable.UniqueConstraints.Add("PK_weenie_properties_int", pK_weenie_properties_int);
            var wcid_int_type_uidx = new TableIndex(
            "wcid_int_type_uidx", weenie_properties_intTable, new[] { object_IdColumn13, typeColumn13 }, true);
            var wcid_int_type_uidxIx = RelationalModel.GetIndex(this,
                "ACE.Database.Models.World.WeeniePropertiesInt",
                "wcid_int_type_uidx");
            wcid_int_type_uidx.MappedIndexes.Add(wcid_int_type_uidxIx);
            RelationalModel.GetOrCreateTableIndexes(wcid_int_type_uidxIx).Add(wcid_int_type_uidx);
            weenie_properties_intTable.Indexes.Add("wcid_int_type_uidx", wcid_int_type_uidx);
            relationalModel.Tables.Add(("weenie_properties_int", null), weenie_properties_intTable);
            var weenie_properties_intTableMapping = new TableMapping(weeniePropertiesInt, weenie_properties_intTable, true);
            weenie_properties_intTable.AddTypeMapping(weenie_properties_intTableMapping, false);
            tableMappings52.Add(weenie_properties_intTableMapping);
            RelationalModel.CreateColumnMapping(idColumn44, weeniePropertiesInt.FindProperty("Id")!, weenie_properties_intTableMapping);
            RelationalModel.CreateColumnMapping(object_IdColumn13, weeniePropertiesInt.FindProperty("ObjectId")!, weenie_properties_intTableMapping);
            RelationalModel.CreateColumnMapping(typeColumn13, weeniePropertiesInt.FindProperty("Type")!, weenie_properties_intTableMapping);
            RelationalModel.CreateColumnMapping(valueColumn20, weeniePropertiesInt.FindProperty("Value")!, weenie_properties_intTableMapping);

            var weeniePropertiesInt64 = FindEntityType("ACE.Database.Models.World.WeeniePropertiesInt64")!;

            var defaultTableMappings53 = new List<TableMappingBase<ColumnMappingBase>>();
            weeniePropertiesInt64.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings53);
            var aCEDatabaseModelsWorldWeeniePropertiesInt64TableBase = new TableBase("ACE.Database.Models.World.WeeniePropertiesInt64", null, relationalModel);
            var idColumnBase45 = new ColumnBase<ColumnMappingBase>("id", "int unsigned", aCEDatabaseModelsWorldWeeniePropertiesInt64TableBase);
            aCEDatabaseModelsWorldWeeniePropertiesInt64TableBase.Columns.Add("id", idColumnBase45);
            var object_IdColumnBase14 = new ColumnBase<ColumnMappingBase>("object_Id", "int unsigned", aCEDatabaseModelsWorldWeeniePropertiesInt64TableBase);
            aCEDatabaseModelsWorldWeeniePropertiesInt64TableBase.Columns.Add("object_Id", object_IdColumnBase14);
            var typeColumnBase14 = new ColumnBase<ColumnMappingBase>("type", "smallint unsigned", aCEDatabaseModelsWorldWeeniePropertiesInt64TableBase);
            aCEDatabaseModelsWorldWeeniePropertiesInt64TableBase.Columns.Add("type", typeColumnBase14);
            var valueColumnBase21 = new ColumnBase<ColumnMappingBase>("value", "bigint", aCEDatabaseModelsWorldWeeniePropertiesInt64TableBase);
            aCEDatabaseModelsWorldWeeniePropertiesInt64TableBase.Columns.Add("value", valueColumnBase21);
            relationalModel.DefaultTables.Add("ACE.Database.Models.World.WeeniePropertiesInt64", aCEDatabaseModelsWorldWeeniePropertiesInt64TableBase);
            var aCEDatabaseModelsWorldWeeniePropertiesInt64MappingBase = new TableMappingBase<ColumnMappingBase>(weeniePropertiesInt64, aCEDatabaseModelsWorldWeeniePropertiesInt64TableBase, true);
            aCEDatabaseModelsWorldWeeniePropertiesInt64TableBase.AddTypeMapping(aCEDatabaseModelsWorldWeeniePropertiesInt64MappingBase, false);
            defaultTableMappings53.Add(aCEDatabaseModelsWorldWeeniePropertiesInt64MappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase45, weeniePropertiesInt64.FindProperty("Id")!, aCEDatabaseModelsWorldWeeniePropertiesInt64MappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)object_IdColumnBase14, weeniePropertiesInt64.FindProperty("ObjectId")!, aCEDatabaseModelsWorldWeeniePropertiesInt64MappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)typeColumnBase14, weeniePropertiesInt64.FindProperty("Type")!, aCEDatabaseModelsWorldWeeniePropertiesInt64MappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)valueColumnBase21, weeniePropertiesInt64.FindProperty("Value")!, aCEDatabaseModelsWorldWeeniePropertiesInt64MappingBase);

            var tableMappings53 = new List<TableMapping>();
            weeniePropertiesInt64.SetRuntimeAnnotation("Relational:TableMappings", tableMappings53);
            var weenie_properties_int64Table = new Table("weenie_properties_int64", null, relationalModel);
            var idColumn45 = new Column("id", "int unsigned", weenie_properties_int64Table);
            weenie_properties_int64Table.Columns.Add("id", idColumn45);
            var object_IdColumn14 = new Column("object_Id", "int unsigned", weenie_properties_int64Table);
            weenie_properties_int64Table.Columns.Add("object_Id", object_IdColumn14);
            var typeColumn14 = new Column("type", "smallint unsigned", weenie_properties_int64Table);
            weenie_properties_int64Table.Columns.Add("type", typeColumn14);
            var valueColumn21 = new Column("value", "bigint", weenie_properties_int64Table);
            weenie_properties_int64Table.Columns.Add("value", valueColumn21);
            var pK_weenie_properties_int64 = new UniqueConstraint("PK_weenie_properties_int64", weenie_properties_int64Table, new[] { idColumn45 });
            weenie_properties_int64Table.PrimaryKey = pK_weenie_properties_int64;
            var pK_weenie_properties_int64Uc = RelationalModel.GetKey(this,
                "ACE.Database.Models.World.WeeniePropertiesInt64",
                new[] { "Id" });
            pK_weenie_properties_int64.MappedKeys.Add(pK_weenie_properties_int64Uc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_weenie_properties_int64Uc).Add(pK_weenie_properties_int64);
            weenie_properties_int64Table.UniqueConstraints.Add("PK_weenie_properties_int64", pK_weenie_properties_int64);
            var wcid_int64_type_uidx = new TableIndex(
            "wcid_int64_type_uidx", weenie_properties_int64Table, new[] { object_IdColumn14, typeColumn14 }, true);
            var wcid_int64_type_uidxIx = RelationalModel.GetIndex(this,
                "ACE.Database.Models.World.WeeniePropertiesInt64",
                "wcid_int64_type_uidx");
            wcid_int64_type_uidx.MappedIndexes.Add(wcid_int64_type_uidxIx);
            RelationalModel.GetOrCreateTableIndexes(wcid_int64_type_uidxIx).Add(wcid_int64_type_uidx);
            weenie_properties_int64Table.Indexes.Add("wcid_int64_type_uidx", wcid_int64_type_uidx);
            relationalModel.Tables.Add(("weenie_properties_int64", null), weenie_properties_int64Table);
            var weenie_properties_int64TableMapping = new TableMapping(weeniePropertiesInt64, weenie_properties_int64Table, true);
            weenie_properties_int64Table.AddTypeMapping(weenie_properties_int64TableMapping, false);
            tableMappings53.Add(weenie_properties_int64TableMapping);
            RelationalModel.CreateColumnMapping(idColumn45, weeniePropertiesInt64.FindProperty("Id")!, weenie_properties_int64TableMapping);
            RelationalModel.CreateColumnMapping(object_IdColumn14, weeniePropertiesInt64.FindProperty("ObjectId")!, weenie_properties_int64TableMapping);
            RelationalModel.CreateColumnMapping(typeColumn14, weeniePropertiesInt64.FindProperty("Type")!, weenie_properties_int64TableMapping);
            RelationalModel.CreateColumnMapping(valueColumn21, weeniePropertiesInt64.FindProperty("Value")!, weenie_properties_int64TableMapping);

            var weeniePropertiesPalette = FindEntityType("ACE.Database.Models.World.WeeniePropertiesPalette")!;

            var defaultTableMappings54 = new List<TableMappingBase<ColumnMappingBase>>();
            weeniePropertiesPalette.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings54);
            var aCEDatabaseModelsWorldWeeniePropertiesPaletteTableBase = new TableBase("ACE.Database.Models.World.WeeniePropertiesPalette", null, relationalModel);
            var idColumnBase46 = new ColumnBase<ColumnMappingBase>("id", "int unsigned", aCEDatabaseModelsWorldWeeniePropertiesPaletteTableBase);
            aCEDatabaseModelsWorldWeeniePropertiesPaletteTableBase.Columns.Add("id", idColumnBase46);
            var lengthColumnBase = new ColumnBase<ColumnMappingBase>("length", "smallint unsigned", aCEDatabaseModelsWorldWeeniePropertiesPaletteTableBase);
            aCEDatabaseModelsWorldWeeniePropertiesPaletteTableBase.Columns.Add("length", lengthColumnBase);
            var object_IdColumnBase15 = new ColumnBase<ColumnMappingBase>("object_Id", "int unsigned", aCEDatabaseModelsWorldWeeniePropertiesPaletteTableBase);
            aCEDatabaseModelsWorldWeeniePropertiesPaletteTableBase.Columns.Add("object_Id", object_IdColumnBase15);
            var offsetColumnBase = new ColumnBase<ColumnMappingBase>("offset", "smallint unsigned", aCEDatabaseModelsWorldWeeniePropertiesPaletteTableBase);
            aCEDatabaseModelsWorldWeeniePropertiesPaletteTableBase.Columns.Add("offset", offsetColumnBase);
            var sub_Palette_IdColumnBase = new ColumnBase<ColumnMappingBase>("sub_Palette_Id", "int unsigned", aCEDatabaseModelsWorldWeeniePropertiesPaletteTableBase);
            aCEDatabaseModelsWorldWeeniePropertiesPaletteTableBase.Columns.Add("sub_Palette_Id", sub_Palette_IdColumnBase);
            relationalModel.DefaultTables.Add("ACE.Database.Models.World.WeeniePropertiesPalette", aCEDatabaseModelsWorldWeeniePropertiesPaletteTableBase);
            var aCEDatabaseModelsWorldWeeniePropertiesPaletteMappingBase = new TableMappingBase<ColumnMappingBase>(weeniePropertiesPalette, aCEDatabaseModelsWorldWeeniePropertiesPaletteTableBase, true);
            aCEDatabaseModelsWorldWeeniePropertiesPaletteTableBase.AddTypeMapping(aCEDatabaseModelsWorldWeeniePropertiesPaletteMappingBase, false);
            defaultTableMappings54.Add(aCEDatabaseModelsWorldWeeniePropertiesPaletteMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase46, weeniePropertiesPalette.FindProperty("Id")!, aCEDatabaseModelsWorldWeeniePropertiesPaletteMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)lengthColumnBase, weeniePropertiesPalette.FindProperty("Length")!, aCEDatabaseModelsWorldWeeniePropertiesPaletteMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)object_IdColumnBase15, weeniePropertiesPalette.FindProperty("ObjectId")!, aCEDatabaseModelsWorldWeeniePropertiesPaletteMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)offsetColumnBase, weeniePropertiesPalette.FindProperty("Offset")!, aCEDatabaseModelsWorldWeeniePropertiesPaletteMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)sub_Palette_IdColumnBase, weeniePropertiesPalette.FindProperty("SubPaletteId")!, aCEDatabaseModelsWorldWeeniePropertiesPaletteMappingBase);

            var tableMappings54 = new List<TableMapping>();
            weeniePropertiesPalette.SetRuntimeAnnotation("Relational:TableMappings", tableMappings54);
            var weenie_properties_paletteTable = new Table("weenie_properties_palette", null, relationalModel);
            var idColumn46 = new Column("id", "int unsigned", weenie_properties_paletteTable);
            weenie_properties_paletteTable.Columns.Add("id", idColumn46);
            var lengthColumn = new Column("length", "smallint unsigned", weenie_properties_paletteTable);
            weenie_properties_paletteTable.Columns.Add("length", lengthColumn);
            var object_IdColumn15 = new Column("object_Id", "int unsigned", weenie_properties_paletteTable);
            weenie_properties_paletteTable.Columns.Add("object_Id", object_IdColumn15);
            var offsetColumn = new Column("offset", "smallint unsigned", weenie_properties_paletteTable);
            weenie_properties_paletteTable.Columns.Add("offset", offsetColumn);
            var sub_Palette_IdColumn = new Column("sub_Palette_Id", "int unsigned", weenie_properties_paletteTable);
            weenie_properties_paletteTable.Columns.Add("sub_Palette_Id", sub_Palette_IdColumn);
            var pK_weenie_properties_palette = new UniqueConstraint("PK_weenie_properties_palette", weenie_properties_paletteTable, new[] { idColumn46 });
            weenie_properties_paletteTable.PrimaryKey = pK_weenie_properties_palette;
            var pK_weenie_properties_paletteUc = RelationalModel.GetKey(this,
                "ACE.Database.Models.World.WeeniePropertiesPalette",
                new[] { "Id" });
            pK_weenie_properties_palette.MappedKeys.Add(pK_weenie_properties_paletteUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_weenie_properties_paletteUc).Add(pK_weenie_properties_palette);
            weenie_properties_paletteTable.UniqueConstraints.Add("PK_weenie_properties_palette", pK_weenie_properties_palette);
            var object_Id_subPaletteId_offset_length_uidx = new TableIndex(
            "object_Id_subPaletteId_offset_length_uidx", weenie_properties_paletteTable, new[] { object_IdColumn15, sub_Palette_IdColumn, offsetColumn, lengthColumn }, true);
            var object_Id_subPaletteId_offset_length_uidxIx = RelationalModel.GetIndex(this,
                "ACE.Database.Models.World.WeeniePropertiesPalette",
                "object_Id_subPaletteId_offset_length_uidx");
            object_Id_subPaletteId_offset_length_uidx.MappedIndexes.Add(object_Id_subPaletteId_offset_length_uidxIx);
            RelationalModel.GetOrCreateTableIndexes(object_Id_subPaletteId_offset_length_uidxIx).Add(object_Id_subPaletteId_offset_length_uidx);
            weenie_properties_paletteTable.Indexes.Add("object_Id_subPaletteId_offset_length_uidx", object_Id_subPaletteId_offset_length_uidx);
            relationalModel.Tables.Add(("weenie_properties_palette", null), weenie_properties_paletteTable);
            var weenie_properties_paletteTableMapping = new TableMapping(weeniePropertiesPalette, weenie_properties_paletteTable, true);
            weenie_properties_paletteTable.AddTypeMapping(weenie_properties_paletteTableMapping, false);
            tableMappings54.Add(weenie_properties_paletteTableMapping);
            RelationalModel.CreateColumnMapping(idColumn46, weeniePropertiesPalette.FindProperty("Id")!, weenie_properties_paletteTableMapping);
            RelationalModel.CreateColumnMapping(lengthColumn, weeniePropertiesPalette.FindProperty("Length")!, weenie_properties_paletteTableMapping);
            RelationalModel.CreateColumnMapping(object_IdColumn15, weeniePropertiesPalette.FindProperty("ObjectId")!, weenie_properties_paletteTableMapping);
            RelationalModel.CreateColumnMapping(offsetColumn, weeniePropertiesPalette.FindProperty("Offset")!, weenie_properties_paletteTableMapping);
            RelationalModel.CreateColumnMapping(sub_Palette_IdColumn, weeniePropertiesPalette.FindProperty("SubPaletteId")!, weenie_properties_paletteTableMapping);

            var weeniePropertiesPosition = FindEntityType("ACE.Database.Models.World.WeeniePropertiesPosition")!;

            var defaultTableMappings55 = new List<TableMappingBase<ColumnMappingBase>>();
            weeniePropertiesPosition.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings55);
            var aCEDatabaseModelsWorldWeeniePropertiesPositionTableBase = new TableBase("ACE.Database.Models.World.WeeniePropertiesPosition", null, relationalModel);
            var angles_WColumnBase3 = new ColumnBase<ColumnMappingBase>("angles_W", "float", aCEDatabaseModelsWorldWeeniePropertiesPositionTableBase);
            aCEDatabaseModelsWorldWeeniePropertiesPositionTableBase.Columns.Add("angles_W", angles_WColumnBase3);
            var angles_XColumnBase3 = new ColumnBase<ColumnMappingBase>("angles_X", "float", aCEDatabaseModelsWorldWeeniePropertiesPositionTableBase);
            aCEDatabaseModelsWorldWeeniePropertiesPositionTableBase.Columns.Add("angles_X", angles_XColumnBase3);
            var angles_YColumnBase3 = new ColumnBase<ColumnMappingBase>("angles_Y", "float", aCEDatabaseModelsWorldWeeniePropertiesPositionTableBase);
            aCEDatabaseModelsWorldWeeniePropertiesPositionTableBase.Columns.Add("angles_Y", angles_YColumnBase3);
            var angles_ZColumnBase3 = new ColumnBase<ColumnMappingBase>("angles_Z", "float", aCEDatabaseModelsWorldWeeniePropertiesPositionTableBase);
            aCEDatabaseModelsWorldWeeniePropertiesPositionTableBase.Columns.Add("angles_Z", angles_ZColumnBase3);
            var idColumnBase47 = new ColumnBase<ColumnMappingBase>("id", "int unsigned", aCEDatabaseModelsWorldWeeniePropertiesPositionTableBase);
            aCEDatabaseModelsWorldWeeniePropertiesPositionTableBase.Columns.Add("id", idColumnBase47);
            var obj_Cell_IdColumnBase3 = new ColumnBase<ColumnMappingBase>("obj_Cell_Id", "int unsigned", aCEDatabaseModelsWorldWeeniePropertiesPositionTableBase);
            aCEDatabaseModelsWorldWeeniePropertiesPositionTableBase.Columns.Add("obj_Cell_Id", obj_Cell_IdColumnBase3);
            var object_IdColumnBase16 = new ColumnBase<ColumnMappingBase>("object_Id", "int unsigned", aCEDatabaseModelsWorldWeeniePropertiesPositionTableBase);
            aCEDatabaseModelsWorldWeeniePropertiesPositionTableBase.Columns.Add("object_Id", object_IdColumnBase16);
            var origin_XColumnBase3 = new ColumnBase<ColumnMappingBase>("origin_X", "float", aCEDatabaseModelsWorldWeeniePropertiesPositionTableBase);
            aCEDatabaseModelsWorldWeeniePropertiesPositionTableBase.Columns.Add("origin_X", origin_XColumnBase3);
            var origin_YColumnBase3 = new ColumnBase<ColumnMappingBase>("origin_Y", "float", aCEDatabaseModelsWorldWeeniePropertiesPositionTableBase);
            aCEDatabaseModelsWorldWeeniePropertiesPositionTableBase.Columns.Add("origin_Y", origin_YColumnBase3);
            var origin_ZColumnBase3 = new ColumnBase<ColumnMappingBase>("origin_Z", "float", aCEDatabaseModelsWorldWeeniePropertiesPositionTableBase);
            aCEDatabaseModelsWorldWeeniePropertiesPositionTableBase.Columns.Add("origin_Z", origin_ZColumnBase3);
            var position_TypeColumnBase = new ColumnBase<ColumnMappingBase>("position_Type", "smallint unsigned", aCEDatabaseModelsWorldWeeniePropertiesPositionTableBase);
            aCEDatabaseModelsWorldWeeniePropertiesPositionTableBase.Columns.Add("position_Type", position_TypeColumnBase);
            relationalModel.DefaultTables.Add("ACE.Database.Models.World.WeeniePropertiesPosition", aCEDatabaseModelsWorldWeeniePropertiesPositionTableBase);
            var aCEDatabaseModelsWorldWeeniePropertiesPositionMappingBase = new TableMappingBase<ColumnMappingBase>(weeniePropertiesPosition, aCEDatabaseModelsWorldWeeniePropertiesPositionTableBase, true);
            aCEDatabaseModelsWorldWeeniePropertiesPositionTableBase.AddTypeMapping(aCEDatabaseModelsWorldWeeniePropertiesPositionMappingBase, false);
            defaultTableMappings55.Add(aCEDatabaseModelsWorldWeeniePropertiesPositionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase47, weeniePropertiesPosition.FindProperty("Id")!, aCEDatabaseModelsWorldWeeniePropertiesPositionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)angles_WColumnBase3, weeniePropertiesPosition.FindProperty("AnglesW")!, aCEDatabaseModelsWorldWeeniePropertiesPositionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)angles_XColumnBase3, weeniePropertiesPosition.FindProperty("AnglesX")!, aCEDatabaseModelsWorldWeeniePropertiesPositionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)angles_YColumnBase3, weeniePropertiesPosition.FindProperty("AnglesY")!, aCEDatabaseModelsWorldWeeniePropertiesPositionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)angles_ZColumnBase3, weeniePropertiesPosition.FindProperty("AnglesZ")!, aCEDatabaseModelsWorldWeeniePropertiesPositionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)obj_Cell_IdColumnBase3, weeniePropertiesPosition.FindProperty("ObjCellId")!, aCEDatabaseModelsWorldWeeniePropertiesPositionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)object_IdColumnBase16, weeniePropertiesPosition.FindProperty("ObjectId")!, aCEDatabaseModelsWorldWeeniePropertiesPositionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)origin_XColumnBase3, weeniePropertiesPosition.FindProperty("OriginX")!, aCEDatabaseModelsWorldWeeniePropertiesPositionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)origin_YColumnBase3, weeniePropertiesPosition.FindProperty("OriginY")!, aCEDatabaseModelsWorldWeeniePropertiesPositionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)origin_ZColumnBase3, weeniePropertiesPosition.FindProperty("OriginZ")!, aCEDatabaseModelsWorldWeeniePropertiesPositionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)position_TypeColumnBase, weeniePropertiesPosition.FindProperty("PositionType")!, aCEDatabaseModelsWorldWeeniePropertiesPositionMappingBase);

            var tableMappings55 = new List<TableMapping>();
            weeniePropertiesPosition.SetRuntimeAnnotation("Relational:TableMappings", tableMappings55);
            var weenie_properties_positionTable = new Table("weenie_properties_position", null, relationalModel);
            var idColumn47 = new Column("id", "int unsigned", weenie_properties_positionTable);
            weenie_properties_positionTable.Columns.Add("id", idColumn47);
            var angles_WColumn3 = new Column("angles_W", "float", weenie_properties_positionTable);
            weenie_properties_positionTable.Columns.Add("angles_W", angles_WColumn3);
            var angles_XColumn3 = new Column("angles_X", "float", weenie_properties_positionTable);
            weenie_properties_positionTable.Columns.Add("angles_X", angles_XColumn3);
            var angles_YColumn3 = new Column("angles_Y", "float", weenie_properties_positionTable);
            weenie_properties_positionTable.Columns.Add("angles_Y", angles_YColumn3);
            var angles_ZColumn3 = new Column("angles_Z", "float", weenie_properties_positionTable);
            weenie_properties_positionTable.Columns.Add("angles_Z", angles_ZColumn3);
            var obj_Cell_IdColumn3 = new Column("obj_Cell_Id", "int unsigned", weenie_properties_positionTable);
            weenie_properties_positionTable.Columns.Add("obj_Cell_Id", obj_Cell_IdColumn3);
            var object_IdColumn16 = new Column("object_Id", "int unsigned", weenie_properties_positionTable);
            weenie_properties_positionTable.Columns.Add("object_Id", object_IdColumn16);
            var origin_XColumn3 = new Column("origin_X", "float", weenie_properties_positionTable);
            weenie_properties_positionTable.Columns.Add("origin_X", origin_XColumn3);
            var origin_YColumn3 = new Column("origin_Y", "float", weenie_properties_positionTable);
            weenie_properties_positionTable.Columns.Add("origin_Y", origin_YColumn3);
            var origin_ZColumn3 = new Column("origin_Z", "float", weenie_properties_positionTable);
            weenie_properties_positionTable.Columns.Add("origin_Z", origin_ZColumn3);
            var position_TypeColumn = new Column("position_Type", "smallint unsigned", weenie_properties_positionTable);
            weenie_properties_positionTable.Columns.Add("position_Type", position_TypeColumn);
            var pK_weenie_properties_position = new UniqueConstraint("PK_weenie_properties_position", weenie_properties_positionTable, new[] { idColumn47 });
            weenie_properties_positionTable.PrimaryKey = pK_weenie_properties_position;
            var pK_weenie_properties_positionUc = RelationalModel.GetKey(this,
                "ACE.Database.Models.World.WeeniePropertiesPosition",
                new[] { "Id" });
            pK_weenie_properties_position.MappedKeys.Add(pK_weenie_properties_positionUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_weenie_properties_positionUc).Add(pK_weenie_properties_position);
            weenie_properties_positionTable.UniqueConstraints.Add("PK_weenie_properties_position", pK_weenie_properties_position);
            var wcid_position_type_uidx = new TableIndex(
            "wcid_position_type_uidx", weenie_properties_positionTable, new[] { object_IdColumn16, position_TypeColumn }, true);
            var wcid_position_type_uidxIx = RelationalModel.GetIndex(this,
                "ACE.Database.Models.World.WeeniePropertiesPosition",
                "wcid_position_type_uidx");
            wcid_position_type_uidx.MappedIndexes.Add(wcid_position_type_uidxIx);
            RelationalModel.GetOrCreateTableIndexes(wcid_position_type_uidxIx).Add(wcid_position_type_uidx);
            weenie_properties_positionTable.Indexes.Add("wcid_position_type_uidx", wcid_position_type_uidx);
            relationalModel.Tables.Add(("weenie_properties_position", null), weenie_properties_positionTable);
            var weenie_properties_positionTableMapping = new TableMapping(weeniePropertiesPosition, weenie_properties_positionTable, true);
            weenie_properties_positionTable.AddTypeMapping(weenie_properties_positionTableMapping, false);
            tableMappings55.Add(weenie_properties_positionTableMapping);
            RelationalModel.CreateColumnMapping(idColumn47, weeniePropertiesPosition.FindProperty("Id")!, weenie_properties_positionTableMapping);
            RelationalModel.CreateColumnMapping(angles_WColumn3, weeniePropertiesPosition.FindProperty("AnglesW")!, weenie_properties_positionTableMapping);
            RelationalModel.CreateColumnMapping(angles_XColumn3, weeniePropertiesPosition.FindProperty("AnglesX")!, weenie_properties_positionTableMapping);
            RelationalModel.CreateColumnMapping(angles_YColumn3, weeniePropertiesPosition.FindProperty("AnglesY")!, weenie_properties_positionTableMapping);
            RelationalModel.CreateColumnMapping(angles_ZColumn3, weeniePropertiesPosition.FindProperty("AnglesZ")!, weenie_properties_positionTableMapping);
            RelationalModel.CreateColumnMapping(obj_Cell_IdColumn3, weeniePropertiesPosition.FindProperty("ObjCellId")!, weenie_properties_positionTableMapping);
            RelationalModel.CreateColumnMapping(object_IdColumn16, weeniePropertiesPosition.FindProperty("ObjectId")!, weenie_properties_positionTableMapping);
            RelationalModel.CreateColumnMapping(origin_XColumn3, weeniePropertiesPosition.FindProperty("OriginX")!, weenie_properties_positionTableMapping);
            RelationalModel.CreateColumnMapping(origin_YColumn3, weeniePropertiesPosition.FindProperty("OriginY")!, weenie_properties_positionTableMapping);
            RelationalModel.CreateColumnMapping(origin_ZColumn3, weeniePropertiesPosition.FindProperty("OriginZ")!, weenie_properties_positionTableMapping);
            RelationalModel.CreateColumnMapping(position_TypeColumn, weeniePropertiesPosition.FindProperty("PositionType")!, weenie_properties_positionTableMapping);

            var weeniePropertiesSkill = FindEntityType("ACE.Database.Models.World.WeeniePropertiesSkill")!;

            var defaultTableMappings56 = new List<TableMappingBase<ColumnMappingBase>>();
            weeniePropertiesSkill.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings56);
            var aCEDatabaseModelsWorldWeeniePropertiesSkillTableBase = new TableBase("ACE.Database.Models.World.WeeniePropertiesSkill", null, relationalModel);
            var idColumnBase48 = new ColumnBase<ColumnMappingBase>("id", "int unsigned", aCEDatabaseModelsWorldWeeniePropertiesSkillTableBase);
            aCEDatabaseModelsWorldWeeniePropertiesSkillTableBase.Columns.Add("id", idColumnBase48);
            var init_LevelColumnBase1 = new ColumnBase<ColumnMappingBase>("init_Level", "int unsigned", aCEDatabaseModelsWorldWeeniePropertiesSkillTableBase);
            aCEDatabaseModelsWorldWeeniePropertiesSkillTableBase.Columns.Add("init_Level", init_LevelColumnBase1);
            var last_Used_TimeColumnBase = new ColumnBase<ColumnMappingBase>("last_Used_Time", "double", aCEDatabaseModelsWorldWeeniePropertiesSkillTableBase);
            aCEDatabaseModelsWorldWeeniePropertiesSkillTableBase.Columns.Add("last_Used_Time", last_Used_TimeColumnBase);
            var level_From_P_PColumnBase = new ColumnBase<ColumnMappingBase>("level_From_P_P", "smallint unsigned", aCEDatabaseModelsWorldWeeniePropertiesSkillTableBase);
            aCEDatabaseModelsWorldWeeniePropertiesSkillTableBase.Columns.Add("level_From_P_P", level_From_P_PColumnBase);
            var object_IdColumnBase17 = new ColumnBase<ColumnMappingBase>("object_Id", "int unsigned", aCEDatabaseModelsWorldWeeniePropertiesSkillTableBase);
            aCEDatabaseModelsWorldWeeniePropertiesSkillTableBase.Columns.Add("object_Id", object_IdColumnBase17);
            var p_pColumnBase = new ColumnBase<ColumnMappingBase>("p_p", "int unsigned", aCEDatabaseModelsWorldWeeniePropertiesSkillTableBase);
            aCEDatabaseModelsWorldWeeniePropertiesSkillTableBase.Columns.Add("p_p", p_pColumnBase);
            var resistance_At_Last_CheckColumnBase = new ColumnBase<ColumnMappingBase>("resistance_At_Last_Check", "int unsigned", aCEDatabaseModelsWorldWeeniePropertiesSkillTableBase);
            aCEDatabaseModelsWorldWeeniePropertiesSkillTableBase.Columns.Add("resistance_At_Last_Check", resistance_At_Last_CheckColumnBase);
            var s_a_cColumnBase = new ColumnBase<ColumnMappingBase>("s_a_c", "int unsigned", aCEDatabaseModelsWorldWeeniePropertiesSkillTableBase);
            aCEDatabaseModelsWorldWeeniePropertiesSkillTableBase.Columns.Add("s_a_c", s_a_cColumnBase);
            var typeColumnBase15 = new ColumnBase<ColumnMappingBase>("type", "smallint unsigned", aCEDatabaseModelsWorldWeeniePropertiesSkillTableBase);
            aCEDatabaseModelsWorldWeeniePropertiesSkillTableBase.Columns.Add("type", typeColumnBase15);
            relationalModel.DefaultTables.Add("ACE.Database.Models.World.WeeniePropertiesSkill", aCEDatabaseModelsWorldWeeniePropertiesSkillTableBase);
            var aCEDatabaseModelsWorldWeeniePropertiesSkillMappingBase = new TableMappingBase<ColumnMappingBase>(weeniePropertiesSkill, aCEDatabaseModelsWorldWeeniePropertiesSkillTableBase, true);
            aCEDatabaseModelsWorldWeeniePropertiesSkillTableBase.AddTypeMapping(aCEDatabaseModelsWorldWeeniePropertiesSkillMappingBase, false);
            defaultTableMappings56.Add(aCEDatabaseModelsWorldWeeniePropertiesSkillMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase48, weeniePropertiesSkill.FindProperty("Id")!, aCEDatabaseModelsWorldWeeniePropertiesSkillMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)init_LevelColumnBase1, weeniePropertiesSkill.FindProperty("InitLevel")!, aCEDatabaseModelsWorldWeeniePropertiesSkillMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)last_Used_TimeColumnBase, weeniePropertiesSkill.FindProperty("LastUsedTime")!, aCEDatabaseModelsWorldWeeniePropertiesSkillMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)level_From_P_PColumnBase, weeniePropertiesSkill.FindProperty("LevelFromPP")!, aCEDatabaseModelsWorldWeeniePropertiesSkillMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)object_IdColumnBase17, weeniePropertiesSkill.FindProperty("ObjectId")!, aCEDatabaseModelsWorldWeeniePropertiesSkillMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)p_pColumnBase, weeniePropertiesSkill.FindProperty("PP")!, aCEDatabaseModelsWorldWeeniePropertiesSkillMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)resistance_At_Last_CheckColumnBase, weeniePropertiesSkill.FindProperty("ResistanceAtLastCheck")!, aCEDatabaseModelsWorldWeeniePropertiesSkillMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)s_a_cColumnBase, weeniePropertiesSkill.FindProperty("SAC")!, aCEDatabaseModelsWorldWeeniePropertiesSkillMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)typeColumnBase15, weeniePropertiesSkill.FindProperty("Type")!, aCEDatabaseModelsWorldWeeniePropertiesSkillMappingBase);

            var tableMappings56 = new List<TableMapping>();
            weeniePropertiesSkill.SetRuntimeAnnotation("Relational:TableMappings", tableMappings56);
            var weenie_properties_skillTable = new Table("weenie_properties_skill", null, relationalModel);
            var idColumn48 = new Column("id", "int unsigned", weenie_properties_skillTable);
            weenie_properties_skillTable.Columns.Add("id", idColumn48);
            var init_LevelColumn1 = new Column("init_Level", "int unsigned", weenie_properties_skillTable);
            weenie_properties_skillTable.Columns.Add("init_Level", init_LevelColumn1);
            var last_Used_TimeColumn = new Column("last_Used_Time", "double", weenie_properties_skillTable);
            weenie_properties_skillTable.Columns.Add("last_Used_Time", last_Used_TimeColumn);
            var level_From_P_PColumn = new Column("level_From_P_P", "smallint unsigned", weenie_properties_skillTable);
            weenie_properties_skillTable.Columns.Add("level_From_P_P", level_From_P_PColumn);
            var object_IdColumn17 = new Column("object_Id", "int unsigned", weenie_properties_skillTable);
            weenie_properties_skillTable.Columns.Add("object_Id", object_IdColumn17);
            var p_pColumn = new Column("p_p", "int unsigned", weenie_properties_skillTable);
            weenie_properties_skillTable.Columns.Add("p_p", p_pColumn);
            var resistance_At_Last_CheckColumn = new Column("resistance_At_Last_Check", "int unsigned", weenie_properties_skillTable);
            weenie_properties_skillTable.Columns.Add("resistance_At_Last_Check", resistance_At_Last_CheckColumn);
            var s_a_cColumn = new Column("s_a_c", "int unsigned", weenie_properties_skillTable);
            weenie_properties_skillTable.Columns.Add("s_a_c", s_a_cColumn);
            var typeColumn15 = new Column("type", "smallint unsigned", weenie_properties_skillTable);
            weenie_properties_skillTable.Columns.Add("type", typeColumn15);
            var pK_weenie_properties_skill = new UniqueConstraint("PK_weenie_properties_skill", weenie_properties_skillTable, new[] { idColumn48 });
            weenie_properties_skillTable.PrimaryKey = pK_weenie_properties_skill;
            var pK_weenie_properties_skillUc = RelationalModel.GetKey(this,
                "ACE.Database.Models.World.WeeniePropertiesSkill",
                new[] { "Id" });
            pK_weenie_properties_skill.MappedKeys.Add(pK_weenie_properties_skillUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_weenie_properties_skillUc).Add(pK_weenie_properties_skill);
            weenie_properties_skillTable.UniqueConstraints.Add("PK_weenie_properties_skill", pK_weenie_properties_skill);
            var wcid_skill_type_uidx = new TableIndex(
            "wcid_skill_type_uidx", weenie_properties_skillTable, new[] { object_IdColumn17, typeColumn15 }, true);
            var wcid_skill_type_uidxIx = RelationalModel.GetIndex(this,
                "ACE.Database.Models.World.WeeniePropertiesSkill",
                "wcid_skill_type_uidx");
            wcid_skill_type_uidx.MappedIndexes.Add(wcid_skill_type_uidxIx);
            RelationalModel.GetOrCreateTableIndexes(wcid_skill_type_uidxIx).Add(wcid_skill_type_uidx);
            weenie_properties_skillTable.Indexes.Add("wcid_skill_type_uidx", wcid_skill_type_uidx);
            relationalModel.Tables.Add(("weenie_properties_skill", null), weenie_properties_skillTable);
            var weenie_properties_skillTableMapping = new TableMapping(weeniePropertiesSkill, weenie_properties_skillTable, true);
            weenie_properties_skillTable.AddTypeMapping(weenie_properties_skillTableMapping, false);
            tableMappings56.Add(weenie_properties_skillTableMapping);
            RelationalModel.CreateColumnMapping(idColumn48, weeniePropertiesSkill.FindProperty("Id")!, weenie_properties_skillTableMapping);
            RelationalModel.CreateColumnMapping(init_LevelColumn1, weeniePropertiesSkill.FindProperty("InitLevel")!, weenie_properties_skillTableMapping);
            RelationalModel.CreateColumnMapping(last_Used_TimeColumn, weeniePropertiesSkill.FindProperty("LastUsedTime")!, weenie_properties_skillTableMapping);
            RelationalModel.CreateColumnMapping(level_From_P_PColumn, weeniePropertiesSkill.FindProperty("LevelFromPP")!, weenie_properties_skillTableMapping);
            RelationalModel.CreateColumnMapping(object_IdColumn17, weeniePropertiesSkill.FindProperty("ObjectId")!, weenie_properties_skillTableMapping);
            RelationalModel.CreateColumnMapping(p_pColumn, weeniePropertiesSkill.FindProperty("PP")!, weenie_properties_skillTableMapping);
            RelationalModel.CreateColumnMapping(resistance_At_Last_CheckColumn, weeniePropertiesSkill.FindProperty("ResistanceAtLastCheck")!, weenie_properties_skillTableMapping);
            RelationalModel.CreateColumnMapping(s_a_cColumn, weeniePropertiesSkill.FindProperty("SAC")!, weenie_properties_skillTableMapping);
            RelationalModel.CreateColumnMapping(typeColumn15, weeniePropertiesSkill.FindProperty("Type")!, weenie_properties_skillTableMapping);

            var weeniePropertiesSpellBook = FindEntityType("ACE.Database.Models.World.WeeniePropertiesSpellBook")!;

            var defaultTableMappings57 = new List<TableMappingBase<ColumnMappingBase>>();
            weeniePropertiesSpellBook.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings57);
            var aCEDatabaseModelsWorldWeeniePropertiesSpellBookTableBase = new TableBase("ACE.Database.Models.World.WeeniePropertiesSpellBook", null, relationalModel);
            var idColumnBase49 = new ColumnBase<ColumnMappingBase>("id", "int unsigned", aCEDatabaseModelsWorldWeeniePropertiesSpellBookTableBase);
            aCEDatabaseModelsWorldWeeniePropertiesSpellBookTableBase.Columns.Add("id", idColumnBase49);
            var object_IdColumnBase18 = new ColumnBase<ColumnMappingBase>("object_Id", "int unsigned", aCEDatabaseModelsWorldWeeniePropertiesSpellBookTableBase);
            aCEDatabaseModelsWorldWeeniePropertiesSpellBookTableBase.Columns.Add("object_Id", object_IdColumnBase18);
            var probabilityColumnBase11 = new ColumnBase<ColumnMappingBase>("probability", "float", aCEDatabaseModelsWorldWeeniePropertiesSpellBookTableBase);
            aCEDatabaseModelsWorldWeeniePropertiesSpellBookTableBase.Columns.Add("probability", probabilityColumnBase11);
            var spellColumnBase = new ColumnBase<ColumnMappingBase>("spell", "int", aCEDatabaseModelsWorldWeeniePropertiesSpellBookTableBase);
            aCEDatabaseModelsWorldWeeniePropertiesSpellBookTableBase.Columns.Add("spell", spellColumnBase);
            relationalModel.DefaultTables.Add("ACE.Database.Models.World.WeeniePropertiesSpellBook", aCEDatabaseModelsWorldWeeniePropertiesSpellBookTableBase);
            var aCEDatabaseModelsWorldWeeniePropertiesSpellBookMappingBase = new TableMappingBase<ColumnMappingBase>(weeniePropertiesSpellBook, aCEDatabaseModelsWorldWeeniePropertiesSpellBookTableBase, true);
            aCEDatabaseModelsWorldWeeniePropertiesSpellBookTableBase.AddTypeMapping(aCEDatabaseModelsWorldWeeniePropertiesSpellBookMappingBase, false);
            defaultTableMappings57.Add(aCEDatabaseModelsWorldWeeniePropertiesSpellBookMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase49, weeniePropertiesSpellBook.FindProperty("Id")!, aCEDatabaseModelsWorldWeeniePropertiesSpellBookMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)object_IdColumnBase18, weeniePropertiesSpellBook.FindProperty("ObjectId")!, aCEDatabaseModelsWorldWeeniePropertiesSpellBookMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)probabilityColumnBase11, weeniePropertiesSpellBook.FindProperty("Probability")!, aCEDatabaseModelsWorldWeeniePropertiesSpellBookMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)spellColumnBase, weeniePropertiesSpellBook.FindProperty("Spell")!, aCEDatabaseModelsWorldWeeniePropertiesSpellBookMappingBase);

            var tableMappings57 = new List<TableMapping>();
            weeniePropertiesSpellBook.SetRuntimeAnnotation("Relational:TableMappings", tableMappings57);
            var weenie_properties_spell_bookTable = new Table("weenie_properties_spell_book", null, relationalModel);
            var idColumn49 = new Column("id", "int unsigned", weenie_properties_spell_bookTable);
            weenie_properties_spell_bookTable.Columns.Add("id", idColumn49);
            var object_IdColumn18 = new Column("object_Id", "int unsigned", weenie_properties_spell_bookTable);
            weenie_properties_spell_bookTable.Columns.Add("object_Id", object_IdColumn18);
            var probabilityColumn11 = new Column("probability", "float", weenie_properties_spell_bookTable);
            weenie_properties_spell_bookTable.Columns.Add("probability", probabilityColumn11);
            var spellColumn = new Column("spell", "int", weenie_properties_spell_bookTable);
            weenie_properties_spell_bookTable.Columns.Add("spell", spellColumn);
            var pK_weenie_properties_spell_book = new UniqueConstraint("PK_weenie_properties_spell_book", weenie_properties_spell_bookTable, new[] { idColumn49 });
            weenie_properties_spell_bookTable.PrimaryKey = pK_weenie_properties_spell_book;
            var pK_weenie_properties_spell_bookUc = RelationalModel.GetKey(this,
                "ACE.Database.Models.World.WeeniePropertiesSpellBook",
                new[] { "Id" });
            pK_weenie_properties_spell_book.MappedKeys.Add(pK_weenie_properties_spell_bookUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_weenie_properties_spell_bookUc).Add(pK_weenie_properties_spell_book);
            weenie_properties_spell_bookTable.UniqueConstraints.Add("PK_weenie_properties_spell_book", pK_weenie_properties_spell_book);
            var wcid_spellbook_type_uidx = new TableIndex(
            "wcid_spellbook_type_uidx", weenie_properties_spell_bookTable, new[] { object_IdColumn18, spellColumn }, true);
            var wcid_spellbook_type_uidxIx = RelationalModel.GetIndex(this,
                "ACE.Database.Models.World.WeeniePropertiesSpellBook",
                "wcid_spellbook_type_uidx");
            wcid_spellbook_type_uidx.MappedIndexes.Add(wcid_spellbook_type_uidxIx);
            RelationalModel.GetOrCreateTableIndexes(wcid_spellbook_type_uidxIx).Add(wcid_spellbook_type_uidx);
            weenie_properties_spell_bookTable.Indexes.Add("wcid_spellbook_type_uidx", wcid_spellbook_type_uidx);
            relationalModel.Tables.Add(("weenie_properties_spell_book", null), weenie_properties_spell_bookTable);
            var weenie_properties_spell_bookTableMapping = new TableMapping(weeniePropertiesSpellBook, weenie_properties_spell_bookTable, true);
            weenie_properties_spell_bookTable.AddTypeMapping(weenie_properties_spell_bookTableMapping, false);
            tableMappings57.Add(weenie_properties_spell_bookTableMapping);
            RelationalModel.CreateColumnMapping(idColumn49, weeniePropertiesSpellBook.FindProperty("Id")!, weenie_properties_spell_bookTableMapping);
            RelationalModel.CreateColumnMapping(object_IdColumn18, weeniePropertiesSpellBook.FindProperty("ObjectId")!, weenie_properties_spell_bookTableMapping);
            RelationalModel.CreateColumnMapping(probabilityColumn11, weeniePropertiesSpellBook.FindProperty("Probability")!, weenie_properties_spell_bookTableMapping);
            RelationalModel.CreateColumnMapping(spellColumn, weeniePropertiesSpellBook.FindProperty("Spell")!, weenie_properties_spell_bookTableMapping);

            var weeniePropertiesString = FindEntityType("ACE.Database.Models.World.WeeniePropertiesString")!;

            var defaultTableMappings58 = new List<TableMappingBase<ColumnMappingBase>>();
            weeniePropertiesString.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings58);
            var aCEDatabaseModelsWorldWeeniePropertiesStringTableBase = new TableBase("ACE.Database.Models.World.WeeniePropertiesString", null, relationalModel);
            var idColumnBase50 = new ColumnBase<ColumnMappingBase>("id", "int unsigned", aCEDatabaseModelsWorldWeeniePropertiesStringTableBase);
            aCEDatabaseModelsWorldWeeniePropertiesStringTableBase.Columns.Add("id", idColumnBase50);
            var object_IdColumnBase19 = new ColumnBase<ColumnMappingBase>("object_Id", "int unsigned", aCEDatabaseModelsWorldWeeniePropertiesStringTableBase);
            aCEDatabaseModelsWorldWeeniePropertiesStringTableBase.Columns.Add("object_Id", object_IdColumnBase19);
            var typeColumnBase16 = new ColumnBase<ColumnMappingBase>("type", "smallint unsigned", aCEDatabaseModelsWorldWeeniePropertiesStringTableBase);
            aCEDatabaseModelsWorldWeeniePropertiesStringTableBase.Columns.Add("type", typeColumnBase16);
            var valueColumnBase22 = new ColumnBase<ColumnMappingBase>("value", "text", aCEDatabaseModelsWorldWeeniePropertiesStringTableBase);
            aCEDatabaseModelsWorldWeeniePropertiesStringTableBase.Columns.Add("value", valueColumnBase22);
            relationalModel.DefaultTables.Add("ACE.Database.Models.World.WeeniePropertiesString", aCEDatabaseModelsWorldWeeniePropertiesStringTableBase);
            var aCEDatabaseModelsWorldWeeniePropertiesStringMappingBase = new TableMappingBase<ColumnMappingBase>(weeniePropertiesString, aCEDatabaseModelsWorldWeeniePropertiesStringTableBase, true);
            aCEDatabaseModelsWorldWeeniePropertiesStringTableBase.AddTypeMapping(aCEDatabaseModelsWorldWeeniePropertiesStringMappingBase, false);
            defaultTableMappings58.Add(aCEDatabaseModelsWorldWeeniePropertiesStringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase50, weeniePropertiesString.FindProperty("Id")!, aCEDatabaseModelsWorldWeeniePropertiesStringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)object_IdColumnBase19, weeniePropertiesString.FindProperty("ObjectId")!, aCEDatabaseModelsWorldWeeniePropertiesStringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)typeColumnBase16, weeniePropertiesString.FindProperty("Type")!, aCEDatabaseModelsWorldWeeniePropertiesStringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)valueColumnBase22, weeniePropertiesString.FindProperty("Value")!, aCEDatabaseModelsWorldWeeniePropertiesStringMappingBase);

            var tableMappings58 = new List<TableMapping>();
            weeniePropertiesString.SetRuntimeAnnotation("Relational:TableMappings", tableMappings58);
            var weenie_properties_stringTable = new Table("weenie_properties_string", null, relationalModel);
            var idColumn50 = new Column("id", "int unsigned", weenie_properties_stringTable);
            weenie_properties_stringTable.Columns.Add("id", idColumn50);
            var object_IdColumn19 = new Column("object_Id", "int unsigned", weenie_properties_stringTable);
            weenie_properties_stringTable.Columns.Add("object_Id", object_IdColumn19);
            var typeColumn16 = new Column("type", "smallint unsigned", weenie_properties_stringTable);
            weenie_properties_stringTable.Columns.Add("type", typeColumn16);
            var valueColumn22 = new Column("value", "text", weenie_properties_stringTable);
            weenie_properties_stringTable.Columns.Add("value", valueColumn22);
            var pK_weenie_properties_string = new UniqueConstraint("PK_weenie_properties_string", weenie_properties_stringTable, new[] { idColumn50 });
            weenie_properties_stringTable.PrimaryKey = pK_weenie_properties_string;
            var pK_weenie_properties_stringUc = RelationalModel.GetKey(this,
                "ACE.Database.Models.World.WeeniePropertiesString",
                new[] { "Id" });
            pK_weenie_properties_string.MappedKeys.Add(pK_weenie_properties_stringUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_weenie_properties_stringUc).Add(pK_weenie_properties_string);
            weenie_properties_stringTable.UniqueConstraints.Add("PK_weenie_properties_string", pK_weenie_properties_string);
            var wcid_string_type_uidx = new TableIndex(
            "wcid_string_type_uidx", weenie_properties_stringTable, new[] { object_IdColumn19, typeColumn16 }, true);
            var wcid_string_type_uidxIx = RelationalModel.GetIndex(this,
                "ACE.Database.Models.World.WeeniePropertiesString",
                "wcid_string_type_uidx");
            wcid_string_type_uidx.MappedIndexes.Add(wcid_string_type_uidxIx);
            RelationalModel.GetOrCreateTableIndexes(wcid_string_type_uidxIx).Add(wcid_string_type_uidx);
            weenie_properties_stringTable.Indexes.Add("wcid_string_type_uidx", wcid_string_type_uidx);
            relationalModel.Tables.Add(("weenie_properties_string", null), weenie_properties_stringTable);
            var weenie_properties_stringTableMapping = new TableMapping(weeniePropertiesString, weenie_properties_stringTable, true);
            weenie_properties_stringTable.AddTypeMapping(weenie_properties_stringTableMapping, false);
            tableMappings58.Add(weenie_properties_stringTableMapping);
            RelationalModel.CreateColumnMapping(idColumn50, weeniePropertiesString.FindProperty("Id")!, weenie_properties_stringTableMapping);
            RelationalModel.CreateColumnMapping(object_IdColumn19, weeniePropertiesString.FindProperty("ObjectId")!, weenie_properties_stringTableMapping);
            RelationalModel.CreateColumnMapping(typeColumn16, weeniePropertiesString.FindProperty("Type")!, weenie_properties_stringTableMapping);
            RelationalModel.CreateColumnMapping(valueColumn22, weeniePropertiesString.FindProperty("Value")!, weenie_properties_stringTableMapping);

            var weeniePropertiesTextureMap = FindEntityType("ACE.Database.Models.World.WeeniePropertiesTextureMap")!;

            var defaultTableMappings59 = new List<TableMappingBase<ColumnMappingBase>>();
            weeniePropertiesTextureMap.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings59);
            var aCEDatabaseModelsWorldWeeniePropertiesTextureMapTableBase = new TableBase("ACE.Database.Models.World.WeeniePropertiesTextureMap", null, relationalModel);
            var idColumnBase51 = new ColumnBase<ColumnMappingBase>("id", "int unsigned", aCEDatabaseModelsWorldWeeniePropertiesTextureMapTableBase);
            aCEDatabaseModelsWorldWeeniePropertiesTextureMapTableBase.Columns.Add("id", idColumnBase51);
            var indexColumnBase13 = new ColumnBase<ColumnMappingBase>("index", "tinyint unsigned", aCEDatabaseModelsWorldWeeniePropertiesTextureMapTableBase);
            aCEDatabaseModelsWorldWeeniePropertiesTextureMapTableBase.Columns.Add("index", indexColumnBase13);
            var new_IdColumnBase = new ColumnBase<ColumnMappingBase>("new_Id", "int unsigned", aCEDatabaseModelsWorldWeeniePropertiesTextureMapTableBase);
            aCEDatabaseModelsWorldWeeniePropertiesTextureMapTableBase.Columns.Add("new_Id", new_IdColumnBase);
            var object_IdColumnBase20 = new ColumnBase<ColumnMappingBase>("object_Id", "int unsigned", aCEDatabaseModelsWorldWeeniePropertiesTextureMapTableBase);
            aCEDatabaseModelsWorldWeeniePropertiesTextureMapTableBase.Columns.Add("object_Id", object_IdColumnBase20);
            var old_IdColumnBase = new ColumnBase<ColumnMappingBase>("old_Id", "int unsigned", aCEDatabaseModelsWorldWeeniePropertiesTextureMapTableBase);
            aCEDatabaseModelsWorldWeeniePropertiesTextureMapTableBase.Columns.Add("old_Id", old_IdColumnBase);
            relationalModel.DefaultTables.Add("ACE.Database.Models.World.WeeniePropertiesTextureMap", aCEDatabaseModelsWorldWeeniePropertiesTextureMapTableBase);
            var aCEDatabaseModelsWorldWeeniePropertiesTextureMapMappingBase = new TableMappingBase<ColumnMappingBase>(weeniePropertiesTextureMap, aCEDatabaseModelsWorldWeeniePropertiesTextureMapTableBase, true);
            aCEDatabaseModelsWorldWeeniePropertiesTextureMapTableBase.AddTypeMapping(aCEDatabaseModelsWorldWeeniePropertiesTextureMapMappingBase, false);
            defaultTableMappings59.Add(aCEDatabaseModelsWorldWeeniePropertiesTextureMapMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase51, weeniePropertiesTextureMap.FindProperty("Id")!, aCEDatabaseModelsWorldWeeniePropertiesTextureMapMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)indexColumnBase13, weeniePropertiesTextureMap.FindProperty("Index")!, aCEDatabaseModelsWorldWeeniePropertiesTextureMapMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)new_IdColumnBase, weeniePropertiesTextureMap.FindProperty("NewId")!, aCEDatabaseModelsWorldWeeniePropertiesTextureMapMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)object_IdColumnBase20, weeniePropertiesTextureMap.FindProperty("ObjectId")!, aCEDatabaseModelsWorldWeeniePropertiesTextureMapMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)old_IdColumnBase, weeniePropertiesTextureMap.FindProperty("OldId")!, aCEDatabaseModelsWorldWeeniePropertiesTextureMapMappingBase);

            var tableMappings59 = new List<TableMapping>();
            weeniePropertiesTextureMap.SetRuntimeAnnotation("Relational:TableMappings", tableMappings59);
            var weenie_properties_texture_mapTable = new Table("weenie_properties_texture_map", null, relationalModel);
            var idColumn51 = new Column("id", "int unsigned", weenie_properties_texture_mapTable);
            weenie_properties_texture_mapTable.Columns.Add("id", idColumn51);
            var indexColumn13 = new Column("index", "tinyint unsigned", weenie_properties_texture_mapTable);
            weenie_properties_texture_mapTable.Columns.Add("index", indexColumn13);
            var new_IdColumn = new Column("new_Id", "int unsigned", weenie_properties_texture_mapTable);
            weenie_properties_texture_mapTable.Columns.Add("new_Id", new_IdColumn);
            var object_IdColumn20 = new Column("object_Id", "int unsigned", weenie_properties_texture_mapTable);
            weenie_properties_texture_mapTable.Columns.Add("object_Id", object_IdColumn20);
            var old_IdColumn = new Column("old_Id", "int unsigned", weenie_properties_texture_mapTable);
            weenie_properties_texture_mapTable.Columns.Add("old_Id", old_IdColumn);
            var pK_weenie_properties_texture_map = new UniqueConstraint("PK_weenie_properties_texture_map", weenie_properties_texture_mapTable, new[] { idColumn51 });
            weenie_properties_texture_mapTable.PrimaryKey = pK_weenie_properties_texture_map;
            var pK_weenie_properties_texture_mapUc = RelationalModel.GetKey(this,
                "ACE.Database.Models.World.WeeniePropertiesTextureMap",
                new[] { "Id" });
            pK_weenie_properties_texture_map.MappedKeys.Add(pK_weenie_properties_texture_mapUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_weenie_properties_texture_mapUc).Add(pK_weenie_properties_texture_map);
            weenie_properties_texture_mapTable.UniqueConstraints.Add("PK_weenie_properties_texture_map", pK_weenie_properties_texture_map);
            var object_Id_index_oldId_uidx = new TableIndex(
            "object_Id_index_oldId_uidx", weenie_properties_texture_mapTable, new[] { object_IdColumn20, indexColumn13, old_IdColumn }, true);
            var object_Id_index_oldId_uidxIx = RelationalModel.GetIndex(this,
                "ACE.Database.Models.World.WeeniePropertiesTextureMap",
                "object_Id_index_oldId_uidx");
            object_Id_index_oldId_uidx.MappedIndexes.Add(object_Id_index_oldId_uidxIx);
            RelationalModel.GetOrCreateTableIndexes(object_Id_index_oldId_uidxIx).Add(object_Id_index_oldId_uidx);
            weenie_properties_texture_mapTable.Indexes.Add("object_Id_index_oldId_uidx", object_Id_index_oldId_uidx);
            relationalModel.Tables.Add(("weenie_properties_texture_map", null), weenie_properties_texture_mapTable);
            var weenie_properties_texture_mapTableMapping = new TableMapping(weeniePropertiesTextureMap, weenie_properties_texture_mapTable, true);
            weenie_properties_texture_mapTable.AddTypeMapping(weenie_properties_texture_mapTableMapping, false);
            tableMappings59.Add(weenie_properties_texture_mapTableMapping);
            RelationalModel.CreateColumnMapping(idColumn51, weeniePropertiesTextureMap.FindProperty("Id")!, weenie_properties_texture_mapTableMapping);
            RelationalModel.CreateColumnMapping(indexColumn13, weeniePropertiesTextureMap.FindProperty("Index")!, weenie_properties_texture_mapTableMapping);
            RelationalModel.CreateColumnMapping(new_IdColumn, weeniePropertiesTextureMap.FindProperty("NewId")!, weenie_properties_texture_mapTableMapping);
            RelationalModel.CreateColumnMapping(object_IdColumn20, weeniePropertiesTextureMap.FindProperty("ObjectId")!, weenie_properties_texture_mapTableMapping);
            RelationalModel.CreateColumnMapping(old_IdColumn, weeniePropertiesTextureMap.FindProperty("OldId")!, weenie_properties_texture_mapTableMapping);
            var cookbook_recipe = new ForeignKeyConstraint(
                "cookbook_recipe", cook_bookTable, recipeTable,
                new[] { recipe_IdColumn },
                recipeTable.FindUniqueConstraint("PK_recipe")!, ReferentialAction.Cascade);
            var cookbook_recipeFk = RelationalModel.GetForeignKey(this,
                "ACE.Database.Models.World.CookBook",
                new[] { "RecipeId" },
                "ACE.Database.Models.World.Recipe",
                new[] { "Id" });
            cookbook_recipe.MappedForeignKeys.Add(cookbook_recipeFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(cookbook_recipeFk).Add(cookbook_recipe);
            cook_bookTable.ForeignKeyConstraints.Add(cookbook_recipe);
            recipeTable.ReferencingForeignKeyConstraints.Add(cookbook_recipe);
            var instance_link = new ForeignKeyConstraint(
                "instance_link", landblock_instance_linkTable, landblock_instanceTable,
                new[] { parent_GUIDColumn },
                landblock_instanceTable.FindUniqueConstraint("PRIMARY")!, ReferentialAction.Cascade);
            var instance_linkFk = RelationalModel.GetForeignKey(this,
                "ACE.Database.Models.World.LandblockInstanceLink",
                new[] { "ParentGuid" },
                "ACE.Database.Models.World.LandblockInstance",
                new[] { "Guid" });
            instance_link.MappedForeignKeys.Add(instance_linkFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(instance_linkFk).Add(instance_link);
            landblock_instance_linkTable.ForeignKeyConstraints.Add(instance_link);
            landblock_instanceTable.ReferencingForeignKeyConstraints.Add(instance_link);
            var realm_bool = new ForeignKeyConstraint(
                "realm_bool", realm_properties_boolTable, realmTable,
                new[] { realm_IdColumn },
                realmTable.FindUniqueConstraint("PK_realm")!, ReferentialAction.Cascade);
            var realm_boolFk = RelationalModel.GetForeignKey(this,
                "ACE.Database.Models.World.RealmPropertiesBool",
                new[] { "RealmId" },
                "ACE.Database.Models.World.Realm",
                new[] { "Id" });
            realm_bool.MappedForeignKeys.Add(realm_boolFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(realm_boolFk).Add(realm_bool);
            realm_properties_boolTable.ForeignKeyConstraints.Add(realm_bool);
            realmTable.ReferencingForeignKeyConstraints.Add(realm_bool);
            var realm_float = new ForeignKeyConstraint(
                "realm_float", realm_properties_floatTable, realmTable,
                new[] { realm_IdColumn0 },
                realmTable.FindUniqueConstraint("PK_realm")!, ReferentialAction.Cascade);
            var realm_floatFk = RelationalModel.GetForeignKey(this,
                "ACE.Database.Models.World.RealmPropertiesFloat",
                new[] { "RealmId" },
                "ACE.Database.Models.World.Realm",
                new[] { "Id" });
            realm_float.MappedForeignKeys.Add(realm_floatFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(realm_floatFk).Add(realm_float);
            realm_properties_floatTable.ForeignKeyConstraints.Add(realm_float);
            realmTable.ReferencingForeignKeyConstraints.Add(realm_float);
            var realm_int = new ForeignKeyConstraint(
                "realm_int", realm_properties_intTable, realmTable,
                new[] { realm_IdColumn1 },
                realmTable.FindUniqueConstraint("PK_realm")!, ReferentialAction.Cascade);
            var realm_intFk = RelationalModel.GetForeignKey(this,
                "ACE.Database.Models.World.RealmPropertiesInt",
                new[] { "RealmId" },
                "ACE.Database.Models.World.Realm",
                new[] { "Id" });
            realm_int.MappedForeignKeys.Add(realm_intFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(realm_intFk).Add(realm_int);
            realm_properties_intTable.ForeignKeyConstraints.Add(realm_int);
            realmTable.ReferencingForeignKeyConstraints.Add(realm_int);
            var realm_int64 = new ForeignKeyConstraint(
                "realm_int64", realm_properties_int64Table, realmTable,
                new[] { realm_IdColumn2 },
                realmTable.FindUniqueConstraint("PK_realm")!, ReferentialAction.Cascade);
            var realm_int64Fk = RelationalModel.GetForeignKey(this,
                "ACE.Database.Models.World.RealmPropertiesInt64",
                new[] { "RealmId" },
                "ACE.Database.Models.World.Realm",
                new[] { "Id" });
            realm_int64.MappedForeignKeys.Add(realm_int64Fk);
            RelationalModel.GetOrCreateForeignKeyConstraints(realm_int64Fk).Add(realm_int64);
            realm_properties_int64Table.ForeignKeyConstraints.Add(realm_int64);
            realmTable.ReferencingForeignKeyConstraints.Add(realm_int64);
            var realm_string = new ForeignKeyConstraint(
                "realm_string", realm_properties_stringTable, realmTable,
                new[] { realm_IdColumn3 },
                realmTable.FindUniqueConstraint("PK_realm")!, ReferentialAction.Cascade);
            var realm_stringFk = RelationalModel.GetForeignKey(this,
                "ACE.Database.Models.World.RealmPropertiesString",
                new[] { "RealmId" },
                "ACE.Database.Models.World.Realm",
                new[] { "Id" });
            realm_string.MappedForeignKeys.Add(realm_stringFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(realm_stringFk).Add(realm_string);
            realm_properties_stringTable.ForeignKeyConstraints.Add(realm_string);
            realmTable.ReferencingForeignKeyConstraints.Add(realm_string);
            var realm_link_child0 = new ForeignKeyConstraint(
                "realm_link_child", realm_ruleset_linksTable, realmTable,
                new[] { linked_realm_idColumn },
                realmTable.FindUniqueConstraint("PK_realm")!, ReferentialAction.Cascade);
            var realm_link_child0Fk = RelationalModel.GetForeignKey(this,
                "ACE.Database.Models.World.RealmRulesetLinks",
                new[] { "LinkedRealmId" },
                "ACE.Database.Models.World.Realm",
                new[] { "Id" });
            realm_link_child0.MappedForeignKeys.Add(realm_link_child0Fk);
            RelationalModel.GetOrCreateForeignKeyConstraints(realm_link_child0Fk).Add(realm_link_child0);
            realm_ruleset_linksTable.ForeignKeyConstraints.Add(realm_link_child0);
            realmTable.ReferencingForeignKeyConstraints.Add(realm_link_child0);
            var realm_link_parent = new ForeignKeyConstraint(
                "realm_link_parent", realm_ruleset_linksTable, realmTable,
                new[] { realm_idColumn },
                realmTable.FindUniqueConstraint("PK_realm")!, ReferentialAction.Cascade);
            var realm_link_parentFk = RelationalModel.GetForeignKey(this,
                "ACE.Database.Models.World.RealmRulesetLinks",
                new[] { "RealmId" },
                "ACE.Database.Models.World.Realm",
                new[] { "Id" });
            realm_link_parent.MappedForeignKeys.Add(realm_link_parentFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(realm_link_parentFk).Add(realm_link_parent);
            realm_ruleset_linksTable.ForeignKeyConstraints.Add(realm_link_parent);
            realmTable.ReferencingForeignKeyConstraints.Add(realm_link_parent);
            var recipeId_Mod0 = new ForeignKeyConstraint(
                "recipeId_Mod", recipe_modTable, recipeTable,
                new[] { recipe_IdColumn0 },
                recipeTable.FindUniqueConstraint("PK_recipe")!, ReferentialAction.Cascade);
            var recipeId_Mod0Fk = RelationalModel.GetForeignKey(this,
                "ACE.Database.Models.World.RecipeMod",
                new[] { "RecipeId" },
                "ACE.Database.Models.World.Recipe",
                new[] { "Id" });
            recipeId_Mod0.MappedForeignKeys.Add(recipeId_Mod0Fk);
            RelationalModel.GetOrCreateForeignKeyConstraints(recipeId_Mod0Fk).Add(recipeId_Mod0);
            recipe_modTable.ForeignKeyConstraints.Add(recipeId_Mod0);
            recipeTable.ReferencingForeignKeyConstraints.Add(recipeId_Mod0);
            var recipeId_mod_bool0 = new ForeignKeyConstraint(
                "recipeId_mod_bool", recipe_mods_boolTable, recipe_modTable,
                new[] { recipe_Mod_IdColumn },
                recipe_modTable.FindUniqueConstraint("PK_recipe_mod")!, ReferentialAction.Cascade);
            var recipeId_mod_bool0Fk = RelationalModel.GetForeignKey(this,
                "ACE.Database.Models.World.RecipeModsBool",
                new[] { "RecipeModId" },
                "ACE.Database.Models.World.RecipeMod",
                new[] { "Id" });
            recipeId_mod_bool0.MappedForeignKeys.Add(recipeId_mod_bool0Fk);
            RelationalModel.GetOrCreateForeignKeyConstraints(recipeId_mod_bool0Fk).Add(recipeId_mod_bool0);
            recipe_mods_boolTable.ForeignKeyConstraints.Add(recipeId_mod_bool0);
            recipe_modTable.ReferencingForeignKeyConstraints.Add(recipeId_mod_bool0);
            var recipeId_mod_did0 = new ForeignKeyConstraint(
                "recipeId_mod_did", recipe_mods_d_i_dTable, recipe_modTable,
                new[] { recipe_Mod_IdColumn0 },
                recipe_modTable.FindUniqueConstraint("PK_recipe_mod")!, ReferentialAction.Cascade);
            var recipeId_mod_did0Fk = RelationalModel.GetForeignKey(this,
                "ACE.Database.Models.World.RecipeModsDID",
                new[] { "RecipeModId" },
                "ACE.Database.Models.World.RecipeMod",
                new[] { "Id" });
            recipeId_mod_did0.MappedForeignKeys.Add(recipeId_mod_did0Fk);
            RelationalModel.GetOrCreateForeignKeyConstraints(recipeId_mod_did0Fk).Add(recipeId_mod_did0);
            recipe_mods_d_i_dTable.ForeignKeyConstraints.Add(recipeId_mod_did0);
            recipe_modTable.ReferencingForeignKeyConstraints.Add(recipeId_mod_did0);
            var recipeId_mod_float0 = new ForeignKeyConstraint(
                "recipeId_mod_float", recipe_mods_floatTable, recipe_modTable,
                new[] { recipe_Mod_IdColumn1 },
                recipe_modTable.FindUniqueConstraint("PK_recipe_mod")!, ReferentialAction.Cascade);
            var recipeId_mod_float0Fk = RelationalModel.GetForeignKey(this,
                "ACE.Database.Models.World.RecipeModsFloat",
                new[] { "RecipeModId" },
                "ACE.Database.Models.World.RecipeMod",
                new[] { "Id" });
            recipeId_mod_float0.MappedForeignKeys.Add(recipeId_mod_float0Fk);
            RelationalModel.GetOrCreateForeignKeyConstraints(recipeId_mod_float0Fk).Add(recipeId_mod_float0);
            recipe_mods_floatTable.ForeignKeyConstraints.Add(recipeId_mod_float0);
            recipe_modTable.ReferencingForeignKeyConstraints.Add(recipeId_mod_float0);
            var recipeId_mod_iid0 = new ForeignKeyConstraint(
                "recipeId_mod_iid", recipe_mods_i_i_dTable, recipe_modTable,
                new[] { recipe_Mod_IdColumn2 },
                recipe_modTable.FindUniqueConstraint("PK_recipe_mod")!, ReferentialAction.Cascade);
            var recipeId_mod_iid0Fk = RelationalModel.GetForeignKey(this,
                "ACE.Database.Models.World.RecipeModsIID",
                new[] { "RecipeModId" },
                "ACE.Database.Models.World.RecipeMod",
                new[] { "Id" });
            recipeId_mod_iid0.MappedForeignKeys.Add(recipeId_mod_iid0Fk);
            RelationalModel.GetOrCreateForeignKeyConstraints(recipeId_mod_iid0Fk).Add(recipeId_mod_iid0);
            recipe_mods_i_i_dTable.ForeignKeyConstraints.Add(recipeId_mod_iid0);
            recipe_modTable.ReferencingForeignKeyConstraints.Add(recipeId_mod_iid0);
            var recipeId_mod_int0 = new ForeignKeyConstraint(
                "recipeId_mod_int", recipe_mods_intTable, recipe_modTable,
                new[] { recipe_Mod_IdColumn3 },
                recipe_modTable.FindUniqueConstraint("PK_recipe_mod")!, ReferentialAction.Cascade);
            var recipeId_mod_int0Fk = RelationalModel.GetForeignKey(this,
                "ACE.Database.Models.World.RecipeModsInt",
                new[] { "RecipeModId" },
                "ACE.Database.Models.World.RecipeMod",
                new[] { "Id" });
            recipeId_mod_int0.MappedForeignKeys.Add(recipeId_mod_int0Fk);
            RelationalModel.GetOrCreateForeignKeyConstraints(recipeId_mod_int0Fk).Add(recipeId_mod_int0);
            recipe_mods_intTable.ForeignKeyConstraints.Add(recipeId_mod_int0);
            recipe_modTable.ReferencingForeignKeyConstraints.Add(recipeId_mod_int0);
            var recipeId_mod_string0 = new ForeignKeyConstraint(
                "recipeId_mod_string", recipe_mods_stringTable, recipe_modTable,
                new[] { recipe_Mod_IdColumn4 },
                recipe_modTable.FindUniqueConstraint("PK_recipe_mod")!, ReferentialAction.Cascade);
            var recipeId_mod_string0Fk = RelationalModel.GetForeignKey(this,
                "ACE.Database.Models.World.RecipeModsString",
                new[] { "RecipeModId" },
                "ACE.Database.Models.World.RecipeMod",
                new[] { "Id" });
            recipeId_mod_string0.MappedForeignKeys.Add(recipeId_mod_string0Fk);
            RelationalModel.GetOrCreateForeignKeyConstraints(recipeId_mod_string0Fk).Add(recipeId_mod_string0);
            recipe_mods_stringTable.ForeignKeyConstraints.Add(recipeId_mod_string0);
            recipe_modTable.ReferencingForeignKeyConstraints.Add(recipeId_mod_string0);
            var recipeId_req_bool0 = new ForeignKeyConstraint(
                "recipeId_req_bool", recipe_requirements_boolTable, recipeTable,
                new[] { recipe_IdColumn1 },
                recipeTable.FindUniqueConstraint("PK_recipe")!, ReferentialAction.Cascade);
            var recipeId_req_bool0Fk = RelationalModel.GetForeignKey(this,
                "ACE.Database.Models.World.RecipeRequirementsBool",
                new[] { "RecipeId" },
                "ACE.Database.Models.World.Recipe",
                new[] { "Id" });
            recipeId_req_bool0.MappedForeignKeys.Add(recipeId_req_bool0Fk);
            RelationalModel.GetOrCreateForeignKeyConstraints(recipeId_req_bool0Fk).Add(recipeId_req_bool0);
            recipe_requirements_boolTable.ForeignKeyConstraints.Add(recipeId_req_bool0);
            recipeTable.ReferencingForeignKeyConstraints.Add(recipeId_req_bool0);
            var recipeId_req_did0 = new ForeignKeyConstraint(
                "recipeId_req_did", recipe_requirements_d_i_dTable, recipeTable,
                new[] { recipe_IdColumn2 },
                recipeTable.FindUniqueConstraint("PK_recipe")!, ReferentialAction.Cascade);
            var recipeId_req_did0Fk = RelationalModel.GetForeignKey(this,
                "ACE.Database.Models.World.RecipeRequirementsDID",
                new[] { "RecipeId" },
                "ACE.Database.Models.World.Recipe",
                new[] { "Id" });
            recipeId_req_did0.MappedForeignKeys.Add(recipeId_req_did0Fk);
            RelationalModel.GetOrCreateForeignKeyConstraints(recipeId_req_did0Fk).Add(recipeId_req_did0);
            recipe_requirements_d_i_dTable.ForeignKeyConstraints.Add(recipeId_req_did0);
            recipeTable.ReferencingForeignKeyConstraints.Add(recipeId_req_did0);
            var recipeId_req_float0 = new ForeignKeyConstraint(
                "recipeId_req_float", recipe_requirements_floatTable, recipeTable,
                new[] { recipe_IdColumn3 },
                recipeTable.FindUniqueConstraint("PK_recipe")!, ReferentialAction.Cascade);
            var recipeId_req_float0Fk = RelationalModel.GetForeignKey(this,
                "ACE.Database.Models.World.RecipeRequirementsFloat",
                new[] { "RecipeId" },
                "ACE.Database.Models.World.Recipe",
                new[] { "Id" });
            recipeId_req_float0.MappedForeignKeys.Add(recipeId_req_float0Fk);
            RelationalModel.GetOrCreateForeignKeyConstraints(recipeId_req_float0Fk).Add(recipeId_req_float0);
            recipe_requirements_floatTable.ForeignKeyConstraints.Add(recipeId_req_float0);
            recipeTable.ReferencingForeignKeyConstraints.Add(recipeId_req_float0);
            var recipeId_req_iid0 = new ForeignKeyConstraint(
                "recipeId_req_iid", recipe_requirements_i_i_dTable, recipeTable,
                new[] { recipe_IdColumn4 },
                recipeTable.FindUniqueConstraint("PK_recipe")!, ReferentialAction.Cascade);
            var recipeId_req_iid0Fk = RelationalModel.GetForeignKey(this,
                "ACE.Database.Models.World.RecipeRequirementsIID",
                new[] { "RecipeId" },
                "ACE.Database.Models.World.Recipe",
                new[] { "Id" });
            recipeId_req_iid0.MappedForeignKeys.Add(recipeId_req_iid0Fk);
            RelationalModel.GetOrCreateForeignKeyConstraints(recipeId_req_iid0Fk).Add(recipeId_req_iid0);
            recipe_requirements_i_i_dTable.ForeignKeyConstraints.Add(recipeId_req_iid0);
            recipeTable.ReferencingForeignKeyConstraints.Add(recipeId_req_iid0);
            var recipeId_req_int0 = new ForeignKeyConstraint(
                "recipeId_req_int", recipe_requirements_intTable, recipeTable,
                new[] { recipe_IdColumn5 },
                recipeTable.FindUniqueConstraint("PK_recipe")!, ReferentialAction.Cascade);
            var recipeId_req_int0Fk = RelationalModel.GetForeignKey(this,
                "ACE.Database.Models.World.RecipeRequirementsInt",
                new[] { "RecipeId" },
                "ACE.Database.Models.World.Recipe",
                new[] { "Id" });
            recipeId_req_int0.MappedForeignKeys.Add(recipeId_req_int0Fk);
            RelationalModel.GetOrCreateForeignKeyConstraints(recipeId_req_int0Fk).Add(recipeId_req_int0);
            recipe_requirements_intTable.ForeignKeyConstraints.Add(recipeId_req_int0);
            recipeTable.ReferencingForeignKeyConstraints.Add(recipeId_req_int0);
            var recipeId_req_string0 = new ForeignKeyConstraint(
                "recipeId_req_string", recipe_requirements_stringTable, recipeTable,
                new[] { recipe_IdColumn6 },
                recipeTable.FindUniqueConstraint("PK_recipe")!, ReferentialAction.Cascade);
            var recipeId_req_string0Fk = RelationalModel.GetForeignKey(this,
                "ACE.Database.Models.World.RecipeRequirementsString",
                new[] { "RecipeId" },
                "ACE.Database.Models.World.Recipe",
                new[] { "Id" });
            recipeId_req_string0.MappedForeignKeys.Add(recipeId_req_string0Fk);
            RelationalModel.GetOrCreateForeignKeyConstraints(recipeId_req_string0Fk).Add(recipeId_req_string0);
            recipe_requirements_stringTable.ForeignKeyConstraints.Add(recipeId_req_string0);
            recipeTable.ReferencingForeignKeyConstraints.Add(recipeId_req_string0);
            var wcid_animpart = new ForeignKeyConstraint(
                "wcid_animpart", weenie_properties_anim_partTable, weenieTable,
                new[] { object_IdColumn },
                weenieTable.FindUniqueConstraint("PRIMARY")!, ReferentialAction.Cascade);
            var wcid_animpartFk = RelationalModel.GetForeignKey(this,
                "ACE.Database.Models.World.WeeniePropertiesAnimPart",
                new[] { "ObjectId" },
                "ACE.Database.Models.World.Weenie",
                new[] { "ClassId" });
            wcid_animpart.MappedForeignKeys.Add(wcid_animpartFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(wcid_animpartFk).Add(wcid_animpart);
            weenie_properties_anim_partTable.ForeignKeyConstraints.Add(wcid_animpart);
            weenieTable.ReferencingForeignKeyConstraints.Add(wcid_animpart);
            var wcid_attribute = new ForeignKeyConstraint(
                "wcid_attribute", weenie_properties_attributeTable, weenieTable,
                new[] { object_IdColumn0 },
                weenieTable.FindUniqueConstraint("PRIMARY")!, ReferentialAction.Cascade);
            var wcid_attributeFk = RelationalModel.GetForeignKey(this,
                "ACE.Database.Models.World.WeeniePropertiesAttribute",
                new[] { "ObjectId" },
                "ACE.Database.Models.World.Weenie",
                new[] { "ClassId" });
            wcid_attribute.MappedForeignKeys.Add(wcid_attributeFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(wcid_attributeFk).Add(wcid_attribute);
            weenie_properties_attributeTable.ForeignKeyConstraints.Add(wcid_attribute);
            weenieTable.ReferencingForeignKeyConstraints.Add(wcid_attribute);
            var wcid_attribute2nd = new ForeignKeyConstraint(
                "wcid_attribute2nd", weenie_properties_attribute_2ndTable, weenieTable,
                new[] { object_IdColumn1 },
                weenieTable.FindUniqueConstraint("PRIMARY")!, ReferentialAction.Cascade);
            var wcid_attribute2ndFk = RelationalModel.GetForeignKey(this,
                "ACE.Database.Models.World.WeeniePropertiesAttribute2nd",
                new[] { "ObjectId" },
                "ACE.Database.Models.World.Weenie",
                new[] { "ClassId" });
            wcid_attribute2nd.MappedForeignKeys.Add(wcid_attribute2ndFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(wcid_attribute2ndFk).Add(wcid_attribute2nd);
            weenie_properties_attribute_2ndTable.ForeignKeyConstraints.Add(wcid_attribute2nd);
            weenieTable.ReferencingForeignKeyConstraints.Add(wcid_attribute2nd);
            var wcid_bodypart = new ForeignKeyConstraint(
                "wcid_bodypart", weenie_properties_body_partTable, weenieTable,
                new[] { object_IdColumn2 },
                weenieTable.FindUniqueConstraint("PRIMARY")!, ReferentialAction.Cascade);
            var wcid_bodypartFk = RelationalModel.GetForeignKey(this,
                "ACE.Database.Models.World.WeeniePropertiesBodyPart",
                new[] { "ObjectId" },
                "ACE.Database.Models.World.Weenie",
                new[] { "ClassId" });
            wcid_bodypart.MappedForeignKeys.Add(wcid_bodypartFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(wcid_bodypartFk).Add(wcid_bodypart);
            weenie_properties_body_partTable.ForeignKeyConstraints.Add(wcid_bodypart);
            weenieTable.ReferencingForeignKeyConstraints.Add(wcid_bodypart);
            var wcid_bookdata = new ForeignKeyConstraint(
                "wcid_bookdata", weenie_properties_bookTable, weenieTable,
                new[] { object_IdColumn3 },
                weenieTable.FindUniqueConstraint("PRIMARY")!, ReferentialAction.Cascade);
            var wcid_bookdataFk = RelationalModel.GetForeignKey(this,
                "ACE.Database.Models.World.WeeniePropertiesBook",
                new[] { "ObjectId" },
                "ACE.Database.Models.World.Weenie",
                new[] { "ClassId" });
            wcid_bookdata.MappedForeignKeys.Add(wcid_bookdataFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(wcid_bookdataFk).Add(wcid_bookdata);
            weenie_properties_bookTable.ForeignKeyConstraints.Add(wcid_bookdata);
            weenieTable.ReferencingForeignKeyConstraints.Add(wcid_bookdata);
            var wcid_pagedata = new ForeignKeyConstraint(
                "wcid_pagedata", weenie_properties_book_page_dataTable, weenieTable,
                new[] { object_IdColumn4 },
                weenieTable.FindUniqueConstraint("PRIMARY")!, ReferentialAction.Cascade);
            var wcid_pagedataFk = RelationalModel.GetForeignKey(this,
                "ACE.Database.Models.World.WeeniePropertiesBookPageData",
                new[] { "ObjectId" },
                "ACE.Database.Models.World.Weenie",
                new[] { "ClassId" });
            wcid_pagedata.MappedForeignKeys.Add(wcid_pagedataFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(wcid_pagedataFk).Add(wcid_pagedata);
            weenie_properties_book_page_dataTable.ForeignKeyConstraints.Add(wcid_pagedata);
            weenieTable.ReferencingForeignKeyConstraints.Add(wcid_pagedata);
            var wcid_bool = new ForeignKeyConstraint(
                "wcid_bool", weenie_properties_boolTable, weenieTable,
                new[] { object_IdColumn5 },
                weenieTable.FindUniqueConstraint("PRIMARY")!, ReferentialAction.Cascade);
            var wcid_boolFk = RelationalModel.GetForeignKey(this,
                "ACE.Database.Models.World.WeeniePropertiesBool",
                new[] { "ObjectId" },
                "ACE.Database.Models.World.Weenie",
                new[] { "ClassId" });
            wcid_bool.MappedForeignKeys.Add(wcid_boolFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(wcid_boolFk).Add(wcid_bool);
            weenie_properties_boolTable.ForeignKeyConstraints.Add(wcid_bool);
            weenieTable.ReferencingForeignKeyConstraints.Add(wcid_bool);
            var wcid_createlist0 = new ForeignKeyConstraint(
                "wcid_createlist", weenie_properties_create_listTable, weenieTable,
                new[] { object_IdColumn6 },
                weenieTable.FindUniqueConstraint("PRIMARY")!, ReferentialAction.Cascade);
            var wcid_createlist0Fk = RelationalModel.GetForeignKey(this,
                "ACE.Database.Models.World.WeeniePropertiesCreateList",
                new[] { "ObjectId" },
                "ACE.Database.Models.World.Weenie",
                new[] { "ClassId" });
            wcid_createlist0.MappedForeignKeys.Add(wcid_createlist0Fk);
            RelationalModel.GetOrCreateForeignKeyConstraints(wcid_createlist0Fk).Add(wcid_createlist0);
            weenie_properties_create_listTable.ForeignKeyConstraints.Add(wcid_createlist0);
            weenieTable.ReferencingForeignKeyConstraints.Add(wcid_createlist0);
            var wcid_did = new ForeignKeyConstraint(
                "wcid_did", weenie_properties_d_i_dTable, weenieTable,
                new[] { object_IdColumn7 },
                weenieTable.FindUniqueConstraint("PRIMARY")!, ReferentialAction.Cascade);
            var wcid_didFk = RelationalModel.GetForeignKey(this,
                "ACE.Database.Models.World.WeeniePropertiesDID",
                new[] { "ObjectId" },
                "ACE.Database.Models.World.Weenie",
                new[] { "ClassId" });
            wcid_did.MappedForeignKeys.Add(wcid_didFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(wcid_didFk).Add(wcid_did);
            weenie_properties_d_i_dTable.ForeignKeyConstraints.Add(wcid_did);
            weenieTable.ReferencingForeignKeyConstraints.Add(wcid_did);
            var wcid_emote0 = new ForeignKeyConstraint(
                "wcid_emote", weenie_properties_emoteTable, weenieTable,
                new[] { object_IdColumn8 },
                weenieTable.FindUniqueConstraint("PRIMARY")!, ReferentialAction.Cascade);
            var wcid_emote0Fk = RelationalModel.GetForeignKey(this,
                "ACE.Database.Models.World.WeeniePropertiesEmote",
                new[] { "ObjectId" },
                "ACE.Database.Models.World.Weenie",
                new[] { "ClassId" });
            wcid_emote0.MappedForeignKeys.Add(wcid_emote0Fk);
            RelationalModel.GetOrCreateForeignKeyConstraints(wcid_emote0Fk).Add(wcid_emote0);
            weenie_properties_emoteTable.ForeignKeyConstraints.Add(wcid_emote0);
            weenieTable.ReferencingForeignKeyConstraints.Add(wcid_emote0);
            var emoteid_emoteaction = new ForeignKeyConstraint(
                "emoteid_emoteaction", weenie_properties_emote_actionTable, weenie_properties_emoteTable,
                new[] { emote_IdColumn },
                weenie_properties_emoteTable.FindUniqueConstraint("PK_weenie_properties_emote")!, ReferentialAction.Cascade);
            var emoteid_emoteactionFk = RelationalModel.GetForeignKey(this,
                "ACE.Database.Models.World.WeeniePropertiesEmoteAction",
                new[] { "EmoteId" },
                "ACE.Database.Models.World.WeeniePropertiesEmote",
                new[] { "Id" });
            emoteid_emoteaction.MappedForeignKeys.Add(emoteid_emoteactionFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(emoteid_emoteactionFk).Add(emoteid_emoteaction);
            weenie_properties_emote_actionTable.ForeignKeyConstraints.Add(emoteid_emoteaction);
            weenie_properties_emoteTable.ReferencingForeignKeyConstraints.Add(emoteid_emoteaction);
            var wcid_eventfilter = new ForeignKeyConstraint(
                "wcid_eventfilter", weenie_properties_event_filterTable, weenieTable,
                new[] { object_IdColumn9 },
                weenieTable.FindUniqueConstraint("PRIMARY")!, ReferentialAction.Cascade);
            var wcid_eventfilterFk = RelationalModel.GetForeignKey(this,
                "ACE.Database.Models.World.WeeniePropertiesEventFilter",
                new[] { "ObjectId" },
                "ACE.Database.Models.World.Weenie",
                new[] { "ClassId" });
            wcid_eventfilter.MappedForeignKeys.Add(wcid_eventfilterFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(wcid_eventfilterFk).Add(wcid_eventfilter);
            weenie_properties_event_filterTable.ForeignKeyConstraints.Add(wcid_eventfilter);
            weenieTable.ReferencingForeignKeyConstraints.Add(wcid_eventfilter);
            var wcid_float = new ForeignKeyConstraint(
                "wcid_float", weenie_properties_floatTable, weenieTable,
                new[] { object_IdColumn10 },
                weenieTable.FindUniqueConstraint("PRIMARY")!, ReferentialAction.Cascade);
            var wcid_floatFk = RelationalModel.GetForeignKey(this,
                "ACE.Database.Models.World.WeeniePropertiesFloat",
                new[] { "ObjectId" },
                "ACE.Database.Models.World.Weenie",
                new[] { "ClassId" });
            wcid_float.MappedForeignKeys.Add(wcid_floatFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(wcid_floatFk).Add(wcid_float);
            weenie_properties_floatTable.ForeignKeyConstraints.Add(wcid_float);
            weenieTable.ReferencingForeignKeyConstraints.Add(wcid_float);
            var wcid_generator0 = new ForeignKeyConstraint(
                "wcid_generator", weenie_properties_generatorTable, weenieTable,
                new[] { object_IdColumn11 },
                weenieTable.FindUniqueConstraint("PRIMARY")!, ReferentialAction.Cascade);
            var wcid_generator0Fk = RelationalModel.GetForeignKey(this,
                "ACE.Database.Models.World.WeeniePropertiesGenerator",
                new[] { "ObjectId" },
                "ACE.Database.Models.World.Weenie",
                new[] { "ClassId" });
            wcid_generator0.MappedForeignKeys.Add(wcid_generator0Fk);
            RelationalModel.GetOrCreateForeignKeyConstraints(wcid_generator0Fk).Add(wcid_generator0);
            weenie_properties_generatorTable.ForeignKeyConstraints.Add(wcid_generator0);
            weenieTable.ReferencingForeignKeyConstraints.Add(wcid_generator0);
            var wcid_iid = new ForeignKeyConstraint(
                "wcid_iid", weenie_properties_i_i_dTable, weenieTable,
                new[] { object_IdColumn12 },
                weenieTable.FindUniqueConstraint("PRIMARY")!, ReferentialAction.Cascade);
            var wcid_iidFk = RelationalModel.GetForeignKey(this,
                "ACE.Database.Models.World.WeeniePropertiesIID",
                new[] { "ObjectId" },
                "ACE.Database.Models.World.Weenie",
                new[] { "ClassId" });
            wcid_iid.MappedForeignKeys.Add(wcid_iidFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(wcid_iidFk).Add(wcid_iid);
            weenie_properties_i_i_dTable.ForeignKeyConstraints.Add(wcid_iid);
            weenieTable.ReferencingForeignKeyConstraints.Add(wcid_iid);
            var wcid_int = new ForeignKeyConstraint(
                "wcid_int", weenie_properties_intTable, weenieTable,
                new[] { object_IdColumn13 },
                weenieTable.FindUniqueConstraint("PRIMARY")!, ReferentialAction.Cascade);
            var wcid_intFk = RelationalModel.GetForeignKey(this,
                "ACE.Database.Models.World.WeeniePropertiesInt",
                new[] { "ObjectId" },
                "ACE.Database.Models.World.Weenie",
                new[] { "ClassId" });
            wcid_int.MappedForeignKeys.Add(wcid_intFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(wcid_intFk).Add(wcid_int);
            weenie_properties_intTable.ForeignKeyConstraints.Add(wcid_int);
            weenieTable.ReferencingForeignKeyConstraints.Add(wcid_int);
            var wcid_int64 = new ForeignKeyConstraint(
                "wcid_int64", weenie_properties_int64Table, weenieTable,
                new[] { object_IdColumn14 },
                weenieTable.FindUniqueConstraint("PRIMARY")!, ReferentialAction.Cascade);
            var wcid_int64Fk = RelationalModel.GetForeignKey(this,
                "ACE.Database.Models.World.WeeniePropertiesInt64",
                new[] { "ObjectId" },
                "ACE.Database.Models.World.Weenie",
                new[] { "ClassId" });
            wcid_int64.MappedForeignKeys.Add(wcid_int64Fk);
            RelationalModel.GetOrCreateForeignKeyConstraints(wcid_int64Fk).Add(wcid_int64);
            weenie_properties_int64Table.ForeignKeyConstraints.Add(wcid_int64);
            weenieTable.ReferencingForeignKeyConstraints.Add(wcid_int64);
            var wcid_palette = new ForeignKeyConstraint(
                "wcid_palette", weenie_properties_paletteTable, weenieTable,
                new[] { object_IdColumn15 },
                weenieTable.FindUniqueConstraint("PRIMARY")!, ReferentialAction.Cascade);
            var wcid_paletteFk = RelationalModel.GetForeignKey(this,
                "ACE.Database.Models.World.WeeniePropertiesPalette",
                new[] { "ObjectId" },
                "ACE.Database.Models.World.Weenie",
                new[] { "ClassId" });
            wcid_palette.MappedForeignKeys.Add(wcid_paletteFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(wcid_paletteFk).Add(wcid_palette);
            weenie_properties_paletteTable.ForeignKeyConstraints.Add(wcid_palette);
            weenieTable.ReferencingForeignKeyConstraints.Add(wcid_palette);
            var wcid_position = new ForeignKeyConstraint(
                "wcid_position", weenie_properties_positionTable, weenieTable,
                new[] { object_IdColumn16 },
                weenieTable.FindUniqueConstraint("PRIMARY")!, ReferentialAction.Cascade);
            var wcid_positionFk = RelationalModel.GetForeignKey(this,
                "ACE.Database.Models.World.WeeniePropertiesPosition",
                new[] { "ObjectId" },
                "ACE.Database.Models.World.Weenie",
                new[] { "ClassId" });
            wcid_position.MappedForeignKeys.Add(wcid_positionFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(wcid_positionFk).Add(wcid_position);
            weenie_properties_positionTable.ForeignKeyConstraints.Add(wcid_position);
            weenieTable.ReferencingForeignKeyConstraints.Add(wcid_position);
            var wcid_skill = new ForeignKeyConstraint(
                "wcid_skill", weenie_properties_skillTable, weenieTable,
                new[] { object_IdColumn17 },
                weenieTable.FindUniqueConstraint("PRIMARY")!, ReferentialAction.Cascade);
            var wcid_skillFk = RelationalModel.GetForeignKey(this,
                "ACE.Database.Models.World.WeeniePropertiesSkill",
                new[] { "ObjectId" },
                "ACE.Database.Models.World.Weenie",
                new[] { "ClassId" });
            wcid_skill.MappedForeignKeys.Add(wcid_skillFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(wcid_skillFk).Add(wcid_skill);
            weenie_properties_skillTable.ForeignKeyConstraints.Add(wcid_skill);
            weenieTable.ReferencingForeignKeyConstraints.Add(wcid_skill);
            var wcid_spellbook = new ForeignKeyConstraint(
                "wcid_spellbook", weenie_properties_spell_bookTable, weenieTable,
                new[] { object_IdColumn18 },
                weenieTable.FindUniqueConstraint("PRIMARY")!, ReferentialAction.Cascade);
            var wcid_spellbookFk = RelationalModel.GetForeignKey(this,
                "ACE.Database.Models.World.WeeniePropertiesSpellBook",
                new[] { "ObjectId" },
                "ACE.Database.Models.World.Weenie",
                new[] { "ClassId" });
            wcid_spellbook.MappedForeignKeys.Add(wcid_spellbookFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(wcid_spellbookFk).Add(wcid_spellbook);
            weenie_properties_spell_bookTable.ForeignKeyConstraints.Add(wcid_spellbook);
            weenieTable.ReferencingForeignKeyConstraints.Add(wcid_spellbook);
            var wcid_string = new ForeignKeyConstraint(
                "wcid_string", weenie_properties_stringTable, weenieTable,
                new[] { object_IdColumn19 },
                weenieTable.FindUniqueConstraint("PRIMARY")!, ReferentialAction.Cascade);
            var wcid_stringFk = RelationalModel.GetForeignKey(this,
                "ACE.Database.Models.World.WeeniePropertiesString",
                new[] { "ObjectId" },
                "ACE.Database.Models.World.Weenie",
                new[] { "ClassId" });
            wcid_string.MappedForeignKeys.Add(wcid_stringFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(wcid_stringFk).Add(wcid_string);
            weenie_properties_stringTable.ForeignKeyConstraints.Add(wcid_string);
            weenieTable.ReferencingForeignKeyConstraints.Add(wcid_string);
            var wcid_texturemap = new ForeignKeyConstraint(
                "wcid_texturemap", weenie_properties_texture_mapTable, weenieTable,
                new[] { object_IdColumn20 },
                weenieTable.FindUniqueConstraint("PRIMARY")!, ReferentialAction.Cascade);
            var wcid_texturemapFk = RelationalModel.GetForeignKey(this,
                "ACE.Database.Models.World.WeeniePropertiesTextureMap",
                new[] { "ObjectId" },
                "ACE.Database.Models.World.Weenie",
                new[] { "ClassId" });
            wcid_texturemap.MappedForeignKeys.Add(wcid_texturemapFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(wcid_texturemapFk).Add(wcid_texturemap);
            weenie_properties_texture_mapTable.ForeignKeyConstraints.Add(wcid_texturemap);
            weenieTable.ReferencingForeignKeyConstraints.Add(wcid_texturemap);
            return relationalModel.MakeReadOnly();
        }
    }
}
