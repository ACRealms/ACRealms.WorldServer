// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using Microsoft.EntityFrameworkCore.Migrations;

#pragma warning disable 219, 612, 618
#nullable disable

namespace ACE.Database.CompiledModels.Auth
{
    public partial class AuthDbContextModel
    {
        partial void Initialize()
        {
            var accesslevel = AccesslevelEntityType.Create(this);
            var account = AccountEntityType.Create(this);

            AccountEntityType.CreateForeignKey1(account, accesslevel);

            AccesslevelEntityType.CreateAnnotations(accesslevel);
            AccountEntityType.CreateAnnotations(account);

            AddAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);
            AddAnnotation("ProductVersion", "8.0.7");
            AddAnnotation("Relational:MaxIdentifierLength", 64);
            AddRuntimeAnnotation("Relational:RelationalModel", CreateRelationalModel());
        }

        private IRelationalModel CreateRelationalModel()
        {
            var relationalModel = new RelationalModel(this);

            var accesslevel = FindEntityType("ACE.Database.Models.Auth.Accesslevel")!;

            var defaultTableMappings = new List<TableMappingBase<ColumnMappingBase>>();
            accesslevel.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings);
            var aCEDatabaseModelsAuthAccesslevelTableBase = new TableBase("ACE.Database.Models.Auth.Accesslevel", null, relationalModel);
            var levelColumnBase = new ColumnBase<ColumnMappingBase>("level", "int unsigned", aCEDatabaseModelsAuthAccesslevelTableBase);
            aCEDatabaseModelsAuthAccesslevelTableBase.Columns.Add("level", levelColumnBase);
            var nameColumnBase = new ColumnBase<ColumnMappingBase>("name", "varchar(45)", aCEDatabaseModelsAuthAccesslevelTableBase);
            aCEDatabaseModelsAuthAccesslevelTableBase.Columns.Add("name", nameColumnBase);
            var prefixColumnBase = new ColumnBase<ColumnMappingBase>("prefix", "varchar(45)", aCEDatabaseModelsAuthAccesslevelTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsAuthAccesslevelTableBase.Columns.Add("prefix", prefixColumnBase);
            relationalModel.DefaultTables.Add("ACE.Database.Models.Auth.Accesslevel", aCEDatabaseModelsAuthAccesslevelTableBase);
            var aCEDatabaseModelsAuthAccesslevelMappingBase = new TableMappingBase<ColumnMappingBase>(accesslevel, aCEDatabaseModelsAuthAccesslevelTableBase, true);
            aCEDatabaseModelsAuthAccesslevelTableBase.AddTypeMapping(aCEDatabaseModelsAuthAccesslevelMappingBase, false);
            defaultTableMappings.Add(aCEDatabaseModelsAuthAccesslevelMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)levelColumnBase, accesslevel.FindProperty("Level")!, aCEDatabaseModelsAuthAccesslevelMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nameColumnBase, accesslevel.FindProperty("Name")!, aCEDatabaseModelsAuthAccesslevelMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)prefixColumnBase, accesslevel.FindProperty("Prefix")!, aCEDatabaseModelsAuthAccesslevelMappingBase);

            var tableMappings = new List<TableMapping>();
            accesslevel.SetRuntimeAnnotation("Relational:TableMappings", tableMappings);
            var accesslevelTable = new Table("accesslevel", null, relationalModel);
            var levelColumn = new Column("level", "int unsigned", accesslevelTable);
            accesslevelTable.Columns.Add("level", levelColumn);
            var nameColumn = new Column("name", "varchar(45)", accesslevelTable);
            accesslevelTable.Columns.Add("name", nameColumn);
            var prefixColumn = new Column("prefix", "varchar(45)", accesslevelTable)
            {
                IsNullable = true
            };
            accesslevelTable.Columns.Add("prefix", prefixColumn);
            var pRIMARY = new UniqueConstraint("PRIMARY", accesslevelTable, new[] { levelColumn });
            accesslevelTable.PrimaryKey = pRIMARY;
            var pRIMARYUc = RelationalModel.GetKey(this,
                "ACE.Database.Models.Auth.Accesslevel",
                new[] { "Level" });
            pRIMARY.MappedKeys.Add(pRIMARYUc);
            RelationalModel.GetOrCreateUniqueConstraints(pRIMARYUc).Add(pRIMARY);
            accesslevelTable.UniqueConstraints.Add("PRIMARY", pRIMARY);
            var level = new TableIndex(
            "level", accesslevelTable, new[] { levelColumn }, true);
            var levelIx = RelationalModel.GetIndex(this,
                "ACE.Database.Models.Auth.Accesslevel",
                "level");
            level.MappedIndexes.Add(levelIx);
            RelationalModel.GetOrCreateTableIndexes(levelIx).Add(level);
            accesslevelTable.Indexes.Add("level", level);
            relationalModel.Tables.Add(("accesslevel", null), accesslevelTable);
            var accesslevelTableMapping = new TableMapping(accesslevel, accesslevelTable, true);
            accesslevelTable.AddTypeMapping(accesslevelTableMapping, false);
            tableMappings.Add(accesslevelTableMapping);
            RelationalModel.CreateColumnMapping(levelColumn, accesslevel.FindProperty("Level")!, accesslevelTableMapping);
            RelationalModel.CreateColumnMapping(nameColumn, accesslevel.FindProperty("Name")!, accesslevelTableMapping);
            RelationalModel.CreateColumnMapping(prefixColumn, accesslevel.FindProperty("Prefix")!, accesslevelTableMapping);

            var account = FindEntityType("ACE.Database.Models.Auth.Account")!;

            var defaultTableMappings0 = new List<TableMappingBase<ColumnMappingBase>>();
            account.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings0);
            var aCEDatabaseModelsAuthAccountTableBase = new TableBase("ACE.Database.Models.Auth.Account", null, relationalModel);
            var accessLevelColumnBase = new ColumnBase<ColumnMappingBase>("accessLevel", "int unsigned", aCEDatabaseModelsAuthAccountTableBase);
            aCEDatabaseModelsAuthAccountTableBase.Columns.Add("accessLevel", accessLevelColumnBase);
            var accountIdColumnBase = new ColumnBase<ColumnMappingBase>("accountId", "int unsigned", aCEDatabaseModelsAuthAccountTableBase);
            aCEDatabaseModelsAuthAccountTableBase.Columns.Add("accountId", accountIdColumnBase);
            var accountNameColumnBase = new ColumnBase<ColumnMappingBase>("accountName", "varchar(50)", aCEDatabaseModelsAuthAccountTableBase);
            aCEDatabaseModelsAuthAccountTableBase.Columns.Add("accountName", accountNameColumnBase);
            var ban_Expire_TimeColumnBase = new ColumnBase<ColumnMappingBase>("ban_Expire_Time", "datetime", aCEDatabaseModelsAuthAccountTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsAuthAccountTableBase.Columns.Add("ban_Expire_Time", ban_Expire_TimeColumnBase);
            var ban_ReasonColumnBase = new ColumnBase<ColumnMappingBase>("ban_Reason", "varchar(1000)", aCEDatabaseModelsAuthAccountTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsAuthAccountTableBase.Columns.Add("ban_Reason", ban_ReasonColumnBase);
            var banned_By_Account_IdColumnBase = new ColumnBase<ColumnMappingBase>("banned_By_Account_Id", "int unsigned", aCEDatabaseModelsAuthAccountTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsAuthAccountTableBase.Columns.Add("banned_By_Account_Id", banned_By_Account_IdColumnBase);
            var banned_TimeColumnBase = new ColumnBase<ColumnMappingBase>("banned_Time", "datetime", aCEDatabaseModelsAuthAccountTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsAuthAccountTableBase.Columns.Add("banned_Time", banned_TimeColumnBase);
            var create_I_PColumnBase = new ColumnBase<ColumnMappingBase>("create_I_P", "varbinary(16)", aCEDatabaseModelsAuthAccountTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsAuthAccountTableBase.Columns.Add("create_I_P", create_I_PColumnBase);
            var create_TimeColumnBase = new ColumnBase<ColumnMappingBase>("create_Time", "datetime", aCEDatabaseModelsAuthAccountTableBase);
            aCEDatabaseModelsAuthAccountTableBase.Columns.Add("create_Time", create_TimeColumnBase);
            var email_AddressColumnBase = new ColumnBase<ColumnMappingBase>("email_Address", "varchar(320)", aCEDatabaseModelsAuthAccountTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsAuthAccountTableBase.Columns.Add("email_Address", email_AddressColumnBase);
            var last_Login_I_PColumnBase = new ColumnBase<ColumnMappingBase>("last_Login_I_P", "varbinary(16)", aCEDatabaseModelsAuthAccountTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsAuthAccountTableBase.Columns.Add("last_Login_I_P", last_Login_I_PColumnBase);
            var last_Login_TimeColumnBase = new ColumnBase<ColumnMappingBase>("last_Login_Time", "datetime", aCEDatabaseModelsAuthAccountTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsAuthAccountTableBase.Columns.Add("last_Login_Time", last_Login_TimeColumnBase);
            var passwordHashColumnBase = new ColumnBase<ColumnMappingBase>("passwordHash", "varchar(88)", aCEDatabaseModelsAuthAccountTableBase);
            aCEDatabaseModelsAuthAccountTableBase.Columns.Add("passwordHash", passwordHashColumnBase);
            var passwordSaltColumnBase = new ColumnBase<ColumnMappingBase>("passwordSalt", "varchar(88)", aCEDatabaseModelsAuthAccountTableBase);
            aCEDatabaseModelsAuthAccountTableBase.Columns.Add("passwordSalt", passwordSaltColumnBase);
            var total_Times_Logged_InColumnBase = new ColumnBase<ColumnMappingBase>("total_Times_Logged_In", "int unsigned", aCEDatabaseModelsAuthAccountTableBase);
            aCEDatabaseModelsAuthAccountTableBase.Columns.Add("total_Times_Logged_In", total_Times_Logged_InColumnBase);
            relationalModel.DefaultTables.Add("ACE.Database.Models.Auth.Account", aCEDatabaseModelsAuthAccountTableBase);
            var aCEDatabaseModelsAuthAccountMappingBase = new TableMappingBase<ColumnMappingBase>(account, aCEDatabaseModelsAuthAccountTableBase, true);
            aCEDatabaseModelsAuthAccountTableBase.AddTypeMapping(aCEDatabaseModelsAuthAccountMappingBase, false);
            defaultTableMappings0.Add(aCEDatabaseModelsAuthAccountMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)accountIdColumnBase, account.FindProperty("AccountId")!, aCEDatabaseModelsAuthAccountMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)accessLevelColumnBase, account.FindProperty("AccessLevel")!, aCEDatabaseModelsAuthAccountMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)accountNameColumnBase, account.FindProperty("AccountName")!, aCEDatabaseModelsAuthAccountMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)ban_Expire_TimeColumnBase, account.FindProperty("BanExpireTime")!, aCEDatabaseModelsAuthAccountMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)ban_ReasonColumnBase, account.FindProperty("BanReason")!, aCEDatabaseModelsAuthAccountMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)banned_By_Account_IdColumnBase, account.FindProperty("BannedByAccountId")!, aCEDatabaseModelsAuthAccountMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)banned_TimeColumnBase, account.FindProperty("BannedTime")!, aCEDatabaseModelsAuthAccountMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)create_I_PColumnBase, account.FindProperty("CreateIP")!, aCEDatabaseModelsAuthAccountMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)create_TimeColumnBase, account.FindProperty("CreateTime")!, aCEDatabaseModelsAuthAccountMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)email_AddressColumnBase, account.FindProperty("EmailAddress")!, aCEDatabaseModelsAuthAccountMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)last_Login_I_PColumnBase, account.FindProperty("LastLoginIP")!, aCEDatabaseModelsAuthAccountMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)last_Login_TimeColumnBase, account.FindProperty("LastLoginTime")!, aCEDatabaseModelsAuthAccountMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)passwordHashColumnBase, account.FindProperty("PasswordHash")!, aCEDatabaseModelsAuthAccountMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)passwordSaltColumnBase, account.FindProperty("PasswordSalt")!, aCEDatabaseModelsAuthAccountMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)total_Times_Logged_InColumnBase, account.FindProperty("TotalTimesLoggedIn")!, aCEDatabaseModelsAuthAccountMappingBase);

            var tableMappings0 = new List<TableMapping>();
            account.SetRuntimeAnnotation("Relational:TableMappings", tableMappings0);
            var accountTable = new Table("account", null, relationalModel);
            var accountIdColumn = new Column("accountId", "int unsigned", accountTable);
            accountTable.Columns.Add("accountId", accountIdColumn);
            var accessLevelColumn = new Column("accessLevel", "int unsigned", accountTable);
            accountTable.Columns.Add("accessLevel", accessLevelColumn);
            var accountNameColumn = new Column("accountName", "varchar(50)", accountTable);
            accountTable.Columns.Add("accountName", accountNameColumn);
            var ban_Expire_TimeColumn = new Column("ban_Expire_Time", "datetime", accountTable)
            {
                IsNullable = true
            };
            accountTable.Columns.Add("ban_Expire_Time", ban_Expire_TimeColumn);
            var ban_ReasonColumn = new Column("ban_Reason", "varchar(1000)", accountTable)
            {
                IsNullable = true
            };
            accountTable.Columns.Add("ban_Reason", ban_ReasonColumn);
            var banned_By_Account_IdColumn = new Column("banned_By_Account_Id", "int unsigned", accountTable)
            {
                IsNullable = true
            };
            accountTable.Columns.Add("banned_By_Account_Id", banned_By_Account_IdColumn);
            var banned_TimeColumn = new Column("banned_Time", "datetime", accountTable)
            {
                IsNullable = true
            };
            accountTable.Columns.Add("banned_Time", banned_TimeColumn);
            var create_I_PColumn = new Column("create_I_P", "varbinary(16)", accountTable)
            {
                IsNullable = true
            };
            accountTable.Columns.Add("create_I_P", create_I_PColumn);
            var create_TimeColumn = new Column("create_Time", "datetime", accountTable);
            accountTable.Columns.Add("create_Time", create_TimeColumn);
            var email_AddressColumn = new Column("email_Address", "varchar(320)", accountTable)
            {
                IsNullable = true
            };
            accountTable.Columns.Add("email_Address", email_AddressColumn);
            var last_Login_I_PColumn = new Column("last_Login_I_P", "varbinary(16)", accountTable)
            {
                IsNullable = true
            };
            accountTable.Columns.Add("last_Login_I_P", last_Login_I_PColumn);
            var last_Login_TimeColumn = new Column("last_Login_Time", "datetime", accountTable)
            {
                IsNullable = true
            };
            accountTable.Columns.Add("last_Login_Time", last_Login_TimeColumn);
            var passwordHashColumn = new Column("passwordHash", "varchar(88)", accountTable);
            accountTable.Columns.Add("passwordHash", passwordHashColumn);
            var passwordSaltColumn = new Column("passwordSalt", "varchar(88)", accountTable);
            accountTable.Columns.Add("passwordSalt", passwordSaltColumn);
            var total_Times_Logged_InColumn = new Column("total_Times_Logged_In", "int unsigned", accountTable);
            accountTable.Columns.Add("total_Times_Logged_In", total_Times_Logged_InColumn);
            var pK_account = new UniqueConstraint("PK_account", accountTable, new[] { accountIdColumn });
            accountTable.PrimaryKey = pK_account;
            var pK_accountUc = RelationalModel.GetKey(this,
                "ACE.Database.Models.Auth.Account",
                new[] { "AccountId" });
            pK_account.MappedKeys.Add(pK_accountUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_accountUc).Add(pK_account);
            accountTable.UniqueConstraints.Add("PK_account", pK_account);
            var accesslevel_idx = new TableIndex(
            "accesslevel_idx", accountTable, new[] { accessLevelColumn }, false);
            var accesslevel_idxIx = RelationalModel.GetIndex(this,
                "ACE.Database.Models.Auth.Account",
                "accesslevel_idx");
            accesslevel_idx.MappedIndexes.Add(accesslevel_idxIx);
            RelationalModel.GetOrCreateTableIndexes(accesslevel_idxIx).Add(accesslevel_idx);
            accountTable.Indexes.Add("accesslevel_idx", accesslevel_idx);
            var accountName_uidx = new TableIndex(
            "accountName_uidx", accountTable, new[] { accountNameColumn }, true);
            var accountName_uidxIx = RelationalModel.GetIndex(this,
                "ACE.Database.Models.Auth.Account",
                "accountName_uidx");
            accountName_uidx.MappedIndexes.Add(accountName_uidxIx);
            RelationalModel.GetOrCreateTableIndexes(accountName_uidxIx).Add(accountName_uidx);
            accountTable.Indexes.Add("accountName_uidx", accountName_uidx);
            relationalModel.Tables.Add(("account", null), accountTable);
            var accountTableMapping = new TableMapping(account, accountTable, true);
            accountTable.AddTypeMapping(accountTableMapping, false);
            tableMappings0.Add(accountTableMapping);
            RelationalModel.CreateColumnMapping(accountIdColumn, account.FindProperty("AccountId")!, accountTableMapping);
            RelationalModel.CreateColumnMapping(accessLevelColumn, account.FindProperty("AccessLevel")!, accountTableMapping);
            RelationalModel.CreateColumnMapping(accountNameColumn, account.FindProperty("AccountName")!, accountTableMapping);
            RelationalModel.CreateColumnMapping(ban_Expire_TimeColumn, account.FindProperty("BanExpireTime")!, accountTableMapping);
            RelationalModel.CreateColumnMapping(ban_ReasonColumn, account.FindProperty("BanReason")!, accountTableMapping);
            RelationalModel.CreateColumnMapping(banned_By_Account_IdColumn, account.FindProperty("BannedByAccountId")!, accountTableMapping);
            RelationalModel.CreateColumnMapping(banned_TimeColumn, account.FindProperty("BannedTime")!, accountTableMapping);
            RelationalModel.CreateColumnMapping(create_I_PColumn, account.FindProperty("CreateIP")!, accountTableMapping);
            RelationalModel.CreateColumnMapping(create_TimeColumn, account.FindProperty("CreateTime")!, accountTableMapping);
            RelationalModel.CreateColumnMapping(email_AddressColumn, account.FindProperty("EmailAddress")!, accountTableMapping);
            RelationalModel.CreateColumnMapping(last_Login_I_PColumn, account.FindProperty("LastLoginIP")!, accountTableMapping);
            RelationalModel.CreateColumnMapping(last_Login_TimeColumn, account.FindProperty("LastLoginTime")!, accountTableMapping);
            RelationalModel.CreateColumnMapping(passwordHashColumn, account.FindProperty("PasswordHash")!, accountTableMapping);
            RelationalModel.CreateColumnMapping(passwordSaltColumn, account.FindProperty("PasswordSalt")!, accountTableMapping);
            RelationalModel.CreateColumnMapping(total_Times_Logged_InColumn, account.FindProperty("TotalTimesLoggedIn")!, accountTableMapping);
            var fk_accesslevel = new ForeignKeyConstraint(
                "fk_accesslevel", accountTable, accesslevelTable,
                new[] { accessLevelColumn },
                accesslevelTable.FindUniqueConstraint("PRIMARY")!, ReferentialAction.NoAction);
            var fk_accesslevelFk = RelationalModel.GetForeignKey(this,
                "ACE.Database.Models.Auth.Account",
                new[] { "AccessLevel" },
                "ACE.Database.Models.Auth.Accesslevel",
                new[] { "Level" });
            fk_accesslevel.MappedForeignKeys.Add(fk_accesslevelFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fk_accesslevelFk).Add(fk_accesslevel);
            accountTable.ForeignKeyConstraints.Add(fk_accesslevel);
            accesslevelTable.ReferencingForeignKeyConstraints.Add(fk_accesslevel);
            return relationalModel.MakeReadOnly();
        }
    }
}
