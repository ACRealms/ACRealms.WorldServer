// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using Microsoft.EntityFrameworkCore.Migrations;

#pragma warning disable 219, 612, 618
#nullable disable

namespace ACE.Database.CompiledModels.Shard
{
    public partial class ShardDbContextModel
    {
        partial void Initialize()
        {
            var biota = BiotaEntityType.Create(this);
            var biotaPropertiesAllegiance = BiotaPropertiesAllegianceEntityType.Create(this);
            var biotaPropertiesAnimPart = BiotaPropertiesAnimPartEntityType.Create(this);
            var biotaPropertiesAttribute = BiotaPropertiesAttributeEntityType.Create(this);
            var biotaPropertiesAttribute2nd = BiotaPropertiesAttribute2ndEntityType.Create(this);
            var biotaPropertiesBodyPart = BiotaPropertiesBodyPartEntityType.Create(this);
            var biotaPropertiesBook = BiotaPropertiesBookEntityType.Create(this);
            var biotaPropertiesBookPageData = BiotaPropertiesBookPageDataEntityType.Create(this);
            var biotaPropertiesBool = BiotaPropertiesBoolEntityType.Create(this);
            var biotaPropertiesCreateList = BiotaPropertiesCreateListEntityType.Create(this);
            var biotaPropertiesDID = BiotaPropertiesDIDEntityType.Create(this);
            var biotaPropertiesEmote = BiotaPropertiesEmoteEntityType.Create(this);
            var biotaPropertiesEmoteAction = BiotaPropertiesEmoteActionEntityType.Create(this);
            var biotaPropertiesEnchantmentRegistry = BiotaPropertiesEnchantmentRegistryEntityType.Create(this);
            var biotaPropertiesEventFilter = BiotaPropertiesEventFilterEntityType.Create(this);
            var biotaPropertiesFloat = BiotaPropertiesFloatEntityType.Create(this);
            var biotaPropertiesGenerator = BiotaPropertiesGeneratorEntityType.Create(this);
            var biotaPropertiesIID = BiotaPropertiesIIDEntityType.Create(this);
            var biotaPropertiesInt = BiotaPropertiesIntEntityType.Create(this);
            var biotaPropertiesInt64 = BiotaPropertiesInt64EntityType.Create(this);
            var biotaPropertiesPalette = BiotaPropertiesPaletteEntityType.Create(this);
            var biotaPropertiesPosition = BiotaPropertiesPositionEntityType.Create(this);
            var biotaPropertiesSkill = BiotaPropertiesSkillEntityType.Create(this);
            var biotaPropertiesSpellBook = BiotaPropertiesSpellBookEntityType.Create(this);
            var biotaPropertiesString = BiotaPropertiesStringEntityType.Create(this);
            var biotaPropertiesTextureMap = BiotaPropertiesTextureMapEntityType.Create(this);
            var character = CharacterEntityType.Create(this);
            var characterPropertiesContractRegistry = CharacterPropertiesContractRegistryEntityType.Create(this);
            var characterPropertiesFillCompBook = CharacterPropertiesFillCompBookEntityType.Create(this);
            var characterPropertiesFriendList = CharacterPropertiesFriendListEntityType.Create(this);
            var characterPropertiesQuestRegistry = CharacterPropertiesQuestRegistryEntityType.Create(this);
            var characterPropertiesShortcutBar = CharacterPropertiesShortcutBarEntityType.Create(this);
            var characterPropertiesSpellBar = CharacterPropertiesSpellBarEntityType.Create(this);
            var characterPropertiesSquelch = CharacterPropertiesSquelchEntityType.Create(this);
            var characterPropertiesTitleBook = CharacterPropertiesTitleBookEntityType.Create(this);
            var configPropertiesBoolean = ConfigPropertiesBooleanEntityType.Create(this);
            var configPropertiesDouble = ConfigPropertiesDoubleEntityType.Create(this);
            var configPropertiesLong = ConfigPropertiesLongEntityType.Create(this);
            var configPropertiesString = ConfigPropertiesStringEntityType.Create(this);
            var housePermission = HousePermissionEntityType.Create(this);

            BiotaPropertiesAllegianceEntityType.CreateForeignKey1(biotaPropertiesAllegiance, biota);
            BiotaPropertiesAllegianceEntityType.CreateForeignKey2(biotaPropertiesAllegiance, character);
            BiotaPropertiesAnimPartEntityType.CreateForeignKey1(biotaPropertiesAnimPart, biota);
            BiotaPropertiesAttributeEntityType.CreateForeignKey1(biotaPropertiesAttribute, biota);
            BiotaPropertiesAttribute2ndEntityType.CreateForeignKey1(biotaPropertiesAttribute2nd, biota);
            BiotaPropertiesBodyPartEntityType.CreateForeignKey1(biotaPropertiesBodyPart, biota);
            BiotaPropertiesBookEntityType.CreateForeignKey1(biotaPropertiesBook, biota);
            BiotaPropertiesBookPageDataEntityType.CreateForeignKey1(biotaPropertiesBookPageData, biota);
            BiotaPropertiesBoolEntityType.CreateForeignKey1(biotaPropertiesBool, biota);
            BiotaPropertiesCreateListEntityType.CreateForeignKey1(biotaPropertiesCreateList, biota);
            BiotaPropertiesDIDEntityType.CreateForeignKey1(biotaPropertiesDID, biota);
            BiotaPropertiesEmoteEntityType.CreateForeignKey1(biotaPropertiesEmote, biota);
            BiotaPropertiesEmoteActionEntityType.CreateForeignKey1(biotaPropertiesEmoteAction, biotaPropertiesEmote);
            BiotaPropertiesEnchantmentRegistryEntityType.CreateForeignKey1(biotaPropertiesEnchantmentRegistry, biota);
            BiotaPropertiesEventFilterEntityType.CreateForeignKey1(biotaPropertiesEventFilter, biota);
            BiotaPropertiesFloatEntityType.CreateForeignKey1(biotaPropertiesFloat, biota);
            BiotaPropertiesGeneratorEntityType.CreateForeignKey1(biotaPropertiesGenerator, biota);
            BiotaPropertiesIIDEntityType.CreateForeignKey1(biotaPropertiesIID, biota);
            BiotaPropertiesIntEntityType.CreateForeignKey1(biotaPropertiesInt, biota);
            BiotaPropertiesInt64EntityType.CreateForeignKey1(biotaPropertiesInt64, biota);
            BiotaPropertiesPaletteEntityType.CreateForeignKey1(biotaPropertiesPalette, biota);
            BiotaPropertiesPositionEntityType.CreateForeignKey1(biotaPropertiesPosition, biota);
            BiotaPropertiesSkillEntityType.CreateForeignKey1(biotaPropertiesSkill, biota);
            BiotaPropertiesSpellBookEntityType.CreateForeignKey1(biotaPropertiesSpellBook, biota);
            BiotaPropertiesStringEntityType.CreateForeignKey1(biotaPropertiesString, biota);
            BiotaPropertiesTextureMapEntityType.CreateForeignKey1(biotaPropertiesTextureMap, biota);
            CharacterPropertiesContractRegistryEntityType.CreateForeignKey1(characterPropertiesContractRegistry, character);
            CharacterPropertiesFillCompBookEntityType.CreateForeignKey1(characterPropertiesFillCompBook, character);
            CharacterPropertiesFriendListEntityType.CreateForeignKey1(characterPropertiesFriendList, character);
            CharacterPropertiesQuestRegistryEntityType.CreateForeignKey1(characterPropertiesQuestRegistry, character);
            CharacterPropertiesShortcutBarEntityType.CreateForeignKey1(characterPropertiesShortcutBar, character);
            CharacterPropertiesSpellBarEntityType.CreateForeignKey1(characterPropertiesSpellBar, character);
            CharacterPropertiesSquelchEntityType.CreateForeignKey1(characterPropertiesSquelch, character);
            CharacterPropertiesTitleBookEntityType.CreateForeignKey1(characterPropertiesTitleBook, character);
            HousePermissionEntityType.CreateForeignKey1(housePermission, biota);

            BiotaEntityType.CreateAnnotations(biota);
            BiotaPropertiesAllegianceEntityType.CreateAnnotations(biotaPropertiesAllegiance);
            BiotaPropertiesAnimPartEntityType.CreateAnnotations(biotaPropertiesAnimPart);
            BiotaPropertiesAttributeEntityType.CreateAnnotations(biotaPropertiesAttribute);
            BiotaPropertiesAttribute2ndEntityType.CreateAnnotations(biotaPropertiesAttribute2nd);
            BiotaPropertiesBodyPartEntityType.CreateAnnotations(biotaPropertiesBodyPart);
            BiotaPropertiesBookEntityType.CreateAnnotations(biotaPropertiesBook);
            BiotaPropertiesBookPageDataEntityType.CreateAnnotations(biotaPropertiesBookPageData);
            BiotaPropertiesBoolEntityType.CreateAnnotations(biotaPropertiesBool);
            BiotaPropertiesCreateListEntityType.CreateAnnotations(biotaPropertiesCreateList);
            BiotaPropertiesDIDEntityType.CreateAnnotations(biotaPropertiesDID);
            BiotaPropertiesEmoteEntityType.CreateAnnotations(biotaPropertiesEmote);
            BiotaPropertiesEmoteActionEntityType.CreateAnnotations(biotaPropertiesEmoteAction);
            BiotaPropertiesEnchantmentRegistryEntityType.CreateAnnotations(biotaPropertiesEnchantmentRegistry);
            BiotaPropertiesEventFilterEntityType.CreateAnnotations(biotaPropertiesEventFilter);
            BiotaPropertiesFloatEntityType.CreateAnnotations(biotaPropertiesFloat);
            BiotaPropertiesGeneratorEntityType.CreateAnnotations(biotaPropertiesGenerator);
            BiotaPropertiesIIDEntityType.CreateAnnotations(biotaPropertiesIID);
            BiotaPropertiesIntEntityType.CreateAnnotations(biotaPropertiesInt);
            BiotaPropertiesInt64EntityType.CreateAnnotations(biotaPropertiesInt64);
            BiotaPropertiesPaletteEntityType.CreateAnnotations(biotaPropertiesPalette);
            BiotaPropertiesPositionEntityType.CreateAnnotations(biotaPropertiesPosition);
            BiotaPropertiesSkillEntityType.CreateAnnotations(biotaPropertiesSkill);
            BiotaPropertiesSpellBookEntityType.CreateAnnotations(biotaPropertiesSpellBook);
            BiotaPropertiesStringEntityType.CreateAnnotations(biotaPropertiesString);
            BiotaPropertiesTextureMapEntityType.CreateAnnotations(biotaPropertiesTextureMap);
            CharacterEntityType.CreateAnnotations(character);
            CharacterPropertiesContractRegistryEntityType.CreateAnnotations(characterPropertiesContractRegistry);
            CharacterPropertiesFillCompBookEntityType.CreateAnnotations(characterPropertiesFillCompBook);
            CharacterPropertiesFriendListEntityType.CreateAnnotations(characterPropertiesFriendList);
            CharacterPropertiesQuestRegistryEntityType.CreateAnnotations(characterPropertiesQuestRegistry);
            CharacterPropertiesShortcutBarEntityType.CreateAnnotations(characterPropertiesShortcutBar);
            CharacterPropertiesSpellBarEntityType.CreateAnnotations(characterPropertiesSpellBar);
            CharacterPropertiesSquelchEntityType.CreateAnnotations(characterPropertiesSquelch);
            CharacterPropertiesTitleBookEntityType.CreateAnnotations(characterPropertiesTitleBook);
            ConfigPropertiesBooleanEntityType.CreateAnnotations(configPropertiesBoolean);
            ConfigPropertiesDoubleEntityType.CreateAnnotations(configPropertiesDouble);
            ConfigPropertiesLongEntityType.CreateAnnotations(configPropertiesLong);
            ConfigPropertiesStringEntityType.CreateAnnotations(configPropertiesString);
            HousePermissionEntityType.CreateAnnotations(housePermission);

            AddAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);
            AddAnnotation("ProductVersion", "8.0.7");
            AddAnnotation("Relational:MaxIdentifierLength", 64);
            AddRuntimeAnnotation("Relational:RelationalModel", CreateRelationalModel());
        }

        private IRelationalModel CreateRelationalModel()
        {
            var relationalModel = new RelationalModel(this);

            var biota = FindEntityType("ACE.Database.Models.Shard.Biota")!;

            var defaultTableMappings = new List<TableMappingBase<ColumnMappingBase>>();
            biota.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings);
            var aCEDatabaseModelsShardBiotaTableBase = new TableBase("ACE.Database.Models.Shard.Biota", null, relationalModel);
            var idColumnBase = new ColumnBase<ColumnMappingBase>("id", "bigint unsigned", aCEDatabaseModelsShardBiotaTableBase);
            aCEDatabaseModelsShardBiotaTableBase.Columns.Add("id", idColumnBase);
            var populated_Collection_FlagsColumnBase = new ColumnBase<ColumnMappingBase>("populated_Collection_Flags", "int unsigned", aCEDatabaseModelsShardBiotaTableBase);
            aCEDatabaseModelsShardBiotaTableBase.Columns.Add("populated_Collection_Flags", populated_Collection_FlagsColumnBase);
            var weenie_Class_IdColumnBase = new ColumnBase<ColumnMappingBase>("weenie_Class_Id", "int unsigned", aCEDatabaseModelsShardBiotaTableBase);
            aCEDatabaseModelsShardBiotaTableBase.Columns.Add("weenie_Class_Id", weenie_Class_IdColumnBase);
            var weenie_TypeColumnBase = new ColumnBase<ColumnMappingBase>("weenie_Type", "int", aCEDatabaseModelsShardBiotaTableBase);
            aCEDatabaseModelsShardBiotaTableBase.Columns.Add("weenie_Type", weenie_TypeColumnBase);
            relationalModel.DefaultTables.Add("ACE.Database.Models.Shard.Biota", aCEDatabaseModelsShardBiotaTableBase);
            var aCEDatabaseModelsShardBiotaMappingBase = new TableMappingBase<ColumnMappingBase>(biota, aCEDatabaseModelsShardBiotaTableBase, true);
            aCEDatabaseModelsShardBiotaTableBase.AddTypeMapping(aCEDatabaseModelsShardBiotaMappingBase, false);
            defaultTableMappings.Add(aCEDatabaseModelsShardBiotaMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase, biota.FindProperty("Id")!, aCEDatabaseModelsShardBiotaMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)populated_Collection_FlagsColumnBase, biota.FindProperty("PopulatedCollectionFlags")!, aCEDatabaseModelsShardBiotaMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)weenie_Class_IdColumnBase, biota.FindProperty("WeenieClassId")!, aCEDatabaseModelsShardBiotaMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)weenie_TypeColumnBase, biota.FindProperty("WeenieType")!, aCEDatabaseModelsShardBiotaMappingBase);

            var tableMappings = new List<TableMapping>();
            biota.SetRuntimeAnnotation("Relational:TableMappings", tableMappings);
            var biotaTable = new Table("biota", null, relationalModel);
            var idColumn = new Column("id", "bigint unsigned", biotaTable);
            biotaTable.Columns.Add("id", idColumn);
            var populated_Collection_FlagsColumn = new Column("populated_Collection_Flags", "int unsigned", biotaTable);
            biotaTable.Columns.Add("populated_Collection_Flags", populated_Collection_FlagsColumn);
            var weenie_Class_IdColumn = new Column("weenie_Class_Id", "int unsigned", biotaTable);
            biotaTable.Columns.Add("weenie_Class_Id", weenie_Class_IdColumn);
            var weenie_TypeColumn = new Column("weenie_Type", "int", biotaTable);
            biotaTable.Columns.Add("weenie_Type", weenie_TypeColumn);
            var pRIMARY = new UniqueConstraint("PRIMARY", biotaTable, new[] { idColumn });
            biotaTable.PrimaryKey = pRIMARY;
            var pRIMARYUc = RelationalModel.GetKey(this,
                "ACE.Database.Models.Shard.Biota",
                new[] { "Id" });
            pRIMARY.MappedKeys.Add(pRIMARYUc);
            RelationalModel.GetOrCreateUniqueConstraints(pRIMARYUc).Add(pRIMARY);
            biotaTable.UniqueConstraints.Add("PRIMARY", pRIMARY);
            var biota_type_idx = new TableIndex(
            "biota_type_idx", biotaTable, new[] { weenie_TypeColumn }, false);
            var biota_type_idxIx = RelationalModel.GetIndex(this,
                "ACE.Database.Models.Shard.Biota",
                "biota_type_idx");
            biota_type_idx.MappedIndexes.Add(biota_type_idxIx);
            RelationalModel.GetOrCreateTableIndexes(biota_type_idxIx).Add(biota_type_idx);
            biotaTable.Indexes.Add("biota_type_idx", biota_type_idx);
            var biota_wcid_idx = new TableIndex(
            "biota_wcid_idx", biotaTable, new[] { weenie_Class_IdColumn }, false);
            var biota_wcid_idxIx = RelationalModel.GetIndex(this,
                "ACE.Database.Models.Shard.Biota",
                "biota_wcid_idx");
            biota_wcid_idx.MappedIndexes.Add(biota_wcid_idxIx);
            RelationalModel.GetOrCreateTableIndexes(biota_wcid_idxIx).Add(biota_wcid_idx);
            biotaTable.Indexes.Add("biota_wcid_idx", biota_wcid_idx);
            relationalModel.Tables.Add(("biota", null), biotaTable);
            var biotaTableMapping = new TableMapping(biota, biotaTable, true);
            biotaTable.AddTypeMapping(biotaTableMapping, false);
            tableMappings.Add(biotaTableMapping);
            RelationalModel.CreateColumnMapping(idColumn, biota.FindProperty("Id")!, biotaTableMapping);
            RelationalModel.CreateColumnMapping(populated_Collection_FlagsColumn, biota.FindProperty("PopulatedCollectionFlags")!, biotaTableMapping);
            RelationalModel.CreateColumnMapping(weenie_Class_IdColumn, biota.FindProperty("WeenieClassId")!, biotaTableMapping);
            RelationalModel.CreateColumnMapping(weenie_TypeColumn, biota.FindProperty("WeenieType")!, biotaTableMapping);

            var biotaPropertiesAllegiance = FindEntityType("ACE.Database.Models.Shard.BiotaPropertiesAllegiance")!;

            var defaultTableMappings0 = new List<TableMappingBase<ColumnMappingBase>>();
            biotaPropertiesAllegiance.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings0);
            var aCEDatabaseModelsShardBiotaPropertiesAllegianceTableBase = new TableBase("ACE.Database.Models.Shard.BiotaPropertiesAllegiance", null, relationalModel);
            var allegiance_IdColumnBase = new ColumnBase<ColumnMappingBase>("allegiance_Id", "bigint unsigned", aCEDatabaseModelsShardBiotaPropertiesAllegianceTableBase);
            aCEDatabaseModelsShardBiotaPropertiesAllegianceTableBase.Columns.Add("allegiance_Id", allegiance_IdColumnBase);
            var approved_VassalColumnBase = new ColumnBase<ColumnMappingBase>("approved_Vassal", "bit(1)", aCEDatabaseModelsShardBiotaPropertiesAllegianceTableBase);
            aCEDatabaseModelsShardBiotaPropertiesAllegianceTableBase.Columns.Add("approved_Vassal", approved_VassalColumnBase);
            var bannedColumnBase = new ColumnBase<ColumnMappingBase>("banned", "bit(1)", aCEDatabaseModelsShardBiotaPropertiesAllegianceTableBase);
            aCEDatabaseModelsShardBiotaPropertiesAllegianceTableBase.Columns.Add("banned", bannedColumnBase);
            var character_IdColumnBase = new ColumnBase<ColumnMappingBase>("character_Id", "bigint unsigned", aCEDatabaseModelsShardBiotaPropertiesAllegianceTableBase);
            aCEDatabaseModelsShardBiotaPropertiesAllegianceTableBase.Columns.Add("character_Id", character_IdColumnBase);
            relationalModel.DefaultTables.Add("ACE.Database.Models.Shard.BiotaPropertiesAllegiance", aCEDatabaseModelsShardBiotaPropertiesAllegianceTableBase);
            var aCEDatabaseModelsShardBiotaPropertiesAllegianceMappingBase = new TableMappingBase<ColumnMappingBase>(biotaPropertiesAllegiance, aCEDatabaseModelsShardBiotaPropertiesAllegianceTableBase, true);
            aCEDatabaseModelsShardBiotaPropertiesAllegianceTableBase.AddTypeMapping(aCEDatabaseModelsShardBiotaPropertiesAllegianceMappingBase, false);
            defaultTableMappings0.Add(aCEDatabaseModelsShardBiotaPropertiesAllegianceMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)allegiance_IdColumnBase, biotaPropertiesAllegiance.FindProperty("AllegianceId")!, aCEDatabaseModelsShardBiotaPropertiesAllegianceMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)character_IdColumnBase, biotaPropertiesAllegiance.FindProperty("CharacterId")!, aCEDatabaseModelsShardBiotaPropertiesAllegianceMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)approved_VassalColumnBase, biotaPropertiesAllegiance.FindProperty("ApprovedVassal")!, aCEDatabaseModelsShardBiotaPropertiesAllegianceMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)bannedColumnBase, biotaPropertiesAllegiance.FindProperty("Banned")!, aCEDatabaseModelsShardBiotaPropertiesAllegianceMappingBase);

            var tableMappings0 = new List<TableMapping>();
            biotaPropertiesAllegiance.SetRuntimeAnnotation("Relational:TableMappings", tableMappings0);
            var biota_properties_allegianceTable = new Table("biota_properties_allegiance", null, relationalModel);
            var allegiance_IdColumn = new Column("allegiance_Id", "bigint unsigned", biota_properties_allegianceTable);
            biota_properties_allegianceTable.Columns.Add("allegiance_Id", allegiance_IdColumn);
            var character_IdColumn = new Column("character_Id", "bigint unsigned", biota_properties_allegianceTable);
            biota_properties_allegianceTable.Columns.Add("character_Id", character_IdColumn);
            var approved_VassalColumn = new Column("approved_Vassal", "bit(1)", biota_properties_allegianceTable);
            biota_properties_allegianceTable.Columns.Add("approved_Vassal", approved_VassalColumn);
            var bannedColumn = new Column("banned", "bit(1)", biota_properties_allegianceTable);
            biota_properties_allegianceTable.Columns.Add("banned", bannedColumn);
            var pRIMARY0 = new UniqueConstraint("PRIMARY", biota_properties_allegianceTable, new[] { allegiance_IdColumn, character_IdColumn });
            biota_properties_allegianceTable.PrimaryKey = pRIMARY0;
            pRIMARY0.AddAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });
            var pRIMARY0Uc = RelationalModel.GetKey(this,
                "ACE.Database.Models.Shard.BiotaPropertiesAllegiance",
                new[] { "AllegianceId", "CharacterId" });
            pRIMARY0.MappedKeys.Add(pRIMARY0Uc);
            RelationalModel.GetOrCreateUniqueConstraints(pRIMARY0Uc).Add(pRIMARY0);
            biota_properties_allegianceTable.UniqueConstraints.Add("PRIMARY", pRIMARY0);
            var fK_allegiance_character_Id = new TableIndex(
            "FK_allegiance_character_Id", biota_properties_allegianceTable, new[] { character_IdColumn }, false);
            var fK_allegiance_character_IdIx = RelationalModel.GetIndex(this,
                "ACE.Database.Models.Shard.BiotaPropertiesAllegiance",
                "FK_allegiance_character_Id");
            fK_allegiance_character_Id.MappedIndexes.Add(fK_allegiance_character_IdIx);
            RelationalModel.GetOrCreateTableIndexes(fK_allegiance_character_IdIx).Add(fK_allegiance_character_Id);
            biota_properties_allegianceTable.Indexes.Add("FK_allegiance_character_Id", fK_allegiance_character_Id);
            relationalModel.Tables.Add(("biota_properties_allegiance", null), biota_properties_allegianceTable);
            var biota_properties_allegianceTableMapping = new TableMapping(biotaPropertiesAllegiance, biota_properties_allegianceTable, true);
            biota_properties_allegianceTable.AddTypeMapping(biota_properties_allegianceTableMapping, false);
            tableMappings0.Add(biota_properties_allegianceTableMapping);
            RelationalModel.CreateColumnMapping(allegiance_IdColumn, biotaPropertiesAllegiance.FindProperty("AllegianceId")!, biota_properties_allegianceTableMapping);
            RelationalModel.CreateColumnMapping(character_IdColumn, biotaPropertiesAllegiance.FindProperty("CharacterId")!, biota_properties_allegianceTableMapping);
            RelationalModel.CreateColumnMapping(approved_VassalColumn, biotaPropertiesAllegiance.FindProperty("ApprovedVassal")!, biota_properties_allegianceTableMapping);
            RelationalModel.CreateColumnMapping(bannedColumn, biotaPropertiesAllegiance.FindProperty("Banned")!, biota_properties_allegianceTableMapping);

            var biotaPropertiesAnimPart = FindEntityType("ACE.Database.Models.Shard.BiotaPropertiesAnimPart")!;

            var defaultTableMappings1 = new List<TableMappingBase<ColumnMappingBase>>();
            biotaPropertiesAnimPart.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings1);
            var aCEDatabaseModelsShardBiotaPropertiesAnimPartTableBase = new TableBase("ACE.Database.Models.Shard.BiotaPropertiesAnimPart", null, relationalModel);
            var animation_IdColumnBase = new ColumnBase<ColumnMappingBase>("animation_Id", "int unsigned", aCEDatabaseModelsShardBiotaPropertiesAnimPartTableBase);
            aCEDatabaseModelsShardBiotaPropertiesAnimPartTableBase.Columns.Add("animation_Id", animation_IdColumnBase);
            var idColumnBase0 = new ColumnBase<ColumnMappingBase>("id", "int unsigned", aCEDatabaseModelsShardBiotaPropertiesAnimPartTableBase);
            aCEDatabaseModelsShardBiotaPropertiesAnimPartTableBase.Columns.Add("id", idColumnBase0);
            var indexColumnBase = new ColumnBase<ColumnMappingBase>("index", "tinyint unsigned", aCEDatabaseModelsShardBiotaPropertiesAnimPartTableBase);
            aCEDatabaseModelsShardBiotaPropertiesAnimPartTableBase.Columns.Add("index", indexColumnBase);
            var object_IdColumnBase = new ColumnBase<ColumnMappingBase>("object_Id", "bigint unsigned", aCEDatabaseModelsShardBiotaPropertiesAnimPartTableBase);
            aCEDatabaseModelsShardBiotaPropertiesAnimPartTableBase.Columns.Add("object_Id", object_IdColumnBase);
            var orderColumnBase = new ColumnBase<ColumnMappingBase>("order", "tinyint unsigned", aCEDatabaseModelsShardBiotaPropertiesAnimPartTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsShardBiotaPropertiesAnimPartTableBase.Columns.Add("order", orderColumnBase);
            relationalModel.DefaultTables.Add("ACE.Database.Models.Shard.BiotaPropertiesAnimPart", aCEDatabaseModelsShardBiotaPropertiesAnimPartTableBase);
            var aCEDatabaseModelsShardBiotaPropertiesAnimPartMappingBase = new TableMappingBase<ColumnMappingBase>(biotaPropertiesAnimPart, aCEDatabaseModelsShardBiotaPropertiesAnimPartTableBase, true);
            aCEDatabaseModelsShardBiotaPropertiesAnimPartTableBase.AddTypeMapping(aCEDatabaseModelsShardBiotaPropertiesAnimPartMappingBase, false);
            defaultTableMappings1.Add(aCEDatabaseModelsShardBiotaPropertiesAnimPartMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase0, biotaPropertiesAnimPart.FindProperty("Id")!, aCEDatabaseModelsShardBiotaPropertiesAnimPartMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)animation_IdColumnBase, biotaPropertiesAnimPart.FindProperty("AnimationId")!, aCEDatabaseModelsShardBiotaPropertiesAnimPartMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)indexColumnBase, biotaPropertiesAnimPart.FindProperty("Index")!, aCEDatabaseModelsShardBiotaPropertiesAnimPartMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)object_IdColumnBase, biotaPropertiesAnimPart.FindProperty("ObjectId")!, aCEDatabaseModelsShardBiotaPropertiesAnimPartMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)orderColumnBase, biotaPropertiesAnimPart.FindProperty("Order")!, aCEDatabaseModelsShardBiotaPropertiesAnimPartMappingBase);

            var tableMappings1 = new List<TableMapping>();
            biotaPropertiesAnimPart.SetRuntimeAnnotation("Relational:TableMappings", tableMappings1);
            var biota_properties_anim_partTable = new Table("biota_properties_anim_part", null, relationalModel);
            var idColumn0 = new Column("id", "int unsigned", biota_properties_anim_partTable);
            biota_properties_anim_partTable.Columns.Add("id", idColumn0);
            var animation_IdColumn = new Column("animation_Id", "int unsigned", biota_properties_anim_partTable);
            biota_properties_anim_partTable.Columns.Add("animation_Id", animation_IdColumn);
            var indexColumn = new Column("index", "tinyint unsigned", biota_properties_anim_partTable);
            biota_properties_anim_partTable.Columns.Add("index", indexColumn);
            var object_IdColumn = new Column("object_Id", "bigint unsigned", biota_properties_anim_partTable);
            biota_properties_anim_partTable.Columns.Add("object_Id", object_IdColumn);
            var orderColumn = new Column("order", "tinyint unsigned", biota_properties_anim_partTable)
            {
                IsNullable = true
            };
            biota_properties_anim_partTable.Columns.Add("order", orderColumn);
            var pRIMARY1 = new UniqueConstraint("PRIMARY", biota_properties_anim_partTable, new[] { idColumn0 });
            biota_properties_anim_partTable.PrimaryKey = pRIMARY1;
            var pRIMARY1Uc = RelationalModel.GetKey(this,
                "ACE.Database.Models.Shard.BiotaPropertiesAnimPart",
                new[] { "Id" });
            pRIMARY1.MappedKeys.Add(pRIMARY1Uc);
            RelationalModel.GetOrCreateUniqueConstraints(pRIMARY1Uc).Add(pRIMARY1);
            biota_properties_anim_partTable.UniqueConstraints.Add("PRIMARY", pRIMARY1);
            var wcid_animpart_idx = new TableIndex(
            "wcid_animpart_idx", biota_properties_anim_partTable, new[] { object_IdColumn }, false);
            var wcid_animpart_idxIx = RelationalModel.GetIndex(this,
                "ACE.Database.Models.Shard.BiotaPropertiesAnimPart",
                "wcid_animpart_idx");
            wcid_animpart_idx.MappedIndexes.Add(wcid_animpart_idxIx);
            RelationalModel.GetOrCreateTableIndexes(wcid_animpart_idxIx).Add(wcid_animpart_idx);
            biota_properties_anim_partTable.Indexes.Add("wcid_animpart_idx", wcid_animpart_idx);
            relationalModel.Tables.Add(("biota_properties_anim_part", null), biota_properties_anim_partTable);
            var biota_properties_anim_partTableMapping = new TableMapping(biotaPropertiesAnimPart, biota_properties_anim_partTable, true);
            biota_properties_anim_partTable.AddTypeMapping(biota_properties_anim_partTableMapping, false);
            tableMappings1.Add(biota_properties_anim_partTableMapping);
            RelationalModel.CreateColumnMapping(idColumn0, biotaPropertiesAnimPart.FindProperty("Id")!, biota_properties_anim_partTableMapping);
            RelationalModel.CreateColumnMapping(animation_IdColumn, biotaPropertiesAnimPart.FindProperty("AnimationId")!, biota_properties_anim_partTableMapping);
            RelationalModel.CreateColumnMapping(indexColumn, biotaPropertiesAnimPart.FindProperty("Index")!, biota_properties_anim_partTableMapping);
            RelationalModel.CreateColumnMapping(object_IdColumn, biotaPropertiesAnimPart.FindProperty("ObjectId")!, biota_properties_anim_partTableMapping);
            RelationalModel.CreateColumnMapping(orderColumn, biotaPropertiesAnimPart.FindProperty("Order")!, biota_properties_anim_partTableMapping);

            var biotaPropertiesAttribute = FindEntityType("ACE.Database.Models.Shard.BiotaPropertiesAttribute")!;

            var defaultTableMappings2 = new List<TableMappingBase<ColumnMappingBase>>();
            biotaPropertiesAttribute.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings2);
            var aCEDatabaseModelsShardBiotaPropertiesAttributeTableBase = new TableBase("ACE.Database.Models.Shard.BiotaPropertiesAttribute", null, relationalModel);
            var c_P_SpentColumnBase = new ColumnBase<ColumnMappingBase>("c_P_Spent", "int unsigned", aCEDatabaseModelsShardBiotaPropertiesAttributeTableBase);
            aCEDatabaseModelsShardBiotaPropertiesAttributeTableBase.Columns.Add("c_P_Spent", c_P_SpentColumnBase);
            var init_LevelColumnBase = new ColumnBase<ColumnMappingBase>("init_Level", "int unsigned", aCEDatabaseModelsShardBiotaPropertiesAttributeTableBase);
            aCEDatabaseModelsShardBiotaPropertiesAttributeTableBase.Columns.Add("init_Level", init_LevelColumnBase);
            var level_From_C_PColumnBase = new ColumnBase<ColumnMappingBase>("level_From_C_P", "int unsigned", aCEDatabaseModelsShardBiotaPropertiesAttributeTableBase);
            aCEDatabaseModelsShardBiotaPropertiesAttributeTableBase.Columns.Add("level_From_C_P", level_From_C_PColumnBase);
            var object_IdColumnBase0 = new ColumnBase<ColumnMappingBase>("object_Id", "bigint unsigned", aCEDatabaseModelsShardBiotaPropertiesAttributeTableBase);
            aCEDatabaseModelsShardBiotaPropertiesAttributeTableBase.Columns.Add("object_Id", object_IdColumnBase0);
            var typeColumnBase = new ColumnBase<ColumnMappingBase>("type", "smallint unsigned", aCEDatabaseModelsShardBiotaPropertiesAttributeTableBase);
            aCEDatabaseModelsShardBiotaPropertiesAttributeTableBase.Columns.Add("type", typeColumnBase);
            relationalModel.DefaultTables.Add("ACE.Database.Models.Shard.BiotaPropertiesAttribute", aCEDatabaseModelsShardBiotaPropertiesAttributeTableBase);
            var aCEDatabaseModelsShardBiotaPropertiesAttributeMappingBase = new TableMappingBase<ColumnMappingBase>(biotaPropertiesAttribute, aCEDatabaseModelsShardBiotaPropertiesAttributeTableBase, true);
            aCEDatabaseModelsShardBiotaPropertiesAttributeTableBase.AddTypeMapping(aCEDatabaseModelsShardBiotaPropertiesAttributeMappingBase, false);
            defaultTableMappings2.Add(aCEDatabaseModelsShardBiotaPropertiesAttributeMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)object_IdColumnBase0, biotaPropertiesAttribute.FindProperty("ObjectId")!, aCEDatabaseModelsShardBiotaPropertiesAttributeMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)typeColumnBase, biotaPropertiesAttribute.FindProperty("Type")!, aCEDatabaseModelsShardBiotaPropertiesAttributeMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)c_P_SpentColumnBase, biotaPropertiesAttribute.FindProperty("CPSpent")!, aCEDatabaseModelsShardBiotaPropertiesAttributeMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)init_LevelColumnBase, biotaPropertiesAttribute.FindProperty("InitLevel")!, aCEDatabaseModelsShardBiotaPropertiesAttributeMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)level_From_C_PColumnBase, biotaPropertiesAttribute.FindProperty("LevelFromCP")!, aCEDatabaseModelsShardBiotaPropertiesAttributeMappingBase);

            var tableMappings2 = new List<TableMapping>();
            biotaPropertiesAttribute.SetRuntimeAnnotation("Relational:TableMappings", tableMappings2);
            var biota_properties_attributeTable = new Table("biota_properties_attribute", null, relationalModel);
            var object_IdColumn0 = new Column("object_Id", "bigint unsigned", biota_properties_attributeTable);
            biota_properties_attributeTable.Columns.Add("object_Id", object_IdColumn0);
            var typeColumn = new Column("type", "smallint unsigned", biota_properties_attributeTable);
            biota_properties_attributeTable.Columns.Add("type", typeColumn);
            var c_P_SpentColumn = new Column("c_P_Spent", "int unsigned", biota_properties_attributeTable);
            biota_properties_attributeTable.Columns.Add("c_P_Spent", c_P_SpentColumn);
            var init_LevelColumn = new Column("init_Level", "int unsigned", biota_properties_attributeTable);
            biota_properties_attributeTable.Columns.Add("init_Level", init_LevelColumn);
            var level_From_C_PColumn = new Column("level_From_C_P", "int unsigned", biota_properties_attributeTable);
            biota_properties_attributeTable.Columns.Add("level_From_C_P", level_From_C_PColumn);
            var pRIMARY2 = new UniqueConstraint("PRIMARY", biota_properties_attributeTable, new[] { object_IdColumn0, typeColumn });
            biota_properties_attributeTable.PrimaryKey = pRIMARY2;
            pRIMARY2.AddAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });
            var pRIMARY2Uc = RelationalModel.GetKey(this,
                "ACE.Database.Models.Shard.BiotaPropertiesAttribute",
                new[] { "ObjectId", "Type" });
            pRIMARY2.MappedKeys.Add(pRIMARY2Uc);
            RelationalModel.GetOrCreateUniqueConstraints(pRIMARY2Uc).Add(pRIMARY2);
            biota_properties_attributeTable.UniqueConstraints.Add("PRIMARY", pRIMARY2);
            relationalModel.Tables.Add(("biota_properties_attribute", null), biota_properties_attributeTable);
            var biota_properties_attributeTableMapping = new TableMapping(biotaPropertiesAttribute, biota_properties_attributeTable, true);
            biota_properties_attributeTable.AddTypeMapping(biota_properties_attributeTableMapping, false);
            tableMappings2.Add(biota_properties_attributeTableMapping);
            RelationalModel.CreateColumnMapping(object_IdColumn0, biotaPropertiesAttribute.FindProperty("ObjectId")!, biota_properties_attributeTableMapping);
            RelationalModel.CreateColumnMapping(typeColumn, biotaPropertiesAttribute.FindProperty("Type")!, biota_properties_attributeTableMapping);
            RelationalModel.CreateColumnMapping(c_P_SpentColumn, biotaPropertiesAttribute.FindProperty("CPSpent")!, biota_properties_attributeTableMapping);
            RelationalModel.CreateColumnMapping(init_LevelColumn, biotaPropertiesAttribute.FindProperty("InitLevel")!, biota_properties_attributeTableMapping);
            RelationalModel.CreateColumnMapping(level_From_C_PColumn, biotaPropertiesAttribute.FindProperty("LevelFromCP")!, biota_properties_attributeTableMapping);

            var biotaPropertiesAttribute2nd = FindEntityType("ACE.Database.Models.Shard.BiotaPropertiesAttribute2nd")!;

            var defaultTableMappings3 = new List<TableMappingBase<ColumnMappingBase>>();
            biotaPropertiesAttribute2nd.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings3);
            var aCEDatabaseModelsShardBiotaPropertiesAttribute2ndTableBase = new TableBase("ACE.Database.Models.Shard.BiotaPropertiesAttribute2nd", null, relationalModel);
            var c_P_SpentColumnBase0 = new ColumnBase<ColumnMappingBase>("c_P_Spent", "int unsigned", aCEDatabaseModelsShardBiotaPropertiesAttribute2ndTableBase);
            aCEDatabaseModelsShardBiotaPropertiesAttribute2ndTableBase.Columns.Add("c_P_Spent", c_P_SpentColumnBase0);
            var current_LevelColumnBase = new ColumnBase<ColumnMappingBase>("current_Level", "int unsigned", aCEDatabaseModelsShardBiotaPropertiesAttribute2ndTableBase);
            aCEDatabaseModelsShardBiotaPropertiesAttribute2ndTableBase.Columns.Add("current_Level", current_LevelColumnBase);
            var init_LevelColumnBase0 = new ColumnBase<ColumnMappingBase>("init_Level", "int unsigned", aCEDatabaseModelsShardBiotaPropertiesAttribute2ndTableBase);
            aCEDatabaseModelsShardBiotaPropertiesAttribute2ndTableBase.Columns.Add("init_Level", init_LevelColumnBase0);
            var level_From_C_PColumnBase0 = new ColumnBase<ColumnMappingBase>("level_From_C_P", "int unsigned", aCEDatabaseModelsShardBiotaPropertiesAttribute2ndTableBase);
            aCEDatabaseModelsShardBiotaPropertiesAttribute2ndTableBase.Columns.Add("level_From_C_P", level_From_C_PColumnBase0);
            var object_IdColumnBase1 = new ColumnBase<ColumnMappingBase>("object_Id", "bigint unsigned", aCEDatabaseModelsShardBiotaPropertiesAttribute2ndTableBase);
            aCEDatabaseModelsShardBiotaPropertiesAttribute2ndTableBase.Columns.Add("object_Id", object_IdColumnBase1);
            var typeColumnBase0 = new ColumnBase<ColumnMappingBase>("type", "smallint unsigned", aCEDatabaseModelsShardBiotaPropertiesAttribute2ndTableBase);
            aCEDatabaseModelsShardBiotaPropertiesAttribute2ndTableBase.Columns.Add("type", typeColumnBase0);
            relationalModel.DefaultTables.Add("ACE.Database.Models.Shard.BiotaPropertiesAttribute2nd", aCEDatabaseModelsShardBiotaPropertiesAttribute2ndTableBase);
            var aCEDatabaseModelsShardBiotaPropertiesAttribute2ndMappingBase = new TableMappingBase<ColumnMappingBase>(biotaPropertiesAttribute2nd, aCEDatabaseModelsShardBiotaPropertiesAttribute2ndTableBase, true);
            aCEDatabaseModelsShardBiotaPropertiesAttribute2ndTableBase.AddTypeMapping(aCEDatabaseModelsShardBiotaPropertiesAttribute2ndMappingBase, false);
            defaultTableMappings3.Add(aCEDatabaseModelsShardBiotaPropertiesAttribute2ndMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)object_IdColumnBase1, biotaPropertiesAttribute2nd.FindProperty("ObjectId")!, aCEDatabaseModelsShardBiotaPropertiesAttribute2ndMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)typeColumnBase0, biotaPropertiesAttribute2nd.FindProperty("Type")!, aCEDatabaseModelsShardBiotaPropertiesAttribute2ndMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)c_P_SpentColumnBase0, biotaPropertiesAttribute2nd.FindProperty("CPSpent")!, aCEDatabaseModelsShardBiotaPropertiesAttribute2ndMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)current_LevelColumnBase, biotaPropertiesAttribute2nd.FindProperty("CurrentLevel")!, aCEDatabaseModelsShardBiotaPropertiesAttribute2ndMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)init_LevelColumnBase0, biotaPropertiesAttribute2nd.FindProperty("InitLevel")!, aCEDatabaseModelsShardBiotaPropertiesAttribute2ndMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)level_From_C_PColumnBase0, biotaPropertiesAttribute2nd.FindProperty("LevelFromCP")!, aCEDatabaseModelsShardBiotaPropertiesAttribute2ndMappingBase);

            var tableMappings3 = new List<TableMapping>();
            biotaPropertiesAttribute2nd.SetRuntimeAnnotation("Relational:TableMappings", tableMappings3);
            var biota_properties_attribute_2ndTable = new Table("biota_properties_attribute_2nd", null, relationalModel);
            var object_IdColumn1 = new Column("object_Id", "bigint unsigned", biota_properties_attribute_2ndTable);
            biota_properties_attribute_2ndTable.Columns.Add("object_Id", object_IdColumn1);
            var typeColumn0 = new Column("type", "smallint unsigned", biota_properties_attribute_2ndTable);
            biota_properties_attribute_2ndTable.Columns.Add("type", typeColumn0);
            var c_P_SpentColumn0 = new Column("c_P_Spent", "int unsigned", biota_properties_attribute_2ndTable);
            biota_properties_attribute_2ndTable.Columns.Add("c_P_Spent", c_P_SpentColumn0);
            var current_LevelColumn = new Column("current_Level", "int unsigned", biota_properties_attribute_2ndTable);
            biota_properties_attribute_2ndTable.Columns.Add("current_Level", current_LevelColumn);
            var init_LevelColumn0 = new Column("init_Level", "int unsigned", biota_properties_attribute_2ndTable);
            biota_properties_attribute_2ndTable.Columns.Add("init_Level", init_LevelColumn0);
            var level_From_C_PColumn0 = new Column("level_From_C_P", "int unsigned", biota_properties_attribute_2ndTable);
            biota_properties_attribute_2ndTable.Columns.Add("level_From_C_P", level_From_C_PColumn0);
            var pRIMARY3 = new UniqueConstraint("PRIMARY", biota_properties_attribute_2ndTable, new[] { object_IdColumn1, typeColumn0 });
            biota_properties_attribute_2ndTable.PrimaryKey = pRIMARY3;
            pRIMARY3.AddAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });
            var pRIMARY3Uc = RelationalModel.GetKey(this,
                "ACE.Database.Models.Shard.BiotaPropertiesAttribute2nd",
                new[] { "ObjectId", "Type" });
            pRIMARY3.MappedKeys.Add(pRIMARY3Uc);
            RelationalModel.GetOrCreateUniqueConstraints(pRIMARY3Uc).Add(pRIMARY3);
            biota_properties_attribute_2ndTable.UniqueConstraints.Add("PRIMARY", pRIMARY3);
            relationalModel.Tables.Add(("biota_properties_attribute_2nd", null), biota_properties_attribute_2ndTable);
            var biota_properties_attribute_2ndTableMapping = new TableMapping(biotaPropertiesAttribute2nd, biota_properties_attribute_2ndTable, true);
            biota_properties_attribute_2ndTable.AddTypeMapping(biota_properties_attribute_2ndTableMapping, false);
            tableMappings3.Add(biota_properties_attribute_2ndTableMapping);
            RelationalModel.CreateColumnMapping(object_IdColumn1, biotaPropertiesAttribute2nd.FindProperty("ObjectId")!, biota_properties_attribute_2ndTableMapping);
            RelationalModel.CreateColumnMapping(typeColumn0, biotaPropertiesAttribute2nd.FindProperty("Type")!, biota_properties_attribute_2ndTableMapping);
            RelationalModel.CreateColumnMapping(c_P_SpentColumn0, biotaPropertiesAttribute2nd.FindProperty("CPSpent")!, biota_properties_attribute_2ndTableMapping);
            RelationalModel.CreateColumnMapping(current_LevelColumn, biotaPropertiesAttribute2nd.FindProperty("CurrentLevel")!, biota_properties_attribute_2ndTableMapping);
            RelationalModel.CreateColumnMapping(init_LevelColumn0, biotaPropertiesAttribute2nd.FindProperty("InitLevel")!, biota_properties_attribute_2ndTableMapping);
            RelationalModel.CreateColumnMapping(level_From_C_PColumn0, biotaPropertiesAttribute2nd.FindProperty("LevelFromCP")!, biota_properties_attribute_2ndTableMapping);

            var biotaPropertiesBodyPart = FindEntityType("ACE.Database.Models.Shard.BiotaPropertiesBodyPart")!;

            var defaultTableMappings4 = new List<TableMappingBase<ColumnMappingBase>>();
            biotaPropertiesBodyPart.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings4);
            var aCEDatabaseModelsShardBiotaPropertiesBodyPartTableBase = new TableBase("ACE.Database.Models.Shard.BiotaPropertiesBodyPart", null, relationalModel);
            var armor_Vs_AcidColumnBase = new ColumnBase<ColumnMappingBase>("armor_Vs_Acid", "int", aCEDatabaseModelsShardBiotaPropertiesBodyPartTableBase);
            aCEDatabaseModelsShardBiotaPropertiesBodyPartTableBase.Columns.Add("armor_Vs_Acid", armor_Vs_AcidColumnBase);
            var armor_Vs_BludgeonColumnBase = new ColumnBase<ColumnMappingBase>("armor_Vs_Bludgeon", "int", aCEDatabaseModelsShardBiotaPropertiesBodyPartTableBase);
            aCEDatabaseModelsShardBiotaPropertiesBodyPartTableBase.Columns.Add("armor_Vs_Bludgeon", armor_Vs_BludgeonColumnBase);
            var armor_Vs_ColdColumnBase = new ColumnBase<ColumnMappingBase>("armor_Vs_Cold", "int", aCEDatabaseModelsShardBiotaPropertiesBodyPartTableBase);
            aCEDatabaseModelsShardBiotaPropertiesBodyPartTableBase.Columns.Add("armor_Vs_Cold", armor_Vs_ColdColumnBase);
            var armor_Vs_ElectricColumnBase = new ColumnBase<ColumnMappingBase>("armor_Vs_Electric", "int", aCEDatabaseModelsShardBiotaPropertiesBodyPartTableBase);
            aCEDatabaseModelsShardBiotaPropertiesBodyPartTableBase.Columns.Add("armor_Vs_Electric", armor_Vs_ElectricColumnBase);
            var armor_Vs_FireColumnBase = new ColumnBase<ColumnMappingBase>("armor_Vs_Fire", "int", aCEDatabaseModelsShardBiotaPropertiesBodyPartTableBase);
            aCEDatabaseModelsShardBiotaPropertiesBodyPartTableBase.Columns.Add("armor_Vs_Fire", armor_Vs_FireColumnBase);
            var armor_Vs_NetherColumnBase = new ColumnBase<ColumnMappingBase>("armor_Vs_Nether", "int", aCEDatabaseModelsShardBiotaPropertiesBodyPartTableBase);
            aCEDatabaseModelsShardBiotaPropertiesBodyPartTableBase.Columns.Add("armor_Vs_Nether", armor_Vs_NetherColumnBase);
            var armor_Vs_PierceColumnBase = new ColumnBase<ColumnMappingBase>("armor_Vs_Pierce", "int", aCEDatabaseModelsShardBiotaPropertiesBodyPartTableBase);
            aCEDatabaseModelsShardBiotaPropertiesBodyPartTableBase.Columns.Add("armor_Vs_Pierce", armor_Vs_PierceColumnBase);
            var armor_Vs_SlashColumnBase = new ColumnBase<ColumnMappingBase>("armor_Vs_Slash", "int", aCEDatabaseModelsShardBiotaPropertiesBodyPartTableBase);
            aCEDatabaseModelsShardBiotaPropertiesBodyPartTableBase.Columns.Add("armor_Vs_Slash", armor_Vs_SlashColumnBase);
            var b_hColumnBase = new ColumnBase<ColumnMappingBase>("b_h", "int", aCEDatabaseModelsShardBiotaPropertiesBodyPartTableBase);
            aCEDatabaseModelsShardBiotaPropertiesBodyPartTableBase.Columns.Add("b_h", b_hColumnBase);
            var base_ArmorColumnBase = new ColumnBase<ColumnMappingBase>("base_Armor", "int", aCEDatabaseModelsShardBiotaPropertiesBodyPartTableBase);
            aCEDatabaseModelsShardBiotaPropertiesBodyPartTableBase.Columns.Add("base_Armor", base_ArmorColumnBase);
            var d_TypeColumnBase = new ColumnBase<ColumnMappingBase>("d_Type", "int", aCEDatabaseModelsShardBiotaPropertiesBodyPartTableBase);
            aCEDatabaseModelsShardBiotaPropertiesBodyPartTableBase.Columns.Add("d_Type", d_TypeColumnBase);
            var d_ValColumnBase = new ColumnBase<ColumnMappingBase>("d_Val", "int", aCEDatabaseModelsShardBiotaPropertiesBodyPartTableBase);
            aCEDatabaseModelsShardBiotaPropertiesBodyPartTableBase.Columns.Add("d_Val", d_ValColumnBase);
            var d_VarColumnBase = new ColumnBase<ColumnMappingBase>("d_Var", "float", aCEDatabaseModelsShardBiotaPropertiesBodyPartTableBase);
            aCEDatabaseModelsShardBiotaPropertiesBodyPartTableBase.Columns.Add("d_Var", d_VarColumnBase);
            var h_l_bColumnBase = new ColumnBase<ColumnMappingBase>("h_l_b", "float", aCEDatabaseModelsShardBiotaPropertiesBodyPartTableBase);
            aCEDatabaseModelsShardBiotaPropertiesBodyPartTableBase.Columns.Add("h_l_b", h_l_bColumnBase);
            var h_l_fColumnBase = new ColumnBase<ColumnMappingBase>("h_l_f", "float", aCEDatabaseModelsShardBiotaPropertiesBodyPartTableBase);
            aCEDatabaseModelsShardBiotaPropertiesBodyPartTableBase.Columns.Add("h_l_f", h_l_fColumnBase);
            var h_r_bColumnBase = new ColumnBase<ColumnMappingBase>("h_r_b", "float", aCEDatabaseModelsShardBiotaPropertiesBodyPartTableBase);
            aCEDatabaseModelsShardBiotaPropertiesBodyPartTableBase.Columns.Add("h_r_b", h_r_bColumnBase);
            var h_r_fColumnBase = new ColumnBase<ColumnMappingBase>("h_r_f", "float", aCEDatabaseModelsShardBiotaPropertiesBodyPartTableBase);
            aCEDatabaseModelsShardBiotaPropertiesBodyPartTableBase.Columns.Add("h_r_f", h_r_fColumnBase);
            var idColumnBase1 = new ColumnBase<ColumnMappingBase>("id", "int unsigned", aCEDatabaseModelsShardBiotaPropertiesBodyPartTableBase);
            aCEDatabaseModelsShardBiotaPropertiesBodyPartTableBase.Columns.Add("id", idColumnBase1);
            var keyColumnBase = new ColumnBase<ColumnMappingBase>("key", "smallint unsigned", aCEDatabaseModelsShardBiotaPropertiesBodyPartTableBase);
            aCEDatabaseModelsShardBiotaPropertiesBodyPartTableBase.Columns.Add("key", keyColumnBase);
            var l_l_bColumnBase = new ColumnBase<ColumnMappingBase>("l_l_b", "float", aCEDatabaseModelsShardBiotaPropertiesBodyPartTableBase);
            aCEDatabaseModelsShardBiotaPropertiesBodyPartTableBase.Columns.Add("l_l_b", l_l_bColumnBase);
            var l_l_fColumnBase = new ColumnBase<ColumnMappingBase>("l_l_f", "float", aCEDatabaseModelsShardBiotaPropertiesBodyPartTableBase);
            aCEDatabaseModelsShardBiotaPropertiesBodyPartTableBase.Columns.Add("l_l_f", l_l_fColumnBase);
            var l_r_bColumnBase = new ColumnBase<ColumnMappingBase>("l_r_b", "float", aCEDatabaseModelsShardBiotaPropertiesBodyPartTableBase);
            aCEDatabaseModelsShardBiotaPropertiesBodyPartTableBase.Columns.Add("l_r_b", l_r_bColumnBase);
            var l_r_fColumnBase = new ColumnBase<ColumnMappingBase>("l_r_f", "float", aCEDatabaseModelsShardBiotaPropertiesBodyPartTableBase);
            aCEDatabaseModelsShardBiotaPropertiesBodyPartTableBase.Columns.Add("l_r_f", l_r_fColumnBase);
            var m_l_bColumnBase = new ColumnBase<ColumnMappingBase>("m_l_b", "float", aCEDatabaseModelsShardBiotaPropertiesBodyPartTableBase);
            aCEDatabaseModelsShardBiotaPropertiesBodyPartTableBase.Columns.Add("m_l_b", m_l_bColumnBase);
            var m_l_fColumnBase = new ColumnBase<ColumnMappingBase>("m_l_f", "float", aCEDatabaseModelsShardBiotaPropertiesBodyPartTableBase);
            aCEDatabaseModelsShardBiotaPropertiesBodyPartTableBase.Columns.Add("m_l_f", m_l_fColumnBase);
            var m_r_bColumnBase = new ColumnBase<ColumnMappingBase>("m_r_b", "float", aCEDatabaseModelsShardBiotaPropertiesBodyPartTableBase);
            aCEDatabaseModelsShardBiotaPropertiesBodyPartTableBase.Columns.Add("m_r_b", m_r_bColumnBase);
            var m_r_fColumnBase = new ColumnBase<ColumnMappingBase>("m_r_f", "float", aCEDatabaseModelsShardBiotaPropertiesBodyPartTableBase);
            aCEDatabaseModelsShardBiotaPropertiesBodyPartTableBase.Columns.Add("m_r_f", m_r_fColumnBase);
            var object_IdColumnBase2 = new ColumnBase<ColumnMappingBase>("object_Id", "bigint unsigned", aCEDatabaseModelsShardBiotaPropertiesBodyPartTableBase);
            aCEDatabaseModelsShardBiotaPropertiesBodyPartTableBase.Columns.Add("object_Id", object_IdColumnBase2);
            relationalModel.DefaultTables.Add("ACE.Database.Models.Shard.BiotaPropertiesBodyPart", aCEDatabaseModelsShardBiotaPropertiesBodyPartTableBase);
            var aCEDatabaseModelsShardBiotaPropertiesBodyPartMappingBase = new TableMappingBase<ColumnMappingBase>(biotaPropertiesBodyPart, aCEDatabaseModelsShardBiotaPropertiesBodyPartTableBase, true);
            aCEDatabaseModelsShardBiotaPropertiesBodyPartTableBase.AddTypeMapping(aCEDatabaseModelsShardBiotaPropertiesBodyPartMappingBase, false);
            defaultTableMappings4.Add(aCEDatabaseModelsShardBiotaPropertiesBodyPartMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase1, biotaPropertiesBodyPart.FindProperty("Id")!, aCEDatabaseModelsShardBiotaPropertiesBodyPartMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)armor_Vs_AcidColumnBase, biotaPropertiesBodyPart.FindProperty("ArmorVsAcid")!, aCEDatabaseModelsShardBiotaPropertiesBodyPartMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)armor_Vs_BludgeonColumnBase, biotaPropertiesBodyPart.FindProperty("ArmorVsBludgeon")!, aCEDatabaseModelsShardBiotaPropertiesBodyPartMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)armor_Vs_ColdColumnBase, biotaPropertiesBodyPart.FindProperty("ArmorVsCold")!, aCEDatabaseModelsShardBiotaPropertiesBodyPartMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)armor_Vs_ElectricColumnBase, biotaPropertiesBodyPart.FindProperty("ArmorVsElectric")!, aCEDatabaseModelsShardBiotaPropertiesBodyPartMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)armor_Vs_FireColumnBase, biotaPropertiesBodyPart.FindProperty("ArmorVsFire")!, aCEDatabaseModelsShardBiotaPropertiesBodyPartMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)armor_Vs_NetherColumnBase, biotaPropertiesBodyPart.FindProperty("ArmorVsNether")!, aCEDatabaseModelsShardBiotaPropertiesBodyPartMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)armor_Vs_PierceColumnBase, biotaPropertiesBodyPart.FindProperty("ArmorVsPierce")!, aCEDatabaseModelsShardBiotaPropertiesBodyPartMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)armor_Vs_SlashColumnBase, biotaPropertiesBodyPart.FindProperty("ArmorVsSlash")!, aCEDatabaseModelsShardBiotaPropertiesBodyPartMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)b_hColumnBase, biotaPropertiesBodyPart.FindProperty("BH")!, aCEDatabaseModelsShardBiotaPropertiesBodyPartMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)base_ArmorColumnBase, biotaPropertiesBodyPart.FindProperty("BaseArmor")!, aCEDatabaseModelsShardBiotaPropertiesBodyPartMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)d_TypeColumnBase, biotaPropertiesBodyPart.FindProperty("DType")!, aCEDatabaseModelsShardBiotaPropertiesBodyPartMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)d_ValColumnBase, biotaPropertiesBodyPart.FindProperty("DVal")!, aCEDatabaseModelsShardBiotaPropertiesBodyPartMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)d_VarColumnBase, biotaPropertiesBodyPart.FindProperty("DVar")!, aCEDatabaseModelsShardBiotaPropertiesBodyPartMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)h_l_bColumnBase, biotaPropertiesBodyPart.FindProperty("HLB")!, aCEDatabaseModelsShardBiotaPropertiesBodyPartMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)h_l_fColumnBase, biotaPropertiesBodyPart.FindProperty("HLF")!, aCEDatabaseModelsShardBiotaPropertiesBodyPartMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)h_r_bColumnBase, biotaPropertiesBodyPart.FindProperty("HRB")!, aCEDatabaseModelsShardBiotaPropertiesBodyPartMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)h_r_fColumnBase, biotaPropertiesBodyPart.FindProperty("HRF")!, aCEDatabaseModelsShardBiotaPropertiesBodyPartMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)keyColumnBase, biotaPropertiesBodyPart.FindProperty("Key")!, aCEDatabaseModelsShardBiotaPropertiesBodyPartMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)l_l_bColumnBase, biotaPropertiesBodyPart.FindProperty("LLB")!, aCEDatabaseModelsShardBiotaPropertiesBodyPartMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)l_l_fColumnBase, biotaPropertiesBodyPart.FindProperty("LLF")!, aCEDatabaseModelsShardBiotaPropertiesBodyPartMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)l_r_bColumnBase, biotaPropertiesBodyPart.FindProperty("LRB")!, aCEDatabaseModelsShardBiotaPropertiesBodyPartMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)l_r_fColumnBase, biotaPropertiesBodyPart.FindProperty("LRF")!, aCEDatabaseModelsShardBiotaPropertiesBodyPartMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)m_l_bColumnBase, biotaPropertiesBodyPart.FindProperty("MLB")!, aCEDatabaseModelsShardBiotaPropertiesBodyPartMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)m_l_fColumnBase, biotaPropertiesBodyPart.FindProperty("MLF")!, aCEDatabaseModelsShardBiotaPropertiesBodyPartMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)m_r_bColumnBase, biotaPropertiesBodyPart.FindProperty("MRB")!, aCEDatabaseModelsShardBiotaPropertiesBodyPartMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)m_r_fColumnBase, biotaPropertiesBodyPart.FindProperty("MRF")!, aCEDatabaseModelsShardBiotaPropertiesBodyPartMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)object_IdColumnBase2, biotaPropertiesBodyPart.FindProperty("ObjectId")!, aCEDatabaseModelsShardBiotaPropertiesBodyPartMappingBase);

            var tableMappings4 = new List<TableMapping>();
            biotaPropertiesBodyPart.SetRuntimeAnnotation("Relational:TableMappings", tableMappings4);
            var biota_properties_body_partTable = new Table("biota_properties_body_part", null, relationalModel);
            var idColumn1 = new Column("id", "int unsigned", biota_properties_body_partTable);
            biota_properties_body_partTable.Columns.Add("id", idColumn1);
            var armor_Vs_AcidColumn = new Column("armor_Vs_Acid", "int", biota_properties_body_partTable);
            biota_properties_body_partTable.Columns.Add("armor_Vs_Acid", armor_Vs_AcidColumn);
            var armor_Vs_BludgeonColumn = new Column("armor_Vs_Bludgeon", "int", biota_properties_body_partTable);
            biota_properties_body_partTable.Columns.Add("armor_Vs_Bludgeon", armor_Vs_BludgeonColumn);
            var armor_Vs_ColdColumn = new Column("armor_Vs_Cold", "int", biota_properties_body_partTable);
            biota_properties_body_partTable.Columns.Add("armor_Vs_Cold", armor_Vs_ColdColumn);
            var armor_Vs_ElectricColumn = new Column("armor_Vs_Electric", "int", biota_properties_body_partTable);
            biota_properties_body_partTable.Columns.Add("armor_Vs_Electric", armor_Vs_ElectricColumn);
            var armor_Vs_FireColumn = new Column("armor_Vs_Fire", "int", biota_properties_body_partTable);
            biota_properties_body_partTable.Columns.Add("armor_Vs_Fire", armor_Vs_FireColumn);
            var armor_Vs_NetherColumn = new Column("armor_Vs_Nether", "int", biota_properties_body_partTable);
            biota_properties_body_partTable.Columns.Add("armor_Vs_Nether", armor_Vs_NetherColumn);
            var armor_Vs_PierceColumn = new Column("armor_Vs_Pierce", "int", biota_properties_body_partTable);
            biota_properties_body_partTable.Columns.Add("armor_Vs_Pierce", armor_Vs_PierceColumn);
            var armor_Vs_SlashColumn = new Column("armor_Vs_Slash", "int", biota_properties_body_partTable);
            biota_properties_body_partTable.Columns.Add("armor_Vs_Slash", armor_Vs_SlashColumn);
            var b_hColumn = new Column("b_h", "int", biota_properties_body_partTable);
            biota_properties_body_partTable.Columns.Add("b_h", b_hColumn);
            var base_ArmorColumn = new Column("base_Armor", "int", biota_properties_body_partTable);
            biota_properties_body_partTable.Columns.Add("base_Armor", base_ArmorColumn);
            var d_TypeColumn = new Column("d_Type", "int", biota_properties_body_partTable);
            biota_properties_body_partTable.Columns.Add("d_Type", d_TypeColumn);
            var d_ValColumn = new Column("d_Val", "int", biota_properties_body_partTable);
            biota_properties_body_partTable.Columns.Add("d_Val", d_ValColumn);
            var d_VarColumn = new Column("d_Var", "float", biota_properties_body_partTable);
            biota_properties_body_partTable.Columns.Add("d_Var", d_VarColumn);
            var h_l_bColumn = new Column("h_l_b", "float", biota_properties_body_partTable);
            biota_properties_body_partTable.Columns.Add("h_l_b", h_l_bColumn);
            var h_l_fColumn = new Column("h_l_f", "float", biota_properties_body_partTable);
            biota_properties_body_partTable.Columns.Add("h_l_f", h_l_fColumn);
            var h_r_bColumn = new Column("h_r_b", "float", biota_properties_body_partTable);
            biota_properties_body_partTable.Columns.Add("h_r_b", h_r_bColumn);
            var h_r_fColumn = new Column("h_r_f", "float", biota_properties_body_partTable);
            biota_properties_body_partTable.Columns.Add("h_r_f", h_r_fColumn);
            var keyColumn = new Column("key", "smallint unsigned", biota_properties_body_partTable);
            biota_properties_body_partTable.Columns.Add("key", keyColumn);
            var l_l_bColumn = new Column("l_l_b", "float", biota_properties_body_partTable);
            biota_properties_body_partTable.Columns.Add("l_l_b", l_l_bColumn);
            var l_l_fColumn = new Column("l_l_f", "float", biota_properties_body_partTable);
            biota_properties_body_partTable.Columns.Add("l_l_f", l_l_fColumn);
            var l_r_bColumn = new Column("l_r_b", "float", biota_properties_body_partTable);
            biota_properties_body_partTable.Columns.Add("l_r_b", l_r_bColumn);
            var l_r_fColumn = new Column("l_r_f", "float", biota_properties_body_partTable);
            biota_properties_body_partTable.Columns.Add("l_r_f", l_r_fColumn);
            var m_l_bColumn = new Column("m_l_b", "float", biota_properties_body_partTable);
            biota_properties_body_partTable.Columns.Add("m_l_b", m_l_bColumn);
            var m_l_fColumn = new Column("m_l_f", "float", biota_properties_body_partTable);
            biota_properties_body_partTable.Columns.Add("m_l_f", m_l_fColumn);
            var m_r_bColumn = new Column("m_r_b", "float", biota_properties_body_partTable);
            biota_properties_body_partTable.Columns.Add("m_r_b", m_r_bColumn);
            var m_r_fColumn = new Column("m_r_f", "float", biota_properties_body_partTable);
            biota_properties_body_partTable.Columns.Add("m_r_f", m_r_fColumn);
            var object_IdColumn2 = new Column("object_Id", "bigint unsigned", biota_properties_body_partTable);
            biota_properties_body_partTable.Columns.Add("object_Id", object_IdColumn2);
            var pRIMARY4 = new UniqueConstraint("PRIMARY", biota_properties_body_partTable, new[] { idColumn1 });
            biota_properties_body_partTable.PrimaryKey = pRIMARY4;
            var pRIMARY4Uc = RelationalModel.GetKey(this,
                "ACE.Database.Models.Shard.BiotaPropertiesBodyPart",
                new[] { "Id" });
            pRIMARY4.MappedKeys.Add(pRIMARY4Uc);
            RelationalModel.GetOrCreateUniqueConstraints(pRIMARY4Uc).Add(pRIMARY4);
            biota_properties_body_partTable.UniqueConstraints.Add("PRIMARY", pRIMARY4);
            var wcid_bodypart_type_uidx = new TableIndex(
            "wcid_bodypart_type_uidx", biota_properties_body_partTable, new[] { object_IdColumn2, keyColumn }, true);
            var wcid_bodypart_type_uidxIx = RelationalModel.GetIndex(this,
                "ACE.Database.Models.Shard.BiotaPropertiesBodyPart",
                "wcid_bodypart_type_uidx");
            wcid_bodypart_type_uidx.MappedIndexes.Add(wcid_bodypart_type_uidxIx);
            RelationalModel.GetOrCreateTableIndexes(wcid_bodypart_type_uidxIx).Add(wcid_bodypart_type_uidx);
            biota_properties_body_partTable.Indexes.Add("wcid_bodypart_type_uidx", wcid_bodypart_type_uidx);
            relationalModel.Tables.Add(("biota_properties_body_part", null), biota_properties_body_partTable);
            var biota_properties_body_partTableMapping = new TableMapping(biotaPropertiesBodyPart, biota_properties_body_partTable, true);
            biota_properties_body_partTable.AddTypeMapping(biota_properties_body_partTableMapping, false);
            tableMappings4.Add(biota_properties_body_partTableMapping);
            RelationalModel.CreateColumnMapping(idColumn1, biotaPropertiesBodyPart.FindProperty("Id")!, biota_properties_body_partTableMapping);
            RelationalModel.CreateColumnMapping(armor_Vs_AcidColumn, biotaPropertiesBodyPart.FindProperty("ArmorVsAcid")!, biota_properties_body_partTableMapping);
            RelationalModel.CreateColumnMapping(armor_Vs_BludgeonColumn, biotaPropertiesBodyPart.FindProperty("ArmorVsBludgeon")!, biota_properties_body_partTableMapping);
            RelationalModel.CreateColumnMapping(armor_Vs_ColdColumn, biotaPropertiesBodyPart.FindProperty("ArmorVsCold")!, biota_properties_body_partTableMapping);
            RelationalModel.CreateColumnMapping(armor_Vs_ElectricColumn, biotaPropertiesBodyPart.FindProperty("ArmorVsElectric")!, biota_properties_body_partTableMapping);
            RelationalModel.CreateColumnMapping(armor_Vs_FireColumn, biotaPropertiesBodyPart.FindProperty("ArmorVsFire")!, biota_properties_body_partTableMapping);
            RelationalModel.CreateColumnMapping(armor_Vs_NetherColumn, biotaPropertiesBodyPart.FindProperty("ArmorVsNether")!, biota_properties_body_partTableMapping);
            RelationalModel.CreateColumnMapping(armor_Vs_PierceColumn, biotaPropertiesBodyPart.FindProperty("ArmorVsPierce")!, biota_properties_body_partTableMapping);
            RelationalModel.CreateColumnMapping(armor_Vs_SlashColumn, biotaPropertiesBodyPart.FindProperty("ArmorVsSlash")!, biota_properties_body_partTableMapping);
            RelationalModel.CreateColumnMapping(b_hColumn, biotaPropertiesBodyPart.FindProperty("BH")!, biota_properties_body_partTableMapping);
            RelationalModel.CreateColumnMapping(base_ArmorColumn, biotaPropertiesBodyPart.FindProperty("BaseArmor")!, biota_properties_body_partTableMapping);
            RelationalModel.CreateColumnMapping(d_TypeColumn, biotaPropertiesBodyPart.FindProperty("DType")!, biota_properties_body_partTableMapping);
            RelationalModel.CreateColumnMapping(d_ValColumn, biotaPropertiesBodyPart.FindProperty("DVal")!, biota_properties_body_partTableMapping);
            RelationalModel.CreateColumnMapping(d_VarColumn, biotaPropertiesBodyPart.FindProperty("DVar")!, biota_properties_body_partTableMapping);
            RelationalModel.CreateColumnMapping(h_l_bColumn, biotaPropertiesBodyPart.FindProperty("HLB")!, biota_properties_body_partTableMapping);
            RelationalModel.CreateColumnMapping(h_l_fColumn, biotaPropertiesBodyPart.FindProperty("HLF")!, biota_properties_body_partTableMapping);
            RelationalModel.CreateColumnMapping(h_r_bColumn, biotaPropertiesBodyPart.FindProperty("HRB")!, biota_properties_body_partTableMapping);
            RelationalModel.CreateColumnMapping(h_r_fColumn, biotaPropertiesBodyPart.FindProperty("HRF")!, biota_properties_body_partTableMapping);
            RelationalModel.CreateColumnMapping(keyColumn, biotaPropertiesBodyPart.FindProperty("Key")!, biota_properties_body_partTableMapping);
            RelationalModel.CreateColumnMapping(l_l_bColumn, biotaPropertiesBodyPart.FindProperty("LLB")!, biota_properties_body_partTableMapping);
            RelationalModel.CreateColumnMapping(l_l_fColumn, biotaPropertiesBodyPart.FindProperty("LLF")!, biota_properties_body_partTableMapping);
            RelationalModel.CreateColumnMapping(l_r_bColumn, biotaPropertiesBodyPart.FindProperty("LRB")!, biota_properties_body_partTableMapping);
            RelationalModel.CreateColumnMapping(l_r_fColumn, biotaPropertiesBodyPart.FindProperty("LRF")!, biota_properties_body_partTableMapping);
            RelationalModel.CreateColumnMapping(m_l_bColumn, biotaPropertiesBodyPart.FindProperty("MLB")!, biota_properties_body_partTableMapping);
            RelationalModel.CreateColumnMapping(m_l_fColumn, biotaPropertiesBodyPart.FindProperty("MLF")!, biota_properties_body_partTableMapping);
            RelationalModel.CreateColumnMapping(m_r_bColumn, biotaPropertiesBodyPart.FindProperty("MRB")!, biota_properties_body_partTableMapping);
            RelationalModel.CreateColumnMapping(m_r_fColumn, biotaPropertiesBodyPart.FindProperty("MRF")!, biota_properties_body_partTableMapping);
            RelationalModel.CreateColumnMapping(object_IdColumn2, biotaPropertiesBodyPart.FindProperty("ObjectId")!, biota_properties_body_partTableMapping);

            var biotaPropertiesBook = FindEntityType("ACE.Database.Models.Shard.BiotaPropertiesBook")!;

            var defaultTableMappings5 = new List<TableMappingBase<ColumnMappingBase>>();
            biotaPropertiesBook.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings5);
            var aCEDatabaseModelsShardBiotaPropertiesBookTableBase = new TableBase("ACE.Database.Models.Shard.BiotaPropertiesBook", null, relationalModel);
            var max_Num_Chars_Per_PageColumnBase = new ColumnBase<ColumnMappingBase>("max_Num_Chars_Per_Page", "int", aCEDatabaseModelsShardBiotaPropertiesBookTableBase);
            aCEDatabaseModelsShardBiotaPropertiesBookTableBase.Columns.Add("max_Num_Chars_Per_Page", max_Num_Chars_Per_PageColumnBase);
            var max_Num_PagesColumnBase = new ColumnBase<ColumnMappingBase>("max_Num_Pages", "int", aCEDatabaseModelsShardBiotaPropertiesBookTableBase);
            aCEDatabaseModelsShardBiotaPropertiesBookTableBase.Columns.Add("max_Num_Pages", max_Num_PagesColumnBase);
            var object_IdColumnBase3 = new ColumnBase<ColumnMappingBase>("object_Id", "bigint unsigned", aCEDatabaseModelsShardBiotaPropertiesBookTableBase);
            aCEDatabaseModelsShardBiotaPropertiesBookTableBase.Columns.Add("object_Id", object_IdColumnBase3);
            relationalModel.DefaultTables.Add("ACE.Database.Models.Shard.BiotaPropertiesBook", aCEDatabaseModelsShardBiotaPropertiesBookTableBase);
            var aCEDatabaseModelsShardBiotaPropertiesBookMappingBase = new TableMappingBase<ColumnMappingBase>(biotaPropertiesBook, aCEDatabaseModelsShardBiotaPropertiesBookTableBase, true);
            aCEDatabaseModelsShardBiotaPropertiesBookTableBase.AddTypeMapping(aCEDatabaseModelsShardBiotaPropertiesBookMappingBase, false);
            defaultTableMappings5.Add(aCEDatabaseModelsShardBiotaPropertiesBookMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)object_IdColumnBase3, biotaPropertiesBook.FindProperty("ObjectId")!, aCEDatabaseModelsShardBiotaPropertiesBookMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)max_Num_Chars_Per_PageColumnBase, biotaPropertiesBook.FindProperty("MaxNumCharsPerPage")!, aCEDatabaseModelsShardBiotaPropertiesBookMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)max_Num_PagesColumnBase, biotaPropertiesBook.FindProperty("MaxNumPages")!, aCEDatabaseModelsShardBiotaPropertiesBookMappingBase);

            var tableMappings5 = new List<TableMapping>();
            biotaPropertiesBook.SetRuntimeAnnotation("Relational:TableMappings", tableMappings5);
            var biota_properties_bookTable = new Table("biota_properties_book", null, relationalModel);
            var object_IdColumn3 = new Column("object_Id", "bigint unsigned", biota_properties_bookTable);
            biota_properties_bookTable.Columns.Add("object_Id", object_IdColumn3);
            var max_Num_Chars_Per_PageColumn = new Column("max_Num_Chars_Per_Page", "int", biota_properties_bookTable);
            biota_properties_bookTable.Columns.Add("max_Num_Chars_Per_Page", max_Num_Chars_Per_PageColumn);
            var max_Num_PagesColumn = new Column("max_Num_Pages", "int", biota_properties_bookTable);
            biota_properties_bookTable.Columns.Add("max_Num_Pages", max_Num_PagesColumn);
            var pRIMARY5 = new UniqueConstraint("PRIMARY", biota_properties_bookTable, new[] { object_IdColumn3 });
            biota_properties_bookTable.PrimaryKey = pRIMARY5;
            var pRIMARY5Uc = RelationalModel.GetKey(this,
                "ACE.Database.Models.Shard.BiotaPropertiesBook",
                new[] { "ObjectId" });
            pRIMARY5.MappedKeys.Add(pRIMARY5Uc);
            RelationalModel.GetOrCreateUniqueConstraints(pRIMARY5Uc).Add(pRIMARY5);
            biota_properties_bookTable.UniqueConstraints.Add("PRIMARY", pRIMARY5);
            relationalModel.Tables.Add(("biota_properties_book", null), biota_properties_bookTable);
            var biota_properties_bookTableMapping = new TableMapping(biotaPropertiesBook, biota_properties_bookTable, true);
            biota_properties_bookTable.AddTypeMapping(biota_properties_bookTableMapping, false);
            tableMappings5.Add(biota_properties_bookTableMapping);
            RelationalModel.CreateColumnMapping(object_IdColumn3, biotaPropertiesBook.FindProperty("ObjectId")!, biota_properties_bookTableMapping);
            RelationalModel.CreateColumnMapping(max_Num_Chars_Per_PageColumn, biotaPropertiesBook.FindProperty("MaxNumCharsPerPage")!, biota_properties_bookTableMapping);
            RelationalModel.CreateColumnMapping(max_Num_PagesColumn, biotaPropertiesBook.FindProperty("MaxNumPages")!, biota_properties_bookTableMapping);

            var biotaPropertiesBookPageData = FindEntityType("ACE.Database.Models.Shard.BiotaPropertiesBookPageData")!;

            var defaultTableMappings6 = new List<TableMappingBase<ColumnMappingBase>>();
            biotaPropertiesBookPageData.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings6);
            var aCEDatabaseModelsShardBiotaPropertiesBookPageDataTableBase = new TableBase("ACE.Database.Models.Shard.BiotaPropertiesBookPageData", null, relationalModel);
            var author_AccountColumnBase = new ColumnBase<ColumnMappingBase>("author_Account", "varchar(255)", aCEDatabaseModelsShardBiotaPropertiesBookPageDataTableBase);
            aCEDatabaseModelsShardBiotaPropertiesBookPageDataTableBase.Columns.Add("author_Account", author_AccountColumnBase);
            var author_IdColumnBase = new ColumnBase<ColumnMappingBase>("author_Id", "bigint unsigned", aCEDatabaseModelsShardBiotaPropertiesBookPageDataTableBase);
            aCEDatabaseModelsShardBiotaPropertiesBookPageDataTableBase.Columns.Add("author_Id", author_IdColumnBase);
            var author_NameColumnBase = new ColumnBase<ColumnMappingBase>("author_Name", "varchar(255)", aCEDatabaseModelsShardBiotaPropertiesBookPageDataTableBase);
            aCEDatabaseModelsShardBiotaPropertiesBookPageDataTableBase.Columns.Add("author_Name", author_NameColumnBase);
            var idColumnBase2 = new ColumnBase<ColumnMappingBase>("id", "int unsigned", aCEDatabaseModelsShardBiotaPropertiesBookPageDataTableBase);
            aCEDatabaseModelsShardBiotaPropertiesBookPageDataTableBase.Columns.Add("id", idColumnBase2);
            var ignore_AuthorColumnBase = new ColumnBase<ColumnMappingBase>("ignore_Author", "bit(1)", aCEDatabaseModelsShardBiotaPropertiesBookPageDataTableBase);
            aCEDatabaseModelsShardBiotaPropertiesBookPageDataTableBase.Columns.Add("ignore_Author", ignore_AuthorColumnBase);
            var object_IdColumnBase4 = new ColumnBase<ColumnMappingBase>("object_Id", "bigint unsigned", aCEDatabaseModelsShardBiotaPropertiesBookPageDataTableBase);
            aCEDatabaseModelsShardBiotaPropertiesBookPageDataTableBase.Columns.Add("object_Id", object_IdColumnBase4);
            var page_IdColumnBase = new ColumnBase<ColumnMappingBase>("page_Id", "int unsigned", aCEDatabaseModelsShardBiotaPropertiesBookPageDataTableBase);
            aCEDatabaseModelsShardBiotaPropertiesBookPageDataTableBase.Columns.Add("page_Id", page_IdColumnBase);
            var page_TextColumnBase = new ColumnBase<ColumnMappingBase>("page_Text", "text", aCEDatabaseModelsShardBiotaPropertiesBookPageDataTableBase);
            aCEDatabaseModelsShardBiotaPropertiesBookPageDataTableBase.Columns.Add("page_Text", page_TextColumnBase);
            relationalModel.DefaultTables.Add("ACE.Database.Models.Shard.BiotaPropertiesBookPageData", aCEDatabaseModelsShardBiotaPropertiesBookPageDataTableBase);
            var aCEDatabaseModelsShardBiotaPropertiesBookPageDataMappingBase = new TableMappingBase<ColumnMappingBase>(biotaPropertiesBookPageData, aCEDatabaseModelsShardBiotaPropertiesBookPageDataTableBase, true);
            aCEDatabaseModelsShardBiotaPropertiesBookPageDataTableBase.AddTypeMapping(aCEDatabaseModelsShardBiotaPropertiesBookPageDataMappingBase, false);
            defaultTableMappings6.Add(aCEDatabaseModelsShardBiotaPropertiesBookPageDataMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase2, biotaPropertiesBookPageData.FindProperty("Id")!, aCEDatabaseModelsShardBiotaPropertiesBookPageDataMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)author_AccountColumnBase, biotaPropertiesBookPageData.FindProperty("AuthorAccount")!, aCEDatabaseModelsShardBiotaPropertiesBookPageDataMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)author_IdColumnBase, biotaPropertiesBookPageData.FindProperty("AuthorId")!, aCEDatabaseModelsShardBiotaPropertiesBookPageDataMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)author_NameColumnBase, biotaPropertiesBookPageData.FindProperty("AuthorName")!, aCEDatabaseModelsShardBiotaPropertiesBookPageDataMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)ignore_AuthorColumnBase, biotaPropertiesBookPageData.FindProperty("IgnoreAuthor")!, aCEDatabaseModelsShardBiotaPropertiesBookPageDataMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)object_IdColumnBase4, biotaPropertiesBookPageData.FindProperty("ObjectId")!, aCEDatabaseModelsShardBiotaPropertiesBookPageDataMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)page_IdColumnBase, biotaPropertiesBookPageData.FindProperty("PageId")!, aCEDatabaseModelsShardBiotaPropertiesBookPageDataMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)page_TextColumnBase, biotaPropertiesBookPageData.FindProperty("PageText")!, aCEDatabaseModelsShardBiotaPropertiesBookPageDataMappingBase);

            var tableMappings6 = new List<TableMapping>();
            biotaPropertiesBookPageData.SetRuntimeAnnotation("Relational:TableMappings", tableMappings6);
            var biota_properties_book_page_dataTable = new Table("biota_properties_book_page_data", null, relationalModel);
            var idColumn2 = new Column("id", "int unsigned", biota_properties_book_page_dataTable);
            biota_properties_book_page_dataTable.Columns.Add("id", idColumn2);
            var author_AccountColumn = new Column("author_Account", "varchar(255)", biota_properties_book_page_dataTable);
            biota_properties_book_page_dataTable.Columns.Add("author_Account", author_AccountColumn);
            var author_IdColumn = new Column("author_Id", "bigint unsigned", biota_properties_book_page_dataTable);
            biota_properties_book_page_dataTable.Columns.Add("author_Id", author_IdColumn);
            var author_NameColumn = new Column("author_Name", "varchar(255)", biota_properties_book_page_dataTable);
            biota_properties_book_page_dataTable.Columns.Add("author_Name", author_NameColumn);
            var ignore_AuthorColumn = new Column("ignore_Author", "bit(1)", biota_properties_book_page_dataTable);
            biota_properties_book_page_dataTable.Columns.Add("ignore_Author", ignore_AuthorColumn);
            var object_IdColumn4 = new Column("object_Id", "bigint unsigned", biota_properties_book_page_dataTable);
            biota_properties_book_page_dataTable.Columns.Add("object_Id", object_IdColumn4);
            var page_IdColumn = new Column("page_Id", "int unsigned", biota_properties_book_page_dataTable);
            biota_properties_book_page_dataTable.Columns.Add("page_Id", page_IdColumn);
            var page_TextColumn = new Column("page_Text", "text", biota_properties_book_page_dataTable);
            biota_properties_book_page_dataTable.Columns.Add("page_Text", page_TextColumn);
            var pRIMARY6 = new UniqueConstraint("PRIMARY", biota_properties_book_page_dataTable, new[] { idColumn2 });
            biota_properties_book_page_dataTable.PrimaryKey = pRIMARY6;
            var pRIMARY6Uc = RelationalModel.GetKey(this,
                "ACE.Database.Models.Shard.BiotaPropertiesBookPageData",
                new[] { "Id" });
            pRIMARY6.MappedKeys.Add(pRIMARY6Uc);
            RelationalModel.GetOrCreateUniqueConstraints(pRIMARY6Uc).Add(pRIMARY6);
            biota_properties_book_page_dataTable.UniqueConstraints.Add("PRIMARY", pRIMARY6);
            var wcid_pageid_uidx = new TableIndex(
            "wcid_pageid_uidx", biota_properties_book_page_dataTable, new[] { object_IdColumn4, page_IdColumn }, true);
            var wcid_pageid_uidxIx = RelationalModel.GetIndex(this,
                "ACE.Database.Models.Shard.BiotaPropertiesBookPageData",
                "wcid_pageid_uidx");
            wcid_pageid_uidx.MappedIndexes.Add(wcid_pageid_uidxIx);
            RelationalModel.GetOrCreateTableIndexes(wcid_pageid_uidxIx).Add(wcid_pageid_uidx);
            biota_properties_book_page_dataTable.Indexes.Add("wcid_pageid_uidx", wcid_pageid_uidx);
            relationalModel.Tables.Add(("biota_properties_book_page_data", null), biota_properties_book_page_dataTable);
            var biota_properties_book_page_dataTableMapping = new TableMapping(biotaPropertiesBookPageData, biota_properties_book_page_dataTable, true);
            biota_properties_book_page_dataTable.AddTypeMapping(biota_properties_book_page_dataTableMapping, false);
            tableMappings6.Add(biota_properties_book_page_dataTableMapping);
            RelationalModel.CreateColumnMapping(idColumn2, biotaPropertiesBookPageData.FindProperty("Id")!, biota_properties_book_page_dataTableMapping);
            RelationalModel.CreateColumnMapping(author_AccountColumn, biotaPropertiesBookPageData.FindProperty("AuthorAccount")!, biota_properties_book_page_dataTableMapping);
            RelationalModel.CreateColumnMapping(author_IdColumn, biotaPropertiesBookPageData.FindProperty("AuthorId")!, biota_properties_book_page_dataTableMapping);
            RelationalModel.CreateColumnMapping(author_NameColumn, biotaPropertiesBookPageData.FindProperty("AuthorName")!, biota_properties_book_page_dataTableMapping);
            RelationalModel.CreateColumnMapping(ignore_AuthorColumn, biotaPropertiesBookPageData.FindProperty("IgnoreAuthor")!, biota_properties_book_page_dataTableMapping);
            RelationalModel.CreateColumnMapping(object_IdColumn4, biotaPropertiesBookPageData.FindProperty("ObjectId")!, biota_properties_book_page_dataTableMapping);
            RelationalModel.CreateColumnMapping(page_IdColumn, biotaPropertiesBookPageData.FindProperty("PageId")!, biota_properties_book_page_dataTableMapping);
            RelationalModel.CreateColumnMapping(page_TextColumn, biotaPropertiesBookPageData.FindProperty("PageText")!, biota_properties_book_page_dataTableMapping);

            var biotaPropertiesBool = FindEntityType("ACE.Database.Models.Shard.BiotaPropertiesBool")!;

            var defaultTableMappings7 = new List<TableMappingBase<ColumnMappingBase>>();
            biotaPropertiesBool.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings7);
            var aCEDatabaseModelsShardBiotaPropertiesBoolTableBase = new TableBase("ACE.Database.Models.Shard.BiotaPropertiesBool", null, relationalModel);
            var object_IdColumnBase5 = new ColumnBase<ColumnMappingBase>("object_Id", "bigint unsigned", aCEDatabaseModelsShardBiotaPropertiesBoolTableBase);
            aCEDatabaseModelsShardBiotaPropertiesBoolTableBase.Columns.Add("object_Id", object_IdColumnBase5);
            var typeColumnBase1 = new ColumnBase<ColumnMappingBase>("type", "smallint unsigned", aCEDatabaseModelsShardBiotaPropertiesBoolTableBase);
            aCEDatabaseModelsShardBiotaPropertiesBoolTableBase.Columns.Add("type", typeColumnBase1);
            var valueColumnBase = new ColumnBase<ColumnMappingBase>("value", "bit(1)", aCEDatabaseModelsShardBiotaPropertiesBoolTableBase);
            aCEDatabaseModelsShardBiotaPropertiesBoolTableBase.Columns.Add("value", valueColumnBase);
            relationalModel.DefaultTables.Add("ACE.Database.Models.Shard.BiotaPropertiesBool", aCEDatabaseModelsShardBiotaPropertiesBoolTableBase);
            var aCEDatabaseModelsShardBiotaPropertiesBoolMappingBase = new TableMappingBase<ColumnMappingBase>(biotaPropertiesBool, aCEDatabaseModelsShardBiotaPropertiesBoolTableBase, true);
            aCEDatabaseModelsShardBiotaPropertiesBoolTableBase.AddTypeMapping(aCEDatabaseModelsShardBiotaPropertiesBoolMappingBase, false);
            defaultTableMappings7.Add(aCEDatabaseModelsShardBiotaPropertiesBoolMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)object_IdColumnBase5, biotaPropertiesBool.FindProperty("ObjectId")!, aCEDatabaseModelsShardBiotaPropertiesBoolMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)typeColumnBase1, biotaPropertiesBool.FindProperty("Type")!, aCEDatabaseModelsShardBiotaPropertiesBoolMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)valueColumnBase, biotaPropertiesBool.FindProperty("Value")!, aCEDatabaseModelsShardBiotaPropertiesBoolMappingBase);

            var tableMappings7 = new List<TableMapping>();
            biotaPropertiesBool.SetRuntimeAnnotation("Relational:TableMappings", tableMappings7);
            var biota_properties_boolTable = new Table("biota_properties_bool", null, relationalModel);
            var object_IdColumn5 = new Column("object_Id", "bigint unsigned", biota_properties_boolTable);
            biota_properties_boolTable.Columns.Add("object_Id", object_IdColumn5);
            var typeColumn1 = new Column("type", "smallint unsigned", biota_properties_boolTable);
            biota_properties_boolTable.Columns.Add("type", typeColumn1);
            var valueColumn = new Column("value", "bit(1)", biota_properties_boolTable);
            biota_properties_boolTable.Columns.Add("value", valueColumn);
            var pRIMARY7 = new UniqueConstraint("PRIMARY", biota_properties_boolTable, new[] { object_IdColumn5, typeColumn1 });
            biota_properties_boolTable.PrimaryKey = pRIMARY7;
            pRIMARY7.AddAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });
            var pRIMARY7Uc = RelationalModel.GetKey(this,
                "ACE.Database.Models.Shard.BiotaPropertiesBool",
                new[] { "ObjectId", "Type" });
            pRIMARY7.MappedKeys.Add(pRIMARY7Uc);
            RelationalModel.GetOrCreateUniqueConstraints(pRIMARY7Uc).Add(pRIMARY7);
            biota_properties_boolTable.UniqueConstraints.Add("PRIMARY", pRIMARY7);
            relationalModel.Tables.Add(("biota_properties_bool", null), biota_properties_boolTable);
            var biota_properties_boolTableMapping = new TableMapping(biotaPropertiesBool, biota_properties_boolTable, true);
            biota_properties_boolTable.AddTypeMapping(biota_properties_boolTableMapping, false);
            tableMappings7.Add(biota_properties_boolTableMapping);
            RelationalModel.CreateColumnMapping(object_IdColumn5, biotaPropertiesBool.FindProperty("ObjectId")!, biota_properties_boolTableMapping);
            RelationalModel.CreateColumnMapping(typeColumn1, biotaPropertiesBool.FindProperty("Type")!, biota_properties_boolTableMapping);
            RelationalModel.CreateColumnMapping(valueColumn, biotaPropertiesBool.FindProperty("Value")!, biota_properties_boolTableMapping);

            var biotaPropertiesCreateList = FindEntityType("ACE.Database.Models.Shard.BiotaPropertiesCreateList")!;

            var defaultTableMappings8 = new List<TableMappingBase<ColumnMappingBase>>();
            biotaPropertiesCreateList.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings8);
            var aCEDatabaseModelsShardBiotaPropertiesCreateListTableBase = new TableBase("ACE.Database.Models.Shard.BiotaPropertiesCreateList", null, relationalModel);
            var destination_TypeColumnBase = new ColumnBase<ColumnMappingBase>("destination_Type", "tinyint", aCEDatabaseModelsShardBiotaPropertiesCreateListTableBase);
            aCEDatabaseModelsShardBiotaPropertiesCreateListTableBase.Columns.Add("destination_Type", destination_TypeColumnBase);
            var idColumnBase3 = new ColumnBase<ColumnMappingBase>("id", "int unsigned", aCEDatabaseModelsShardBiotaPropertiesCreateListTableBase);
            aCEDatabaseModelsShardBiotaPropertiesCreateListTableBase.Columns.Add("id", idColumnBase3);
            var object_IdColumnBase6 = new ColumnBase<ColumnMappingBase>("object_Id", "bigint unsigned", aCEDatabaseModelsShardBiotaPropertiesCreateListTableBase);
            aCEDatabaseModelsShardBiotaPropertiesCreateListTableBase.Columns.Add("object_Id", object_IdColumnBase6);
            var paletteColumnBase = new ColumnBase<ColumnMappingBase>("palette", "tinyint", aCEDatabaseModelsShardBiotaPropertiesCreateListTableBase);
            aCEDatabaseModelsShardBiotaPropertiesCreateListTableBase.Columns.Add("palette", paletteColumnBase);
            var shadeColumnBase = new ColumnBase<ColumnMappingBase>("shade", "float", aCEDatabaseModelsShardBiotaPropertiesCreateListTableBase);
            aCEDatabaseModelsShardBiotaPropertiesCreateListTableBase.Columns.Add("shade", shadeColumnBase);
            var stack_SizeColumnBase = new ColumnBase<ColumnMappingBase>("stack_Size", "int", aCEDatabaseModelsShardBiotaPropertiesCreateListTableBase);
            aCEDatabaseModelsShardBiotaPropertiesCreateListTableBase.Columns.Add("stack_Size", stack_SizeColumnBase);
            var try_To_BondColumnBase = new ColumnBase<ColumnMappingBase>("try_To_Bond", "bit(1)", aCEDatabaseModelsShardBiotaPropertiesCreateListTableBase);
            aCEDatabaseModelsShardBiotaPropertiesCreateListTableBase.Columns.Add("try_To_Bond", try_To_BondColumnBase);
            var weenie_Class_IdColumnBase0 = new ColumnBase<ColumnMappingBase>("weenie_Class_Id", "int unsigned", aCEDatabaseModelsShardBiotaPropertiesCreateListTableBase);
            aCEDatabaseModelsShardBiotaPropertiesCreateListTableBase.Columns.Add("weenie_Class_Id", weenie_Class_IdColumnBase0);
            relationalModel.DefaultTables.Add("ACE.Database.Models.Shard.BiotaPropertiesCreateList", aCEDatabaseModelsShardBiotaPropertiesCreateListTableBase);
            var aCEDatabaseModelsShardBiotaPropertiesCreateListMappingBase = new TableMappingBase<ColumnMappingBase>(biotaPropertiesCreateList, aCEDatabaseModelsShardBiotaPropertiesCreateListTableBase, true);
            aCEDatabaseModelsShardBiotaPropertiesCreateListTableBase.AddTypeMapping(aCEDatabaseModelsShardBiotaPropertiesCreateListMappingBase, false);
            defaultTableMappings8.Add(aCEDatabaseModelsShardBiotaPropertiesCreateListMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase3, biotaPropertiesCreateList.FindProperty("Id")!, aCEDatabaseModelsShardBiotaPropertiesCreateListMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)destination_TypeColumnBase, biotaPropertiesCreateList.FindProperty("DestinationType")!, aCEDatabaseModelsShardBiotaPropertiesCreateListMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)object_IdColumnBase6, biotaPropertiesCreateList.FindProperty("ObjectId")!, aCEDatabaseModelsShardBiotaPropertiesCreateListMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)paletteColumnBase, biotaPropertiesCreateList.FindProperty("Palette")!, aCEDatabaseModelsShardBiotaPropertiesCreateListMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)shadeColumnBase, biotaPropertiesCreateList.FindProperty("Shade")!, aCEDatabaseModelsShardBiotaPropertiesCreateListMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)stack_SizeColumnBase, biotaPropertiesCreateList.FindProperty("StackSize")!, aCEDatabaseModelsShardBiotaPropertiesCreateListMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)try_To_BondColumnBase, biotaPropertiesCreateList.FindProperty("TryToBond")!, aCEDatabaseModelsShardBiotaPropertiesCreateListMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)weenie_Class_IdColumnBase0, biotaPropertiesCreateList.FindProperty("WeenieClassId")!, aCEDatabaseModelsShardBiotaPropertiesCreateListMappingBase);

            var tableMappings8 = new List<TableMapping>();
            biotaPropertiesCreateList.SetRuntimeAnnotation("Relational:TableMappings", tableMappings8);
            var biota_properties_create_listTable = new Table("biota_properties_create_list", null, relationalModel);
            var idColumn3 = new Column("id", "int unsigned", biota_properties_create_listTable);
            biota_properties_create_listTable.Columns.Add("id", idColumn3);
            var destination_TypeColumn = new Column("destination_Type", "tinyint", biota_properties_create_listTable);
            biota_properties_create_listTable.Columns.Add("destination_Type", destination_TypeColumn);
            var object_IdColumn6 = new Column("object_Id", "bigint unsigned", biota_properties_create_listTable);
            biota_properties_create_listTable.Columns.Add("object_Id", object_IdColumn6);
            var paletteColumn = new Column("palette", "tinyint", biota_properties_create_listTable);
            biota_properties_create_listTable.Columns.Add("palette", paletteColumn);
            var shadeColumn = new Column("shade", "float", biota_properties_create_listTable);
            biota_properties_create_listTable.Columns.Add("shade", shadeColumn);
            var stack_SizeColumn = new Column("stack_Size", "int", biota_properties_create_listTable);
            biota_properties_create_listTable.Columns.Add("stack_Size", stack_SizeColumn);
            var try_To_BondColumn = new Column("try_To_Bond", "bit(1)", biota_properties_create_listTable);
            biota_properties_create_listTable.Columns.Add("try_To_Bond", try_To_BondColumn);
            var weenie_Class_IdColumn0 = new Column("weenie_Class_Id", "int unsigned", biota_properties_create_listTable);
            biota_properties_create_listTable.Columns.Add("weenie_Class_Id", weenie_Class_IdColumn0);
            var pRIMARY8 = new UniqueConstraint("PRIMARY", biota_properties_create_listTable, new[] { idColumn3 });
            biota_properties_create_listTable.PrimaryKey = pRIMARY8;
            var pRIMARY8Uc = RelationalModel.GetKey(this,
                "ACE.Database.Models.Shard.BiotaPropertiesCreateList",
                new[] { "Id" });
            pRIMARY8.MappedKeys.Add(pRIMARY8Uc);
            RelationalModel.GetOrCreateUniqueConstraints(pRIMARY8Uc).Add(pRIMARY8);
            biota_properties_create_listTable.UniqueConstraints.Add("PRIMARY", pRIMARY8);
            var wcid_createlist = new TableIndex(
            "wcid_createlist", biota_properties_create_listTable, new[] { object_IdColumn6 }, false);
            var wcid_createlistIx = RelationalModel.GetIndex(this,
                "ACE.Database.Models.Shard.BiotaPropertiesCreateList",
                "wcid_createlist");
            wcid_createlist.MappedIndexes.Add(wcid_createlistIx);
            RelationalModel.GetOrCreateTableIndexes(wcid_createlistIx).Add(wcid_createlist);
            biota_properties_create_listTable.Indexes.Add("wcid_createlist", wcid_createlist);
            relationalModel.Tables.Add(("biota_properties_create_list", null), biota_properties_create_listTable);
            var biota_properties_create_listTableMapping = new TableMapping(biotaPropertiesCreateList, biota_properties_create_listTable, true);
            biota_properties_create_listTable.AddTypeMapping(biota_properties_create_listTableMapping, false);
            tableMappings8.Add(biota_properties_create_listTableMapping);
            RelationalModel.CreateColumnMapping(idColumn3, biotaPropertiesCreateList.FindProperty("Id")!, biota_properties_create_listTableMapping);
            RelationalModel.CreateColumnMapping(destination_TypeColumn, biotaPropertiesCreateList.FindProperty("DestinationType")!, biota_properties_create_listTableMapping);
            RelationalModel.CreateColumnMapping(object_IdColumn6, biotaPropertiesCreateList.FindProperty("ObjectId")!, biota_properties_create_listTableMapping);
            RelationalModel.CreateColumnMapping(paletteColumn, biotaPropertiesCreateList.FindProperty("Palette")!, biota_properties_create_listTableMapping);
            RelationalModel.CreateColumnMapping(shadeColumn, biotaPropertiesCreateList.FindProperty("Shade")!, biota_properties_create_listTableMapping);
            RelationalModel.CreateColumnMapping(stack_SizeColumn, biotaPropertiesCreateList.FindProperty("StackSize")!, biota_properties_create_listTableMapping);
            RelationalModel.CreateColumnMapping(try_To_BondColumn, biotaPropertiesCreateList.FindProperty("TryToBond")!, biota_properties_create_listTableMapping);
            RelationalModel.CreateColumnMapping(weenie_Class_IdColumn0, biotaPropertiesCreateList.FindProperty("WeenieClassId")!, biota_properties_create_listTableMapping);

            var biotaPropertiesDID = FindEntityType("ACE.Database.Models.Shard.BiotaPropertiesDID")!;

            var defaultTableMappings9 = new List<TableMappingBase<ColumnMappingBase>>();
            biotaPropertiesDID.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings9);
            var aCEDatabaseModelsShardBiotaPropertiesDIDTableBase = new TableBase("ACE.Database.Models.Shard.BiotaPropertiesDID", null, relationalModel);
            var object_IdColumnBase7 = new ColumnBase<ColumnMappingBase>("object_Id", "bigint unsigned", aCEDatabaseModelsShardBiotaPropertiesDIDTableBase);
            aCEDatabaseModelsShardBiotaPropertiesDIDTableBase.Columns.Add("object_Id", object_IdColumnBase7);
            var typeColumnBase2 = new ColumnBase<ColumnMappingBase>("type", "smallint unsigned", aCEDatabaseModelsShardBiotaPropertiesDIDTableBase);
            aCEDatabaseModelsShardBiotaPropertiesDIDTableBase.Columns.Add("type", typeColumnBase2);
            var valueColumnBase0 = new ColumnBase<ColumnMappingBase>("value", "int unsigned", aCEDatabaseModelsShardBiotaPropertiesDIDTableBase);
            aCEDatabaseModelsShardBiotaPropertiesDIDTableBase.Columns.Add("value", valueColumnBase0);
            relationalModel.DefaultTables.Add("ACE.Database.Models.Shard.BiotaPropertiesDID", aCEDatabaseModelsShardBiotaPropertiesDIDTableBase);
            var aCEDatabaseModelsShardBiotaPropertiesDIDMappingBase = new TableMappingBase<ColumnMappingBase>(biotaPropertiesDID, aCEDatabaseModelsShardBiotaPropertiesDIDTableBase, true);
            aCEDatabaseModelsShardBiotaPropertiesDIDTableBase.AddTypeMapping(aCEDatabaseModelsShardBiotaPropertiesDIDMappingBase, false);
            defaultTableMappings9.Add(aCEDatabaseModelsShardBiotaPropertiesDIDMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)object_IdColumnBase7, biotaPropertiesDID.FindProperty("ObjectId")!, aCEDatabaseModelsShardBiotaPropertiesDIDMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)typeColumnBase2, biotaPropertiesDID.FindProperty("Type")!, aCEDatabaseModelsShardBiotaPropertiesDIDMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)valueColumnBase0, biotaPropertiesDID.FindProperty("Value")!, aCEDatabaseModelsShardBiotaPropertiesDIDMappingBase);

            var tableMappings9 = new List<TableMapping>();
            biotaPropertiesDID.SetRuntimeAnnotation("Relational:TableMappings", tableMappings9);
            var biota_properties_d_i_dTable = new Table("biota_properties_d_i_d", null, relationalModel);
            var object_IdColumn7 = new Column("object_Id", "bigint unsigned", biota_properties_d_i_dTable);
            biota_properties_d_i_dTable.Columns.Add("object_Id", object_IdColumn7);
            var typeColumn2 = new Column("type", "smallint unsigned", biota_properties_d_i_dTable);
            biota_properties_d_i_dTable.Columns.Add("type", typeColumn2);
            var valueColumn0 = new Column("value", "int unsigned", biota_properties_d_i_dTable);
            biota_properties_d_i_dTable.Columns.Add("value", valueColumn0);
            var pRIMARY9 = new UniqueConstraint("PRIMARY", biota_properties_d_i_dTable, new[] { object_IdColumn7, typeColumn2 });
            biota_properties_d_i_dTable.PrimaryKey = pRIMARY9;
            pRIMARY9.AddAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });
            var pRIMARY9Uc = RelationalModel.GetKey(this,
                "ACE.Database.Models.Shard.BiotaPropertiesDID",
                new[] { "ObjectId", "Type" });
            pRIMARY9.MappedKeys.Add(pRIMARY9Uc);
            RelationalModel.GetOrCreateUniqueConstraints(pRIMARY9Uc).Add(pRIMARY9);
            biota_properties_d_i_dTable.UniqueConstraints.Add("PRIMARY", pRIMARY9);
            relationalModel.Tables.Add(("biota_properties_d_i_d", null), biota_properties_d_i_dTable);
            var biota_properties_d_i_dTableMapping = new TableMapping(biotaPropertiesDID, biota_properties_d_i_dTable, true);
            biota_properties_d_i_dTable.AddTypeMapping(biota_properties_d_i_dTableMapping, false);
            tableMappings9.Add(biota_properties_d_i_dTableMapping);
            RelationalModel.CreateColumnMapping(object_IdColumn7, biotaPropertiesDID.FindProperty("ObjectId")!, biota_properties_d_i_dTableMapping);
            RelationalModel.CreateColumnMapping(typeColumn2, biotaPropertiesDID.FindProperty("Type")!, biota_properties_d_i_dTableMapping);
            RelationalModel.CreateColumnMapping(valueColumn0, biotaPropertiesDID.FindProperty("Value")!, biota_properties_d_i_dTableMapping);

            var biotaPropertiesEmote = FindEntityType("ACE.Database.Models.Shard.BiotaPropertiesEmote")!;

            var defaultTableMappings10 = new List<TableMappingBase<ColumnMappingBase>>();
            biotaPropertiesEmote.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings10);
            var aCEDatabaseModelsShardBiotaPropertiesEmoteTableBase = new TableBase("ACE.Database.Models.Shard.BiotaPropertiesEmote", null, relationalModel);
            var categoryColumnBase = new ColumnBase<ColumnMappingBase>("category", "int unsigned", aCEDatabaseModelsShardBiotaPropertiesEmoteTableBase);
            aCEDatabaseModelsShardBiotaPropertiesEmoteTableBase.Columns.Add("category", categoryColumnBase);
            var idColumnBase4 = new ColumnBase<ColumnMappingBase>("id", "int unsigned", aCEDatabaseModelsShardBiotaPropertiesEmoteTableBase);
            aCEDatabaseModelsShardBiotaPropertiesEmoteTableBase.Columns.Add("id", idColumnBase4);
            var max_HealthColumnBase = new ColumnBase<ColumnMappingBase>("max_Health", "float", aCEDatabaseModelsShardBiotaPropertiesEmoteTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsShardBiotaPropertiesEmoteTableBase.Columns.Add("max_Health", max_HealthColumnBase);
            var min_HealthColumnBase = new ColumnBase<ColumnMappingBase>("min_Health", "float", aCEDatabaseModelsShardBiotaPropertiesEmoteTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsShardBiotaPropertiesEmoteTableBase.Columns.Add("min_Health", min_HealthColumnBase);
            var object_IdColumnBase8 = new ColumnBase<ColumnMappingBase>("object_Id", "bigint unsigned", aCEDatabaseModelsShardBiotaPropertiesEmoteTableBase);
            aCEDatabaseModelsShardBiotaPropertiesEmoteTableBase.Columns.Add("object_Id", object_IdColumnBase8);
            var probabilityColumnBase = new ColumnBase<ColumnMappingBase>("probability", "float", aCEDatabaseModelsShardBiotaPropertiesEmoteTableBase);
            aCEDatabaseModelsShardBiotaPropertiesEmoteTableBase.Columns.Add("probability", probabilityColumnBase);
            var questColumnBase = new ColumnBase<ColumnMappingBase>("quest", "text", aCEDatabaseModelsShardBiotaPropertiesEmoteTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsShardBiotaPropertiesEmoteTableBase.Columns.Add("quest", questColumnBase);
            var styleColumnBase = new ColumnBase<ColumnMappingBase>("style", "int unsigned", aCEDatabaseModelsShardBiotaPropertiesEmoteTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsShardBiotaPropertiesEmoteTableBase.Columns.Add("style", styleColumnBase);
            var substyleColumnBase = new ColumnBase<ColumnMappingBase>("substyle", "int unsigned", aCEDatabaseModelsShardBiotaPropertiesEmoteTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsShardBiotaPropertiesEmoteTableBase.Columns.Add("substyle", substyleColumnBase);
            var vendor_TypeColumnBase = new ColumnBase<ColumnMappingBase>("vendor_Type", "int", aCEDatabaseModelsShardBiotaPropertiesEmoteTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsShardBiotaPropertiesEmoteTableBase.Columns.Add("vendor_Type", vendor_TypeColumnBase);
            var weenie_Class_IdColumnBase1 = new ColumnBase<ColumnMappingBase>("weenie_Class_Id", "int unsigned", aCEDatabaseModelsShardBiotaPropertiesEmoteTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsShardBiotaPropertiesEmoteTableBase.Columns.Add("weenie_Class_Id", weenie_Class_IdColumnBase1);
            relationalModel.DefaultTables.Add("ACE.Database.Models.Shard.BiotaPropertiesEmote", aCEDatabaseModelsShardBiotaPropertiesEmoteTableBase);
            var aCEDatabaseModelsShardBiotaPropertiesEmoteMappingBase = new TableMappingBase<ColumnMappingBase>(biotaPropertiesEmote, aCEDatabaseModelsShardBiotaPropertiesEmoteTableBase, true);
            aCEDatabaseModelsShardBiotaPropertiesEmoteTableBase.AddTypeMapping(aCEDatabaseModelsShardBiotaPropertiesEmoteMappingBase, false);
            defaultTableMappings10.Add(aCEDatabaseModelsShardBiotaPropertiesEmoteMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase4, biotaPropertiesEmote.FindProperty("Id")!, aCEDatabaseModelsShardBiotaPropertiesEmoteMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)categoryColumnBase, biotaPropertiesEmote.FindProperty("Category")!, aCEDatabaseModelsShardBiotaPropertiesEmoteMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)max_HealthColumnBase, biotaPropertiesEmote.FindProperty("MaxHealth")!, aCEDatabaseModelsShardBiotaPropertiesEmoteMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)min_HealthColumnBase, biotaPropertiesEmote.FindProperty("MinHealth")!, aCEDatabaseModelsShardBiotaPropertiesEmoteMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)object_IdColumnBase8, biotaPropertiesEmote.FindProperty("ObjectId")!, aCEDatabaseModelsShardBiotaPropertiesEmoteMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)probabilityColumnBase, biotaPropertiesEmote.FindProperty("Probability")!, aCEDatabaseModelsShardBiotaPropertiesEmoteMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)questColumnBase, biotaPropertiesEmote.FindProperty("Quest")!, aCEDatabaseModelsShardBiotaPropertiesEmoteMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)styleColumnBase, biotaPropertiesEmote.FindProperty("Style")!, aCEDatabaseModelsShardBiotaPropertiesEmoteMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)substyleColumnBase, biotaPropertiesEmote.FindProperty("Substyle")!, aCEDatabaseModelsShardBiotaPropertiesEmoteMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)vendor_TypeColumnBase, biotaPropertiesEmote.FindProperty("VendorType")!, aCEDatabaseModelsShardBiotaPropertiesEmoteMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)weenie_Class_IdColumnBase1, biotaPropertiesEmote.FindProperty("WeenieClassId")!, aCEDatabaseModelsShardBiotaPropertiesEmoteMappingBase);

            var tableMappings10 = new List<TableMapping>();
            biotaPropertiesEmote.SetRuntimeAnnotation("Relational:TableMappings", tableMappings10);
            var biota_properties_emoteTable = new Table("biota_properties_emote", null, relationalModel);
            var idColumn4 = new Column("id", "int unsigned", biota_properties_emoteTable);
            biota_properties_emoteTable.Columns.Add("id", idColumn4);
            var categoryColumn = new Column("category", "int unsigned", biota_properties_emoteTable);
            biota_properties_emoteTable.Columns.Add("category", categoryColumn);
            var max_HealthColumn = new Column("max_Health", "float", biota_properties_emoteTable)
            {
                IsNullable = true
            };
            biota_properties_emoteTable.Columns.Add("max_Health", max_HealthColumn);
            var min_HealthColumn = new Column("min_Health", "float", biota_properties_emoteTable)
            {
                IsNullable = true
            };
            biota_properties_emoteTable.Columns.Add("min_Health", min_HealthColumn);
            var object_IdColumn8 = new Column("object_Id", "bigint unsigned", biota_properties_emoteTable);
            biota_properties_emoteTable.Columns.Add("object_Id", object_IdColumn8);
            var probabilityColumn = new Column("probability", "float", biota_properties_emoteTable);
            biota_properties_emoteTable.Columns.Add("probability", probabilityColumn);
            var questColumn = new Column("quest", "text", biota_properties_emoteTable)
            {
                IsNullable = true
            };
            biota_properties_emoteTable.Columns.Add("quest", questColumn);
            var styleColumn = new Column("style", "int unsigned", biota_properties_emoteTable)
            {
                IsNullable = true
            };
            biota_properties_emoteTable.Columns.Add("style", styleColumn);
            var substyleColumn = new Column("substyle", "int unsigned", biota_properties_emoteTable)
            {
                IsNullable = true
            };
            biota_properties_emoteTable.Columns.Add("substyle", substyleColumn);
            var vendor_TypeColumn = new Column("vendor_Type", "int", biota_properties_emoteTable)
            {
                IsNullable = true
            };
            biota_properties_emoteTable.Columns.Add("vendor_Type", vendor_TypeColumn);
            var weenie_Class_IdColumn1 = new Column("weenie_Class_Id", "int unsigned", biota_properties_emoteTable)
            {
                IsNullable = true
            };
            biota_properties_emoteTable.Columns.Add("weenie_Class_Id", weenie_Class_IdColumn1);
            var pRIMARY10 = new UniqueConstraint("PRIMARY", biota_properties_emoteTable, new[] { idColumn4 });
            biota_properties_emoteTable.PrimaryKey = pRIMARY10;
            var pRIMARY10Uc = RelationalModel.GetKey(this,
                "ACE.Database.Models.Shard.BiotaPropertiesEmote",
                new[] { "Id" });
            pRIMARY10.MappedKeys.Add(pRIMARY10Uc);
            RelationalModel.GetOrCreateUniqueConstraints(pRIMARY10Uc).Add(pRIMARY10);
            biota_properties_emoteTable.UniqueConstraints.Add("PRIMARY", pRIMARY10);
            var wcid_emote = new TableIndex(
            "wcid_emote", biota_properties_emoteTable, new[] { object_IdColumn8 }, false);
            var wcid_emoteIx = RelationalModel.GetIndex(this,
                "ACE.Database.Models.Shard.BiotaPropertiesEmote",
                "wcid_emote");
            wcid_emote.MappedIndexes.Add(wcid_emoteIx);
            RelationalModel.GetOrCreateTableIndexes(wcid_emoteIx).Add(wcid_emote);
            biota_properties_emoteTable.Indexes.Add("wcid_emote", wcid_emote);
            relationalModel.Tables.Add(("biota_properties_emote", null), biota_properties_emoteTable);
            var biota_properties_emoteTableMapping = new TableMapping(biotaPropertiesEmote, biota_properties_emoteTable, true);
            biota_properties_emoteTable.AddTypeMapping(biota_properties_emoteTableMapping, false);
            tableMappings10.Add(biota_properties_emoteTableMapping);
            RelationalModel.CreateColumnMapping(idColumn4, biotaPropertiesEmote.FindProperty("Id")!, biota_properties_emoteTableMapping);
            RelationalModel.CreateColumnMapping(categoryColumn, biotaPropertiesEmote.FindProperty("Category")!, biota_properties_emoteTableMapping);
            RelationalModel.CreateColumnMapping(max_HealthColumn, biotaPropertiesEmote.FindProperty("MaxHealth")!, biota_properties_emoteTableMapping);
            RelationalModel.CreateColumnMapping(min_HealthColumn, biotaPropertiesEmote.FindProperty("MinHealth")!, biota_properties_emoteTableMapping);
            RelationalModel.CreateColumnMapping(object_IdColumn8, biotaPropertiesEmote.FindProperty("ObjectId")!, biota_properties_emoteTableMapping);
            RelationalModel.CreateColumnMapping(probabilityColumn, biotaPropertiesEmote.FindProperty("Probability")!, biota_properties_emoteTableMapping);
            RelationalModel.CreateColumnMapping(questColumn, biotaPropertiesEmote.FindProperty("Quest")!, biota_properties_emoteTableMapping);
            RelationalModel.CreateColumnMapping(styleColumn, biotaPropertiesEmote.FindProperty("Style")!, biota_properties_emoteTableMapping);
            RelationalModel.CreateColumnMapping(substyleColumn, biotaPropertiesEmote.FindProperty("Substyle")!, biota_properties_emoteTableMapping);
            RelationalModel.CreateColumnMapping(vendor_TypeColumn, biotaPropertiesEmote.FindProperty("VendorType")!, biota_properties_emoteTableMapping);
            RelationalModel.CreateColumnMapping(weenie_Class_IdColumn1, biotaPropertiesEmote.FindProperty("WeenieClassId")!, biota_properties_emoteTableMapping);

            var biotaPropertiesEmoteAction = FindEntityType("ACE.Database.Models.Shard.BiotaPropertiesEmoteAction")!;

            var defaultTableMappings11 = new List<TableMappingBase<ColumnMappingBase>>();
            biotaPropertiesEmoteAction.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings11);
            var aCEDatabaseModelsShardBiotaPropertiesEmoteActionTableBase = new TableBase("ACE.Database.Models.Shard.BiotaPropertiesEmoteAction", null, relationalModel);
            var idColumnBase5 = new ColumnBase<ColumnMappingBase>("Id", "bigint unsigned", aCEDatabaseModelsShardBiotaPropertiesEmoteActionTableBase);
            aCEDatabaseModelsShardBiotaPropertiesEmoteActionTableBase.Columns.Add("Id", idColumnBase5);
            var amountColumnBase = new ColumnBase<ColumnMappingBase>("amount", "int", aCEDatabaseModelsShardBiotaPropertiesEmoteActionTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsShardBiotaPropertiesEmoteActionTableBase.Columns.Add("amount", amountColumnBase);
            var amount_64ColumnBase = new ColumnBase<ColumnMappingBase>("amount_64", "bigint", aCEDatabaseModelsShardBiotaPropertiesEmoteActionTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsShardBiotaPropertiesEmoteActionTableBase.Columns.Add("amount_64", amount_64ColumnBase);
            var angles_WColumnBase = new ColumnBase<ColumnMappingBase>("angles_W", "float", aCEDatabaseModelsShardBiotaPropertiesEmoteActionTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsShardBiotaPropertiesEmoteActionTableBase.Columns.Add("angles_W", angles_WColumnBase);
            var angles_XColumnBase = new ColumnBase<ColumnMappingBase>("angles_X", "float", aCEDatabaseModelsShardBiotaPropertiesEmoteActionTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsShardBiotaPropertiesEmoteActionTableBase.Columns.Add("angles_X", angles_XColumnBase);
            var angles_YColumnBase = new ColumnBase<ColumnMappingBase>("angles_Y", "float", aCEDatabaseModelsShardBiotaPropertiesEmoteActionTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsShardBiotaPropertiesEmoteActionTableBase.Columns.Add("angles_Y", angles_YColumnBase);
            var angles_ZColumnBase = new ColumnBase<ColumnMappingBase>("angles_Z", "float", aCEDatabaseModelsShardBiotaPropertiesEmoteActionTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsShardBiotaPropertiesEmoteActionTableBase.Columns.Add("angles_Z", angles_ZColumnBase);
            var delayColumnBase = new ColumnBase<ColumnMappingBase>("delay", "float", aCEDatabaseModelsShardBiotaPropertiesEmoteActionTableBase);
            aCEDatabaseModelsShardBiotaPropertiesEmoteActionTableBase.Columns.Add("delay", delayColumnBase);
            var destination_TypeColumnBase0 = new ColumnBase<ColumnMappingBase>("destination_Type", "tinyint", aCEDatabaseModelsShardBiotaPropertiesEmoteActionTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsShardBiotaPropertiesEmoteActionTableBase.Columns.Add("destination_Type", destination_TypeColumnBase0);
            var displayColumnBase = new ColumnBase<ColumnMappingBase>("display", "bit(1)", aCEDatabaseModelsShardBiotaPropertiesEmoteActionTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsShardBiotaPropertiesEmoteActionTableBase.Columns.Add("display", displayColumnBase);
            var emote_IdColumnBase = new ColumnBase<ColumnMappingBase>("emote_Id", "int unsigned", aCEDatabaseModelsShardBiotaPropertiesEmoteActionTableBase);
            aCEDatabaseModelsShardBiotaPropertiesEmoteActionTableBase.Columns.Add("emote_Id", emote_IdColumnBase);
            var extentColumnBase = new ColumnBase<ColumnMappingBase>("extent", "float", aCEDatabaseModelsShardBiotaPropertiesEmoteActionTableBase);
            aCEDatabaseModelsShardBiotaPropertiesEmoteActionTableBase.Columns.Add("extent", extentColumnBase);
            var hero_X_P_64ColumnBase = new ColumnBase<ColumnMappingBase>("hero_X_P_64", "bigint", aCEDatabaseModelsShardBiotaPropertiesEmoteActionTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsShardBiotaPropertiesEmoteActionTableBase.Columns.Add("hero_X_P_64", hero_X_P_64ColumnBase);
            var maxColumnBase = new ColumnBase<ColumnMappingBase>("max", "int", aCEDatabaseModelsShardBiotaPropertiesEmoteActionTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsShardBiotaPropertiesEmoteActionTableBase.Columns.Add("max", maxColumnBase);
            var max_64ColumnBase = new ColumnBase<ColumnMappingBase>("max_64", "bigint", aCEDatabaseModelsShardBiotaPropertiesEmoteActionTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsShardBiotaPropertiesEmoteActionTableBase.Columns.Add("max_64", max_64ColumnBase);
            var max_DblColumnBase = new ColumnBase<ColumnMappingBase>("max_Dbl", "double", aCEDatabaseModelsShardBiotaPropertiesEmoteActionTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsShardBiotaPropertiesEmoteActionTableBase.Columns.Add("max_Dbl", max_DblColumnBase);
            var messageColumnBase = new ColumnBase<ColumnMappingBase>("message", "text", aCEDatabaseModelsShardBiotaPropertiesEmoteActionTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsShardBiotaPropertiesEmoteActionTableBase.Columns.Add("message", messageColumnBase);
            var minColumnBase = new ColumnBase<ColumnMappingBase>("min", "int", aCEDatabaseModelsShardBiotaPropertiesEmoteActionTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsShardBiotaPropertiesEmoteActionTableBase.Columns.Add("min", minColumnBase);
            var min_64ColumnBase = new ColumnBase<ColumnMappingBase>("min_64", "bigint", aCEDatabaseModelsShardBiotaPropertiesEmoteActionTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsShardBiotaPropertiesEmoteActionTableBase.Columns.Add("min_64", min_64ColumnBase);
            var min_DblColumnBase = new ColumnBase<ColumnMappingBase>("min_Dbl", "double", aCEDatabaseModelsShardBiotaPropertiesEmoteActionTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsShardBiotaPropertiesEmoteActionTableBase.Columns.Add("min_Dbl", min_DblColumnBase);
            var motionColumnBase = new ColumnBase<ColumnMappingBase>("motion", "int unsigned", aCEDatabaseModelsShardBiotaPropertiesEmoteActionTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsShardBiotaPropertiesEmoteActionTableBase.Columns.Add("motion", motionColumnBase);
            var obj_Cell_IdColumnBase = new ColumnBase<ColumnMappingBase>("obj_Cell_Id", "int unsigned", aCEDatabaseModelsShardBiotaPropertiesEmoteActionTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsShardBiotaPropertiesEmoteActionTableBase.Columns.Add("obj_Cell_Id", obj_Cell_IdColumnBase);
            var orderColumnBase0 = new ColumnBase<ColumnMappingBase>("order", "int unsigned", aCEDatabaseModelsShardBiotaPropertiesEmoteActionTableBase);
            aCEDatabaseModelsShardBiotaPropertiesEmoteActionTableBase.Columns.Add("order", orderColumnBase0);
            var origin_XColumnBase = new ColumnBase<ColumnMappingBase>("origin_X", "float", aCEDatabaseModelsShardBiotaPropertiesEmoteActionTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsShardBiotaPropertiesEmoteActionTableBase.Columns.Add("origin_X", origin_XColumnBase);
            var origin_YColumnBase = new ColumnBase<ColumnMappingBase>("origin_Y", "float", aCEDatabaseModelsShardBiotaPropertiesEmoteActionTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsShardBiotaPropertiesEmoteActionTableBase.Columns.Add("origin_Y", origin_YColumnBase);
            var origin_ZColumnBase = new ColumnBase<ColumnMappingBase>("origin_Z", "float", aCEDatabaseModelsShardBiotaPropertiesEmoteActionTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsShardBiotaPropertiesEmoteActionTableBase.Columns.Add("origin_Z", origin_ZColumnBase);
            var p_ScriptColumnBase = new ColumnBase<ColumnMappingBase>("p_Script", "int", aCEDatabaseModelsShardBiotaPropertiesEmoteActionTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsShardBiotaPropertiesEmoteActionTableBase.Columns.Add("p_Script", p_ScriptColumnBase);
            var paletteColumnBase0 = new ColumnBase<ColumnMappingBase>("palette", "int", aCEDatabaseModelsShardBiotaPropertiesEmoteActionTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsShardBiotaPropertiesEmoteActionTableBase.Columns.Add("palette", paletteColumnBase0);
            var percentColumnBase = new ColumnBase<ColumnMappingBase>("percent", "double", aCEDatabaseModelsShardBiotaPropertiesEmoteActionTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsShardBiotaPropertiesEmoteActionTableBase.Columns.Add("percent", percentColumnBase);
            var shadeColumnBase0 = new ColumnBase<ColumnMappingBase>("shade", "float", aCEDatabaseModelsShardBiotaPropertiesEmoteActionTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsShardBiotaPropertiesEmoteActionTableBase.Columns.Add("shade", shadeColumnBase0);
            var soundColumnBase = new ColumnBase<ColumnMappingBase>("sound", "int", aCEDatabaseModelsShardBiotaPropertiesEmoteActionTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsShardBiotaPropertiesEmoteActionTableBase.Columns.Add("sound", soundColumnBase);
            var spell_IdColumnBase = new ColumnBase<ColumnMappingBase>("spell_Id", "int", aCEDatabaseModelsShardBiotaPropertiesEmoteActionTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsShardBiotaPropertiesEmoteActionTableBase.Columns.Add("spell_Id", spell_IdColumnBase);
            var stack_SizeColumnBase0 = new ColumnBase<ColumnMappingBase>("stack_Size", "int", aCEDatabaseModelsShardBiotaPropertiesEmoteActionTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsShardBiotaPropertiesEmoteActionTableBase.Columns.Add("stack_Size", stack_SizeColumnBase0);
            var statColumnBase = new ColumnBase<ColumnMappingBase>("stat", "int", aCEDatabaseModelsShardBiotaPropertiesEmoteActionTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsShardBiotaPropertiesEmoteActionTableBase.Columns.Add("stat", statColumnBase);
            var test_StringColumnBase = new ColumnBase<ColumnMappingBase>("test_String", "text", aCEDatabaseModelsShardBiotaPropertiesEmoteActionTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsShardBiotaPropertiesEmoteActionTableBase.Columns.Add("test_String", test_StringColumnBase);
            var treasure_ClassColumnBase = new ColumnBase<ColumnMappingBase>("treasure_Class", "int", aCEDatabaseModelsShardBiotaPropertiesEmoteActionTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsShardBiotaPropertiesEmoteActionTableBase.Columns.Add("treasure_Class", treasure_ClassColumnBase);
            var treasure_TypeColumnBase = new ColumnBase<ColumnMappingBase>("treasure_Type", "int", aCEDatabaseModelsShardBiotaPropertiesEmoteActionTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsShardBiotaPropertiesEmoteActionTableBase.Columns.Add("treasure_Type", treasure_TypeColumnBase);
            var try_To_BondColumnBase0 = new ColumnBase<ColumnMappingBase>("try_To_Bond", "bit(1)", aCEDatabaseModelsShardBiotaPropertiesEmoteActionTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsShardBiotaPropertiesEmoteActionTableBase.Columns.Add("try_To_Bond", try_To_BondColumnBase0);
            var typeColumnBase3 = new ColumnBase<ColumnMappingBase>("type", "int unsigned", aCEDatabaseModelsShardBiotaPropertiesEmoteActionTableBase);
            aCEDatabaseModelsShardBiotaPropertiesEmoteActionTableBase.Columns.Add("type", typeColumnBase3);
            var wealth_RatingColumnBase = new ColumnBase<ColumnMappingBase>("wealth_Rating", "int", aCEDatabaseModelsShardBiotaPropertiesEmoteActionTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsShardBiotaPropertiesEmoteActionTableBase.Columns.Add("wealth_Rating", wealth_RatingColumnBase);
            var weenie_Class_IdColumnBase2 = new ColumnBase<ColumnMappingBase>("weenie_Class_Id", "int unsigned", aCEDatabaseModelsShardBiotaPropertiesEmoteActionTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsShardBiotaPropertiesEmoteActionTableBase.Columns.Add("weenie_Class_Id", weenie_Class_IdColumnBase2);
            relationalModel.DefaultTables.Add("ACE.Database.Models.Shard.BiotaPropertiesEmoteAction", aCEDatabaseModelsShardBiotaPropertiesEmoteActionTableBase);
            var aCEDatabaseModelsShardBiotaPropertiesEmoteActionMappingBase = new TableMappingBase<ColumnMappingBase>(biotaPropertiesEmoteAction, aCEDatabaseModelsShardBiotaPropertiesEmoteActionTableBase, true);
            aCEDatabaseModelsShardBiotaPropertiesEmoteActionTableBase.AddTypeMapping(aCEDatabaseModelsShardBiotaPropertiesEmoteActionMappingBase, false);
            defaultTableMappings11.Add(aCEDatabaseModelsShardBiotaPropertiesEmoteActionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase5, biotaPropertiesEmoteAction.FindProperty("Id")!, aCEDatabaseModelsShardBiotaPropertiesEmoteActionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)amountColumnBase, biotaPropertiesEmoteAction.FindProperty("Amount")!, aCEDatabaseModelsShardBiotaPropertiesEmoteActionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)amount_64ColumnBase, biotaPropertiesEmoteAction.FindProperty("Amount64")!, aCEDatabaseModelsShardBiotaPropertiesEmoteActionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)angles_WColumnBase, biotaPropertiesEmoteAction.FindProperty("AnglesW")!, aCEDatabaseModelsShardBiotaPropertiesEmoteActionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)angles_XColumnBase, biotaPropertiesEmoteAction.FindProperty("AnglesX")!, aCEDatabaseModelsShardBiotaPropertiesEmoteActionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)angles_YColumnBase, biotaPropertiesEmoteAction.FindProperty("AnglesY")!, aCEDatabaseModelsShardBiotaPropertiesEmoteActionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)angles_ZColumnBase, biotaPropertiesEmoteAction.FindProperty("AnglesZ")!, aCEDatabaseModelsShardBiotaPropertiesEmoteActionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)delayColumnBase, biotaPropertiesEmoteAction.FindProperty("Delay")!, aCEDatabaseModelsShardBiotaPropertiesEmoteActionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)destination_TypeColumnBase0, biotaPropertiesEmoteAction.FindProperty("DestinationType")!, aCEDatabaseModelsShardBiotaPropertiesEmoteActionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)displayColumnBase, biotaPropertiesEmoteAction.FindProperty("Display")!, aCEDatabaseModelsShardBiotaPropertiesEmoteActionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)emote_IdColumnBase, biotaPropertiesEmoteAction.FindProperty("EmoteId")!, aCEDatabaseModelsShardBiotaPropertiesEmoteActionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)extentColumnBase, biotaPropertiesEmoteAction.FindProperty("Extent")!, aCEDatabaseModelsShardBiotaPropertiesEmoteActionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)hero_X_P_64ColumnBase, biotaPropertiesEmoteAction.FindProperty("HeroXP64")!, aCEDatabaseModelsShardBiotaPropertiesEmoteActionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)maxColumnBase, biotaPropertiesEmoteAction.FindProperty("Max")!, aCEDatabaseModelsShardBiotaPropertiesEmoteActionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)max_64ColumnBase, biotaPropertiesEmoteAction.FindProperty("Max64")!, aCEDatabaseModelsShardBiotaPropertiesEmoteActionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)max_DblColumnBase, biotaPropertiesEmoteAction.FindProperty("MaxDbl")!, aCEDatabaseModelsShardBiotaPropertiesEmoteActionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)messageColumnBase, biotaPropertiesEmoteAction.FindProperty("Message")!, aCEDatabaseModelsShardBiotaPropertiesEmoteActionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)minColumnBase, biotaPropertiesEmoteAction.FindProperty("Min")!, aCEDatabaseModelsShardBiotaPropertiesEmoteActionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)min_64ColumnBase, biotaPropertiesEmoteAction.FindProperty("Min64")!, aCEDatabaseModelsShardBiotaPropertiesEmoteActionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)min_DblColumnBase, biotaPropertiesEmoteAction.FindProperty("MinDbl")!, aCEDatabaseModelsShardBiotaPropertiesEmoteActionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)motionColumnBase, biotaPropertiesEmoteAction.FindProperty("Motion")!, aCEDatabaseModelsShardBiotaPropertiesEmoteActionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)obj_Cell_IdColumnBase, biotaPropertiesEmoteAction.FindProperty("ObjCellId")!, aCEDatabaseModelsShardBiotaPropertiesEmoteActionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)orderColumnBase0, biotaPropertiesEmoteAction.FindProperty("Order")!, aCEDatabaseModelsShardBiotaPropertiesEmoteActionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)origin_XColumnBase, biotaPropertiesEmoteAction.FindProperty("OriginX")!, aCEDatabaseModelsShardBiotaPropertiesEmoteActionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)origin_YColumnBase, biotaPropertiesEmoteAction.FindProperty("OriginY")!, aCEDatabaseModelsShardBiotaPropertiesEmoteActionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)origin_ZColumnBase, biotaPropertiesEmoteAction.FindProperty("OriginZ")!, aCEDatabaseModelsShardBiotaPropertiesEmoteActionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)p_ScriptColumnBase, biotaPropertiesEmoteAction.FindProperty("PScript")!, aCEDatabaseModelsShardBiotaPropertiesEmoteActionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)paletteColumnBase0, biotaPropertiesEmoteAction.FindProperty("Palette")!, aCEDatabaseModelsShardBiotaPropertiesEmoteActionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)percentColumnBase, biotaPropertiesEmoteAction.FindProperty("Percent")!, aCEDatabaseModelsShardBiotaPropertiesEmoteActionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)shadeColumnBase0, biotaPropertiesEmoteAction.FindProperty("Shade")!, aCEDatabaseModelsShardBiotaPropertiesEmoteActionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)soundColumnBase, biotaPropertiesEmoteAction.FindProperty("Sound")!, aCEDatabaseModelsShardBiotaPropertiesEmoteActionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)spell_IdColumnBase, biotaPropertiesEmoteAction.FindProperty("SpellId")!, aCEDatabaseModelsShardBiotaPropertiesEmoteActionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)stack_SizeColumnBase0, biotaPropertiesEmoteAction.FindProperty("StackSize")!, aCEDatabaseModelsShardBiotaPropertiesEmoteActionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)statColumnBase, biotaPropertiesEmoteAction.FindProperty("Stat")!, aCEDatabaseModelsShardBiotaPropertiesEmoteActionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)test_StringColumnBase, biotaPropertiesEmoteAction.FindProperty("TestString")!, aCEDatabaseModelsShardBiotaPropertiesEmoteActionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)treasure_ClassColumnBase, biotaPropertiesEmoteAction.FindProperty("TreasureClass")!, aCEDatabaseModelsShardBiotaPropertiesEmoteActionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)treasure_TypeColumnBase, biotaPropertiesEmoteAction.FindProperty("TreasureType")!, aCEDatabaseModelsShardBiotaPropertiesEmoteActionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)try_To_BondColumnBase0, biotaPropertiesEmoteAction.FindProperty("TryToBond")!, aCEDatabaseModelsShardBiotaPropertiesEmoteActionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)typeColumnBase3, biotaPropertiesEmoteAction.FindProperty("Type")!, aCEDatabaseModelsShardBiotaPropertiesEmoteActionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)wealth_RatingColumnBase, biotaPropertiesEmoteAction.FindProperty("WealthRating")!, aCEDatabaseModelsShardBiotaPropertiesEmoteActionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)weenie_Class_IdColumnBase2, biotaPropertiesEmoteAction.FindProperty("WeenieClassId")!, aCEDatabaseModelsShardBiotaPropertiesEmoteActionMappingBase);

            var tableMappings11 = new List<TableMapping>();
            biotaPropertiesEmoteAction.SetRuntimeAnnotation("Relational:TableMappings", tableMappings11);
            var biota_properties_emote_actionTable = new Table("biota_properties_emote_action", null, relationalModel);
            var idColumn5 = new Column("Id", "bigint unsigned", biota_properties_emote_actionTable);
            biota_properties_emote_actionTable.Columns.Add("Id", idColumn5);
            var amountColumn = new Column("amount", "int", biota_properties_emote_actionTable)
            {
                IsNullable = true
            };
            biota_properties_emote_actionTable.Columns.Add("amount", amountColumn);
            var amount_64Column = new Column("amount_64", "bigint", biota_properties_emote_actionTable)
            {
                IsNullable = true
            };
            biota_properties_emote_actionTable.Columns.Add("amount_64", amount_64Column);
            var angles_WColumn = new Column("angles_W", "float", biota_properties_emote_actionTable)
            {
                IsNullable = true
            };
            biota_properties_emote_actionTable.Columns.Add("angles_W", angles_WColumn);
            var angles_XColumn = new Column("angles_X", "float", biota_properties_emote_actionTable)
            {
                IsNullable = true
            };
            biota_properties_emote_actionTable.Columns.Add("angles_X", angles_XColumn);
            var angles_YColumn = new Column("angles_Y", "float", biota_properties_emote_actionTable)
            {
                IsNullable = true
            };
            biota_properties_emote_actionTable.Columns.Add("angles_Y", angles_YColumn);
            var angles_ZColumn = new Column("angles_Z", "float", biota_properties_emote_actionTable)
            {
                IsNullable = true
            };
            biota_properties_emote_actionTable.Columns.Add("angles_Z", angles_ZColumn);
            var delayColumn = new Column("delay", "float", biota_properties_emote_actionTable);
            biota_properties_emote_actionTable.Columns.Add("delay", delayColumn);
            var destination_TypeColumn0 = new Column("destination_Type", "tinyint", biota_properties_emote_actionTable)
            {
                IsNullable = true
            };
            biota_properties_emote_actionTable.Columns.Add("destination_Type", destination_TypeColumn0);
            var displayColumn = new Column("display", "bit(1)", biota_properties_emote_actionTable)
            {
                IsNullable = true
            };
            biota_properties_emote_actionTable.Columns.Add("display", displayColumn);
            var emote_IdColumn = new Column("emote_Id", "int unsigned", biota_properties_emote_actionTable);
            biota_properties_emote_actionTable.Columns.Add("emote_Id", emote_IdColumn);
            var extentColumn = new Column("extent", "float", biota_properties_emote_actionTable);
            biota_properties_emote_actionTable.Columns.Add("extent", extentColumn);
            var hero_X_P_64Column = new Column("hero_X_P_64", "bigint", biota_properties_emote_actionTable)
            {
                IsNullable = true
            };
            biota_properties_emote_actionTable.Columns.Add("hero_X_P_64", hero_X_P_64Column);
            var maxColumn = new Column("max", "int", biota_properties_emote_actionTable)
            {
                IsNullable = true
            };
            biota_properties_emote_actionTable.Columns.Add("max", maxColumn);
            var max_64Column = new Column("max_64", "bigint", biota_properties_emote_actionTable)
            {
                IsNullable = true
            };
            biota_properties_emote_actionTable.Columns.Add("max_64", max_64Column);
            var max_DblColumn = new Column("max_Dbl", "double", biota_properties_emote_actionTable)
            {
                IsNullable = true
            };
            biota_properties_emote_actionTable.Columns.Add("max_Dbl", max_DblColumn);
            var messageColumn = new Column("message", "text", biota_properties_emote_actionTable)
            {
                IsNullable = true
            };
            biota_properties_emote_actionTable.Columns.Add("message", messageColumn);
            var minColumn = new Column("min", "int", biota_properties_emote_actionTable)
            {
                IsNullable = true
            };
            biota_properties_emote_actionTable.Columns.Add("min", minColumn);
            var min_64Column = new Column("min_64", "bigint", biota_properties_emote_actionTable)
            {
                IsNullable = true
            };
            biota_properties_emote_actionTable.Columns.Add("min_64", min_64Column);
            var min_DblColumn = new Column("min_Dbl", "double", biota_properties_emote_actionTable)
            {
                IsNullable = true
            };
            biota_properties_emote_actionTable.Columns.Add("min_Dbl", min_DblColumn);
            var motionColumn = new Column("motion", "int unsigned", biota_properties_emote_actionTable)
            {
                IsNullable = true
            };
            biota_properties_emote_actionTable.Columns.Add("motion", motionColumn);
            var obj_Cell_IdColumn = new Column("obj_Cell_Id", "int unsigned", biota_properties_emote_actionTable)
            {
                IsNullable = true
            };
            biota_properties_emote_actionTable.Columns.Add("obj_Cell_Id", obj_Cell_IdColumn);
            var orderColumn0 = new Column("order", "int unsigned", biota_properties_emote_actionTable);
            biota_properties_emote_actionTable.Columns.Add("order", orderColumn0);
            var origin_XColumn = new Column("origin_X", "float", biota_properties_emote_actionTable)
            {
                IsNullable = true
            };
            biota_properties_emote_actionTable.Columns.Add("origin_X", origin_XColumn);
            var origin_YColumn = new Column("origin_Y", "float", biota_properties_emote_actionTable)
            {
                IsNullable = true
            };
            biota_properties_emote_actionTable.Columns.Add("origin_Y", origin_YColumn);
            var origin_ZColumn = new Column("origin_Z", "float", biota_properties_emote_actionTable)
            {
                IsNullable = true
            };
            biota_properties_emote_actionTable.Columns.Add("origin_Z", origin_ZColumn);
            var p_ScriptColumn = new Column("p_Script", "int", biota_properties_emote_actionTable)
            {
                IsNullable = true
            };
            biota_properties_emote_actionTable.Columns.Add("p_Script", p_ScriptColumn);
            var paletteColumn0 = new Column("palette", "int", biota_properties_emote_actionTable)
            {
                IsNullable = true
            };
            biota_properties_emote_actionTable.Columns.Add("palette", paletteColumn0);
            var percentColumn = new Column("percent", "double", biota_properties_emote_actionTable)
            {
                IsNullable = true
            };
            biota_properties_emote_actionTable.Columns.Add("percent", percentColumn);
            var shadeColumn0 = new Column("shade", "float", biota_properties_emote_actionTable)
            {
                IsNullable = true
            };
            biota_properties_emote_actionTable.Columns.Add("shade", shadeColumn0);
            var soundColumn = new Column("sound", "int", biota_properties_emote_actionTable)
            {
                IsNullable = true
            };
            biota_properties_emote_actionTable.Columns.Add("sound", soundColumn);
            var spell_IdColumn = new Column("spell_Id", "int", biota_properties_emote_actionTable)
            {
                IsNullable = true
            };
            biota_properties_emote_actionTable.Columns.Add("spell_Id", spell_IdColumn);
            var stack_SizeColumn0 = new Column("stack_Size", "int", biota_properties_emote_actionTable)
            {
                IsNullable = true
            };
            biota_properties_emote_actionTable.Columns.Add("stack_Size", stack_SizeColumn0);
            var statColumn = new Column("stat", "int", biota_properties_emote_actionTable)
            {
                IsNullable = true
            };
            biota_properties_emote_actionTable.Columns.Add("stat", statColumn);
            var test_StringColumn = new Column("test_String", "text", biota_properties_emote_actionTable)
            {
                IsNullable = true
            };
            biota_properties_emote_actionTable.Columns.Add("test_String", test_StringColumn);
            var treasure_ClassColumn = new Column("treasure_Class", "int", biota_properties_emote_actionTable)
            {
                IsNullable = true
            };
            biota_properties_emote_actionTable.Columns.Add("treasure_Class", treasure_ClassColumn);
            var treasure_TypeColumn = new Column("treasure_Type", "int", biota_properties_emote_actionTable)
            {
                IsNullable = true
            };
            biota_properties_emote_actionTable.Columns.Add("treasure_Type", treasure_TypeColumn);
            var try_To_BondColumn0 = new Column("try_To_Bond", "bit(1)", biota_properties_emote_actionTable)
            {
                IsNullable = true
            };
            biota_properties_emote_actionTable.Columns.Add("try_To_Bond", try_To_BondColumn0);
            var typeColumn3 = new Column("type", "int unsigned", biota_properties_emote_actionTable);
            biota_properties_emote_actionTable.Columns.Add("type", typeColumn3);
            var wealth_RatingColumn = new Column("wealth_Rating", "int", biota_properties_emote_actionTable)
            {
                IsNullable = true
            };
            biota_properties_emote_actionTable.Columns.Add("wealth_Rating", wealth_RatingColumn);
            var weenie_Class_IdColumn2 = new Column("weenie_Class_Id", "int unsigned", biota_properties_emote_actionTable)
            {
                IsNullable = true
            };
            biota_properties_emote_actionTable.Columns.Add("weenie_Class_Id", weenie_Class_IdColumn2);
            var pRIMARY11 = new UniqueConstraint("PRIMARY", biota_properties_emote_actionTable, new[] { idColumn5 });
            biota_properties_emote_actionTable.PrimaryKey = pRIMARY11;
            var pRIMARY11Uc = RelationalModel.GetKey(this,
                "ACE.Database.Models.Shard.BiotaPropertiesEmoteAction",
                new[] { "Id" });
            pRIMARY11.MappedKeys.Add(pRIMARY11Uc);
            RelationalModel.GetOrCreateUniqueConstraints(pRIMARY11Uc).Add(pRIMARY11);
            biota_properties_emote_actionTable.UniqueConstraints.Add("PRIMARY", pRIMARY11);
            var wcid_category_set_order_uidx = new TableIndex(
            "wcid_category_set_order_uidx", biota_properties_emote_actionTable, new[] { emote_IdColumn, orderColumn0 }, true);
            var wcid_category_set_order_uidxIx = RelationalModel.GetIndex(this,
                "ACE.Database.Models.Shard.BiotaPropertiesEmoteAction",
                "wcid_category_set_order_uidx");
            wcid_category_set_order_uidx.MappedIndexes.Add(wcid_category_set_order_uidxIx);
            RelationalModel.GetOrCreateTableIndexes(wcid_category_set_order_uidxIx).Add(wcid_category_set_order_uidx);
            biota_properties_emote_actionTable.Indexes.Add("wcid_category_set_order_uidx", wcid_category_set_order_uidx);
            relationalModel.Tables.Add(("biota_properties_emote_action", null), biota_properties_emote_actionTable);
            var biota_properties_emote_actionTableMapping = new TableMapping(biotaPropertiesEmoteAction, biota_properties_emote_actionTable, true);
            biota_properties_emote_actionTable.AddTypeMapping(biota_properties_emote_actionTableMapping, false);
            tableMappings11.Add(biota_properties_emote_actionTableMapping);
            RelationalModel.CreateColumnMapping(idColumn5, biotaPropertiesEmoteAction.FindProperty("Id")!, biota_properties_emote_actionTableMapping);
            RelationalModel.CreateColumnMapping(amountColumn, biotaPropertiesEmoteAction.FindProperty("Amount")!, biota_properties_emote_actionTableMapping);
            RelationalModel.CreateColumnMapping(amount_64Column, biotaPropertiesEmoteAction.FindProperty("Amount64")!, biota_properties_emote_actionTableMapping);
            RelationalModel.CreateColumnMapping(angles_WColumn, biotaPropertiesEmoteAction.FindProperty("AnglesW")!, biota_properties_emote_actionTableMapping);
            RelationalModel.CreateColumnMapping(angles_XColumn, biotaPropertiesEmoteAction.FindProperty("AnglesX")!, biota_properties_emote_actionTableMapping);
            RelationalModel.CreateColumnMapping(angles_YColumn, biotaPropertiesEmoteAction.FindProperty("AnglesY")!, biota_properties_emote_actionTableMapping);
            RelationalModel.CreateColumnMapping(angles_ZColumn, biotaPropertiesEmoteAction.FindProperty("AnglesZ")!, biota_properties_emote_actionTableMapping);
            RelationalModel.CreateColumnMapping(delayColumn, biotaPropertiesEmoteAction.FindProperty("Delay")!, biota_properties_emote_actionTableMapping);
            RelationalModel.CreateColumnMapping(destination_TypeColumn0, biotaPropertiesEmoteAction.FindProperty("DestinationType")!, biota_properties_emote_actionTableMapping);
            RelationalModel.CreateColumnMapping(displayColumn, biotaPropertiesEmoteAction.FindProperty("Display")!, biota_properties_emote_actionTableMapping);
            RelationalModel.CreateColumnMapping(emote_IdColumn, biotaPropertiesEmoteAction.FindProperty("EmoteId")!, biota_properties_emote_actionTableMapping);
            RelationalModel.CreateColumnMapping(extentColumn, biotaPropertiesEmoteAction.FindProperty("Extent")!, biota_properties_emote_actionTableMapping);
            RelationalModel.CreateColumnMapping(hero_X_P_64Column, biotaPropertiesEmoteAction.FindProperty("HeroXP64")!, biota_properties_emote_actionTableMapping);
            RelationalModel.CreateColumnMapping(maxColumn, biotaPropertiesEmoteAction.FindProperty("Max")!, biota_properties_emote_actionTableMapping);
            RelationalModel.CreateColumnMapping(max_64Column, biotaPropertiesEmoteAction.FindProperty("Max64")!, biota_properties_emote_actionTableMapping);
            RelationalModel.CreateColumnMapping(max_DblColumn, biotaPropertiesEmoteAction.FindProperty("MaxDbl")!, biota_properties_emote_actionTableMapping);
            RelationalModel.CreateColumnMapping(messageColumn, biotaPropertiesEmoteAction.FindProperty("Message")!, biota_properties_emote_actionTableMapping);
            RelationalModel.CreateColumnMapping(minColumn, biotaPropertiesEmoteAction.FindProperty("Min")!, biota_properties_emote_actionTableMapping);
            RelationalModel.CreateColumnMapping(min_64Column, biotaPropertiesEmoteAction.FindProperty("Min64")!, biota_properties_emote_actionTableMapping);
            RelationalModel.CreateColumnMapping(min_DblColumn, biotaPropertiesEmoteAction.FindProperty("MinDbl")!, biota_properties_emote_actionTableMapping);
            RelationalModel.CreateColumnMapping(motionColumn, biotaPropertiesEmoteAction.FindProperty("Motion")!, biota_properties_emote_actionTableMapping);
            RelationalModel.CreateColumnMapping(obj_Cell_IdColumn, biotaPropertiesEmoteAction.FindProperty("ObjCellId")!, biota_properties_emote_actionTableMapping);
            RelationalModel.CreateColumnMapping(orderColumn0, biotaPropertiesEmoteAction.FindProperty("Order")!, biota_properties_emote_actionTableMapping);
            RelationalModel.CreateColumnMapping(origin_XColumn, biotaPropertiesEmoteAction.FindProperty("OriginX")!, biota_properties_emote_actionTableMapping);
            RelationalModel.CreateColumnMapping(origin_YColumn, biotaPropertiesEmoteAction.FindProperty("OriginY")!, biota_properties_emote_actionTableMapping);
            RelationalModel.CreateColumnMapping(origin_ZColumn, biotaPropertiesEmoteAction.FindProperty("OriginZ")!, biota_properties_emote_actionTableMapping);
            RelationalModel.CreateColumnMapping(p_ScriptColumn, biotaPropertiesEmoteAction.FindProperty("PScript")!, biota_properties_emote_actionTableMapping);
            RelationalModel.CreateColumnMapping(paletteColumn0, biotaPropertiesEmoteAction.FindProperty("Palette")!, biota_properties_emote_actionTableMapping);
            RelationalModel.CreateColumnMapping(percentColumn, biotaPropertiesEmoteAction.FindProperty("Percent")!, biota_properties_emote_actionTableMapping);
            RelationalModel.CreateColumnMapping(shadeColumn0, biotaPropertiesEmoteAction.FindProperty("Shade")!, biota_properties_emote_actionTableMapping);
            RelationalModel.CreateColumnMapping(soundColumn, biotaPropertiesEmoteAction.FindProperty("Sound")!, biota_properties_emote_actionTableMapping);
            RelationalModel.CreateColumnMapping(spell_IdColumn, biotaPropertiesEmoteAction.FindProperty("SpellId")!, biota_properties_emote_actionTableMapping);
            RelationalModel.CreateColumnMapping(stack_SizeColumn0, biotaPropertiesEmoteAction.FindProperty("StackSize")!, biota_properties_emote_actionTableMapping);
            RelationalModel.CreateColumnMapping(statColumn, biotaPropertiesEmoteAction.FindProperty("Stat")!, biota_properties_emote_actionTableMapping);
            RelationalModel.CreateColumnMapping(test_StringColumn, biotaPropertiesEmoteAction.FindProperty("TestString")!, biota_properties_emote_actionTableMapping);
            RelationalModel.CreateColumnMapping(treasure_ClassColumn, biotaPropertiesEmoteAction.FindProperty("TreasureClass")!, biota_properties_emote_actionTableMapping);
            RelationalModel.CreateColumnMapping(treasure_TypeColumn, biotaPropertiesEmoteAction.FindProperty("TreasureType")!, biota_properties_emote_actionTableMapping);
            RelationalModel.CreateColumnMapping(try_To_BondColumn0, biotaPropertiesEmoteAction.FindProperty("TryToBond")!, biota_properties_emote_actionTableMapping);
            RelationalModel.CreateColumnMapping(typeColumn3, biotaPropertiesEmoteAction.FindProperty("Type")!, biota_properties_emote_actionTableMapping);
            RelationalModel.CreateColumnMapping(wealth_RatingColumn, biotaPropertiesEmoteAction.FindProperty("WealthRating")!, biota_properties_emote_actionTableMapping);
            RelationalModel.CreateColumnMapping(weenie_Class_IdColumn2, biotaPropertiesEmoteAction.FindProperty("WeenieClassId")!, biota_properties_emote_actionTableMapping);

            var biotaPropertiesEnchantmentRegistry = FindEntityType("ACE.Database.Models.Shard.BiotaPropertiesEnchantmentRegistry")!;

            var defaultTableMappings12 = new List<TableMappingBase<ColumnMappingBase>>();
            biotaPropertiesEnchantmentRegistry.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings12);
            var aCEDatabaseModelsShardBiotaPropertiesEnchantmentRegistryTableBase = new TableBase("ACE.Database.Models.Shard.BiotaPropertiesEnchantmentRegistry", null, relationalModel);
            var caster_Object_IdColumnBase = new ColumnBase<ColumnMappingBase>("caster_Object_Id", "bigint unsigned", aCEDatabaseModelsShardBiotaPropertiesEnchantmentRegistryTableBase);
            aCEDatabaseModelsShardBiotaPropertiesEnchantmentRegistryTableBase.Columns.Add("caster_Object_Id", caster_Object_IdColumnBase);
            var degrade_LimitColumnBase = new ColumnBase<ColumnMappingBase>("degrade_Limit", "float", aCEDatabaseModelsShardBiotaPropertiesEnchantmentRegistryTableBase);
            aCEDatabaseModelsShardBiotaPropertiesEnchantmentRegistryTableBase.Columns.Add("degrade_Limit", degrade_LimitColumnBase);
            var degrade_ModifierColumnBase = new ColumnBase<ColumnMappingBase>("degrade_Modifier", "float", aCEDatabaseModelsShardBiotaPropertiesEnchantmentRegistryTableBase);
            aCEDatabaseModelsShardBiotaPropertiesEnchantmentRegistryTableBase.Columns.Add("degrade_Modifier", degrade_ModifierColumnBase);
            var durationColumnBase = new ColumnBase<ColumnMappingBase>("duration", "double", aCEDatabaseModelsShardBiotaPropertiesEnchantmentRegistryTableBase);
            aCEDatabaseModelsShardBiotaPropertiesEnchantmentRegistryTableBase.Columns.Add("duration", durationColumnBase);
            var enchantment_CategoryColumnBase = new ColumnBase<ColumnMappingBase>("enchantment_Category", "int unsigned", aCEDatabaseModelsShardBiotaPropertiesEnchantmentRegistryTableBase);
            aCEDatabaseModelsShardBiotaPropertiesEnchantmentRegistryTableBase.Columns.Add("enchantment_Category", enchantment_CategoryColumnBase);
            var has_Spell_Set_IdColumnBase = new ColumnBase<ColumnMappingBase>("has_Spell_Set_Id", "bit(1)", aCEDatabaseModelsShardBiotaPropertiesEnchantmentRegistryTableBase);
            aCEDatabaseModelsShardBiotaPropertiesEnchantmentRegistryTableBase.Columns.Add("has_Spell_Set_Id", has_Spell_Set_IdColumnBase);
            var last_Time_DegradedColumnBase = new ColumnBase<ColumnMappingBase>("last_Time_Degraded", "double", aCEDatabaseModelsShardBiotaPropertiesEnchantmentRegistryTableBase);
            aCEDatabaseModelsShardBiotaPropertiesEnchantmentRegistryTableBase.Columns.Add("last_Time_Degraded", last_Time_DegradedColumnBase);
            var layer_IdColumnBase = new ColumnBase<ColumnMappingBase>("layer_Id", "smallint unsigned", aCEDatabaseModelsShardBiotaPropertiesEnchantmentRegistryTableBase);
            aCEDatabaseModelsShardBiotaPropertiesEnchantmentRegistryTableBase.Columns.Add("layer_Id", layer_IdColumnBase);
            var object_IdColumnBase9 = new ColumnBase<ColumnMappingBase>("object_Id", "bigint unsigned", aCEDatabaseModelsShardBiotaPropertiesEnchantmentRegistryTableBase);
            aCEDatabaseModelsShardBiotaPropertiesEnchantmentRegistryTableBase.Columns.Add("object_Id", object_IdColumnBase9);
            var power_LevelColumnBase = new ColumnBase<ColumnMappingBase>("power_Level", "int unsigned", aCEDatabaseModelsShardBiotaPropertiesEnchantmentRegistryTableBase);
            aCEDatabaseModelsShardBiotaPropertiesEnchantmentRegistryTableBase.Columns.Add("power_Level", power_LevelColumnBase);
            var spell_CategoryColumnBase = new ColumnBase<ColumnMappingBase>("spell_Category", "smallint unsigned", aCEDatabaseModelsShardBiotaPropertiesEnchantmentRegistryTableBase);
            aCEDatabaseModelsShardBiotaPropertiesEnchantmentRegistryTableBase.Columns.Add("spell_Category", spell_CategoryColumnBase);
            var spell_IdColumnBase0 = new ColumnBase<ColumnMappingBase>("spell_Id", "int", aCEDatabaseModelsShardBiotaPropertiesEnchantmentRegistryTableBase);
            aCEDatabaseModelsShardBiotaPropertiesEnchantmentRegistryTableBase.Columns.Add("spell_Id", spell_IdColumnBase0);
            var spell_Set_IdColumnBase = new ColumnBase<ColumnMappingBase>("spell_Set_Id", "int unsigned", aCEDatabaseModelsShardBiotaPropertiesEnchantmentRegistryTableBase);
            aCEDatabaseModelsShardBiotaPropertiesEnchantmentRegistryTableBase.Columns.Add("spell_Set_Id", spell_Set_IdColumnBase);
            var start_TimeColumnBase = new ColumnBase<ColumnMappingBase>("start_Time", "double", aCEDatabaseModelsShardBiotaPropertiesEnchantmentRegistryTableBase);
            aCEDatabaseModelsShardBiotaPropertiesEnchantmentRegistryTableBase.Columns.Add("start_Time", start_TimeColumnBase);
            var stat_Mod_KeyColumnBase = new ColumnBase<ColumnMappingBase>("stat_Mod_Key", "int unsigned", aCEDatabaseModelsShardBiotaPropertiesEnchantmentRegistryTableBase);
            aCEDatabaseModelsShardBiotaPropertiesEnchantmentRegistryTableBase.Columns.Add("stat_Mod_Key", stat_Mod_KeyColumnBase);
            var stat_Mod_TypeColumnBase = new ColumnBase<ColumnMappingBase>("stat_Mod_Type", "int unsigned", aCEDatabaseModelsShardBiotaPropertiesEnchantmentRegistryTableBase);
            aCEDatabaseModelsShardBiotaPropertiesEnchantmentRegistryTableBase.Columns.Add("stat_Mod_Type", stat_Mod_TypeColumnBase);
            var stat_Mod_ValueColumnBase = new ColumnBase<ColumnMappingBase>("stat_Mod_Value", "float", aCEDatabaseModelsShardBiotaPropertiesEnchantmentRegistryTableBase);
            aCEDatabaseModelsShardBiotaPropertiesEnchantmentRegistryTableBase.Columns.Add("stat_Mod_Value", stat_Mod_ValueColumnBase);
            relationalModel.DefaultTables.Add("ACE.Database.Models.Shard.BiotaPropertiesEnchantmentRegistry", aCEDatabaseModelsShardBiotaPropertiesEnchantmentRegistryTableBase);
            var aCEDatabaseModelsShardBiotaPropertiesEnchantmentRegistryMappingBase = new TableMappingBase<ColumnMappingBase>(biotaPropertiesEnchantmentRegistry, aCEDatabaseModelsShardBiotaPropertiesEnchantmentRegistryTableBase, true);
            aCEDatabaseModelsShardBiotaPropertiesEnchantmentRegistryTableBase.AddTypeMapping(aCEDatabaseModelsShardBiotaPropertiesEnchantmentRegistryMappingBase, false);
            defaultTableMappings12.Add(aCEDatabaseModelsShardBiotaPropertiesEnchantmentRegistryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)caster_Object_IdColumnBase, biotaPropertiesEnchantmentRegistry.FindProperty("CasterObjectId")!, aCEDatabaseModelsShardBiotaPropertiesEnchantmentRegistryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)layer_IdColumnBase, biotaPropertiesEnchantmentRegistry.FindProperty("LayerId")!, aCEDatabaseModelsShardBiotaPropertiesEnchantmentRegistryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)object_IdColumnBase9, biotaPropertiesEnchantmentRegistry.FindProperty("ObjectId")!, aCEDatabaseModelsShardBiotaPropertiesEnchantmentRegistryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)spell_IdColumnBase0, biotaPropertiesEnchantmentRegistry.FindProperty("SpellId")!, aCEDatabaseModelsShardBiotaPropertiesEnchantmentRegistryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)degrade_LimitColumnBase, biotaPropertiesEnchantmentRegistry.FindProperty("DegradeLimit")!, aCEDatabaseModelsShardBiotaPropertiesEnchantmentRegistryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)degrade_ModifierColumnBase, biotaPropertiesEnchantmentRegistry.FindProperty("DegradeModifier")!, aCEDatabaseModelsShardBiotaPropertiesEnchantmentRegistryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)durationColumnBase, biotaPropertiesEnchantmentRegistry.FindProperty("Duration")!, aCEDatabaseModelsShardBiotaPropertiesEnchantmentRegistryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)enchantment_CategoryColumnBase, biotaPropertiesEnchantmentRegistry.FindProperty("EnchantmentCategory")!, aCEDatabaseModelsShardBiotaPropertiesEnchantmentRegistryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)has_Spell_Set_IdColumnBase, biotaPropertiesEnchantmentRegistry.FindProperty("HasSpellSetId")!, aCEDatabaseModelsShardBiotaPropertiesEnchantmentRegistryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)last_Time_DegradedColumnBase, biotaPropertiesEnchantmentRegistry.FindProperty("LastTimeDegraded")!, aCEDatabaseModelsShardBiotaPropertiesEnchantmentRegistryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)power_LevelColumnBase, biotaPropertiesEnchantmentRegistry.FindProperty("PowerLevel")!, aCEDatabaseModelsShardBiotaPropertiesEnchantmentRegistryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)spell_CategoryColumnBase, biotaPropertiesEnchantmentRegistry.FindProperty("SpellCategory")!, aCEDatabaseModelsShardBiotaPropertiesEnchantmentRegistryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)spell_Set_IdColumnBase, biotaPropertiesEnchantmentRegistry.FindProperty("SpellSetId")!, aCEDatabaseModelsShardBiotaPropertiesEnchantmentRegistryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)start_TimeColumnBase, biotaPropertiesEnchantmentRegistry.FindProperty("StartTime")!, aCEDatabaseModelsShardBiotaPropertiesEnchantmentRegistryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)stat_Mod_KeyColumnBase, biotaPropertiesEnchantmentRegistry.FindProperty("StatModKey")!, aCEDatabaseModelsShardBiotaPropertiesEnchantmentRegistryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)stat_Mod_TypeColumnBase, biotaPropertiesEnchantmentRegistry.FindProperty("StatModType")!, aCEDatabaseModelsShardBiotaPropertiesEnchantmentRegistryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)stat_Mod_ValueColumnBase, biotaPropertiesEnchantmentRegistry.FindProperty("StatModValue")!, aCEDatabaseModelsShardBiotaPropertiesEnchantmentRegistryMappingBase);

            var tableMappings12 = new List<TableMapping>();
            biotaPropertiesEnchantmentRegistry.SetRuntimeAnnotation("Relational:TableMappings", tableMappings12);
            var biota_properties_enchantment_registryTable = new Table("biota_properties_enchantment_registry", null, relationalModel);
            var object_IdColumn9 = new Column("object_Id", "bigint unsigned", biota_properties_enchantment_registryTable);
            biota_properties_enchantment_registryTable.Columns.Add("object_Id", object_IdColumn9);
            var spell_IdColumn0 = new Column("spell_Id", "int", biota_properties_enchantment_registryTable);
            biota_properties_enchantment_registryTable.Columns.Add("spell_Id", spell_IdColumn0);
            var caster_Object_IdColumn = new Column("caster_Object_Id", "bigint unsigned", biota_properties_enchantment_registryTable);
            biota_properties_enchantment_registryTable.Columns.Add("caster_Object_Id", caster_Object_IdColumn);
            var layer_IdColumn = new Column("layer_Id", "smallint unsigned", biota_properties_enchantment_registryTable);
            biota_properties_enchantment_registryTable.Columns.Add("layer_Id", layer_IdColumn);
            var degrade_LimitColumn = new Column("degrade_Limit", "float", biota_properties_enchantment_registryTable);
            biota_properties_enchantment_registryTable.Columns.Add("degrade_Limit", degrade_LimitColumn);
            var degrade_ModifierColumn = new Column("degrade_Modifier", "float", biota_properties_enchantment_registryTable);
            biota_properties_enchantment_registryTable.Columns.Add("degrade_Modifier", degrade_ModifierColumn);
            var durationColumn = new Column("duration", "double", biota_properties_enchantment_registryTable);
            biota_properties_enchantment_registryTable.Columns.Add("duration", durationColumn);
            var enchantment_CategoryColumn = new Column("enchantment_Category", "int unsigned", biota_properties_enchantment_registryTable);
            biota_properties_enchantment_registryTable.Columns.Add("enchantment_Category", enchantment_CategoryColumn);
            var has_Spell_Set_IdColumn = new Column("has_Spell_Set_Id", "bit(1)", biota_properties_enchantment_registryTable);
            biota_properties_enchantment_registryTable.Columns.Add("has_Spell_Set_Id", has_Spell_Set_IdColumn);
            var last_Time_DegradedColumn = new Column("last_Time_Degraded", "double", biota_properties_enchantment_registryTable);
            biota_properties_enchantment_registryTable.Columns.Add("last_Time_Degraded", last_Time_DegradedColumn);
            var power_LevelColumn = new Column("power_Level", "int unsigned", biota_properties_enchantment_registryTable);
            biota_properties_enchantment_registryTable.Columns.Add("power_Level", power_LevelColumn);
            var spell_CategoryColumn = new Column("spell_Category", "smallint unsigned", biota_properties_enchantment_registryTable);
            biota_properties_enchantment_registryTable.Columns.Add("spell_Category", spell_CategoryColumn);
            var spell_Set_IdColumn = new Column("spell_Set_Id", "int unsigned", biota_properties_enchantment_registryTable);
            biota_properties_enchantment_registryTable.Columns.Add("spell_Set_Id", spell_Set_IdColumn);
            var start_TimeColumn = new Column("start_Time", "double", biota_properties_enchantment_registryTable);
            biota_properties_enchantment_registryTable.Columns.Add("start_Time", start_TimeColumn);
            var stat_Mod_KeyColumn = new Column("stat_Mod_Key", "int unsigned", biota_properties_enchantment_registryTable);
            biota_properties_enchantment_registryTable.Columns.Add("stat_Mod_Key", stat_Mod_KeyColumn);
            var stat_Mod_TypeColumn = new Column("stat_Mod_Type", "int unsigned", biota_properties_enchantment_registryTable);
            biota_properties_enchantment_registryTable.Columns.Add("stat_Mod_Type", stat_Mod_TypeColumn);
            var stat_Mod_ValueColumn = new Column("stat_Mod_Value", "float", biota_properties_enchantment_registryTable);
            biota_properties_enchantment_registryTable.Columns.Add("stat_Mod_Value", stat_Mod_ValueColumn);
            var pRIMARY12 = new UniqueConstraint("PRIMARY", biota_properties_enchantment_registryTable, new[] { object_IdColumn9, spell_IdColumn0, caster_Object_IdColumn, layer_IdColumn });
            biota_properties_enchantment_registryTable.PrimaryKey = pRIMARY12;
            pRIMARY12.AddAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0, 0 });
            var pRIMARY12Uc = RelationalModel.GetKey(this,
                "ACE.Database.Models.Shard.BiotaPropertiesEnchantmentRegistry",
                new[] { "ObjectId", "SpellId", "CasterObjectId", "LayerId" });
            pRIMARY12.MappedKeys.Add(pRIMARY12Uc);
            RelationalModel.GetOrCreateUniqueConstraints(pRIMARY12Uc).Add(pRIMARY12);
            biota_properties_enchantment_registryTable.UniqueConstraints.Add("PRIMARY", pRIMARY12);
            var wcid_enchantmentregistry_objectId_spellId_layerId_uidx = new TableIndex(
            "wcid_enchantmentregistry_objectId_spellId_layerId_uidx", biota_properties_enchantment_registryTable, new[] { object_IdColumn9, spell_IdColumn0, layer_IdColumn }, true);
            var wcid_enchantmentregistry_objectId_spellId_layerId_uidxIx = RelationalModel.GetIndex(this,
                "ACE.Database.Models.Shard.BiotaPropertiesEnchantmentRegistry",
                "wcid_enchantmentregistry_objectId_spellId_layerId_uidx");
            wcid_enchantmentregistry_objectId_spellId_layerId_uidx.MappedIndexes.Add(wcid_enchantmentregistry_objectId_spellId_layerId_uidxIx);
            RelationalModel.GetOrCreateTableIndexes(wcid_enchantmentregistry_objectId_spellId_layerId_uidxIx).Add(wcid_enchantmentregistry_objectId_spellId_layerId_uidx);
            biota_properties_enchantment_registryTable.Indexes.Add("wcid_enchantmentregistry_objectId_spellId_layerId_uidx", wcid_enchantmentregistry_objectId_spellId_layerId_uidx);
            relationalModel.Tables.Add(("biota_properties_enchantment_registry", null), biota_properties_enchantment_registryTable);
            var biota_properties_enchantment_registryTableMapping = new TableMapping(biotaPropertiesEnchantmentRegistry, biota_properties_enchantment_registryTable, true);
            biota_properties_enchantment_registryTable.AddTypeMapping(biota_properties_enchantment_registryTableMapping, false);
            tableMappings12.Add(biota_properties_enchantment_registryTableMapping);
            RelationalModel.CreateColumnMapping(caster_Object_IdColumn, biotaPropertiesEnchantmentRegistry.FindProperty("CasterObjectId")!, biota_properties_enchantment_registryTableMapping);
            RelationalModel.CreateColumnMapping(layer_IdColumn, biotaPropertiesEnchantmentRegistry.FindProperty("LayerId")!, biota_properties_enchantment_registryTableMapping);
            RelationalModel.CreateColumnMapping(object_IdColumn9, biotaPropertiesEnchantmentRegistry.FindProperty("ObjectId")!, biota_properties_enchantment_registryTableMapping);
            RelationalModel.CreateColumnMapping(spell_IdColumn0, biotaPropertiesEnchantmentRegistry.FindProperty("SpellId")!, biota_properties_enchantment_registryTableMapping);
            RelationalModel.CreateColumnMapping(degrade_LimitColumn, biotaPropertiesEnchantmentRegistry.FindProperty("DegradeLimit")!, biota_properties_enchantment_registryTableMapping);
            RelationalModel.CreateColumnMapping(degrade_ModifierColumn, biotaPropertiesEnchantmentRegistry.FindProperty("DegradeModifier")!, biota_properties_enchantment_registryTableMapping);
            RelationalModel.CreateColumnMapping(durationColumn, biotaPropertiesEnchantmentRegistry.FindProperty("Duration")!, biota_properties_enchantment_registryTableMapping);
            RelationalModel.CreateColumnMapping(enchantment_CategoryColumn, biotaPropertiesEnchantmentRegistry.FindProperty("EnchantmentCategory")!, biota_properties_enchantment_registryTableMapping);
            RelationalModel.CreateColumnMapping(has_Spell_Set_IdColumn, biotaPropertiesEnchantmentRegistry.FindProperty("HasSpellSetId")!, biota_properties_enchantment_registryTableMapping);
            RelationalModel.CreateColumnMapping(last_Time_DegradedColumn, biotaPropertiesEnchantmentRegistry.FindProperty("LastTimeDegraded")!, biota_properties_enchantment_registryTableMapping);
            RelationalModel.CreateColumnMapping(power_LevelColumn, biotaPropertiesEnchantmentRegistry.FindProperty("PowerLevel")!, biota_properties_enchantment_registryTableMapping);
            RelationalModel.CreateColumnMapping(spell_CategoryColumn, biotaPropertiesEnchantmentRegistry.FindProperty("SpellCategory")!, biota_properties_enchantment_registryTableMapping);
            RelationalModel.CreateColumnMapping(spell_Set_IdColumn, biotaPropertiesEnchantmentRegistry.FindProperty("SpellSetId")!, biota_properties_enchantment_registryTableMapping);
            RelationalModel.CreateColumnMapping(start_TimeColumn, biotaPropertiesEnchantmentRegistry.FindProperty("StartTime")!, biota_properties_enchantment_registryTableMapping);
            RelationalModel.CreateColumnMapping(stat_Mod_KeyColumn, biotaPropertiesEnchantmentRegistry.FindProperty("StatModKey")!, biota_properties_enchantment_registryTableMapping);
            RelationalModel.CreateColumnMapping(stat_Mod_TypeColumn, biotaPropertiesEnchantmentRegistry.FindProperty("StatModType")!, biota_properties_enchantment_registryTableMapping);
            RelationalModel.CreateColumnMapping(stat_Mod_ValueColumn, biotaPropertiesEnchantmentRegistry.FindProperty("StatModValue")!, biota_properties_enchantment_registryTableMapping);

            var biotaPropertiesEventFilter = FindEntityType("ACE.Database.Models.Shard.BiotaPropertiesEventFilter")!;

            var defaultTableMappings13 = new List<TableMappingBase<ColumnMappingBase>>();
            biotaPropertiesEventFilter.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings13);
            var aCEDatabaseModelsShardBiotaPropertiesEventFilterTableBase = new TableBase("ACE.Database.Models.Shard.BiotaPropertiesEventFilter", null, relationalModel);
            var eventColumnBase = new ColumnBase<ColumnMappingBase>("event", "int", aCEDatabaseModelsShardBiotaPropertiesEventFilterTableBase);
            aCEDatabaseModelsShardBiotaPropertiesEventFilterTableBase.Columns.Add("event", eventColumnBase);
            var object_IdColumnBase10 = new ColumnBase<ColumnMappingBase>("object_Id", "bigint unsigned", aCEDatabaseModelsShardBiotaPropertiesEventFilterTableBase);
            aCEDatabaseModelsShardBiotaPropertiesEventFilterTableBase.Columns.Add("object_Id", object_IdColumnBase10);
            relationalModel.DefaultTables.Add("ACE.Database.Models.Shard.BiotaPropertiesEventFilter", aCEDatabaseModelsShardBiotaPropertiesEventFilterTableBase);
            var aCEDatabaseModelsShardBiotaPropertiesEventFilterMappingBase = new TableMappingBase<ColumnMappingBase>(biotaPropertiesEventFilter, aCEDatabaseModelsShardBiotaPropertiesEventFilterTableBase, true);
            aCEDatabaseModelsShardBiotaPropertiesEventFilterTableBase.AddTypeMapping(aCEDatabaseModelsShardBiotaPropertiesEventFilterMappingBase, false);
            defaultTableMappings13.Add(aCEDatabaseModelsShardBiotaPropertiesEventFilterMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)eventColumnBase, biotaPropertiesEventFilter.FindProperty("Event")!, aCEDatabaseModelsShardBiotaPropertiesEventFilterMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)object_IdColumnBase10, biotaPropertiesEventFilter.FindProperty("ObjectId")!, aCEDatabaseModelsShardBiotaPropertiesEventFilterMappingBase);

            var tableMappings13 = new List<TableMapping>();
            biotaPropertiesEventFilter.SetRuntimeAnnotation("Relational:TableMappings", tableMappings13);
            var biota_properties_event_filterTable = new Table("biota_properties_event_filter", null, relationalModel);
            var object_IdColumn10 = new Column("object_Id", "bigint unsigned", biota_properties_event_filterTable);
            biota_properties_event_filterTable.Columns.Add("object_Id", object_IdColumn10);
            var eventColumn = new Column("event", "int", biota_properties_event_filterTable);
            biota_properties_event_filterTable.Columns.Add("event", eventColumn);
            var pRIMARY13 = new UniqueConstraint("PRIMARY", biota_properties_event_filterTable, new[] { object_IdColumn10, eventColumn });
            biota_properties_event_filterTable.PrimaryKey = pRIMARY13;
            pRIMARY13.AddAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });
            var pRIMARY13Uc = RelationalModel.GetKey(this,
                "ACE.Database.Models.Shard.BiotaPropertiesEventFilter",
                new[] { "ObjectId", "Event" });
            pRIMARY13.MappedKeys.Add(pRIMARY13Uc);
            RelationalModel.GetOrCreateUniqueConstraints(pRIMARY13Uc).Add(pRIMARY13);
            biota_properties_event_filterTable.UniqueConstraints.Add("PRIMARY", pRIMARY13);
            relationalModel.Tables.Add(("biota_properties_event_filter", null), biota_properties_event_filterTable);
            var biota_properties_event_filterTableMapping = new TableMapping(biotaPropertiesEventFilter, biota_properties_event_filterTable, true);
            biota_properties_event_filterTable.AddTypeMapping(biota_properties_event_filterTableMapping, false);
            tableMappings13.Add(biota_properties_event_filterTableMapping);
            RelationalModel.CreateColumnMapping(eventColumn, biotaPropertiesEventFilter.FindProperty("Event")!, biota_properties_event_filterTableMapping);
            RelationalModel.CreateColumnMapping(object_IdColumn10, biotaPropertiesEventFilter.FindProperty("ObjectId")!, biota_properties_event_filterTableMapping);

            var biotaPropertiesFloat = FindEntityType("ACE.Database.Models.Shard.BiotaPropertiesFloat")!;

            var defaultTableMappings14 = new List<TableMappingBase<ColumnMappingBase>>();
            biotaPropertiesFloat.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings14);
            var aCEDatabaseModelsShardBiotaPropertiesFloatTableBase = new TableBase("ACE.Database.Models.Shard.BiotaPropertiesFloat", null, relationalModel);
            var object_IdColumnBase11 = new ColumnBase<ColumnMappingBase>("object_Id", "bigint unsigned", aCEDatabaseModelsShardBiotaPropertiesFloatTableBase);
            aCEDatabaseModelsShardBiotaPropertiesFloatTableBase.Columns.Add("object_Id", object_IdColumnBase11);
            var typeColumnBase4 = new ColumnBase<ColumnMappingBase>("type", "smallint unsigned", aCEDatabaseModelsShardBiotaPropertiesFloatTableBase);
            aCEDatabaseModelsShardBiotaPropertiesFloatTableBase.Columns.Add("type", typeColumnBase4);
            var valueColumnBase1 = new ColumnBase<ColumnMappingBase>("value", "double", aCEDatabaseModelsShardBiotaPropertiesFloatTableBase);
            aCEDatabaseModelsShardBiotaPropertiesFloatTableBase.Columns.Add("value", valueColumnBase1);
            relationalModel.DefaultTables.Add("ACE.Database.Models.Shard.BiotaPropertiesFloat", aCEDatabaseModelsShardBiotaPropertiesFloatTableBase);
            var aCEDatabaseModelsShardBiotaPropertiesFloatMappingBase = new TableMappingBase<ColumnMappingBase>(biotaPropertiesFloat, aCEDatabaseModelsShardBiotaPropertiesFloatTableBase, true);
            aCEDatabaseModelsShardBiotaPropertiesFloatTableBase.AddTypeMapping(aCEDatabaseModelsShardBiotaPropertiesFloatMappingBase, false);
            defaultTableMappings14.Add(aCEDatabaseModelsShardBiotaPropertiesFloatMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)object_IdColumnBase11, biotaPropertiesFloat.FindProperty("ObjectId")!, aCEDatabaseModelsShardBiotaPropertiesFloatMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)typeColumnBase4, biotaPropertiesFloat.FindProperty("Type")!, aCEDatabaseModelsShardBiotaPropertiesFloatMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)valueColumnBase1, biotaPropertiesFloat.FindProperty("Value")!, aCEDatabaseModelsShardBiotaPropertiesFloatMappingBase);

            var tableMappings14 = new List<TableMapping>();
            biotaPropertiesFloat.SetRuntimeAnnotation("Relational:TableMappings", tableMappings14);
            var biota_properties_floatTable = new Table("biota_properties_float", null, relationalModel);
            var object_IdColumn11 = new Column("object_Id", "bigint unsigned", biota_properties_floatTable);
            biota_properties_floatTable.Columns.Add("object_Id", object_IdColumn11);
            var typeColumn4 = new Column("type", "smallint unsigned", biota_properties_floatTable);
            biota_properties_floatTable.Columns.Add("type", typeColumn4);
            var valueColumn1 = new Column("value", "double", biota_properties_floatTable);
            biota_properties_floatTable.Columns.Add("value", valueColumn1);
            var pRIMARY14 = new UniqueConstraint("PRIMARY", biota_properties_floatTable, new[] { object_IdColumn11, typeColumn4 });
            biota_properties_floatTable.PrimaryKey = pRIMARY14;
            pRIMARY14.AddAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });
            var pRIMARY14Uc = RelationalModel.GetKey(this,
                "ACE.Database.Models.Shard.BiotaPropertiesFloat",
                new[] { "ObjectId", "Type" });
            pRIMARY14.MappedKeys.Add(pRIMARY14Uc);
            RelationalModel.GetOrCreateUniqueConstraints(pRIMARY14Uc).Add(pRIMARY14);
            biota_properties_floatTable.UniqueConstraints.Add("PRIMARY", pRIMARY14);
            relationalModel.Tables.Add(("biota_properties_float", null), biota_properties_floatTable);
            var biota_properties_floatTableMapping = new TableMapping(biotaPropertiesFloat, biota_properties_floatTable, true);
            biota_properties_floatTable.AddTypeMapping(biota_properties_floatTableMapping, false);
            tableMappings14.Add(biota_properties_floatTableMapping);
            RelationalModel.CreateColumnMapping(object_IdColumn11, biotaPropertiesFloat.FindProperty("ObjectId")!, biota_properties_floatTableMapping);
            RelationalModel.CreateColumnMapping(typeColumn4, biotaPropertiesFloat.FindProperty("Type")!, biota_properties_floatTableMapping);
            RelationalModel.CreateColumnMapping(valueColumn1, biotaPropertiesFloat.FindProperty("Value")!, biota_properties_floatTableMapping);

            var biotaPropertiesGenerator = FindEntityType("ACE.Database.Models.Shard.BiotaPropertiesGenerator")!;

            var defaultTableMappings15 = new List<TableMappingBase<ColumnMappingBase>>();
            biotaPropertiesGenerator.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings15);
            var aCEDatabaseModelsShardBiotaPropertiesGeneratorTableBase = new TableBase("ACE.Database.Models.Shard.BiotaPropertiesGenerator", null, relationalModel);
            var angles_WColumnBase0 = new ColumnBase<ColumnMappingBase>("angles_W", "float", aCEDatabaseModelsShardBiotaPropertiesGeneratorTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsShardBiotaPropertiesGeneratorTableBase.Columns.Add("angles_W", angles_WColumnBase0);
            var angles_XColumnBase0 = new ColumnBase<ColumnMappingBase>("angles_X", "float", aCEDatabaseModelsShardBiotaPropertiesGeneratorTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsShardBiotaPropertiesGeneratorTableBase.Columns.Add("angles_X", angles_XColumnBase0);
            var angles_YColumnBase0 = new ColumnBase<ColumnMappingBase>("angles_Y", "float", aCEDatabaseModelsShardBiotaPropertiesGeneratorTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsShardBiotaPropertiesGeneratorTableBase.Columns.Add("angles_Y", angles_YColumnBase0);
            var angles_ZColumnBase0 = new ColumnBase<ColumnMappingBase>("angles_Z", "float", aCEDatabaseModelsShardBiotaPropertiesGeneratorTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsShardBiotaPropertiesGeneratorTableBase.Columns.Add("angles_Z", angles_ZColumnBase0);
            var delayColumnBase0 = new ColumnBase<ColumnMappingBase>("delay", "float", aCEDatabaseModelsShardBiotaPropertiesGeneratorTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsShardBiotaPropertiesGeneratorTableBase.Columns.Add("delay", delayColumnBase0);
            var idColumnBase6 = new ColumnBase<ColumnMappingBase>("id", "int unsigned", aCEDatabaseModelsShardBiotaPropertiesGeneratorTableBase);
            aCEDatabaseModelsShardBiotaPropertiesGeneratorTableBase.Columns.Add("id", idColumnBase6);
            var init_CreateColumnBase = new ColumnBase<ColumnMappingBase>("init_Create", "int", aCEDatabaseModelsShardBiotaPropertiesGeneratorTableBase);
            aCEDatabaseModelsShardBiotaPropertiesGeneratorTableBase.Columns.Add("init_Create", init_CreateColumnBase);
            var max_CreateColumnBase = new ColumnBase<ColumnMappingBase>("max_Create", "int", aCEDatabaseModelsShardBiotaPropertiesGeneratorTableBase);
            aCEDatabaseModelsShardBiotaPropertiesGeneratorTableBase.Columns.Add("max_Create", max_CreateColumnBase);
            var obj_Cell_IdColumnBase0 = new ColumnBase<ColumnMappingBase>("obj_Cell_Id", "int unsigned", aCEDatabaseModelsShardBiotaPropertiesGeneratorTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsShardBiotaPropertiesGeneratorTableBase.Columns.Add("obj_Cell_Id", obj_Cell_IdColumnBase0);
            var object_IdColumnBase12 = new ColumnBase<ColumnMappingBase>("object_Id", "bigint unsigned", aCEDatabaseModelsShardBiotaPropertiesGeneratorTableBase);
            aCEDatabaseModelsShardBiotaPropertiesGeneratorTableBase.Columns.Add("object_Id", object_IdColumnBase12);
            var origin_XColumnBase0 = new ColumnBase<ColumnMappingBase>("origin_X", "float", aCEDatabaseModelsShardBiotaPropertiesGeneratorTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsShardBiotaPropertiesGeneratorTableBase.Columns.Add("origin_X", origin_XColumnBase0);
            var origin_YColumnBase0 = new ColumnBase<ColumnMappingBase>("origin_Y", "float", aCEDatabaseModelsShardBiotaPropertiesGeneratorTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsShardBiotaPropertiesGeneratorTableBase.Columns.Add("origin_Y", origin_YColumnBase0);
            var origin_ZColumnBase0 = new ColumnBase<ColumnMappingBase>("origin_Z", "float", aCEDatabaseModelsShardBiotaPropertiesGeneratorTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsShardBiotaPropertiesGeneratorTableBase.Columns.Add("origin_Z", origin_ZColumnBase0);
            var palette_IdColumnBase = new ColumnBase<ColumnMappingBase>("palette_Id", "int unsigned", aCEDatabaseModelsShardBiotaPropertiesGeneratorTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsShardBiotaPropertiesGeneratorTableBase.Columns.Add("palette_Id", palette_IdColumnBase);
            var probabilityColumnBase0 = new ColumnBase<ColumnMappingBase>("probability", "float", aCEDatabaseModelsShardBiotaPropertiesGeneratorTableBase);
            aCEDatabaseModelsShardBiotaPropertiesGeneratorTableBase.Columns.Add("probability", probabilityColumnBase0);
            var shadeColumnBase1 = new ColumnBase<ColumnMappingBase>("shade", "float", aCEDatabaseModelsShardBiotaPropertiesGeneratorTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsShardBiotaPropertiesGeneratorTableBase.Columns.Add("shade", shadeColumnBase1);
            var stack_SizeColumnBase1 = new ColumnBase<ColumnMappingBase>("stack_Size", "int", aCEDatabaseModelsShardBiotaPropertiesGeneratorTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsShardBiotaPropertiesGeneratorTableBase.Columns.Add("stack_Size", stack_SizeColumnBase1);
            var weenie_Class_IdColumnBase3 = new ColumnBase<ColumnMappingBase>("weenie_Class_Id", "int unsigned", aCEDatabaseModelsShardBiotaPropertiesGeneratorTableBase);
            aCEDatabaseModelsShardBiotaPropertiesGeneratorTableBase.Columns.Add("weenie_Class_Id", weenie_Class_IdColumnBase3);
            var when_CreateColumnBase = new ColumnBase<ColumnMappingBase>("when_Create", "int unsigned", aCEDatabaseModelsShardBiotaPropertiesGeneratorTableBase);
            aCEDatabaseModelsShardBiotaPropertiesGeneratorTableBase.Columns.Add("when_Create", when_CreateColumnBase);
            var where_CreateColumnBase = new ColumnBase<ColumnMappingBase>("where_Create", "int unsigned", aCEDatabaseModelsShardBiotaPropertiesGeneratorTableBase);
            aCEDatabaseModelsShardBiotaPropertiesGeneratorTableBase.Columns.Add("where_Create", where_CreateColumnBase);
            relationalModel.DefaultTables.Add("ACE.Database.Models.Shard.BiotaPropertiesGenerator", aCEDatabaseModelsShardBiotaPropertiesGeneratorTableBase);
            var aCEDatabaseModelsShardBiotaPropertiesGeneratorMappingBase = new TableMappingBase<ColumnMappingBase>(biotaPropertiesGenerator, aCEDatabaseModelsShardBiotaPropertiesGeneratorTableBase, true);
            aCEDatabaseModelsShardBiotaPropertiesGeneratorTableBase.AddTypeMapping(aCEDatabaseModelsShardBiotaPropertiesGeneratorMappingBase, false);
            defaultTableMappings15.Add(aCEDatabaseModelsShardBiotaPropertiesGeneratorMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase6, biotaPropertiesGenerator.FindProperty("Id")!, aCEDatabaseModelsShardBiotaPropertiesGeneratorMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)angles_WColumnBase0, biotaPropertiesGenerator.FindProperty("AnglesW")!, aCEDatabaseModelsShardBiotaPropertiesGeneratorMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)angles_XColumnBase0, biotaPropertiesGenerator.FindProperty("AnglesX")!, aCEDatabaseModelsShardBiotaPropertiesGeneratorMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)angles_YColumnBase0, biotaPropertiesGenerator.FindProperty("AnglesY")!, aCEDatabaseModelsShardBiotaPropertiesGeneratorMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)angles_ZColumnBase0, biotaPropertiesGenerator.FindProperty("AnglesZ")!, aCEDatabaseModelsShardBiotaPropertiesGeneratorMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)delayColumnBase0, biotaPropertiesGenerator.FindProperty("Delay")!, aCEDatabaseModelsShardBiotaPropertiesGeneratorMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)init_CreateColumnBase, biotaPropertiesGenerator.FindProperty("InitCreate")!, aCEDatabaseModelsShardBiotaPropertiesGeneratorMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)max_CreateColumnBase, biotaPropertiesGenerator.FindProperty("MaxCreate")!, aCEDatabaseModelsShardBiotaPropertiesGeneratorMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)obj_Cell_IdColumnBase0, biotaPropertiesGenerator.FindProperty("ObjCellId")!, aCEDatabaseModelsShardBiotaPropertiesGeneratorMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)object_IdColumnBase12, biotaPropertiesGenerator.FindProperty("ObjectId")!, aCEDatabaseModelsShardBiotaPropertiesGeneratorMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)origin_XColumnBase0, biotaPropertiesGenerator.FindProperty("OriginX")!, aCEDatabaseModelsShardBiotaPropertiesGeneratorMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)origin_YColumnBase0, biotaPropertiesGenerator.FindProperty("OriginY")!, aCEDatabaseModelsShardBiotaPropertiesGeneratorMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)origin_ZColumnBase0, biotaPropertiesGenerator.FindProperty("OriginZ")!, aCEDatabaseModelsShardBiotaPropertiesGeneratorMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)palette_IdColumnBase, biotaPropertiesGenerator.FindProperty("PaletteId")!, aCEDatabaseModelsShardBiotaPropertiesGeneratorMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)probabilityColumnBase0, biotaPropertiesGenerator.FindProperty("Probability")!, aCEDatabaseModelsShardBiotaPropertiesGeneratorMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)shadeColumnBase1, biotaPropertiesGenerator.FindProperty("Shade")!, aCEDatabaseModelsShardBiotaPropertiesGeneratorMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)stack_SizeColumnBase1, biotaPropertiesGenerator.FindProperty("StackSize")!, aCEDatabaseModelsShardBiotaPropertiesGeneratorMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)weenie_Class_IdColumnBase3, biotaPropertiesGenerator.FindProperty("WeenieClassId")!, aCEDatabaseModelsShardBiotaPropertiesGeneratorMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)when_CreateColumnBase, biotaPropertiesGenerator.FindProperty("WhenCreate")!, aCEDatabaseModelsShardBiotaPropertiesGeneratorMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)where_CreateColumnBase, biotaPropertiesGenerator.FindProperty("WhereCreate")!, aCEDatabaseModelsShardBiotaPropertiesGeneratorMappingBase);

            var tableMappings15 = new List<TableMapping>();
            biotaPropertiesGenerator.SetRuntimeAnnotation("Relational:TableMappings", tableMappings15);
            var biota_properties_generatorTable = new Table("biota_properties_generator", null, relationalModel);
            var idColumn6 = new Column("id", "int unsigned", biota_properties_generatorTable);
            biota_properties_generatorTable.Columns.Add("id", idColumn6);
            var angles_WColumn0 = new Column("angles_W", "float", biota_properties_generatorTable)
            {
                IsNullable = true
            };
            biota_properties_generatorTable.Columns.Add("angles_W", angles_WColumn0);
            var angles_XColumn0 = new Column("angles_X", "float", biota_properties_generatorTable)
            {
                IsNullable = true
            };
            biota_properties_generatorTable.Columns.Add("angles_X", angles_XColumn0);
            var angles_YColumn0 = new Column("angles_Y", "float", biota_properties_generatorTable)
            {
                IsNullable = true
            };
            biota_properties_generatorTable.Columns.Add("angles_Y", angles_YColumn0);
            var angles_ZColumn0 = new Column("angles_Z", "float", biota_properties_generatorTable)
            {
                IsNullable = true
            };
            biota_properties_generatorTable.Columns.Add("angles_Z", angles_ZColumn0);
            var delayColumn0 = new Column("delay", "float", biota_properties_generatorTable)
            {
                IsNullable = true
            };
            biota_properties_generatorTable.Columns.Add("delay", delayColumn0);
            var init_CreateColumn = new Column("init_Create", "int", biota_properties_generatorTable);
            biota_properties_generatorTable.Columns.Add("init_Create", init_CreateColumn);
            var max_CreateColumn = new Column("max_Create", "int", biota_properties_generatorTable);
            biota_properties_generatorTable.Columns.Add("max_Create", max_CreateColumn);
            var obj_Cell_IdColumn0 = new Column("obj_Cell_Id", "int unsigned", biota_properties_generatorTable)
            {
                IsNullable = true
            };
            biota_properties_generatorTable.Columns.Add("obj_Cell_Id", obj_Cell_IdColumn0);
            var object_IdColumn12 = new Column("object_Id", "bigint unsigned", biota_properties_generatorTable);
            biota_properties_generatorTable.Columns.Add("object_Id", object_IdColumn12);
            var origin_XColumn0 = new Column("origin_X", "float", biota_properties_generatorTable)
            {
                IsNullable = true
            };
            biota_properties_generatorTable.Columns.Add("origin_X", origin_XColumn0);
            var origin_YColumn0 = new Column("origin_Y", "float", biota_properties_generatorTable)
            {
                IsNullable = true
            };
            biota_properties_generatorTable.Columns.Add("origin_Y", origin_YColumn0);
            var origin_ZColumn0 = new Column("origin_Z", "float", biota_properties_generatorTable)
            {
                IsNullable = true
            };
            biota_properties_generatorTable.Columns.Add("origin_Z", origin_ZColumn0);
            var palette_IdColumn = new Column("palette_Id", "int unsigned", biota_properties_generatorTable)
            {
                IsNullable = true
            };
            biota_properties_generatorTable.Columns.Add("palette_Id", palette_IdColumn);
            var probabilityColumn0 = new Column("probability", "float", biota_properties_generatorTable);
            biota_properties_generatorTable.Columns.Add("probability", probabilityColumn0);
            var shadeColumn1 = new Column("shade", "float", biota_properties_generatorTable)
            {
                IsNullable = true
            };
            biota_properties_generatorTable.Columns.Add("shade", shadeColumn1);
            var stack_SizeColumn1 = new Column("stack_Size", "int", biota_properties_generatorTable)
            {
                IsNullable = true
            };
            biota_properties_generatorTable.Columns.Add("stack_Size", stack_SizeColumn1);
            var weenie_Class_IdColumn3 = new Column("weenie_Class_Id", "int unsigned", biota_properties_generatorTable);
            biota_properties_generatorTable.Columns.Add("weenie_Class_Id", weenie_Class_IdColumn3);
            var when_CreateColumn = new Column("when_Create", "int unsigned", biota_properties_generatorTable);
            biota_properties_generatorTable.Columns.Add("when_Create", when_CreateColumn);
            var where_CreateColumn = new Column("where_Create", "int unsigned", biota_properties_generatorTable);
            biota_properties_generatorTable.Columns.Add("where_Create", where_CreateColumn);
            var pRIMARY15 = new UniqueConstraint("PRIMARY", biota_properties_generatorTable, new[] { idColumn6 });
            biota_properties_generatorTable.PrimaryKey = pRIMARY15;
            var pRIMARY15Uc = RelationalModel.GetKey(this,
                "ACE.Database.Models.Shard.BiotaPropertiesGenerator",
                new[] { "Id" });
            pRIMARY15.MappedKeys.Add(pRIMARY15Uc);
            RelationalModel.GetOrCreateUniqueConstraints(pRIMARY15Uc).Add(pRIMARY15);
            biota_properties_generatorTable.UniqueConstraints.Add("PRIMARY", pRIMARY15);
            var wcid_generator = new TableIndex(
            "wcid_generator", biota_properties_generatorTable, new[] { object_IdColumn12 }, false);
            var wcid_generatorIx = RelationalModel.GetIndex(this,
                "ACE.Database.Models.Shard.BiotaPropertiesGenerator",
                "wcid_generator");
            wcid_generator.MappedIndexes.Add(wcid_generatorIx);
            RelationalModel.GetOrCreateTableIndexes(wcid_generatorIx).Add(wcid_generator);
            biota_properties_generatorTable.Indexes.Add("wcid_generator", wcid_generator);
            relationalModel.Tables.Add(("biota_properties_generator", null), biota_properties_generatorTable);
            var biota_properties_generatorTableMapping = new TableMapping(biotaPropertiesGenerator, biota_properties_generatorTable, true);
            biota_properties_generatorTable.AddTypeMapping(biota_properties_generatorTableMapping, false);
            tableMappings15.Add(biota_properties_generatorTableMapping);
            RelationalModel.CreateColumnMapping(idColumn6, biotaPropertiesGenerator.FindProperty("Id")!, biota_properties_generatorTableMapping);
            RelationalModel.CreateColumnMapping(angles_WColumn0, biotaPropertiesGenerator.FindProperty("AnglesW")!, biota_properties_generatorTableMapping);
            RelationalModel.CreateColumnMapping(angles_XColumn0, biotaPropertiesGenerator.FindProperty("AnglesX")!, biota_properties_generatorTableMapping);
            RelationalModel.CreateColumnMapping(angles_YColumn0, biotaPropertiesGenerator.FindProperty("AnglesY")!, biota_properties_generatorTableMapping);
            RelationalModel.CreateColumnMapping(angles_ZColumn0, biotaPropertiesGenerator.FindProperty("AnglesZ")!, biota_properties_generatorTableMapping);
            RelationalModel.CreateColumnMapping(delayColumn0, biotaPropertiesGenerator.FindProperty("Delay")!, biota_properties_generatorTableMapping);
            RelationalModel.CreateColumnMapping(init_CreateColumn, biotaPropertiesGenerator.FindProperty("InitCreate")!, biota_properties_generatorTableMapping);
            RelationalModel.CreateColumnMapping(max_CreateColumn, biotaPropertiesGenerator.FindProperty("MaxCreate")!, biota_properties_generatorTableMapping);
            RelationalModel.CreateColumnMapping(obj_Cell_IdColumn0, biotaPropertiesGenerator.FindProperty("ObjCellId")!, biota_properties_generatorTableMapping);
            RelationalModel.CreateColumnMapping(object_IdColumn12, biotaPropertiesGenerator.FindProperty("ObjectId")!, biota_properties_generatorTableMapping);
            RelationalModel.CreateColumnMapping(origin_XColumn0, biotaPropertiesGenerator.FindProperty("OriginX")!, biota_properties_generatorTableMapping);
            RelationalModel.CreateColumnMapping(origin_YColumn0, biotaPropertiesGenerator.FindProperty("OriginY")!, biota_properties_generatorTableMapping);
            RelationalModel.CreateColumnMapping(origin_ZColumn0, biotaPropertiesGenerator.FindProperty("OriginZ")!, biota_properties_generatorTableMapping);
            RelationalModel.CreateColumnMapping(palette_IdColumn, biotaPropertiesGenerator.FindProperty("PaletteId")!, biota_properties_generatorTableMapping);
            RelationalModel.CreateColumnMapping(probabilityColumn0, biotaPropertiesGenerator.FindProperty("Probability")!, biota_properties_generatorTableMapping);
            RelationalModel.CreateColumnMapping(shadeColumn1, biotaPropertiesGenerator.FindProperty("Shade")!, biota_properties_generatorTableMapping);
            RelationalModel.CreateColumnMapping(stack_SizeColumn1, biotaPropertiesGenerator.FindProperty("StackSize")!, biota_properties_generatorTableMapping);
            RelationalModel.CreateColumnMapping(weenie_Class_IdColumn3, biotaPropertiesGenerator.FindProperty("WeenieClassId")!, biota_properties_generatorTableMapping);
            RelationalModel.CreateColumnMapping(when_CreateColumn, biotaPropertiesGenerator.FindProperty("WhenCreate")!, biota_properties_generatorTableMapping);
            RelationalModel.CreateColumnMapping(where_CreateColumn, biotaPropertiesGenerator.FindProperty("WhereCreate")!, biota_properties_generatorTableMapping);

            var biotaPropertiesIID = FindEntityType("ACE.Database.Models.Shard.BiotaPropertiesIID")!;

            var defaultTableMappings16 = new List<TableMappingBase<ColumnMappingBase>>();
            biotaPropertiesIID.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings16);
            var aCEDatabaseModelsShardBiotaPropertiesIIDTableBase = new TableBase("ACE.Database.Models.Shard.BiotaPropertiesIID", null, relationalModel);
            var object_IdColumnBase13 = new ColumnBase<ColumnMappingBase>("object_Id", "bigint unsigned", aCEDatabaseModelsShardBiotaPropertiesIIDTableBase);
            aCEDatabaseModelsShardBiotaPropertiesIIDTableBase.Columns.Add("object_Id", object_IdColumnBase13);
            var typeColumnBase5 = new ColumnBase<ColumnMappingBase>("type", "smallint unsigned", aCEDatabaseModelsShardBiotaPropertiesIIDTableBase);
            aCEDatabaseModelsShardBiotaPropertiesIIDTableBase.Columns.Add("type", typeColumnBase5);
            var valueColumnBase2 = new ColumnBase<ColumnMappingBase>("value", "bigint unsigned", aCEDatabaseModelsShardBiotaPropertiesIIDTableBase);
            aCEDatabaseModelsShardBiotaPropertiesIIDTableBase.Columns.Add("value", valueColumnBase2);
            relationalModel.DefaultTables.Add("ACE.Database.Models.Shard.BiotaPropertiesIID", aCEDatabaseModelsShardBiotaPropertiesIIDTableBase);
            var aCEDatabaseModelsShardBiotaPropertiesIIDMappingBase = new TableMappingBase<ColumnMappingBase>(biotaPropertiesIID, aCEDatabaseModelsShardBiotaPropertiesIIDTableBase, true);
            aCEDatabaseModelsShardBiotaPropertiesIIDTableBase.AddTypeMapping(aCEDatabaseModelsShardBiotaPropertiesIIDMappingBase, false);
            defaultTableMappings16.Add(aCEDatabaseModelsShardBiotaPropertiesIIDMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)object_IdColumnBase13, biotaPropertiesIID.FindProperty("ObjectId")!, aCEDatabaseModelsShardBiotaPropertiesIIDMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)typeColumnBase5, biotaPropertiesIID.FindProperty("Type")!, aCEDatabaseModelsShardBiotaPropertiesIIDMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)valueColumnBase2, biotaPropertiesIID.FindProperty("Value")!, aCEDatabaseModelsShardBiotaPropertiesIIDMappingBase);

            var tableMappings16 = new List<TableMapping>();
            biotaPropertiesIID.SetRuntimeAnnotation("Relational:TableMappings", tableMappings16);
            var biota_properties_i_i_dTable = new Table("biota_properties_i_i_d", null, relationalModel);
            var object_IdColumn13 = new Column("object_Id", "bigint unsigned", biota_properties_i_i_dTable);
            biota_properties_i_i_dTable.Columns.Add("object_Id", object_IdColumn13);
            var typeColumn5 = new Column("type", "smallint unsigned", biota_properties_i_i_dTable);
            biota_properties_i_i_dTable.Columns.Add("type", typeColumn5);
            var valueColumn2 = new Column("value", "bigint unsigned", biota_properties_i_i_dTable);
            biota_properties_i_i_dTable.Columns.Add("value", valueColumn2);
            var pRIMARY16 = new UniqueConstraint("PRIMARY", biota_properties_i_i_dTable, new[] { object_IdColumn13, typeColumn5 });
            biota_properties_i_i_dTable.PrimaryKey = pRIMARY16;
            pRIMARY16.AddAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });
            var pRIMARY16Uc = RelationalModel.GetKey(this,
                "ACE.Database.Models.Shard.BiotaPropertiesIID",
                new[] { "ObjectId", "Type" });
            pRIMARY16.MappedKeys.Add(pRIMARY16Uc);
            RelationalModel.GetOrCreateUniqueConstraints(pRIMARY16Uc).Add(pRIMARY16);
            biota_properties_i_i_dTable.UniqueConstraints.Add("PRIMARY", pRIMARY16);
            var type_value_idx = new TableIndex(
            "type_value_idx", biota_properties_i_i_dTable, new[] { typeColumn5, valueColumn2 }, false);
            var type_value_idxIx = RelationalModel.GetIndex(this,
                "ACE.Database.Models.Shard.BiotaPropertiesIID",
                "type_value_idx");
            type_value_idx.MappedIndexes.Add(type_value_idxIx);
            RelationalModel.GetOrCreateTableIndexes(type_value_idxIx).Add(type_value_idx);
            biota_properties_i_i_dTable.Indexes.Add("type_value_idx", type_value_idx);
            relationalModel.Tables.Add(("biota_properties_i_i_d", null), biota_properties_i_i_dTable);
            var biota_properties_i_i_dTableMapping = new TableMapping(biotaPropertiesIID, biota_properties_i_i_dTable, true);
            biota_properties_i_i_dTable.AddTypeMapping(biota_properties_i_i_dTableMapping, false);
            tableMappings16.Add(biota_properties_i_i_dTableMapping);
            RelationalModel.CreateColumnMapping(object_IdColumn13, biotaPropertiesIID.FindProperty("ObjectId")!, biota_properties_i_i_dTableMapping);
            RelationalModel.CreateColumnMapping(typeColumn5, biotaPropertiesIID.FindProperty("Type")!, biota_properties_i_i_dTableMapping);
            RelationalModel.CreateColumnMapping(valueColumn2, biotaPropertiesIID.FindProperty("Value")!, biota_properties_i_i_dTableMapping);

            var biotaPropertiesInt = FindEntityType("ACE.Database.Models.Shard.BiotaPropertiesInt")!;

            var defaultTableMappings17 = new List<TableMappingBase<ColumnMappingBase>>();
            biotaPropertiesInt.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings17);
            var aCEDatabaseModelsShardBiotaPropertiesIntTableBase = new TableBase("ACE.Database.Models.Shard.BiotaPropertiesInt", null, relationalModel);
            var object_IdColumnBase14 = new ColumnBase<ColumnMappingBase>("object_Id", "bigint unsigned", aCEDatabaseModelsShardBiotaPropertiesIntTableBase);
            aCEDatabaseModelsShardBiotaPropertiesIntTableBase.Columns.Add("object_Id", object_IdColumnBase14);
            var typeColumnBase6 = new ColumnBase<ColumnMappingBase>("type", "smallint unsigned", aCEDatabaseModelsShardBiotaPropertiesIntTableBase);
            aCEDatabaseModelsShardBiotaPropertiesIntTableBase.Columns.Add("type", typeColumnBase6);
            var valueColumnBase3 = new ColumnBase<ColumnMappingBase>("value", "int", aCEDatabaseModelsShardBiotaPropertiesIntTableBase);
            aCEDatabaseModelsShardBiotaPropertiesIntTableBase.Columns.Add("value", valueColumnBase3);
            relationalModel.DefaultTables.Add("ACE.Database.Models.Shard.BiotaPropertiesInt", aCEDatabaseModelsShardBiotaPropertiesIntTableBase);
            var aCEDatabaseModelsShardBiotaPropertiesIntMappingBase = new TableMappingBase<ColumnMappingBase>(biotaPropertiesInt, aCEDatabaseModelsShardBiotaPropertiesIntTableBase, true);
            aCEDatabaseModelsShardBiotaPropertiesIntTableBase.AddTypeMapping(aCEDatabaseModelsShardBiotaPropertiesIntMappingBase, false);
            defaultTableMappings17.Add(aCEDatabaseModelsShardBiotaPropertiesIntMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)object_IdColumnBase14, biotaPropertiesInt.FindProperty("ObjectId")!, aCEDatabaseModelsShardBiotaPropertiesIntMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)typeColumnBase6, biotaPropertiesInt.FindProperty("Type")!, aCEDatabaseModelsShardBiotaPropertiesIntMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)valueColumnBase3, biotaPropertiesInt.FindProperty("Value")!, aCEDatabaseModelsShardBiotaPropertiesIntMappingBase);

            var tableMappings17 = new List<TableMapping>();
            biotaPropertiesInt.SetRuntimeAnnotation("Relational:TableMappings", tableMappings17);
            var biota_properties_intTable = new Table("biota_properties_int", null, relationalModel);
            var object_IdColumn14 = new Column("object_Id", "bigint unsigned", biota_properties_intTable);
            biota_properties_intTable.Columns.Add("object_Id", object_IdColumn14);
            var typeColumn6 = new Column("type", "smallint unsigned", biota_properties_intTable);
            biota_properties_intTable.Columns.Add("type", typeColumn6);
            var valueColumn3 = new Column("value", "int", biota_properties_intTable);
            biota_properties_intTable.Columns.Add("value", valueColumn3);
            var pRIMARY17 = new UniqueConstraint("PRIMARY", biota_properties_intTable, new[] { object_IdColumn14, typeColumn6 });
            biota_properties_intTable.PrimaryKey = pRIMARY17;
            pRIMARY17.AddAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });
            var pRIMARY17Uc = RelationalModel.GetKey(this,
                "ACE.Database.Models.Shard.BiotaPropertiesInt",
                new[] { "ObjectId", "Type" });
            pRIMARY17.MappedKeys.Add(pRIMARY17Uc);
            RelationalModel.GetOrCreateUniqueConstraints(pRIMARY17Uc).Add(pRIMARY17);
            biota_properties_intTable.UniqueConstraints.Add("PRIMARY", pRIMARY17);
            relationalModel.Tables.Add(("biota_properties_int", null), biota_properties_intTable);
            var biota_properties_intTableMapping = new TableMapping(biotaPropertiesInt, biota_properties_intTable, true);
            biota_properties_intTable.AddTypeMapping(biota_properties_intTableMapping, false);
            tableMappings17.Add(biota_properties_intTableMapping);
            RelationalModel.CreateColumnMapping(object_IdColumn14, biotaPropertiesInt.FindProperty("ObjectId")!, biota_properties_intTableMapping);
            RelationalModel.CreateColumnMapping(typeColumn6, biotaPropertiesInt.FindProperty("Type")!, biota_properties_intTableMapping);
            RelationalModel.CreateColumnMapping(valueColumn3, biotaPropertiesInt.FindProperty("Value")!, biota_properties_intTableMapping);

            var biotaPropertiesInt64 = FindEntityType("ACE.Database.Models.Shard.BiotaPropertiesInt64")!;

            var defaultTableMappings18 = new List<TableMappingBase<ColumnMappingBase>>();
            biotaPropertiesInt64.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings18);
            var aCEDatabaseModelsShardBiotaPropertiesInt64TableBase = new TableBase("ACE.Database.Models.Shard.BiotaPropertiesInt64", null, relationalModel);
            var object_IdColumnBase15 = new ColumnBase<ColumnMappingBase>("object_Id", "bigint unsigned", aCEDatabaseModelsShardBiotaPropertiesInt64TableBase);
            aCEDatabaseModelsShardBiotaPropertiesInt64TableBase.Columns.Add("object_Id", object_IdColumnBase15);
            var typeColumnBase7 = new ColumnBase<ColumnMappingBase>("type", "smallint unsigned", aCEDatabaseModelsShardBiotaPropertiesInt64TableBase);
            aCEDatabaseModelsShardBiotaPropertiesInt64TableBase.Columns.Add("type", typeColumnBase7);
            var valueColumnBase4 = new ColumnBase<ColumnMappingBase>("value", "bigint", aCEDatabaseModelsShardBiotaPropertiesInt64TableBase);
            aCEDatabaseModelsShardBiotaPropertiesInt64TableBase.Columns.Add("value", valueColumnBase4);
            relationalModel.DefaultTables.Add("ACE.Database.Models.Shard.BiotaPropertiesInt64", aCEDatabaseModelsShardBiotaPropertiesInt64TableBase);
            var aCEDatabaseModelsShardBiotaPropertiesInt64MappingBase = new TableMappingBase<ColumnMappingBase>(biotaPropertiesInt64, aCEDatabaseModelsShardBiotaPropertiesInt64TableBase, true);
            aCEDatabaseModelsShardBiotaPropertiesInt64TableBase.AddTypeMapping(aCEDatabaseModelsShardBiotaPropertiesInt64MappingBase, false);
            defaultTableMappings18.Add(aCEDatabaseModelsShardBiotaPropertiesInt64MappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)object_IdColumnBase15, biotaPropertiesInt64.FindProperty("ObjectId")!, aCEDatabaseModelsShardBiotaPropertiesInt64MappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)typeColumnBase7, biotaPropertiesInt64.FindProperty("Type")!, aCEDatabaseModelsShardBiotaPropertiesInt64MappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)valueColumnBase4, biotaPropertiesInt64.FindProperty("Value")!, aCEDatabaseModelsShardBiotaPropertiesInt64MappingBase);

            var tableMappings18 = new List<TableMapping>();
            biotaPropertiesInt64.SetRuntimeAnnotation("Relational:TableMappings", tableMappings18);
            var biota_properties_int64Table = new Table("biota_properties_int64", null, relationalModel);
            var object_IdColumn15 = new Column("object_Id", "bigint unsigned", biota_properties_int64Table);
            biota_properties_int64Table.Columns.Add("object_Id", object_IdColumn15);
            var typeColumn7 = new Column("type", "smallint unsigned", biota_properties_int64Table);
            biota_properties_int64Table.Columns.Add("type", typeColumn7);
            var valueColumn4 = new Column("value", "bigint", biota_properties_int64Table);
            biota_properties_int64Table.Columns.Add("value", valueColumn4);
            var pRIMARY18 = new UniqueConstraint("PRIMARY", biota_properties_int64Table, new[] { object_IdColumn15, typeColumn7 });
            biota_properties_int64Table.PrimaryKey = pRIMARY18;
            pRIMARY18.AddAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });
            var pRIMARY18Uc = RelationalModel.GetKey(this,
                "ACE.Database.Models.Shard.BiotaPropertiesInt64",
                new[] { "ObjectId", "Type" });
            pRIMARY18.MappedKeys.Add(pRIMARY18Uc);
            RelationalModel.GetOrCreateUniqueConstraints(pRIMARY18Uc).Add(pRIMARY18);
            biota_properties_int64Table.UniqueConstraints.Add("PRIMARY", pRIMARY18);
            relationalModel.Tables.Add(("biota_properties_int64", null), biota_properties_int64Table);
            var biota_properties_int64TableMapping = new TableMapping(biotaPropertiesInt64, biota_properties_int64Table, true);
            biota_properties_int64Table.AddTypeMapping(biota_properties_int64TableMapping, false);
            tableMappings18.Add(biota_properties_int64TableMapping);
            RelationalModel.CreateColumnMapping(object_IdColumn15, biotaPropertiesInt64.FindProperty("ObjectId")!, biota_properties_int64TableMapping);
            RelationalModel.CreateColumnMapping(typeColumn7, biotaPropertiesInt64.FindProperty("Type")!, biota_properties_int64TableMapping);
            RelationalModel.CreateColumnMapping(valueColumn4, biotaPropertiesInt64.FindProperty("Value")!, biota_properties_int64TableMapping);

            var biotaPropertiesPalette = FindEntityType("ACE.Database.Models.Shard.BiotaPropertiesPalette")!;

            var defaultTableMappings19 = new List<TableMappingBase<ColumnMappingBase>>();
            biotaPropertiesPalette.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings19);
            var aCEDatabaseModelsShardBiotaPropertiesPaletteTableBase = new TableBase("ACE.Database.Models.Shard.BiotaPropertiesPalette", null, relationalModel);
            var idColumnBase7 = new ColumnBase<ColumnMappingBase>("id", "int unsigned", aCEDatabaseModelsShardBiotaPropertiesPaletteTableBase);
            aCEDatabaseModelsShardBiotaPropertiesPaletteTableBase.Columns.Add("id", idColumnBase7);
            var lengthColumnBase = new ColumnBase<ColumnMappingBase>("length", "smallint unsigned", aCEDatabaseModelsShardBiotaPropertiesPaletteTableBase);
            aCEDatabaseModelsShardBiotaPropertiesPaletteTableBase.Columns.Add("length", lengthColumnBase);
            var object_IdColumnBase16 = new ColumnBase<ColumnMappingBase>("object_Id", "bigint unsigned", aCEDatabaseModelsShardBiotaPropertiesPaletteTableBase);
            aCEDatabaseModelsShardBiotaPropertiesPaletteTableBase.Columns.Add("object_Id", object_IdColumnBase16);
            var offsetColumnBase = new ColumnBase<ColumnMappingBase>("offset", "smallint unsigned", aCEDatabaseModelsShardBiotaPropertiesPaletteTableBase);
            aCEDatabaseModelsShardBiotaPropertiesPaletteTableBase.Columns.Add("offset", offsetColumnBase);
            var orderColumnBase1 = new ColumnBase<ColumnMappingBase>("order", "tinyint unsigned", aCEDatabaseModelsShardBiotaPropertiesPaletteTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsShardBiotaPropertiesPaletteTableBase.Columns.Add("order", orderColumnBase1);
            var sub_Palette_IdColumnBase = new ColumnBase<ColumnMappingBase>("sub_Palette_Id", "int unsigned", aCEDatabaseModelsShardBiotaPropertiesPaletteTableBase);
            aCEDatabaseModelsShardBiotaPropertiesPaletteTableBase.Columns.Add("sub_Palette_Id", sub_Palette_IdColumnBase);
            relationalModel.DefaultTables.Add("ACE.Database.Models.Shard.BiotaPropertiesPalette", aCEDatabaseModelsShardBiotaPropertiesPaletteTableBase);
            var aCEDatabaseModelsShardBiotaPropertiesPaletteMappingBase = new TableMappingBase<ColumnMappingBase>(biotaPropertiesPalette, aCEDatabaseModelsShardBiotaPropertiesPaletteTableBase, true);
            aCEDatabaseModelsShardBiotaPropertiesPaletteTableBase.AddTypeMapping(aCEDatabaseModelsShardBiotaPropertiesPaletteMappingBase, false);
            defaultTableMappings19.Add(aCEDatabaseModelsShardBiotaPropertiesPaletteMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase7, biotaPropertiesPalette.FindProperty("Id")!, aCEDatabaseModelsShardBiotaPropertiesPaletteMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)lengthColumnBase, biotaPropertiesPalette.FindProperty("Length")!, aCEDatabaseModelsShardBiotaPropertiesPaletteMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)object_IdColumnBase16, biotaPropertiesPalette.FindProperty("ObjectId")!, aCEDatabaseModelsShardBiotaPropertiesPaletteMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)offsetColumnBase, biotaPropertiesPalette.FindProperty("Offset")!, aCEDatabaseModelsShardBiotaPropertiesPaletteMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)orderColumnBase1, biotaPropertiesPalette.FindProperty("Order")!, aCEDatabaseModelsShardBiotaPropertiesPaletteMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)sub_Palette_IdColumnBase, biotaPropertiesPalette.FindProperty("SubPaletteId")!, aCEDatabaseModelsShardBiotaPropertiesPaletteMappingBase);

            var tableMappings19 = new List<TableMapping>();
            biotaPropertiesPalette.SetRuntimeAnnotation("Relational:TableMappings", tableMappings19);
            var biota_properties_paletteTable = new Table("biota_properties_palette", null, relationalModel);
            var idColumn7 = new Column("id", "int unsigned", biota_properties_paletteTable);
            biota_properties_paletteTable.Columns.Add("id", idColumn7);
            var lengthColumn = new Column("length", "smallint unsigned", biota_properties_paletteTable);
            biota_properties_paletteTable.Columns.Add("length", lengthColumn);
            var object_IdColumn16 = new Column("object_Id", "bigint unsigned", biota_properties_paletteTable);
            biota_properties_paletteTable.Columns.Add("object_Id", object_IdColumn16);
            var offsetColumn = new Column("offset", "smallint unsigned", biota_properties_paletteTable);
            biota_properties_paletteTable.Columns.Add("offset", offsetColumn);
            var orderColumn1 = new Column("order", "tinyint unsigned", biota_properties_paletteTable)
            {
                IsNullable = true
            };
            biota_properties_paletteTable.Columns.Add("order", orderColumn1);
            var sub_Palette_IdColumn = new Column("sub_Palette_Id", "int unsigned", biota_properties_paletteTable);
            biota_properties_paletteTable.Columns.Add("sub_Palette_Id", sub_Palette_IdColumn);
            var pRIMARY19 = new UniqueConstraint("PRIMARY", biota_properties_paletteTable, new[] { idColumn7 });
            biota_properties_paletteTable.PrimaryKey = pRIMARY19;
            var pRIMARY19Uc = RelationalModel.GetKey(this,
                "ACE.Database.Models.Shard.BiotaPropertiesPalette",
                new[] { "Id" });
            pRIMARY19.MappedKeys.Add(pRIMARY19Uc);
            RelationalModel.GetOrCreateUniqueConstraints(pRIMARY19Uc).Add(pRIMARY19);
            biota_properties_paletteTable.UniqueConstraints.Add("PRIMARY", pRIMARY19);
            var wcid_palette_idx = new TableIndex(
            "wcid_palette_idx", biota_properties_paletteTable, new[] { object_IdColumn16 }, false);
            var wcid_palette_idxIx = RelationalModel.GetIndex(this,
                "ACE.Database.Models.Shard.BiotaPropertiesPalette",
                "wcid_palette_idx");
            wcid_palette_idx.MappedIndexes.Add(wcid_palette_idxIx);
            RelationalModel.GetOrCreateTableIndexes(wcid_palette_idxIx).Add(wcid_palette_idx);
            biota_properties_paletteTable.Indexes.Add("wcid_palette_idx", wcid_palette_idx);
            relationalModel.Tables.Add(("biota_properties_palette", null), biota_properties_paletteTable);
            var biota_properties_paletteTableMapping = new TableMapping(biotaPropertiesPalette, biota_properties_paletteTable, true);
            biota_properties_paletteTable.AddTypeMapping(biota_properties_paletteTableMapping, false);
            tableMappings19.Add(biota_properties_paletteTableMapping);
            RelationalModel.CreateColumnMapping(idColumn7, biotaPropertiesPalette.FindProperty("Id")!, biota_properties_paletteTableMapping);
            RelationalModel.CreateColumnMapping(lengthColumn, biotaPropertiesPalette.FindProperty("Length")!, biota_properties_paletteTableMapping);
            RelationalModel.CreateColumnMapping(object_IdColumn16, biotaPropertiesPalette.FindProperty("ObjectId")!, biota_properties_paletteTableMapping);
            RelationalModel.CreateColumnMapping(offsetColumn, biotaPropertiesPalette.FindProperty("Offset")!, biota_properties_paletteTableMapping);
            RelationalModel.CreateColumnMapping(orderColumn1, biotaPropertiesPalette.FindProperty("Order")!, biota_properties_paletteTableMapping);
            RelationalModel.CreateColumnMapping(sub_Palette_IdColumn, biotaPropertiesPalette.FindProperty("SubPaletteId")!, biota_properties_paletteTableMapping);

            var biotaPropertiesPosition = FindEntityType("ACE.Database.Models.Shard.BiotaPropertiesPosition")!;

            var defaultTableMappings20 = new List<TableMappingBase<ColumnMappingBase>>();
            biotaPropertiesPosition.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings20);
            var aCEDatabaseModelsShardBiotaPropertiesPositionTableBase = new TableBase("ACE.Database.Models.Shard.BiotaPropertiesPosition", null, relationalModel);
            var angles_WColumnBase1 = new ColumnBase<ColumnMappingBase>("angles_W", "float", aCEDatabaseModelsShardBiotaPropertiesPositionTableBase);
            aCEDatabaseModelsShardBiotaPropertiesPositionTableBase.Columns.Add("angles_W", angles_WColumnBase1);
            var angles_XColumnBase1 = new ColumnBase<ColumnMappingBase>("angles_X", "float", aCEDatabaseModelsShardBiotaPropertiesPositionTableBase);
            aCEDatabaseModelsShardBiotaPropertiesPositionTableBase.Columns.Add("angles_X", angles_XColumnBase1);
            var angles_YColumnBase1 = new ColumnBase<ColumnMappingBase>("angles_Y", "float", aCEDatabaseModelsShardBiotaPropertiesPositionTableBase);
            aCEDatabaseModelsShardBiotaPropertiesPositionTableBase.Columns.Add("angles_Y", angles_YColumnBase1);
            var angles_ZColumnBase1 = new ColumnBase<ColumnMappingBase>("angles_Z", "float", aCEDatabaseModelsShardBiotaPropertiesPositionTableBase);
            aCEDatabaseModelsShardBiotaPropertiesPositionTableBase.Columns.Add("angles_Z", angles_ZColumnBase1);
            var instanceColumnBase = new ColumnBase<ColumnMappingBase>("instance", "int unsigned", aCEDatabaseModelsShardBiotaPropertiesPositionTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsShardBiotaPropertiesPositionTableBase.Columns.Add("instance", instanceColumnBase);
            var obj_Cell_IdColumnBase1 = new ColumnBase<ColumnMappingBase>("obj_Cell_Id", "int unsigned", aCEDatabaseModelsShardBiotaPropertiesPositionTableBase);
            aCEDatabaseModelsShardBiotaPropertiesPositionTableBase.Columns.Add("obj_Cell_Id", obj_Cell_IdColumnBase1);
            var object_IdColumnBase17 = new ColumnBase<ColumnMappingBase>("object_Id", "bigint unsigned", aCEDatabaseModelsShardBiotaPropertiesPositionTableBase);
            aCEDatabaseModelsShardBiotaPropertiesPositionTableBase.Columns.Add("object_Id", object_IdColumnBase17);
            var origin_XColumnBase1 = new ColumnBase<ColumnMappingBase>("origin_X", "float", aCEDatabaseModelsShardBiotaPropertiesPositionTableBase);
            aCEDatabaseModelsShardBiotaPropertiesPositionTableBase.Columns.Add("origin_X", origin_XColumnBase1);
            var origin_YColumnBase1 = new ColumnBase<ColumnMappingBase>("origin_Y", "float", aCEDatabaseModelsShardBiotaPropertiesPositionTableBase);
            aCEDatabaseModelsShardBiotaPropertiesPositionTableBase.Columns.Add("origin_Y", origin_YColumnBase1);
            var origin_ZColumnBase1 = new ColumnBase<ColumnMappingBase>("origin_Z", "float", aCEDatabaseModelsShardBiotaPropertiesPositionTableBase);
            aCEDatabaseModelsShardBiotaPropertiesPositionTableBase.Columns.Add("origin_Z", origin_ZColumnBase1);
            var position_TypeColumnBase = new ColumnBase<ColumnMappingBase>("position_Type", "smallint unsigned", aCEDatabaseModelsShardBiotaPropertiesPositionTableBase);
            aCEDatabaseModelsShardBiotaPropertiesPositionTableBase.Columns.Add("position_Type", position_TypeColumnBase);
            relationalModel.DefaultTables.Add("ACE.Database.Models.Shard.BiotaPropertiesPosition", aCEDatabaseModelsShardBiotaPropertiesPositionTableBase);
            var aCEDatabaseModelsShardBiotaPropertiesPositionMappingBase = new TableMappingBase<ColumnMappingBase>(biotaPropertiesPosition, aCEDatabaseModelsShardBiotaPropertiesPositionTableBase, true);
            aCEDatabaseModelsShardBiotaPropertiesPositionTableBase.AddTypeMapping(aCEDatabaseModelsShardBiotaPropertiesPositionMappingBase, false);
            defaultTableMappings20.Add(aCEDatabaseModelsShardBiotaPropertiesPositionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)object_IdColumnBase17, biotaPropertiesPosition.FindProperty("ObjectId")!, aCEDatabaseModelsShardBiotaPropertiesPositionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)position_TypeColumnBase, biotaPropertiesPosition.FindProperty("PositionType")!, aCEDatabaseModelsShardBiotaPropertiesPositionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)angles_WColumnBase1, biotaPropertiesPosition.FindProperty("AnglesW")!, aCEDatabaseModelsShardBiotaPropertiesPositionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)angles_XColumnBase1, biotaPropertiesPosition.FindProperty("AnglesX")!, aCEDatabaseModelsShardBiotaPropertiesPositionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)angles_YColumnBase1, biotaPropertiesPosition.FindProperty("AnglesY")!, aCEDatabaseModelsShardBiotaPropertiesPositionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)angles_ZColumnBase1, biotaPropertiesPosition.FindProperty("AnglesZ")!, aCEDatabaseModelsShardBiotaPropertiesPositionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)instanceColumnBase, biotaPropertiesPosition.FindProperty("Instance")!, aCEDatabaseModelsShardBiotaPropertiesPositionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)obj_Cell_IdColumnBase1, biotaPropertiesPosition.FindProperty("ObjCellId")!, aCEDatabaseModelsShardBiotaPropertiesPositionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)origin_XColumnBase1, biotaPropertiesPosition.FindProperty("OriginX")!, aCEDatabaseModelsShardBiotaPropertiesPositionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)origin_YColumnBase1, biotaPropertiesPosition.FindProperty("OriginY")!, aCEDatabaseModelsShardBiotaPropertiesPositionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)origin_ZColumnBase1, biotaPropertiesPosition.FindProperty("OriginZ")!, aCEDatabaseModelsShardBiotaPropertiesPositionMappingBase);

            var tableMappings20 = new List<TableMapping>();
            biotaPropertiesPosition.SetRuntimeAnnotation("Relational:TableMappings", tableMappings20);
            var biota_properties_positionTable = new Table("biota_properties_position", null, relationalModel);
            var object_IdColumn17 = new Column("object_Id", "bigint unsigned", biota_properties_positionTable);
            biota_properties_positionTable.Columns.Add("object_Id", object_IdColumn17);
            var position_TypeColumn = new Column("position_Type", "smallint unsigned", biota_properties_positionTable);
            biota_properties_positionTable.Columns.Add("position_Type", position_TypeColumn);
            var angles_WColumn1 = new Column("angles_W", "float", biota_properties_positionTable);
            biota_properties_positionTable.Columns.Add("angles_W", angles_WColumn1);
            var angles_XColumn1 = new Column("angles_X", "float", biota_properties_positionTable);
            biota_properties_positionTable.Columns.Add("angles_X", angles_XColumn1);
            var angles_YColumn1 = new Column("angles_Y", "float", biota_properties_positionTable);
            biota_properties_positionTable.Columns.Add("angles_Y", angles_YColumn1);
            var angles_ZColumn1 = new Column("angles_Z", "float", biota_properties_positionTable);
            biota_properties_positionTable.Columns.Add("angles_Z", angles_ZColumn1);
            var instanceColumn = new Column("instance", "int unsigned", biota_properties_positionTable)
            {
                IsNullable = true
            };
            biota_properties_positionTable.Columns.Add("instance", instanceColumn);
            var obj_Cell_IdColumn1 = new Column("obj_Cell_Id", "int unsigned", biota_properties_positionTable);
            biota_properties_positionTable.Columns.Add("obj_Cell_Id", obj_Cell_IdColumn1);
            var origin_XColumn1 = new Column("origin_X", "float", biota_properties_positionTable);
            biota_properties_positionTable.Columns.Add("origin_X", origin_XColumn1);
            var origin_YColumn1 = new Column("origin_Y", "float", biota_properties_positionTable);
            biota_properties_positionTable.Columns.Add("origin_Y", origin_YColumn1);
            var origin_ZColumn1 = new Column("origin_Z", "float", biota_properties_positionTable);
            biota_properties_positionTable.Columns.Add("origin_Z", origin_ZColumn1);
            var pRIMARY20 = new UniqueConstraint("PRIMARY", biota_properties_positionTable, new[] { object_IdColumn17, position_TypeColumn });
            biota_properties_positionTable.PrimaryKey = pRIMARY20;
            pRIMARY20.AddAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });
            var pRIMARY20Uc = RelationalModel.GetKey(this,
                "ACE.Database.Models.Shard.BiotaPropertiesPosition",
                new[] { "ObjectId", "PositionType" });
            pRIMARY20.MappedKeys.Add(pRIMARY20Uc);
            RelationalModel.GetOrCreateUniqueConstraints(pRIMARY20Uc).Add(pRIMARY20);
            biota_properties_positionTable.UniqueConstraints.Add("PRIMARY", pRIMARY20);
            var type_cell_idx = new TableIndex(
            "type_cell_idx", biota_properties_positionTable, new[] { position_TypeColumn, obj_Cell_IdColumn1 }, false);
            var type_cell_idxIx = RelationalModel.GetIndex(this,
                "ACE.Database.Models.Shard.BiotaPropertiesPosition",
                "type_cell_idx");
            type_cell_idx.MappedIndexes.Add(type_cell_idxIx);
            RelationalModel.GetOrCreateTableIndexes(type_cell_idxIx).Add(type_cell_idx);
            biota_properties_positionTable.Indexes.Add("type_cell_idx", type_cell_idx);
            relationalModel.Tables.Add(("biota_properties_position", null), biota_properties_positionTable);
            var biota_properties_positionTableMapping = new TableMapping(biotaPropertiesPosition, biota_properties_positionTable, true);
            biota_properties_positionTable.AddTypeMapping(biota_properties_positionTableMapping, false);
            tableMappings20.Add(biota_properties_positionTableMapping);
            RelationalModel.CreateColumnMapping(object_IdColumn17, biotaPropertiesPosition.FindProperty("ObjectId")!, biota_properties_positionTableMapping);
            RelationalModel.CreateColumnMapping(position_TypeColumn, biotaPropertiesPosition.FindProperty("PositionType")!, biota_properties_positionTableMapping);
            RelationalModel.CreateColumnMapping(angles_WColumn1, biotaPropertiesPosition.FindProperty("AnglesW")!, biota_properties_positionTableMapping);
            RelationalModel.CreateColumnMapping(angles_XColumn1, biotaPropertiesPosition.FindProperty("AnglesX")!, biota_properties_positionTableMapping);
            RelationalModel.CreateColumnMapping(angles_YColumn1, biotaPropertiesPosition.FindProperty("AnglesY")!, biota_properties_positionTableMapping);
            RelationalModel.CreateColumnMapping(angles_ZColumn1, biotaPropertiesPosition.FindProperty("AnglesZ")!, biota_properties_positionTableMapping);
            RelationalModel.CreateColumnMapping(instanceColumn, biotaPropertiesPosition.FindProperty("Instance")!, biota_properties_positionTableMapping);
            RelationalModel.CreateColumnMapping(obj_Cell_IdColumn1, biotaPropertiesPosition.FindProperty("ObjCellId")!, biota_properties_positionTableMapping);
            RelationalModel.CreateColumnMapping(origin_XColumn1, biotaPropertiesPosition.FindProperty("OriginX")!, biota_properties_positionTableMapping);
            RelationalModel.CreateColumnMapping(origin_YColumn1, biotaPropertiesPosition.FindProperty("OriginY")!, biota_properties_positionTableMapping);
            RelationalModel.CreateColumnMapping(origin_ZColumn1, biotaPropertiesPosition.FindProperty("OriginZ")!, biota_properties_positionTableMapping);

            var biotaPropertiesSkill = FindEntityType("ACE.Database.Models.Shard.BiotaPropertiesSkill")!;

            var defaultTableMappings21 = new List<TableMappingBase<ColumnMappingBase>>();
            biotaPropertiesSkill.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings21);
            var aCEDatabaseModelsShardBiotaPropertiesSkillTableBase = new TableBase("ACE.Database.Models.Shard.BiotaPropertiesSkill", null, relationalModel);
            var init_LevelColumnBase1 = new ColumnBase<ColumnMappingBase>("init_Level", "int unsigned", aCEDatabaseModelsShardBiotaPropertiesSkillTableBase);
            aCEDatabaseModelsShardBiotaPropertiesSkillTableBase.Columns.Add("init_Level", init_LevelColumnBase1);
            var last_Used_TimeColumnBase = new ColumnBase<ColumnMappingBase>("last_Used_Time", "double", aCEDatabaseModelsShardBiotaPropertiesSkillTableBase);
            aCEDatabaseModelsShardBiotaPropertiesSkillTableBase.Columns.Add("last_Used_Time", last_Used_TimeColumnBase);
            var level_From_P_PColumnBase = new ColumnBase<ColumnMappingBase>("level_From_P_P", "smallint unsigned", aCEDatabaseModelsShardBiotaPropertiesSkillTableBase);
            aCEDatabaseModelsShardBiotaPropertiesSkillTableBase.Columns.Add("level_From_P_P", level_From_P_PColumnBase);
            var object_IdColumnBase18 = new ColumnBase<ColumnMappingBase>("object_Id", "bigint unsigned", aCEDatabaseModelsShardBiotaPropertiesSkillTableBase);
            aCEDatabaseModelsShardBiotaPropertiesSkillTableBase.Columns.Add("object_Id", object_IdColumnBase18);
            var p_pColumnBase = new ColumnBase<ColumnMappingBase>("p_p", "int unsigned", aCEDatabaseModelsShardBiotaPropertiesSkillTableBase);
            aCEDatabaseModelsShardBiotaPropertiesSkillTableBase.Columns.Add("p_p", p_pColumnBase);
            var resistance_At_Last_CheckColumnBase = new ColumnBase<ColumnMappingBase>("resistance_At_Last_Check", "int unsigned", aCEDatabaseModelsShardBiotaPropertiesSkillTableBase);
            aCEDatabaseModelsShardBiotaPropertiesSkillTableBase.Columns.Add("resistance_At_Last_Check", resistance_At_Last_CheckColumnBase);
            var s_a_cColumnBase = new ColumnBase<ColumnMappingBase>("s_a_c", "int unsigned", aCEDatabaseModelsShardBiotaPropertiesSkillTableBase);
            aCEDatabaseModelsShardBiotaPropertiesSkillTableBase.Columns.Add("s_a_c", s_a_cColumnBase);
            var typeColumnBase8 = new ColumnBase<ColumnMappingBase>("type", "smallint unsigned", aCEDatabaseModelsShardBiotaPropertiesSkillTableBase);
            aCEDatabaseModelsShardBiotaPropertiesSkillTableBase.Columns.Add("type", typeColumnBase8);
            relationalModel.DefaultTables.Add("ACE.Database.Models.Shard.BiotaPropertiesSkill", aCEDatabaseModelsShardBiotaPropertiesSkillTableBase);
            var aCEDatabaseModelsShardBiotaPropertiesSkillMappingBase = new TableMappingBase<ColumnMappingBase>(biotaPropertiesSkill, aCEDatabaseModelsShardBiotaPropertiesSkillTableBase, true);
            aCEDatabaseModelsShardBiotaPropertiesSkillTableBase.AddTypeMapping(aCEDatabaseModelsShardBiotaPropertiesSkillMappingBase, false);
            defaultTableMappings21.Add(aCEDatabaseModelsShardBiotaPropertiesSkillMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)object_IdColumnBase18, biotaPropertiesSkill.FindProperty("ObjectId")!, aCEDatabaseModelsShardBiotaPropertiesSkillMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)typeColumnBase8, biotaPropertiesSkill.FindProperty("Type")!, aCEDatabaseModelsShardBiotaPropertiesSkillMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)init_LevelColumnBase1, biotaPropertiesSkill.FindProperty("InitLevel")!, aCEDatabaseModelsShardBiotaPropertiesSkillMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)last_Used_TimeColumnBase, biotaPropertiesSkill.FindProperty("LastUsedTime")!, aCEDatabaseModelsShardBiotaPropertiesSkillMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)level_From_P_PColumnBase, biotaPropertiesSkill.FindProperty("LevelFromPP")!, aCEDatabaseModelsShardBiotaPropertiesSkillMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)p_pColumnBase, biotaPropertiesSkill.FindProperty("PP")!, aCEDatabaseModelsShardBiotaPropertiesSkillMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)resistance_At_Last_CheckColumnBase, biotaPropertiesSkill.FindProperty("ResistanceAtLastCheck")!, aCEDatabaseModelsShardBiotaPropertiesSkillMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)s_a_cColumnBase, biotaPropertiesSkill.FindProperty("SAC")!, aCEDatabaseModelsShardBiotaPropertiesSkillMappingBase);

            var tableMappings21 = new List<TableMapping>();
            biotaPropertiesSkill.SetRuntimeAnnotation("Relational:TableMappings", tableMappings21);
            var biota_properties_skillTable = new Table("biota_properties_skill", null, relationalModel);
            var object_IdColumn18 = new Column("object_Id", "bigint unsigned", biota_properties_skillTable);
            biota_properties_skillTable.Columns.Add("object_Id", object_IdColumn18);
            var typeColumn8 = new Column("type", "smallint unsigned", biota_properties_skillTable);
            biota_properties_skillTable.Columns.Add("type", typeColumn8);
            var init_LevelColumn1 = new Column("init_Level", "int unsigned", biota_properties_skillTable);
            biota_properties_skillTable.Columns.Add("init_Level", init_LevelColumn1);
            var last_Used_TimeColumn = new Column("last_Used_Time", "double", biota_properties_skillTable);
            biota_properties_skillTable.Columns.Add("last_Used_Time", last_Used_TimeColumn);
            var level_From_P_PColumn = new Column("level_From_P_P", "smallint unsigned", biota_properties_skillTable);
            biota_properties_skillTable.Columns.Add("level_From_P_P", level_From_P_PColumn);
            var p_pColumn = new Column("p_p", "int unsigned", biota_properties_skillTable);
            biota_properties_skillTable.Columns.Add("p_p", p_pColumn);
            var resistance_At_Last_CheckColumn = new Column("resistance_At_Last_Check", "int unsigned", biota_properties_skillTable);
            biota_properties_skillTable.Columns.Add("resistance_At_Last_Check", resistance_At_Last_CheckColumn);
            var s_a_cColumn = new Column("s_a_c", "int unsigned", biota_properties_skillTable);
            biota_properties_skillTable.Columns.Add("s_a_c", s_a_cColumn);
            var pRIMARY21 = new UniqueConstraint("PRIMARY", biota_properties_skillTable, new[] { object_IdColumn18, typeColumn8 });
            biota_properties_skillTable.PrimaryKey = pRIMARY21;
            pRIMARY21.AddAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });
            var pRIMARY21Uc = RelationalModel.GetKey(this,
                "ACE.Database.Models.Shard.BiotaPropertiesSkill",
                new[] { "ObjectId", "Type" });
            pRIMARY21.MappedKeys.Add(pRIMARY21Uc);
            RelationalModel.GetOrCreateUniqueConstraints(pRIMARY21Uc).Add(pRIMARY21);
            biota_properties_skillTable.UniqueConstraints.Add("PRIMARY", pRIMARY21);
            relationalModel.Tables.Add(("biota_properties_skill", null), biota_properties_skillTable);
            var biota_properties_skillTableMapping = new TableMapping(biotaPropertiesSkill, biota_properties_skillTable, true);
            biota_properties_skillTable.AddTypeMapping(biota_properties_skillTableMapping, false);
            tableMappings21.Add(biota_properties_skillTableMapping);
            RelationalModel.CreateColumnMapping(object_IdColumn18, biotaPropertiesSkill.FindProperty("ObjectId")!, biota_properties_skillTableMapping);
            RelationalModel.CreateColumnMapping(typeColumn8, biotaPropertiesSkill.FindProperty("Type")!, biota_properties_skillTableMapping);
            RelationalModel.CreateColumnMapping(init_LevelColumn1, biotaPropertiesSkill.FindProperty("InitLevel")!, biota_properties_skillTableMapping);
            RelationalModel.CreateColumnMapping(last_Used_TimeColumn, biotaPropertiesSkill.FindProperty("LastUsedTime")!, biota_properties_skillTableMapping);
            RelationalModel.CreateColumnMapping(level_From_P_PColumn, biotaPropertiesSkill.FindProperty("LevelFromPP")!, biota_properties_skillTableMapping);
            RelationalModel.CreateColumnMapping(p_pColumn, biotaPropertiesSkill.FindProperty("PP")!, biota_properties_skillTableMapping);
            RelationalModel.CreateColumnMapping(resistance_At_Last_CheckColumn, biotaPropertiesSkill.FindProperty("ResistanceAtLastCheck")!, biota_properties_skillTableMapping);
            RelationalModel.CreateColumnMapping(s_a_cColumn, biotaPropertiesSkill.FindProperty("SAC")!, biota_properties_skillTableMapping);

            var biotaPropertiesSpellBook = FindEntityType("ACE.Database.Models.Shard.BiotaPropertiesSpellBook")!;

            var defaultTableMappings22 = new List<TableMappingBase<ColumnMappingBase>>();
            biotaPropertiesSpellBook.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings22);
            var aCEDatabaseModelsShardBiotaPropertiesSpellBookTableBase = new TableBase("ACE.Database.Models.Shard.BiotaPropertiesSpellBook", null, relationalModel);
            var object_IdColumnBase19 = new ColumnBase<ColumnMappingBase>("object_Id", "bigint unsigned", aCEDatabaseModelsShardBiotaPropertiesSpellBookTableBase);
            aCEDatabaseModelsShardBiotaPropertiesSpellBookTableBase.Columns.Add("object_Id", object_IdColumnBase19);
            var probabilityColumnBase1 = new ColumnBase<ColumnMappingBase>("probability", "float", aCEDatabaseModelsShardBiotaPropertiesSpellBookTableBase);
            aCEDatabaseModelsShardBiotaPropertiesSpellBookTableBase.Columns.Add("probability", probabilityColumnBase1);
            var spellColumnBase = new ColumnBase<ColumnMappingBase>("spell", "int", aCEDatabaseModelsShardBiotaPropertiesSpellBookTableBase);
            aCEDatabaseModelsShardBiotaPropertiesSpellBookTableBase.Columns.Add("spell", spellColumnBase);
            relationalModel.DefaultTables.Add("ACE.Database.Models.Shard.BiotaPropertiesSpellBook", aCEDatabaseModelsShardBiotaPropertiesSpellBookTableBase);
            var aCEDatabaseModelsShardBiotaPropertiesSpellBookMappingBase = new TableMappingBase<ColumnMappingBase>(biotaPropertiesSpellBook, aCEDatabaseModelsShardBiotaPropertiesSpellBookTableBase, true);
            aCEDatabaseModelsShardBiotaPropertiesSpellBookTableBase.AddTypeMapping(aCEDatabaseModelsShardBiotaPropertiesSpellBookMappingBase, false);
            defaultTableMappings22.Add(aCEDatabaseModelsShardBiotaPropertiesSpellBookMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)object_IdColumnBase19, biotaPropertiesSpellBook.FindProperty("ObjectId")!, aCEDatabaseModelsShardBiotaPropertiesSpellBookMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)spellColumnBase, biotaPropertiesSpellBook.FindProperty("Spell")!, aCEDatabaseModelsShardBiotaPropertiesSpellBookMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)probabilityColumnBase1, biotaPropertiesSpellBook.FindProperty("Probability")!, aCEDatabaseModelsShardBiotaPropertiesSpellBookMappingBase);

            var tableMappings22 = new List<TableMapping>();
            biotaPropertiesSpellBook.SetRuntimeAnnotation("Relational:TableMappings", tableMappings22);
            var biota_properties_spell_bookTable = new Table("biota_properties_spell_book", null, relationalModel);
            var object_IdColumn19 = new Column("object_Id", "bigint unsigned", biota_properties_spell_bookTable);
            biota_properties_spell_bookTable.Columns.Add("object_Id", object_IdColumn19);
            var spellColumn = new Column("spell", "int", biota_properties_spell_bookTable);
            biota_properties_spell_bookTable.Columns.Add("spell", spellColumn);
            var probabilityColumn1 = new Column("probability", "float", biota_properties_spell_bookTable);
            biota_properties_spell_bookTable.Columns.Add("probability", probabilityColumn1);
            var pRIMARY22 = new UniqueConstraint("PRIMARY", biota_properties_spell_bookTable, new[] { object_IdColumn19, spellColumn });
            biota_properties_spell_bookTable.PrimaryKey = pRIMARY22;
            pRIMARY22.AddAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });
            var pRIMARY22Uc = RelationalModel.GetKey(this,
                "ACE.Database.Models.Shard.BiotaPropertiesSpellBook",
                new[] { "ObjectId", "Spell" });
            pRIMARY22.MappedKeys.Add(pRIMARY22Uc);
            RelationalModel.GetOrCreateUniqueConstraints(pRIMARY22Uc).Add(pRIMARY22);
            biota_properties_spell_bookTable.UniqueConstraints.Add("PRIMARY", pRIMARY22);
            relationalModel.Tables.Add(("biota_properties_spell_book", null), biota_properties_spell_bookTable);
            var biota_properties_spell_bookTableMapping = new TableMapping(biotaPropertiesSpellBook, biota_properties_spell_bookTable, true);
            biota_properties_spell_bookTable.AddTypeMapping(biota_properties_spell_bookTableMapping, false);
            tableMappings22.Add(biota_properties_spell_bookTableMapping);
            RelationalModel.CreateColumnMapping(object_IdColumn19, biotaPropertiesSpellBook.FindProperty("ObjectId")!, biota_properties_spell_bookTableMapping);
            RelationalModel.CreateColumnMapping(spellColumn, biotaPropertiesSpellBook.FindProperty("Spell")!, biota_properties_spell_bookTableMapping);
            RelationalModel.CreateColumnMapping(probabilityColumn1, biotaPropertiesSpellBook.FindProperty("Probability")!, biota_properties_spell_bookTableMapping);

            var biotaPropertiesString = FindEntityType("ACE.Database.Models.Shard.BiotaPropertiesString")!;

            var defaultTableMappings23 = new List<TableMappingBase<ColumnMappingBase>>();
            biotaPropertiesString.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings23);
            var aCEDatabaseModelsShardBiotaPropertiesStringTableBase = new TableBase("ACE.Database.Models.Shard.BiotaPropertiesString", null, relationalModel);
            var object_IdColumnBase20 = new ColumnBase<ColumnMappingBase>("object_Id", "bigint unsigned", aCEDatabaseModelsShardBiotaPropertiesStringTableBase);
            aCEDatabaseModelsShardBiotaPropertiesStringTableBase.Columns.Add("object_Id", object_IdColumnBase20);
            var typeColumnBase9 = new ColumnBase<ColumnMappingBase>("type", "smallint unsigned", aCEDatabaseModelsShardBiotaPropertiesStringTableBase);
            aCEDatabaseModelsShardBiotaPropertiesStringTableBase.Columns.Add("type", typeColumnBase9);
            var valueColumnBase5 = new ColumnBase<ColumnMappingBase>("value", "text", aCEDatabaseModelsShardBiotaPropertiesStringTableBase);
            aCEDatabaseModelsShardBiotaPropertiesStringTableBase.Columns.Add("value", valueColumnBase5);
            relationalModel.DefaultTables.Add("ACE.Database.Models.Shard.BiotaPropertiesString", aCEDatabaseModelsShardBiotaPropertiesStringTableBase);
            var aCEDatabaseModelsShardBiotaPropertiesStringMappingBase = new TableMappingBase<ColumnMappingBase>(biotaPropertiesString, aCEDatabaseModelsShardBiotaPropertiesStringTableBase, true);
            aCEDatabaseModelsShardBiotaPropertiesStringTableBase.AddTypeMapping(aCEDatabaseModelsShardBiotaPropertiesStringMappingBase, false);
            defaultTableMappings23.Add(aCEDatabaseModelsShardBiotaPropertiesStringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)object_IdColumnBase20, biotaPropertiesString.FindProperty("ObjectId")!, aCEDatabaseModelsShardBiotaPropertiesStringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)typeColumnBase9, biotaPropertiesString.FindProperty("Type")!, aCEDatabaseModelsShardBiotaPropertiesStringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)valueColumnBase5, biotaPropertiesString.FindProperty("Value")!, aCEDatabaseModelsShardBiotaPropertiesStringMappingBase);

            var tableMappings23 = new List<TableMapping>();
            biotaPropertiesString.SetRuntimeAnnotation("Relational:TableMappings", tableMappings23);
            var biota_properties_stringTable = new Table("biota_properties_string", null, relationalModel);
            var object_IdColumn20 = new Column("object_Id", "bigint unsigned", biota_properties_stringTable);
            biota_properties_stringTable.Columns.Add("object_Id", object_IdColumn20);
            var typeColumn9 = new Column("type", "smallint unsigned", biota_properties_stringTable);
            biota_properties_stringTable.Columns.Add("type", typeColumn9);
            var valueColumn5 = new Column("value", "text", biota_properties_stringTable);
            biota_properties_stringTable.Columns.Add("value", valueColumn5);
            var pRIMARY23 = new UniqueConstraint("PRIMARY", biota_properties_stringTable, new[] { object_IdColumn20, typeColumn9 });
            biota_properties_stringTable.PrimaryKey = pRIMARY23;
            pRIMARY23.AddAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });
            var pRIMARY23Uc = RelationalModel.GetKey(this,
                "ACE.Database.Models.Shard.BiotaPropertiesString",
                new[] { "ObjectId", "Type" });
            pRIMARY23.MappedKeys.Add(pRIMARY23Uc);
            RelationalModel.GetOrCreateUniqueConstraints(pRIMARY23Uc).Add(pRIMARY23);
            biota_properties_stringTable.UniqueConstraints.Add("PRIMARY", pRIMARY23);
            relationalModel.Tables.Add(("biota_properties_string", null), biota_properties_stringTable);
            var biota_properties_stringTableMapping = new TableMapping(biotaPropertiesString, biota_properties_stringTable, true);
            biota_properties_stringTable.AddTypeMapping(biota_properties_stringTableMapping, false);
            tableMappings23.Add(biota_properties_stringTableMapping);
            RelationalModel.CreateColumnMapping(object_IdColumn20, biotaPropertiesString.FindProperty("ObjectId")!, biota_properties_stringTableMapping);
            RelationalModel.CreateColumnMapping(typeColumn9, biotaPropertiesString.FindProperty("Type")!, biota_properties_stringTableMapping);
            RelationalModel.CreateColumnMapping(valueColumn5, biotaPropertiesString.FindProperty("Value")!, biota_properties_stringTableMapping);

            var biotaPropertiesTextureMap = FindEntityType("ACE.Database.Models.Shard.BiotaPropertiesTextureMap")!;

            var defaultTableMappings24 = new List<TableMappingBase<ColumnMappingBase>>();
            biotaPropertiesTextureMap.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings24);
            var aCEDatabaseModelsShardBiotaPropertiesTextureMapTableBase = new TableBase("ACE.Database.Models.Shard.BiotaPropertiesTextureMap", null, relationalModel);
            var idColumnBase8 = new ColumnBase<ColumnMappingBase>("id", "int unsigned", aCEDatabaseModelsShardBiotaPropertiesTextureMapTableBase);
            aCEDatabaseModelsShardBiotaPropertiesTextureMapTableBase.Columns.Add("id", idColumnBase8);
            var indexColumnBase0 = new ColumnBase<ColumnMappingBase>("index", "tinyint unsigned", aCEDatabaseModelsShardBiotaPropertiesTextureMapTableBase);
            aCEDatabaseModelsShardBiotaPropertiesTextureMapTableBase.Columns.Add("index", indexColumnBase0);
            var new_IdColumnBase = new ColumnBase<ColumnMappingBase>("new_Id", "int unsigned", aCEDatabaseModelsShardBiotaPropertiesTextureMapTableBase);
            aCEDatabaseModelsShardBiotaPropertiesTextureMapTableBase.Columns.Add("new_Id", new_IdColumnBase);
            var object_IdColumnBase21 = new ColumnBase<ColumnMappingBase>("object_Id", "bigint unsigned", aCEDatabaseModelsShardBiotaPropertiesTextureMapTableBase);
            aCEDatabaseModelsShardBiotaPropertiesTextureMapTableBase.Columns.Add("object_Id", object_IdColumnBase21);
            var old_IdColumnBase = new ColumnBase<ColumnMappingBase>("old_Id", "int unsigned", aCEDatabaseModelsShardBiotaPropertiesTextureMapTableBase);
            aCEDatabaseModelsShardBiotaPropertiesTextureMapTableBase.Columns.Add("old_Id", old_IdColumnBase);
            var orderColumnBase2 = new ColumnBase<ColumnMappingBase>("order", "tinyint unsigned", aCEDatabaseModelsShardBiotaPropertiesTextureMapTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsShardBiotaPropertiesTextureMapTableBase.Columns.Add("order", orderColumnBase2);
            relationalModel.DefaultTables.Add("ACE.Database.Models.Shard.BiotaPropertiesTextureMap", aCEDatabaseModelsShardBiotaPropertiesTextureMapTableBase);
            var aCEDatabaseModelsShardBiotaPropertiesTextureMapMappingBase = new TableMappingBase<ColumnMappingBase>(biotaPropertiesTextureMap, aCEDatabaseModelsShardBiotaPropertiesTextureMapTableBase, true);
            aCEDatabaseModelsShardBiotaPropertiesTextureMapTableBase.AddTypeMapping(aCEDatabaseModelsShardBiotaPropertiesTextureMapMappingBase, false);
            defaultTableMappings24.Add(aCEDatabaseModelsShardBiotaPropertiesTextureMapMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase8, biotaPropertiesTextureMap.FindProperty("Id")!, aCEDatabaseModelsShardBiotaPropertiesTextureMapMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)indexColumnBase0, biotaPropertiesTextureMap.FindProperty("Index")!, aCEDatabaseModelsShardBiotaPropertiesTextureMapMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)new_IdColumnBase, biotaPropertiesTextureMap.FindProperty("NewId")!, aCEDatabaseModelsShardBiotaPropertiesTextureMapMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)object_IdColumnBase21, biotaPropertiesTextureMap.FindProperty("ObjectId")!, aCEDatabaseModelsShardBiotaPropertiesTextureMapMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)old_IdColumnBase, biotaPropertiesTextureMap.FindProperty("OldId")!, aCEDatabaseModelsShardBiotaPropertiesTextureMapMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)orderColumnBase2, biotaPropertiesTextureMap.FindProperty("Order")!, aCEDatabaseModelsShardBiotaPropertiesTextureMapMappingBase);

            var tableMappings24 = new List<TableMapping>();
            biotaPropertiesTextureMap.SetRuntimeAnnotation("Relational:TableMappings", tableMappings24);
            var biota_properties_texture_mapTable = new Table("biota_properties_texture_map", null, relationalModel);
            var idColumn8 = new Column("id", "int unsigned", biota_properties_texture_mapTable);
            biota_properties_texture_mapTable.Columns.Add("id", idColumn8);
            var indexColumn0 = new Column("index", "tinyint unsigned", biota_properties_texture_mapTable);
            biota_properties_texture_mapTable.Columns.Add("index", indexColumn0);
            var new_IdColumn = new Column("new_Id", "int unsigned", biota_properties_texture_mapTable);
            biota_properties_texture_mapTable.Columns.Add("new_Id", new_IdColumn);
            var object_IdColumn21 = new Column("object_Id", "bigint unsigned", biota_properties_texture_mapTable);
            biota_properties_texture_mapTable.Columns.Add("object_Id", object_IdColumn21);
            var old_IdColumn = new Column("old_Id", "int unsigned", biota_properties_texture_mapTable);
            biota_properties_texture_mapTable.Columns.Add("old_Id", old_IdColumn);
            var orderColumn2 = new Column("order", "tinyint unsigned", biota_properties_texture_mapTable)
            {
                IsNullable = true
            };
            biota_properties_texture_mapTable.Columns.Add("order", orderColumn2);
            var pRIMARY24 = new UniqueConstraint("PRIMARY", biota_properties_texture_mapTable, new[] { idColumn8 });
            biota_properties_texture_mapTable.PrimaryKey = pRIMARY24;
            var pRIMARY24Uc = RelationalModel.GetKey(this,
                "ACE.Database.Models.Shard.BiotaPropertiesTextureMap",
                new[] { "Id" });
            pRIMARY24.MappedKeys.Add(pRIMARY24Uc);
            RelationalModel.GetOrCreateUniqueConstraints(pRIMARY24Uc).Add(pRIMARY24);
            biota_properties_texture_mapTable.UniqueConstraints.Add("PRIMARY", pRIMARY24);
            var wcid_texturemap_idx = new TableIndex(
            "wcid_texturemap_idx", biota_properties_texture_mapTable, new[] { object_IdColumn21 }, false);
            var wcid_texturemap_idxIx = RelationalModel.GetIndex(this,
                "ACE.Database.Models.Shard.BiotaPropertiesTextureMap",
                "wcid_texturemap_idx");
            wcid_texturemap_idx.MappedIndexes.Add(wcid_texturemap_idxIx);
            RelationalModel.GetOrCreateTableIndexes(wcid_texturemap_idxIx).Add(wcid_texturemap_idx);
            biota_properties_texture_mapTable.Indexes.Add("wcid_texturemap_idx", wcid_texturemap_idx);
            relationalModel.Tables.Add(("biota_properties_texture_map", null), biota_properties_texture_mapTable);
            var biota_properties_texture_mapTableMapping = new TableMapping(biotaPropertiesTextureMap, biota_properties_texture_mapTable, true);
            biota_properties_texture_mapTable.AddTypeMapping(biota_properties_texture_mapTableMapping, false);
            tableMappings24.Add(biota_properties_texture_mapTableMapping);
            RelationalModel.CreateColumnMapping(idColumn8, biotaPropertiesTextureMap.FindProperty("Id")!, biota_properties_texture_mapTableMapping);
            RelationalModel.CreateColumnMapping(indexColumn0, biotaPropertiesTextureMap.FindProperty("Index")!, biota_properties_texture_mapTableMapping);
            RelationalModel.CreateColumnMapping(new_IdColumn, biotaPropertiesTextureMap.FindProperty("NewId")!, biota_properties_texture_mapTableMapping);
            RelationalModel.CreateColumnMapping(object_IdColumn21, biotaPropertiesTextureMap.FindProperty("ObjectId")!, biota_properties_texture_mapTableMapping);
            RelationalModel.CreateColumnMapping(old_IdColumn, biotaPropertiesTextureMap.FindProperty("OldId")!, biota_properties_texture_mapTableMapping);
            RelationalModel.CreateColumnMapping(orderColumn2, biotaPropertiesTextureMap.FindProperty("Order")!, biota_properties_texture_mapTableMapping);

            var character = FindEntityType("ACE.Database.Models.Shard.Character")!;

            var defaultTableMappings25 = new List<TableMappingBase<ColumnMappingBase>>();
            character.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings25);
            var aCEDatabaseModelsShardCharacterTableBase = new TableBase("ACE.Database.Models.Shard.Character", null, relationalModel);
            var account_IdColumnBase = new ColumnBase<ColumnMappingBase>("account_Id", "int unsigned", aCEDatabaseModelsShardCharacterTableBase);
            aCEDatabaseModelsShardCharacterTableBase.Columns.Add("account_Id", account_IdColumnBase);
            var character_Options_1ColumnBase = new ColumnBase<ColumnMappingBase>("character_Options_1", "int", aCEDatabaseModelsShardCharacterTableBase);
            aCEDatabaseModelsShardCharacterTableBase.Columns.Add("character_Options_1", character_Options_1ColumnBase);
            var character_Options_2ColumnBase = new ColumnBase<ColumnMappingBase>("character_Options_2", "int", aCEDatabaseModelsShardCharacterTableBase);
            aCEDatabaseModelsShardCharacterTableBase.Columns.Add("character_Options_2", character_Options_2ColumnBase);
            var default_Hair_TextureColumnBase = new ColumnBase<ColumnMappingBase>("default_Hair_Texture", "int unsigned", aCEDatabaseModelsShardCharacterTableBase);
            aCEDatabaseModelsShardCharacterTableBase.Columns.Add("default_Hair_Texture", default_Hair_TextureColumnBase);
            var delete_TimeColumnBase = new ColumnBase<ColumnMappingBase>("delete_Time", "bigint unsigned", aCEDatabaseModelsShardCharacterTableBase);
            aCEDatabaseModelsShardCharacterTableBase.Columns.Add("delete_Time", delete_TimeColumnBase);
            var gameplay_OptionsColumnBase = new ColumnBase<ColumnMappingBase>("gameplay_Options", "blob", aCEDatabaseModelsShardCharacterTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsShardCharacterTableBase.Columns.Add("gameplay_Options", gameplay_OptionsColumnBase);
            var hair_TextureColumnBase = new ColumnBase<ColumnMappingBase>("hair_Texture", "int unsigned", aCEDatabaseModelsShardCharacterTableBase);
            aCEDatabaseModelsShardCharacterTableBase.Columns.Add("hair_Texture", hair_TextureColumnBase);
            var idColumnBase9 = new ColumnBase<ColumnMappingBase>("id", "bigint unsigned", aCEDatabaseModelsShardCharacterTableBase);
            aCEDatabaseModelsShardCharacterTableBase.Columns.Add("id", idColumnBase9);
            var is_DeletedColumnBase = new ColumnBase<ColumnMappingBase>("is_Deleted", "bit(1)", aCEDatabaseModelsShardCharacterTableBase);
            aCEDatabaseModelsShardCharacterTableBase.Columns.Add("is_Deleted", is_DeletedColumnBase);
            var is_PlussedColumnBase = new ColumnBase<ColumnMappingBase>("is_Plussed", "bit(1)", aCEDatabaseModelsShardCharacterTableBase);
            aCEDatabaseModelsShardCharacterTableBase.Columns.Add("is_Plussed", is_PlussedColumnBase);
            var last_Login_TimestampColumnBase = new ColumnBase<ColumnMappingBase>("last_Login_Timestamp", "double", aCEDatabaseModelsShardCharacterTableBase);
            aCEDatabaseModelsShardCharacterTableBase.Columns.Add("last_Login_Timestamp", last_Login_TimestampColumnBase);
            var nameColumnBase = new ColumnBase<ColumnMappingBase>("name", "varchar(255)", aCEDatabaseModelsShardCharacterTableBase);
            aCEDatabaseModelsShardCharacterTableBase.Columns.Add("name", nameColumnBase);
            var spellbook_FiltersColumnBase = new ColumnBase<ColumnMappingBase>("spellbook_Filters", "int unsigned", aCEDatabaseModelsShardCharacterTableBase);
            aCEDatabaseModelsShardCharacterTableBase.Columns.Add("spellbook_Filters", spellbook_FiltersColumnBase);
            var total_LoginsColumnBase = new ColumnBase<ColumnMappingBase>("total_Logins", "int", aCEDatabaseModelsShardCharacterTableBase);
            aCEDatabaseModelsShardCharacterTableBase.Columns.Add("total_Logins", total_LoginsColumnBase);
            relationalModel.DefaultTables.Add("ACE.Database.Models.Shard.Character", aCEDatabaseModelsShardCharacterTableBase);
            var aCEDatabaseModelsShardCharacterMappingBase = new TableMappingBase<ColumnMappingBase>(character, aCEDatabaseModelsShardCharacterTableBase, true);
            aCEDatabaseModelsShardCharacterTableBase.AddTypeMapping(aCEDatabaseModelsShardCharacterMappingBase, false);
            defaultTableMappings25.Add(aCEDatabaseModelsShardCharacterMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase9, character.FindProperty("Id")!, aCEDatabaseModelsShardCharacterMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)account_IdColumnBase, character.FindProperty("AccountId")!, aCEDatabaseModelsShardCharacterMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)character_Options_1ColumnBase, character.FindProperty("CharacterOptions1")!, aCEDatabaseModelsShardCharacterMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)character_Options_2ColumnBase, character.FindProperty("CharacterOptions2")!, aCEDatabaseModelsShardCharacterMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)default_Hair_TextureColumnBase, character.FindProperty("DefaultHairTexture")!, aCEDatabaseModelsShardCharacterMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)delete_TimeColumnBase, character.FindProperty("DeleteTime")!, aCEDatabaseModelsShardCharacterMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)gameplay_OptionsColumnBase, character.FindProperty("GameplayOptions")!, aCEDatabaseModelsShardCharacterMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)hair_TextureColumnBase, character.FindProperty("HairTexture")!, aCEDatabaseModelsShardCharacterMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)is_DeletedColumnBase, character.FindProperty("IsDeleted")!, aCEDatabaseModelsShardCharacterMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)is_PlussedColumnBase, character.FindProperty("IsPlussed")!, aCEDatabaseModelsShardCharacterMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)last_Login_TimestampColumnBase, character.FindProperty("LastLoginTimestamp")!, aCEDatabaseModelsShardCharacterMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nameColumnBase, character.FindProperty("Name")!, aCEDatabaseModelsShardCharacterMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)spellbook_FiltersColumnBase, character.FindProperty("SpellbookFilters")!, aCEDatabaseModelsShardCharacterMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)total_LoginsColumnBase, character.FindProperty("TotalLogins")!, aCEDatabaseModelsShardCharacterMappingBase);

            var tableMappings25 = new List<TableMapping>();
            character.SetRuntimeAnnotation("Relational:TableMappings", tableMappings25);
            var characterTable = new Table("character", null, relationalModel);
            var idColumn9 = new Column("id", "bigint unsigned", characterTable);
            characterTable.Columns.Add("id", idColumn9);
            var account_IdColumn = new Column("account_Id", "int unsigned", characterTable);
            characterTable.Columns.Add("account_Id", account_IdColumn);
            var character_Options_1Column = new Column("character_Options_1", "int", characterTable);
            characterTable.Columns.Add("character_Options_1", character_Options_1Column);
            var character_Options_2Column = new Column("character_Options_2", "int", characterTable);
            characterTable.Columns.Add("character_Options_2", character_Options_2Column);
            var default_Hair_TextureColumn = new Column("default_Hair_Texture", "int unsigned", characterTable);
            characterTable.Columns.Add("default_Hair_Texture", default_Hair_TextureColumn);
            var delete_TimeColumn = new Column("delete_Time", "bigint unsigned", characterTable);
            characterTable.Columns.Add("delete_Time", delete_TimeColumn);
            var gameplay_OptionsColumn = new Column("gameplay_Options", "blob", characterTable)
            {
                IsNullable = true
            };
            characterTable.Columns.Add("gameplay_Options", gameplay_OptionsColumn);
            var hair_TextureColumn = new Column("hair_Texture", "int unsigned", characterTable);
            characterTable.Columns.Add("hair_Texture", hair_TextureColumn);
            var is_DeletedColumn = new Column("is_Deleted", "bit(1)", characterTable);
            characterTable.Columns.Add("is_Deleted", is_DeletedColumn);
            var is_PlussedColumn = new Column("is_Plussed", "bit(1)", characterTable);
            characterTable.Columns.Add("is_Plussed", is_PlussedColumn);
            var last_Login_TimestampColumn = new Column("last_Login_Timestamp", "double", characterTable);
            characterTable.Columns.Add("last_Login_Timestamp", last_Login_TimestampColumn);
            var nameColumn = new Column("name", "varchar(255)", characterTable);
            characterTable.Columns.Add("name", nameColumn);
            var spellbook_FiltersColumn = new Column("spellbook_Filters", "int unsigned", characterTable);
            characterTable.Columns.Add("spellbook_Filters", spellbook_FiltersColumn);
            var total_LoginsColumn = new Column("total_Logins", "int", characterTable);
            characterTable.Columns.Add("total_Logins", total_LoginsColumn);
            var pRIMARY25 = new UniqueConstraint("PRIMARY", characterTable, new[] { idColumn9 });
            characterTable.PrimaryKey = pRIMARY25;
            var pRIMARY25Uc = RelationalModel.GetKey(this,
                "ACE.Database.Models.Shard.Character",
                new[] { "Id" });
            pRIMARY25.MappedKeys.Add(pRIMARY25Uc);
            RelationalModel.GetOrCreateUniqueConstraints(pRIMARY25Uc).Add(pRIMARY25);
            characterTable.UniqueConstraints.Add("PRIMARY", pRIMARY25);
            var character_account_idx = new TableIndex(
            "character_account_idx", characterTable, new[] { account_IdColumn }, false);
            var character_account_idxIx = RelationalModel.GetIndex(this,
                "ACE.Database.Models.Shard.Character",
                "character_account_idx");
            character_account_idx.MappedIndexes.Add(character_account_idxIx);
            RelationalModel.GetOrCreateTableIndexes(character_account_idxIx).Add(character_account_idx);
            characterTable.Indexes.Add("character_account_idx", character_account_idx);
            var character_name_idx = new TableIndex(
            "character_name_idx", characterTable, new[] { nameColumn }, false);
            var character_name_idxIx = RelationalModel.GetIndex(this,
                "ACE.Database.Models.Shard.Character",
                "character_name_idx");
            character_name_idx.MappedIndexes.Add(character_name_idxIx);
            RelationalModel.GetOrCreateTableIndexes(character_name_idxIx).Add(character_name_idx);
            characterTable.Indexes.Add("character_name_idx", character_name_idx);
            relationalModel.Tables.Add(("character", null), characterTable);
            var characterTableMapping = new TableMapping(character, characterTable, true);
            characterTable.AddTypeMapping(characterTableMapping, false);
            tableMappings25.Add(characterTableMapping);
            RelationalModel.CreateColumnMapping(idColumn9, character.FindProperty("Id")!, characterTableMapping);
            RelationalModel.CreateColumnMapping(account_IdColumn, character.FindProperty("AccountId")!, characterTableMapping);
            RelationalModel.CreateColumnMapping(character_Options_1Column, character.FindProperty("CharacterOptions1")!, characterTableMapping);
            RelationalModel.CreateColumnMapping(character_Options_2Column, character.FindProperty("CharacterOptions2")!, characterTableMapping);
            RelationalModel.CreateColumnMapping(default_Hair_TextureColumn, character.FindProperty("DefaultHairTexture")!, characterTableMapping);
            RelationalModel.CreateColumnMapping(delete_TimeColumn, character.FindProperty("DeleteTime")!, characterTableMapping);
            RelationalModel.CreateColumnMapping(gameplay_OptionsColumn, character.FindProperty("GameplayOptions")!, characterTableMapping);
            RelationalModel.CreateColumnMapping(hair_TextureColumn, character.FindProperty("HairTexture")!, characterTableMapping);
            RelationalModel.CreateColumnMapping(is_DeletedColumn, character.FindProperty("IsDeleted")!, characterTableMapping);
            RelationalModel.CreateColumnMapping(is_PlussedColumn, character.FindProperty("IsPlussed")!, characterTableMapping);
            RelationalModel.CreateColumnMapping(last_Login_TimestampColumn, character.FindProperty("LastLoginTimestamp")!, characterTableMapping);
            RelationalModel.CreateColumnMapping(nameColumn, character.FindProperty("Name")!, characterTableMapping);
            RelationalModel.CreateColumnMapping(spellbook_FiltersColumn, character.FindProperty("SpellbookFilters")!, characterTableMapping);
            RelationalModel.CreateColumnMapping(total_LoginsColumn, character.FindProperty("TotalLogins")!, characterTableMapping);

            var characterPropertiesContractRegistry = FindEntityType("ACE.Database.Models.Shard.CharacterPropertiesContractRegistry")!;

            var defaultTableMappings26 = new List<TableMappingBase<ColumnMappingBase>>();
            characterPropertiesContractRegistry.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings26);
            var aCEDatabaseModelsShardCharacterPropertiesContractRegistryTableBase = new TableBase("ACE.Database.Models.Shard.CharacterPropertiesContractRegistry", null, relationalModel);
            var character_IdColumnBase0 = new ColumnBase<ColumnMappingBase>("character_Id", "bigint unsigned", aCEDatabaseModelsShardCharacterPropertiesContractRegistryTableBase);
            aCEDatabaseModelsShardCharacterPropertiesContractRegistryTableBase.Columns.Add("character_Id", character_IdColumnBase0);
            var contract_IdColumnBase = new ColumnBase<ColumnMappingBase>("contract_Id", "int unsigned", aCEDatabaseModelsShardCharacterPropertiesContractRegistryTableBase);
            aCEDatabaseModelsShardCharacterPropertiesContractRegistryTableBase.Columns.Add("contract_Id", contract_IdColumnBase);
            var delete_ContractColumnBase = new ColumnBase<ColumnMappingBase>("delete_Contract", "bit(1)", aCEDatabaseModelsShardCharacterPropertiesContractRegistryTableBase);
            aCEDatabaseModelsShardCharacterPropertiesContractRegistryTableBase.Columns.Add("delete_Contract", delete_ContractColumnBase);
            var set_As_Display_ContractColumnBase = new ColumnBase<ColumnMappingBase>("set_As_Display_Contract", "bit(1)", aCEDatabaseModelsShardCharacterPropertiesContractRegistryTableBase);
            aCEDatabaseModelsShardCharacterPropertiesContractRegistryTableBase.Columns.Add("set_As_Display_Contract", set_As_Display_ContractColumnBase);
            relationalModel.DefaultTables.Add("ACE.Database.Models.Shard.CharacterPropertiesContractRegistry", aCEDatabaseModelsShardCharacterPropertiesContractRegistryTableBase);
            var aCEDatabaseModelsShardCharacterPropertiesContractRegistryMappingBase = new TableMappingBase<ColumnMappingBase>(characterPropertiesContractRegistry, aCEDatabaseModelsShardCharacterPropertiesContractRegistryTableBase, true);
            aCEDatabaseModelsShardCharacterPropertiesContractRegistryTableBase.AddTypeMapping(aCEDatabaseModelsShardCharacterPropertiesContractRegistryMappingBase, false);
            defaultTableMappings26.Add(aCEDatabaseModelsShardCharacterPropertiesContractRegistryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)character_IdColumnBase0, characterPropertiesContractRegistry.FindProperty("CharacterId")!, aCEDatabaseModelsShardCharacterPropertiesContractRegistryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)contract_IdColumnBase, characterPropertiesContractRegistry.FindProperty("ContractId")!, aCEDatabaseModelsShardCharacterPropertiesContractRegistryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)delete_ContractColumnBase, characterPropertiesContractRegistry.FindProperty("DeleteContract")!, aCEDatabaseModelsShardCharacterPropertiesContractRegistryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)set_As_Display_ContractColumnBase, characterPropertiesContractRegistry.FindProperty("SetAsDisplayContract")!, aCEDatabaseModelsShardCharacterPropertiesContractRegistryMappingBase);

            var tableMappings26 = new List<TableMapping>();
            characterPropertiesContractRegistry.SetRuntimeAnnotation("Relational:TableMappings", tableMappings26);
            var character_properties_contract_registryTable = new Table("character_properties_contract_registry", null, relationalModel);
            var character_IdColumn0 = new Column("character_Id", "bigint unsigned", character_properties_contract_registryTable);
            character_properties_contract_registryTable.Columns.Add("character_Id", character_IdColumn0);
            var contract_IdColumn = new Column("contract_Id", "int unsigned", character_properties_contract_registryTable);
            character_properties_contract_registryTable.Columns.Add("contract_Id", contract_IdColumn);
            var delete_ContractColumn = new Column("delete_Contract", "bit(1)", character_properties_contract_registryTable);
            character_properties_contract_registryTable.Columns.Add("delete_Contract", delete_ContractColumn);
            var set_As_Display_ContractColumn = new Column("set_As_Display_Contract", "bit(1)", character_properties_contract_registryTable);
            character_properties_contract_registryTable.Columns.Add("set_As_Display_Contract", set_As_Display_ContractColumn);
            var pRIMARY26 = new UniqueConstraint("PRIMARY", character_properties_contract_registryTable, new[] { character_IdColumn0, contract_IdColumn });
            character_properties_contract_registryTable.PrimaryKey = pRIMARY26;
            pRIMARY26.AddAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });
            var pRIMARY26Uc = RelationalModel.GetKey(this,
                "ACE.Database.Models.Shard.CharacterPropertiesContractRegistry",
                new[] { "CharacterId", "ContractId" });
            pRIMARY26.MappedKeys.Add(pRIMARY26Uc);
            RelationalModel.GetOrCreateUniqueConstraints(pRIMARY26Uc).Add(pRIMARY26);
            character_properties_contract_registryTable.UniqueConstraints.Add("PRIMARY", pRIMARY26);
            relationalModel.Tables.Add(("character_properties_contract_registry", null), character_properties_contract_registryTable);
            var character_properties_contract_registryTableMapping = new TableMapping(characterPropertiesContractRegistry, character_properties_contract_registryTable, true);
            character_properties_contract_registryTable.AddTypeMapping(character_properties_contract_registryTableMapping, false);
            tableMappings26.Add(character_properties_contract_registryTableMapping);
            RelationalModel.CreateColumnMapping(character_IdColumn0, characterPropertiesContractRegistry.FindProperty("CharacterId")!, character_properties_contract_registryTableMapping);
            RelationalModel.CreateColumnMapping(contract_IdColumn, characterPropertiesContractRegistry.FindProperty("ContractId")!, character_properties_contract_registryTableMapping);
            RelationalModel.CreateColumnMapping(delete_ContractColumn, characterPropertiesContractRegistry.FindProperty("DeleteContract")!, character_properties_contract_registryTableMapping);
            RelationalModel.CreateColumnMapping(set_As_Display_ContractColumn, characterPropertiesContractRegistry.FindProperty("SetAsDisplayContract")!, character_properties_contract_registryTableMapping);

            var characterPropertiesFillCompBook = FindEntityType("ACE.Database.Models.Shard.CharacterPropertiesFillCompBook")!;

            var defaultTableMappings27 = new List<TableMappingBase<ColumnMappingBase>>();
            characterPropertiesFillCompBook.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings27);
            var aCEDatabaseModelsShardCharacterPropertiesFillCompBookTableBase = new TableBase("ACE.Database.Models.Shard.CharacterPropertiesFillCompBook", null, relationalModel);
            var character_IdColumnBase1 = new ColumnBase<ColumnMappingBase>("character_Id", "bigint unsigned", aCEDatabaseModelsShardCharacterPropertiesFillCompBookTableBase);
            aCEDatabaseModelsShardCharacterPropertiesFillCompBookTableBase.Columns.Add("character_Id", character_IdColumnBase1);
            var quantity_To_RebuyColumnBase = new ColumnBase<ColumnMappingBase>("quantity_To_Rebuy", "int", aCEDatabaseModelsShardCharacterPropertiesFillCompBookTableBase);
            aCEDatabaseModelsShardCharacterPropertiesFillCompBookTableBase.Columns.Add("quantity_To_Rebuy", quantity_To_RebuyColumnBase);
            var spell_Component_IdColumnBase = new ColumnBase<ColumnMappingBase>("spell_Component_Id", "int", aCEDatabaseModelsShardCharacterPropertiesFillCompBookTableBase);
            aCEDatabaseModelsShardCharacterPropertiesFillCompBookTableBase.Columns.Add("spell_Component_Id", spell_Component_IdColumnBase);
            relationalModel.DefaultTables.Add("ACE.Database.Models.Shard.CharacterPropertiesFillCompBook", aCEDatabaseModelsShardCharacterPropertiesFillCompBookTableBase);
            var aCEDatabaseModelsShardCharacterPropertiesFillCompBookMappingBase = new TableMappingBase<ColumnMappingBase>(characterPropertiesFillCompBook, aCEDatabaseModelsShardCharacterPropertiesFillCompBookTableBase, true);
            aCEDatabaseModelsShardCharacterPropertiesFillCompBookTableBase.AddTypeMapping(aCEDatabaseModelsShardCharacterPropertiesFillCompBookMappingBase, false);
            defaultTableMappings27.Add(aCEDatabaseModelsShardCharacterPropertiesFillCompBookMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)character_IdColumnBase1, characterPropertiesFillCompBook.FindProperty("CharacterId")!, aCEDatabaseModelsShardCharacterPropertiesFillCompBookMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)spell_Component_IdColumnBase, characterPropertiesFillCompBook.FindProperty("SpellComponentId")!, aCEDatabaseModelsShardCharacterPropertiesFillCompBookMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)quantity_To_RebuyColumnBase, characterPropertiesFillCompBook.FindProperty("QuantityToRebuy")!, aCEDatabaseModelsShardCharacterPropertiesFillCompBookMappingBase);

            var tableMappings27 = new List<TableMapping>();
            characterPropertiesFillCompBook.SetRuntimeAnnotation("Relational:TableMappings", tableMappings27);
            var character_properties_fill_comp_bookTable = new Table("character_properties_fill_comp_book", null, relationalModel);
            var character_IdColumn1 = new Column("character_Id", "bigint unsigned", character_properties_fill_comp_bookTable);
            character_properties_fill_comp_bookTable.Columns.Add("character_Id", character_IdColumn1);
            var spell_Component_IdColumn = new Column("spell_Component_Id", "int", character_properties_fill_comp_bookTable);
            character_properties_fill_comp_bookTable.Columns.Add("spell_Component_Id", spell_Component_IdColumn);
            var quantity_To_RebuyColumn = new Column("quantity_To_Rebuy", "int", character_properties_fill_comp_bookTable);
            character_properties_fill_comp_bookTable.Columns.Add("quantity_To_Rebuy", quantity_To_RebuyColumn);
            var pRIMARY27 = new UniqueConstraint("PRIMARY", character_properties_fill_comp_bookTable, new[] { character_IdColumn1, spell_Component_IdColumn });
            character_properties_fill_comp_bookTable.PrimaryKey = pRIMARY27;
            pRIMARY27.AddAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });
            var pRIMARY27Uc = RelationalModel.GetKey(this,
                "ACE.Database.Models.Shard.CharacterPropertiesFillCompBook",
                new[] { "CharacterId", "SpellComponentId" });
            pRIMARY27.MappedKeys.Add(pRIMARY27Uc);
            RelationalModel.GetOrCreateUniqueConstraints(pRIMARY27Uc).Add(pRIMARY27);
            character_properties_fill_comp_bookTable.UniqueConstraints.Add("PRIMARY", pRIMARY27);
            relationalModel.Tables.Add(("character_properties_fill_comp_book", null), character_properties_fill_comp_bookTable);
            var character_properties_fill_comp_bookTableMapping = new TableMapping(characterPropertiesFillCompBook, character_properties_fill_comp_bookTable, true);
            character_properties_fill_comp_bookTable.AddTypeMapping(character_properties_fill_comp_bookTableMapping, false);
            tableMappings27.Add(character_properties_fill_comp_bookTableMapping);
            RelationalModel.CreateColumnMapping(character_IdColumn1, characterPropertiesFillCompBook.FindProperty("CharacterId")!, character_properties_fill_comp_bookTableMapping);
            RelationalModel.CreateColumnMapping(spell_Component_IdColumn, characterPropertiesFillCompBook.FindProperty("SpellComponentId")!, character_properties_fill_comp_bookTableMapping);
            RelationalModel.CreateColumnMapping(quantity_To_RebuyColumn, characterPropertiesFillCompBook.FindProperty("QuantityToRebuy")!, character_properties_fill_comp_bookTableMapping);

            var characterPropertiesFriendList = FindEntityType("ACE.Database.Models.Shard.CharacterPropertiesFriendList")!;

            var defaultTableMappings28 = new List<TableMappingBase<ColumnMappingBase>>();
            characterPropertiesFriendList.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings28);
            var aCEDatabaseModelsShardCharacterPropertiesFriendListTableBase = new TableBase("ACE.Database.Models.Shard.CharacterPropertiesFriendList", null, relationalModel);
            var character_IdColumnBase2 = new ColumnBase<ColumnMappingBase>("character_Id", "bigint unsigned", aCEDatabaseModelsShardCharacterPropertiesFriendListTableBase);
            aCEDatabaseModelsShardCharacterPropertiesFriendListTableBase.Columns.Add("character_Id", character_IdColumnBase2);
            var friend_IdColumnBase = new ColumnBase<ColumnMappingBase>("friend_Id", "bigint unsigned", aCEDatabaseModelsShardCharacterPropertiesFriendListTableBase);
            aCEDatabaseModelsShardCharacterPropertiesFriendListTableBase.Columns.Add("friend_Id", friend_IdColumnBase);
            relationalModel.DefaultTables.Add("ACE.Database.Models.Shard.CharacterPropertiesFriendList", aCEDatabaseModelsShardCharacterPropertiesFriendListTableBase);
            var aCEDatabaseModelsShardCharacterPropertiesFriendListMappingBase = new TableMappingBase<ColumnMappingBase>(characterPropertiesFriendList, aCEDatabaseModelsShardCharacterPropertiesFriendListTableBase, true);
            aCEDatabaseModelsShardCharacterPropertiesFriendListTableBase.AddTypeMapping(aCEDatabaseModelsShardCharacterPropertiesFriendListMappingBase, false);
            defaultTableMappings28.Add(aCEDatabaseModelsShardCharacterPropertiesFriendListMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)character_IdColumnBase2, characterPropertiesFriendList.FindProperty("CharacterId")!, aCEDatabaseModelsShardCharacterPropertiesFriendListMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)friend_IdColumnBase, characterPropertiesFriendList.FindProperty("FriendId")!, aCEDatabaseModelsShardCharacterPropertiesFriendListMappingBase);

            var tableMappings28 = new List<TableMapping>();
            characterPropertiesFriendList.SetRuntimeAnnotation("Relational:TableMappings", tableMappings28);
            var character_properties_friend_listTable = new Table("character_properties_friend_list", null, relationalModel);
            var character_IdColumn2 = new Column("character_Id", "bigint unsigned", character_properties_friend_listTable);
            character_properties_friend_listTable.Columns.Add("character_Id", character_IdColumn2);
            var friend_IdColumn = new Column("friend_Id", "bigint unsigned", character_properties_friend_listTable);
            character_properties_friend_listTable.Columns.Add("friend_Id", friend_IdColumn);
            var pRIMARY28 = new UniqueConstraint("PRIMARY", character_properties_friend_listTable, new[] { character_IdColumn2, friend_IdColumn });
            character_properties_friend_listTable.PrimaryKey = pRIMARY28;
            pRIMARY28.AddAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });
            var pRIMARY28Uc = RelationalModel.GetKey(this,
                "ACE.Database.Models.Shard.CharacterPropertiesFriendList",
                new[] { "CharacterId", "FriendId" });
            pRIMARY28.MappedKeys.Add(pRIMARY28Uc);
            RelationalModel.GetOrCreateUniqueConstraints(pRIMARY28Uc).Add(pRIMARY28);
            character_properties_friend_listTable.UniqueConstraints.Add("PRIMARY", pRIMARY28);
            relationalModel.Tables.Add(("character_properties_friend_list", null), character_properties_friend_listTable);
            var character_properties_friend_listTableMapping = new TableMapping(characterPropertiesFriendList, character_properties_friend_listTable, true);
            character_properties_friend_listTable.AddTypeMapping(character_properties_friend_listTableMapping, false);
            tableMappings28.Add(character_properties_friend_listTableMapping);
            RelationalModel.CreateColumnMapping(character_IdColumn2, characterPropertiesFriendList.FindProperty("CharacterId")!, character_properties_friend_listTableMapping);
            RelationalModel.CreateColumnMapping(friend_IdColumn, characterPropertiesFriendList.FindProperty("FriendId")!, character_properties_friend_listTableMapping);

            var characterPropertiesQuestRegistry = FindEntityType("ACE.Database.Models.Shard.CharacterPropertiesQuestRegistry")!;

            var defaultTableMappings29 = new List<TableMappingBase<ColumnMappingBase>>();
            characterPropertiesQuestRegistry.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings29);
            var aCEDatabaseModelsShardCharacterPropertiesQuestRegistryTableBase = new TableBase("ACE.Database.Models.Shard.CharacterPropertiesQuestRegistry", null, relationalModel);
            var character_IdColumnBase3 = new ColumnBase<ColumnMappingBase>("character_Id", "bigint unsigned", aCEDatabaseModelsShardCharacterPropertiesQuestRegistryTableBase);
            aCEDatabaseModelsShardCharacterPropertiesQuestRegistryTableBase.Columns.Add("character_Id", character_IdColumnBase3);
            var last_Time_CompletedColumnBase = new ColumnBase<ColumnMappingBase>("last_Time_Completed", "int unsigned", aCEDatabaseModelsShardCharacterPropertiesQuestRegistryTableBase);
            aCEDatabaseModelsShardCharacterPropertiesQuestRegistryTableBase.Columns.Add("last_Time_Completed", last_Time_CompletedColumnBase);
            var num_Times_CompletedColumnBase = new ColumnBase<ColumnMappingBase>("num_Times_Completed", "int", aCEDatabaseModelsShardCharacterPropertiesQuestRegistryTableBase);
            aCEDatabaseModelsShardCharacterPropertiesQuestRegistryTableBase.Columns.Add("num_Times_Completed", num_Times_CompletedColumnBase);
            var quest_NameColumnBase = new ColumnBase<ColumnMappingBase>("quest_Name", "varchar(255)", aCEDatabaseModelsShardCharacterPropertiesQuestRegistryTableBase);
            aCEDatabaseModelsShardCharacterPropertiesQuestRegistryTableBase.Columns.Add("quest_Name", quest_NameColumnBase);
            relationalModel.DefaultTables.Add("ACE.Database.Models.Shard.CharacterPropertiesQuestRegistry", aCEDatabaseModelsShardCharacterPropertiesQuestRegistryTableBase);
            var aCEDatabaseModelsShardCharacterPropertiesQuestRegistryMappingBase = new TableMappingBase<ColumnMappingBase>(characterPropertiesQuestRegistry, aCEDatabaseModelsShardCharacterPropertiesQuestRegistryTableBase, true);
            aCEDatabaseModelsShardCharacterPropertiesQuestRegistryTableBase.AddTypeMapping(aCEDatabaseModelsShardCharacterPropertiesQuestRegistryMappingBase, false);
            defaultTableMappings29.Add(aCEDatabaseModelsShardCharacterPropertiesQuestRegistryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)character_IdColumnBase3, characterPropertiesQuestRegistry.FindProperty("CharacterId")!, aCEDatabaseModelsShardCharacterPropertiesQuestRegistryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)quest_NameColumnBase, characterPropertiesQuestRegistry.FindProperty("QuestName")!, aCEDatabaseModelsShardCharacterPropertiesQuestRegistryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)last_Time_CompletedColumnBase, characterPropertiesQuestRegistry.FindProperty("LastTimeCompleted")!, aCEDatabaseModelsShardCharacterPropertiesQuestRegistryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)num_Times_CompletedColumnBase, characterPropertiesQuestRegistry.FindProperty("NumTimesCompleted")!, aCEDatabaseModelsShardCharacterPropertiesQuestRegistryMappingBase);

            var tableMappings29 = new List<TableMapping>();
            characterPropertiesQuestRegistry.SetRuntimeAnnotation("Relational:TableMappings", tableMappings29);
            var character_properties_quest_registryTable = new Table("character_properties_quest_registry", null, relationalModel);
            var character_IdColumn3 = new Column("character_Id", "bigint unsigned", character_properties_quest_registryTable);
            character_properties_quest_registryTable.Columns.Add("character_Id", character_IdColumn3);
            var quest_NameColumn = new Column("quest_Name", "varchar(255)", character_properties_quest_registryTable);
            character_properties_quest_registryTable.Columns.Add("quest_Name", quest_NameColumn);
            var last_Time_CompletedColumn = new Column("last_Time_Completed", "int unsigned", character_properties_quest_registryTable);
            character_properties_quest_registryTable.Columns.Add("last_Time_Completed", last_Time_CompletedColumn);
            var num_Times_CompletedColumn = new Column("num_Times_Completed", "int", character_properties_quest_registryTable);
            character_properties_quest_registryTable.Columns.Add("num_Times_Completed", num_Times_CompletedColumn);
            var pRIMARY29 = new UniqueConstraint("PRIMARY", character_properties_quest_registryTable, new[] { character_IdColumn3, quest_NameColumn });
            character_properties_quest_registryTable.PrimaryKey = pRIMARY29;
            pRIMARY29.AddAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });
            var pRIMARY29Uc = RelationalModel.GetKey(this,
                "ACE.Database.Models.Shard.CharacterPropertiesQuestRegistry",
                new[] { "CharacterId", "QuestName" });
            pRIMARY29.MappedKeys.Add(pRIMARY29Uc);
            RelationalModel.GetOrCreateUniqueConstraints(pRIMARY29Uc).Add(pRIMARY29);
            character_properties_quest_registryTable.UniqueConstraints.Add("PRIMARY", pRIMARY29);
            relationalModel.Tables.Add(("character_properties_quest_registry", null), character_properties_quest_registryTable);
            var character_properties_quest_registryTableMapping = new TableMapping(characterPropertiesQuestRegistry, character_properties_quest_registryTable, true);
            character_properties_quest_registryTable.AddTypeMapping(character_properties_quest_registryTableMapping, false);
            tableMappings29.Add(character_properties_quest_registryTableMapping);
            RelationalModel.CreateColumnMapping(character_IdColumn3, characterPropertiesQuestRegistry.FindProperty("CharacterId")!, character_properties_quest_registryTableMapping);
            RelationalModel.CreateColumnMapping(quest_NameColumn, characterPropertiesQuestRegistry.FindProperty("QuestName")!, character_properties_quest_registryTableMapping);
            RelationalModel.CreateColumnMapping(last_Time_CompletedColumn, characterPropertiesQuestRegistry.FindProperty("LastTimeCompleted")!, character_properties_quest_registryTableMapping);
            RelationalModel.CreateColumnMapping(num_Times_CompletedColumn, characterPropertiesQuestRegistry.FindProperty("NumTimesCompleted")!, character_properties_quest_registryTableMapping);

            var characterPropertiesShortcutBar = FindEntityType("ACE.Database.Models.Shard.CharacterPropertiesShortcutBar")!;

            var defaultTableMappings30 = new List<TableMappingBase<ColumnMappingBase>>();
            characterPropertiesShortcutBar.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings30);
            var aCEDatabaseModelsShardCharacterPropertiesShortcutBarTableBase = new TableBase("ACE.Database.Models.Shard.CharacterPropertiesShortcutBar", null, relationalModel);
            var character_IdColumnBase4 = new ColumnBase<ColumnMappingBase>("character_Id", "bigint unsigned", aCEDatabaseModelsShardCharacterPropertiesShortcutBarTableBase);
            aCEDatabaseModelsShardCharacterPropertiesShortcutBarTableBase.Columns.Add("character_Id", character_IdColumnBase4);
            var shortcut_Bar_IndexColumnBase = new ColumnBase<ColumnMappingBase>("shortcut_Bar_Index", "int unsigned", aCEDatabaseModelsShardCharacterPropertiesShortcutBarTableBase);
            aCEDatabaseModelsShardCharacterPropertiesShortcutBarTableBase.Columns.Add("shortcut_Bar_Index", shortcut_Bar_IndexColumnBase);
            var shortcut_Object_IdColumnBase = new ColumnBase<ColumnMappingBase>("shortcut_Object_Id", "bigint unsigned", aCEDatabaseModelsShardCharacterPropertiesShortcutBarTableBase);
            aCEDatabaseModelsShardCharacterPropertiesShortcutBarTableBase.Columns.Add("shortcut_Object_Id", shortcut_Object_IdColumnBase);
            relationalModel.DefaultTables.Add("ACE.Database.Models.Shard.CharacterPropertiesShortcutBar", aCEDatabaseModelsShardCharacterPropertiesShortcutBarTableBase);
            var aCEDatabaseModelsShardCharacterPropertiesShortcutBarMappingBase = new TableMappingBase<ColumnMappingBase>(characterPropertiesShortcutBar, aCEDatabaseModelsShardCharacterPropertiesShortcutBarTableBase, true);
            aCEDatabaseModelsShardCharacterPropertiesShortcutBarTableBase.AddTypeMapping(aCEDatabaseModelsShardCharacterPropertiesShortcutBarMappingBase, false);
            defaultTableMappings30.Add(aCEDatabaseModelsShardCharacterPropertiesShortcutBarMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)character_IdColumnBase4, characterPropertiesShortcutBar.FindProperty("CharacterId")!, aCEDatabaseModelsShardCharacterPropertiesShortcutBarMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)shortcut_Bar_IndexColumnBase, characterPropertiesShortcutBar.FindProperty("ShortcutBarIndex")!, aCEDatabaseModelsShardCharacterPropertiesShortcutBarMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)shortcut_Object_IdColumnBase, characterPropertiesShortcutBar.FindProperty("ShortcutObjectId")!, aCEDatabaseModelsShardCharacterPropertiesShortcutBarMappingBase);

            var tableMappings30 = new List<TableMapping>();
            characterPropertiesShortcutBar.SetRuntimeAnnotation("Relational:TableMappings", tableMappings30);
            var character_properties_shortcut_barTable = new Table("character_properties_shortcut_bar", null, relationalModel);
            var character_IdColumn4 = new Column("character_Id", "bigint unsigned", character_properties_shortcut_barTable);
            character_properties_shortcut_barTable.Columns.Add("character_Id", character_IdColumn4);
            var shortcut_Bar_IndexColumn = new Column("shortcut_Bar_Index", "int unsigned", character_properties_shortcut_barTable);
            character_properties_shortcut_barTable.Columns.Add("shortcut_Bar_Index", shortcut_Bar_IndexColumn);
            var shortcut_Object_IdColumn = new Column("shortcut_Object_Id", "bigint unsigned", character_properties_shortcut_barTable);
            character_properties_shortcut_barTable.Columns.Add("shortcut_Object_Id", shortcut_Object_IdColumn);
            var pRIMARY30 = new UniqueConstraint("PRIMARY", character_properties_shortcut_barTable, new[] { character_IdColumn4, shortcut_Bar_IndexColumn });
            character_properties_shortcut_barTable.PrimaryKey = pRIMARY30;
            pRIMARY30.AddAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });
            var pRIMARY30Uc = RelationalModel.GetKey(this,
                "ACE.Database.Models.Shard.CharacterPropertiesShortcutBar",
                new[] { "CharacterId", "ShortcutBarIndex" });
            pRIMARY30.MappedKeys.Add(pRIMARY30Uc);
            RelationalModel.GetOrCreateUniqueConstraints(pRIMARY30Uc).Add(pRIMARY30);
            character_properties_shortcut_barTable.UniqueConstraints.Add("PRIMARY", pRIMARY30);
            var wcid_shortcutbar_idx = new TableIndex(
            "wcid_shortcutbar_idx", character_properties_shortcut_barTable, new[] { character_IdColumn4 }, false);
            var wcid_shortcutbar_idxIx = RelationalModel.GetIndex(this,
                "ACE.Database.Models.Shard.CharacterPropertiesShortcutBar",
                "wcid_shortcutbar_idx");
            wcid_shortcutbar_idx.MappedIndexes.Add(wcid_shortcutbar_idxIx);
            RelationalModel.GetOrCreateTableIndexes(wcid_shortcutbar_idxIx).Add(wcid_shortcutbar_idx);
            character_properties_shortcut_barTable.Indexes.Add("wcid_shortcutbar_idx", wcid_shortcutbar_idx);
            relationalModel.Tables.Add(("character_properties_shortcut_bar", null), character_properties_shortcut_barTable);
            var character_properties_shortcut_barTableMapping = new TableMapping(characterPropertiesShortcutBar, character_properties_shortcut_barTable, true);
            character_properties_shortcut_barTable.AddTypeMapping(character_properties_shortcut_barTableMapping, false);
            tableMappings30.Add(character_properties_shortcut_barTableMapping);
            RelationalModel.CreateColumnMapping(character_IdColumn4, characterPropertiesShortcutBar.FindProperty("CharacterId")!, character_properties_shortcut_barTableMapping);
            RelationalModel.CreateColumnMapping(shortcut_Bar_IndexColumn, characterPropertiesShortcutBar.FindProperty("ShortcutBarIndex")!, character_properties_shortcut_barTableMapping);
            RelationalModel.CreateColumnMapping(shortcut_Object_IdColumn, characterPropertiesShortcutBar.FindProperty("ShortcutObjectId")!, character_properties_shortcut_barTableMapping);

            var characterPropertiesSpellBar = FindEntityType("ACE.Database.Models.Shard.CharacterPropertiesSpellBar")!;

            var defaultTableMappings31 = new List<TableMappingBase<ColumnMappingBase>>();
            characterPropertiesSpellBar.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings31);
            var aCEDatabaseModelsShardCharacterPropertiesSpellBarTableBase = new TableBase("ACE.Database.Models.Shard.CharacterPropertiesSpellBar", null, relationalModel);
            var character_IdColumnBase5 = new ColumnBase<ColumnMappingBase>("character_Id", "bigint unsigned", aCEDatabaseModelsShardCharacterPropertiesSpellBarTableBase);
            aCEDatabaseModelsShardCharacterPropertiesSpellBarTableBase.Columns.Add("character_Id", character_IdColumnBase5);
            var spell_Bar_IndexColumnBase = new ColumnBase<ColumnMappingBase>("spell_Bar_Index", "int unsigned", aCEDatabaseModelsShardCharacterPropertiesSpellBarTableBase);
            aCEDatabaseModelsShardCharacterPropertiesSpellBarTableBase.Columns.Add("spell_Bar_Index", spell_Bar_IndexColumnBase);
            var spell_Bar_NumberColumnBase = new ColumnBase<ColumnMappingBase>("spell_Bar_Number", "int unsigned", aCEDatabaseModelsShardCharacterPropertiesSpellBarTableBase);
            aCEDatabaseModelsShardCharacterPropertiesSpellBarTableBase.Columns.Add("spell_Bar_Number", spell_Bar_NumberColumnBase);
            var spell_IdColumnBase1 = new ColumnBase<ColumnMappingBase>("spell_Id", "int unsigned", aCEDatabaseModelsShardCharacterPropertiesSpellBarTableBase);
            aCEDatabaseModelsShardCharacterPropertiesSpellBarTableBase.Columns.Add("spell_Id", spell_IdColumnBase1);
            relationalModel.DefaultTables.Add("ACE.Database.Models.Shard.CharacterPropertiesSpellBar", aCEDatabaseModelsShardCharacterPropertiesSpellBarTableBase);
            var aCEDatabaseModelsShardCharacterPropertiesSpellBarMappingBase = new TableMappingBase<ColumnMappingBase>(characterPropertiesSpellBar, aCEDatabaseModelsShardCharacterPropertiesSpellBarTableBase, true);
            aCEDatabaseModelsShardCharacterPropertiesSpellBarTableBase.AddTypeMapping(aCEDatabaseModelsShardCharacterPropertiesSpellBarMappingBase, false);
            defaultTableMappings31.Add(aCEDatabaseModelsShardCharacterPropertiesSpellBarMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)character_IdColumnBase5, characterPropertiesSpellBar.FindProperty("CharacterId")!, aCEDatabaseModelsShardCharacterPropertiesSpellBarMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)spell_Bar_NumberColumnBase, characterPropertiesSpellBar.FindProperty("SpellBarNumber")!, aCEDatabaseModelsShardCharacterPropertiesSpellBarMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)spell_IdColumnBase1, characterPropertiesSpellBar.FindProperty("SpellId")!, aCEDatabaseModelsShardCharacterPropertiesSpellBarMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)spell_Bar_IndexColumnBase, characterPropertiesSpellBar.FindProperty("SpellBarIndex")!, aCEDatabaseModelsShardCharacterPropertiesSpellBarMappingBase);

            var tableMappings31 = new List<TableMapping>();
            characterPropertiesSpellBar.SetRuntimeAnnotation("Relational:TableMappings", tableMappings31);
            var character_properties_spell_barTable = new Table("character_properties_spell_bar", null, relationalModel);
            var character_IdColumn5 = new Column("character_Id", "bigint unsigned", character_properties_spell_barTable);
            character_properties_spell_barTable.Columns.Add("character_Id", character_IdColumn5);
            var spell_Bar_NumberColumn = new Column("spell_Bar_Number", "int unsigned", character_properties_spell_barTable);
            character_properties_spell_barTable.Columns.Add("spell_Bar_Number", spell_Bar_NumberColumn);
            var spell_IdColumn1 = new Column("spell_Id", "int unsigned", character_properties_spell_barTable);
            character_properties_spell_barTable.Columns.Add("spell_Id", spell_IdColumn1);
            var spell_Bar_IndexColumn = new Column("spell_Bar_Index", "int unsigned", character_properties_spell_barTable);
            character_properties_spell_barTable.Columns.Add("spell_Bar_Index", spell_Bar_IndexColumn);
            var pRIMARY31 = new UniqueConstraint("PRIMARY", character_properties_spell_barTable, new[] { character_IdColumn5, spell_Bar_NumberColumn, spell_IdColumn1 });
            character_properties_spell_barTable.PrimaryKey = pRIMARY31;
            pRIMARY31.AddAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });
            var pRIMARY31Uc = RelationalModel.GetKey(this,
                "ACE.Database.Models.Shard.CharacterPropertiesSpellBar",
                new[] { "CharacterId", "SpellBarNumber", "SpellId" });
            pRIMARY31.MappedKeys.Add(pRIMARY31Uc);
            RelationalModel.GetOrCreateUniqueConstraints(pRIMARY31Uc).Add(pRIMARY31);
            character_properties_spell_barTable.UniqueConstraints.Add("PRIMARY", pRIMARY31);
            var spellBar_idx = new TableIndex(
            "spellBar_idx", character_properties_spell_barTable, new[] { spell_Bar_IndexColumn }, false);
            var spellBar_idxIx = RelationalModel.GetIndex(this,
                "ACE.Database.Models.Shard.CharacterPropertiesSpellBar",
                "spellBar_idx");
            spellBar_idx.MappedIndexes.Add(spellBar_idxIx);
            RelationalModel.GetOrCreateTableIndexes(spellBar_idxIx).Add(spellBar_idx);
            character_properties_spell_barTable.Indexes.Add("spellBar_idx", spellBar_idx);
            relationalModel.Tables.Add(("character_properties_spell_bar", null), character_properties_spell_barTable);
            var character_properties_spell_barTableMapping = new TableMapping(characterPropertiesSpellBar, character_properties_spell_barTable, true);
            character_properties_spell_barTable.AddTypeMapping(character_properties_spell_barTableMapping, false);
            tableMappings31.Add(character_properties_spell_barTableMapping);
            RelationalModel.CreateColumnMapping(character_IdColumn5, characterPropertiesSpellBar.FindProperty("CharacterId")!, character_properties_spell_barTableMapping);
            RelationalModel.CreateColumnMapping(spell_Bar_NumberColumn, characterPropertiesSpellBar.FindProperty("SpellBarNumber")!, character_properties_spell_barTableMapping);
            RelationalModel.CreateColumnMapping(spell_IdColumn1, characterPropertiesSpellBar.FindProperty("SpellId")!, character_properties_spell_barTableMapping);
            RelationalModel.CreateColumnMapping(spell_Bar_IndexColumn, characterPropertiesSpellBar.FindProperty("SpellBarIndex")!, character_properties_spell_barTableMapping);

            var characterPropertiesSquelch = FindEntityType("ACE.Database.Models.Shard.CharacterPropertiesSquelch")!;

            var defaultTableMappings32 = new List<TableMappingBase<ColumnMappingBase>>();
            characterPropertiesSquelch.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings32);
            var aCEDatabaseModelsShardCharacterPropertiesSquelchTableBase = new TableBase("ACE.Database.Models.Shard.CharacterPropertiesSquelch", null, relationalModel);
            var character_IdColumnBase6 = new ColumnBase<ColumnMappingBase>("character_Id", "bigint unsigned", aCEDatabaseModelsShardCharacterPropertiesSquelchTableBase);
            aCEDatabaseModelsShardCharacterPropertiesSquelchTableBase.Columns.Add("character_Id", character_IdColumnBase6);
            var squelch_Account_IdColumnBase = new ColumnBase<ColumnMappingBase>("squelch_Account_Id", "int unsigned", aCEDatabaseModelsShardCharacterPropertiesSquelchTableBase);
            aCEDatabaseModelsShardCharacterPropertiesSquelchTableBase.Columns.Add("squelch_Account_Id", squelch_Account_IdColumnBase);
            var squelch_Character_IdColumnBase = new ColumnBase<ColumnMappingBase>("squelch_Character_Id", "bigint unsigned", aCEDatabaseModelsShardCharacterPropertiesSquelchTableBase);
            aCEDatabaseModelsShardCharacterPropertiesSquelchTableBase.Columns.Add("squelch_Character_Id", squelch_Character_IdColumnBase);
            var typeColumnBase10 = new ColumnBase<ColumnMappingBase>("type", "int unsigned", aCEDatabaseModelsShardCharacterPropertiesSquelchTableBase);
            aCEDatabaseModelsShardCharacterPropertiesSquelchTableBase.Columns.Add("type", typeColumnBase10);
            relationalModel.DefaultTables.Add("ACE.Database.Models.Shard.CharacterPropertiesSquelch", aCEDatabaseModelsShardCharacterPropertiesSquelchTableBase);
            var aCEDatabaseModelsShardCharacterPropertiesSquelchMappingBase = new TableMappingBase<ColumnMappingBase>(characterPropertiesSquelch, aCEDatabaseModelsShardCharacterPropertiesSquelchTableBase, true);
            aCEDatabaseModelsShardCharacterPropertiesSquelchTableBase.AddTypeMapping(aCEDatabaseModelsShardCharacterPropertiesSquelchMappingBase, false);
            defaultTableMappings32.Add(aCEDatabaseModelsShardCharacterPropertiesSquelchMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)character_IdColumnBase6, characterPropertiesSquelch.FindProperty("CharacterId")!, aCEDatabaseModelsShardCharacterPropertiesSquelchMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)squelch_Character_IdColumnBase, characterPropertiesSquelch.FindProperty("SquelchCharacterId")!, aCEDatabaseModelsShardCharacterPropertiesSquelchMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)squelch_Account_IdColumnBase, characterPropertiesSquelch.FindProperty("SquelchAccountId")!, aCEDatabaseModelsShardCharacterPropertiesSquelchMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)typeColumnBase10, characterPropertiesSquelch.FindProperty("Type")!, aCEDatabaseModelsShardCharacterPropertiesSquelchMappingBase);

            var tableMappings32 = new List<TableMapping>();
            characterPropertiesSquelch.SetRuntimeAnnotation("Relational:TableMappings", tableMappings32);
            var character_properties_squelchTable = new Table("character_properties_squelch", null, relationalModel);
            var character_IdColumn6 = new Column("character_Id", "bigint unsigned", character_properties_squelchTable);
            character_properties_squelchTable.Columns.Add("character_Id", character_IdColumn6);
            var squelch_Character_IdColumn = new Column("squelch_Character_Id", "bigint unsigned", character_properties_squelchTable);
            character_properties_squelchTable.Columns.Add("squelch_Character_Id", squelch_Character_IdColumn);
            var squelch_Account_IdColumn = new Column("squelch_Account_Id", "int unsigned", character_properties_squelchTable);
            character_properties_squelchTable.Columns.Add("squelch_Account_Id", squelch_Account_IdColumn);
            var typeColumn10 = new Column("type", "int unsigned", character_properties_squelchTable);
            character_properties_squelchTable.Columns.Add("type", typeColumn10);
            var pRIMARY32 = new UniqueConstraint("PRIMARY", character_properties_squelchTable, new[] { character_IdColumn6, squelch_Character_IdColumn });
            character_properties_squelchTable.PrimaryKey = pRIMARY32;
            pRIMARY32.AddAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });
            var pRIMARY32Uc = RelationalModel.GetKey(this,
                "ACE.Database.Models.Shard.CharacterPropertiesSquelch",
                new[] { "CharacterId", "SquelchCharacterId" });
            pRIMARY32.MappedKeys.Add(pRIMARY32Uc);
            RelationalModel.GetOrCreateUniqueConstraints(pRIMARY32Uc).Add(pRIMARY32);
            character_properties_squelchTable.UniqueConstraints.Add("PRIMARY", pRIMARY32);
            relationalModel.Tables.Add(("character_properties_squelch", null), character_properties_squelchTable);
            var character_properties_squelchTableMapping = new TableMapping(characterPropertiesSquelch, character_properties_squelchTable, true);
            character_properties_squelchTable.AddTypeMapping(character_properties_squelchTableMapping, false);
            tableMappings32.Add(character_properties_squelchTableMapping);
            RelationalModel.CreateColumnMapping(character_IdColumn6, characterPropertiesSquelch.FindProperty("CharacterId")!, character_properties_squelchTableMapping);
            RelationalModel.CreateColumnMapping(squelch_Character_IdColumn, characterPropertiesSquelch.FindProperty("SquelchCharacterId")!, character_properties_squelchTableMapping);
            RelationalModel.CreateColumnMapping(squelch_Account_IdColumn, characterPropertiesSquelch.FindProperty("SquelchAccountId")!, character_properties_squelchTableMapping);
            RelationalModel.CreateColumnMapping(typeColumn10, characterPropertiesSquelch.FindProperty("Type")!, character_properties_squelchTableMapping);

            var characterPropertiesTitleBook = FindEntityType("ACE.Database.Models.Shard.CharacterPropertiesTitleBook")!;

            var defaultTableMappings33 = new List<TableMappingBase<ColumnMappingBase>>();
            characterPropertiesTitleBook.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings33);
            var aCEDatabaseModelsShardCharacterPropertiesTitleBookTableBase = new TableBase("ACE.Database.Models.Shard.CharacterPropertiesTitleBook", null, relationalModel);
            var character_IdColumnBase7 = new ColumnBase<ColumnMappingBase>("character_Id", "bigint unsigned", aCEDatabaseModelsShardCharacterPropertiesTitleBookTableBase);
            aCEDatabaseModelsShardCharacterPropertiesTitleBookTableBase.Columns.Add("character_Id", character_IdColumnBase7);
            var title_IdColumnBase = new ColumnBase<ColumnMappingBase>("title_Id", "int unsigned", aCEDatabaseModelsShardCharacterPropertiesTitleBookTableBase);
            aCEDatabaseModelsShardCharacterPropertiesTitleBookTableBase.Columns.Add("title_Id", title_IdColumnBase);
            relationalModel.DefaultTables.Add("ACE.Database.Models.Shard.CharacterPropertiesTitleBook", aCEDatabaseModelsShardCharacterPropertiesTitleBookTableBase);
            var aCEDatabaseModelsShardCharacterPropertiesTitleBookMappingBase = new TableMappingBase<ColumnMappingBase>(characterPropertiesTitleBook, aCEDatabaseModelsShardCharacterPropertiesTitleBookTableBase, true);
            aCEDatabaseModelsShardCharacterPropertiesTitleBookTableBase.AddTypeMapping(aCEDatabaseModelsShardCharacterPropertiesTitleBookMappingBase, false);
            defaultTableMappings33.Add(aCEDatabaseModelsShardCharacterPropertiesTitleBookMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)character_IdColumnBase7, characterPropertiesTitleBook.FindProperty("CharacterId")!, aCEDatabaseModelsShardCharacterPropertiesTitleBookMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)title_IdColumnBase, characterPropertiesTitleBook.FindProperty("TitleId")!, aCEDatabaseModelsShardCharacterPropertiesTitleBookMappingBase);

            var tableMappings33 = new List<TableMapping>();
            characterPropertiesTitleBook.SetRuntimeAnnotation("Relational:TableMappings", tableMappings33);
            var character_properties_title_bookTable = new Table("character_properties_title_book", null, relationalModel);
            var character_IdColumn7 = new Column("character_Id", "bigint unsigned", character_properties_title_bookTable);
            character_properties_title_bookTable.Columns.Add("character_Id", character_IdColumn7);
            var title_IdColumn = new Column("title_Id", "int unsigned", character_properties_title_bookTable);
            character_properties_title_bookTable.Columns.Add("title_Id", title_IdColumn);
            var pRIMARY33 = new UniqueConstraint("PRIMARY", character_properties_title_bookTable, new[] { character_IdColumn7, title_IdColumn });
            character_properties_title_bookTable.PrimaryKey = pRIMARY33;
            pRIMARY33.AddAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });
            var pRIMARY33Uc = RelationalModel.GetKey(this,
                "ACE.Database.Models.Shard.CharacterPropertiesTitleBook",
                new[] { "CharacterId", "TitleId" });
            pRIMARY33.MappedKeys.Add(pRIMARY33Uc);
            RelationalModel.GetOrCreateUniqueConstraints(pRIMARY33Uc).Add(pRIMARY33);
            character_properties_title_bookTable.UniqueConstraints.Add("PRIMARY", pRIMARY33);
            relationalModel.Tables.Add(("character_properties_title_book", null), character_properties_title_bookTable);
            var character_properties_title_bookTableMapping = new TableMapping(characterPropertiesTitleBook, character_properties_title_bookTable, true);
            character_properties_title_bookTable.AddTypeMapping(character_properties_title_bookTableMapping, false);
            tableMappings33.Add(character_properties_title_bookTableMapping);
            RelationalModel.CreateColumnMapping(character_IdColumn7, characterPropertiesTitleBook.FindProperty("CharacterId")!, character_properties_title_bookTableMapping);
            RelationalModel.CreateColumnMapping(title_IdColumn, characterPropertiesTitleBook.FindProperty("TitleId")!, character_properties_title_bookTableMapping);

            var configPropertiesBoolean = FindEntityType("ACE.Database.Models.Shard.ConfigPropertiesBoolean")!;

            var defaultTableMappings34 = new List<TableMappingBase<ColumnMappingBase>>();
            configPropertiesBoolean.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings34);
            var aCEDatabaseModelsShardConfigPropertiesBooleanTableBase = new TableBase("ACE.Database.Models.Shard.ConfigPropertiesBoolean", null, relationalModel);
            var descriptionColumnBase = new ColumnBase<ColumnMappingBase>("description", "text", aCEDatabaseModelsShardConfigPropertiesBooleanTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsShardConfigPropertiesBooleanTableBase.Columns.Add("description", descriptionColumnBase);
            var keyColumnBase0 = new ColumnBase<ColumnMappingBase>("key", "varchar(255)", aCEDatabaseModelsShardConfigPropertiesBooleanTableBase);
            aCEDatabaseModelsShardConfigPropertiesBooleanTableBase.Columns.Add("key", keyColumnBase0);
            var valueColumnBase6 = new ColumnBase<ColumnMappingBase>("value", "bit(1)", aCEDatabaseModelsShardConfigPropertiesBooleanTableBase);
            aCEDatabaseModelsShardConfigPropertiesBooleanTableBase.Columns.Add("value", valueColumnBase6);
            relationalModel.DefaultTables.Add("ACE.Database.Models.Shard.ConfigPropertiesBoolean", aCEDatabaseModelsShardConfigPropertiesBooleanTableBase);
            var aCEDatabaseModelsShardConfigPropertiesBooleanMappingBase = new TableMappingBase<ColumnMappingBase>(configPropertiesBoolean, aCEDatabaseModelsShardConfigPropertiesBooleanTableBase, true);
            aCEDatabaseModelsShardConfigPropertiesBooleanTableBase.AddTypeMapping(aCEDatabaseModelsShardConfigPropertiesBooleanMappingBase, false);
            defaultTableMappings34.Add(aCEDatabaseModelsShardConfigPropertiesBooleanMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)keyColumnBase0, configPropertiesBoolean.FindProperty("Key")!, aCEDatabaseModelsShardConfigPropertiesBooleanMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)descriptionColumnBase, configPropertiesBoolean.FindProperty("Description")!, aCEDatabaseModelsShardConfigPropertiesBooleanMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)valueColumnBase6, configPropertiesBoolean.FindProperty("Value")!, aCEDatabaseModelsShardConfigPropertiesBooleanMappingBase);

            var tableMappings34 = new List<TableMapping>();
            configPropertiesBoolean.SetRuntimeAnnotation("Relational:TableMappings", tableMappings34);
            var config_properties_booleanTable = new Table("config_properties_boolean", null, relationalModel);
            var keyColumn0 = new Column("key", "varchar(255)", config_properties_booleanTable);
            config_properties_booleanTable.Columns.Add("key", keyColumn0);
            var descriptionColumn = new Column("description", "text", config_properties_booleanTable)
            {
                IsNullable = true
            };
            config_properties_booleanTable.Columns.Add("description", descriptionColumn);
            var valueColumn6 = new Column("value", "bit(1)", config_properties_booleanTable);
            config_properties_booleanTable.Columns.Add("value", valueColumn6);
            var pRIMARY34 = new UniqueConstraint("PRIMARY", config_properties_booleanTable, new[] { keyColumn0 });
            config_properties_booleanTable.PrimaryKey = pRIMARY34;
            var pRIMARY34Uc = RelationalModel.GetKey(this,
                "ACE.Database.Models.Shard.ConfigPropertiesBoolean",
                new[] { "Key" });
            pRIMARY34.MappedKeys.Add(pRIMARY34Uc);
            RelationalModel.GetOrCreateUniqueConstraints(pRIMARY34Uc).Add(pRIMARY34);
            config_properties_booleanTable.UniqueConstraints.Add("PRIMARY", pRIMARY34);
            relationalModel.Tables.Add(("config_properties_boolean", null), config_properties_booleanTable);
            var config_properties_booleanTableMapping = new TableMapping(configPropertiesBoolean, config_properties_booleanTable, true);
            config_properties_booleanTable.AddTypeMapping(config_properties_booleanTableMapping, false);
            tableMappings34.Add(config_properties_booleanTableMapping);
            RelationalModel.CreateColumnMapping(keyColumn0, configPropertiesBoolean.FindProperty("Key")!, config_properties_booleanTableMapping);
            RelationalModel.CreateColumnMapping(descriptionColumn, configPropertiesBoolean.FindProperty("Description")!, config_properties_booleanTableMapping);
            RelationalModel.CreateColumnMapping(valueColumn6, configPropertiesBoolean.FindProperty("Value")!, config_properties_booleanTableMapping);

            var configPropertiesDouble = FindEntityType("ACE.Database.Models.Shard.ConfigPropertiesDouble")!;

            var defaultTableMappings35 = new List<TableMappingBase<ColumnMappingBase>>();
            configPropertiesDouble.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings35);
            var aCEDatabaseModelsShardConfigPropertiesDoubleTableBase = new TableBase("ACE.Database.Models.Shard.ConfigPropertiesDouble", null, relationalModel);
            var descriptionColumnBase0 = new ColumnBase<ColumnMappingBase>("description", "text", aCEDatabaseModelsShardConfigPropertiesDoubleTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsShardConfigPropertiesDoubleTableBase.Columns.Add("description", descriptionColumnBase0);
            var keyColumnBase1 = new ColumnBase<ColumnMappingBase>("key", "varchar(255)", aCEDatabaseModelsShardConfigPropertiesDoubleTableBase);
            aCEDatabaseModelsShardConfigPropertiesDoubleTableBase.Columns.Add("key", keyColumnBase1);
            var valueColumnBase7 = new ColumnBase<ColumnMappingBase>("value", "double", aCEDatabaseModelsShardConfigPropertiesDoubleTableBase);
            aCEDatabaseModelsShardConfigPropertiesDoubleTableBase.Columns.Add("value", valueColumnBase7);
            relationalModel.DefaultTables.Add("ACE.Database.Models.Shard.ConfigPropertiesDouble", aCEDatabaseModelsShardConfigPropertiesDoubleTableBase);
            var aCEDatabaseModelsShardConfigPropertiesDoubleMappingBase = new TableMappingBase<ColumnMappingBase>(configPropertiesDouble, aCEDatabaseModelsShardConfigPropertiesDoubleTableBase, true);
            aCEDatabaseModelsShardConfigPropertiesDoubleTableBase.AddTypeMapping(aCEDatabaseModelsShardConfigPropertiesDoubleMappingBase, false);
            defaultTableMappings35.Add(aCEDatabaseModelsShardConfigPropertiesDoubleMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)keyColumnBase1, configPropertiesDouble.FindProperty("Key")!, aCEDatabaseModelsShardConfigPropertiesDoubleMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)descriptionColumnBase0, configPropertiesDouble.FindProperty("Description")!, aCEDatabaseModelsShardConfigPropertiesDoubleMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)valueColumnBase7, configPropertiesDouble.FindProperty("Value")!, aCEDatabaseModelsShardConfigPropertiesDoubleMappingBase);

            var tableMappings35 = new List<TableMapping>();
            configPropertiesDouble.SetRuntimeAnnotation("Relational:TableMappings", tableMappings35);
            var config_properties_doubleTable = new Table("config_properties_double", null, relationalModel);
            var keyColumn1 = new Column("key", "varchar(255)", config_properties_doubleTable);
            config_properties_doubleTable.Columns.Add("key", keyColumn1);
            var descriptionColumn0 = new Column("description", "text", config_properties_doubleTable)
            {
                IsNullable = true
            };
            config_properties_doubleTable.Columns.Add("description", descriptionColumn0);
            var valueColumn7 = new Column("value", "double", config_properties_doubleTable);
            config_properties_doubleTable.Columns.Add("value", valueColumn7);
            var pRIMARY35 = new UniqueConstraint("PRIMARY", config_properties_doubleTable, new[] { keyColumn1 });
            config_properties_doubleTable.PrimaryKey = pRIMARY35;
            var pRIMARY35Uc = RelationalModel.GetKey(this,
                "ACE.Database.Models.Shard.ConfigPropertiesDouble",
                new[] { "Key" });
            pRIMARY35.MappedKeys.Add(pRIMARY35Uc);
            RelationalModel.GetOrCreateUniqueConstraints(pRIMARY35Uc).Add(pRIMARY35);
            config_properties_doubleTable.UniqueConstraints.Add("PRIMARY", pRIMARY35);
            relationalModel.Tables.Add(("config_properties_double", null), config_properties_doubleTable);
            var config_properties_doubleTableMapping = new TableMapping(configPropertiesDouble, config_properties_doubleTable, true);
            config_properties_doubleTable.AddTypeMapping(config_properties_doubleTableMapping, false);
            tableMappings35.Add(config_properties_doubleTableMapping);
            RelationalModel.CreateColumnMapping(keyColumn1, configPropertiesDouble.FindProperty("Key")!, config_properties_doubleTableMapping);
            RelationalModel.CreateColumnMapping(descriptionColumn0, configPropertiesDouble.FindProperty("Description")!, config_properties_doubleTableMapping);
            RelationalModel.CreateColumnMapping(valueColumn7, configPropertiesDouble.FindProperty("Value")!, config_properties_doubleTableMapping);

            var configPropertiesLong = FindEntityType("ACE.Database.Models.Shard.ConfigPropertiesLong")!;

            var defaultTableMappings36 = new List<TableMappingBase<ColumnMappingBase>>();
            configPropertiesLong.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings36);
            var aCEDatabaseModelsShardConfigPropertiesLongTableBase = new TableBase("ACE.Database.Models.Shard.ConfigPropertiesLong", null, relationalModel);
            var descriptionColumnBase1 = new ColumnBase<ColumnMappingBase>("description", "text", aCEDatabaseModelsShardConfigPropertiesLongTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsShardConfigPropertiesLongTableBase.Columns.Add("description", descriptionColumnBase1);
            var keyColumnBase2 = new ColumnBase<ColumnMappingBase>("key", "varchar(255)", aCEDatabaseModelsShardConfigPropertiesLongTableBase);
            aCEDatabaseModelsShardConfigPropertiesLongTableBase.Columns.Add("key", keyColumnBase2);
            var valueColumnBase8 = new ColumnBase<ColumnMappingBase>("value", "bigint", aCEDatabaseModelsShardConfigPropertiesLongTableBase);
            aCEDatabaseModelsShardConfigPropertiesLongTableBase.Columns.Add("value", valueColumnBase8);
            relationalModel.DefaultTables.Add("ACE.Database.Models.Shard.ConfigPropertiesLong", aCEDatabaseModelsShardConfigPropertiesLongTableBase);
            var aCEDatabaseModelsShardConfigPropertiesLongMappingBase = new TableMappingBase<ColumnMappingBase>(configPropertiesLong, aCEDatabaseModelsShardConfigPropertiesLongTableBase, true);
            aCEDatabaseModelsShardConfigPropertiesLongTableBase.AddTypeMapping(aCEDatabaseModelsShardConfigPropertiesLongMappingBase, false);
            defaultTableMappings36.Add(aCEDatabaseModelsShardConfigPropertiesLongMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)keyColumnBase2, configPropertiesLong.FindProperty("Key")!, aCEDatabaseModelsShardConfigPropertiesLongMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)descriptionColumnBase1, configPropertiesLong.FindProperty("Description")!, aCEDatabaseModelsShardConfigPropertiesLongMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)valueColumnBase8, configPropertiesLong.FindProperty("Value")!, aCEDatabaseModelsShardConfigPropertiesLongMappingBase);

            var tableMappings36 = new List<TableMapping>();
            configPropertiesLong.SetRuntimeAnnotation("Relational:TableMappings", tableMappings36);
            var config_properties_longTable = new Table("config_properties_long", null, relationalModel);
            var keyColumn2 = new Column("key", "varchar(255)", config_properties_longTable);
            config_properties_longTable.Columns.Add("key", keyColumn2);
            var descriptionColumn1 = new Column("description", "text", config_properties_longTable)
            {
                IsNullable = true
            };
            config_properties_longTable.Columns.Add("description", descriptionColumn1);
            var valueColumn8 = new Column("value", "bigint", config_properties_longTable);
            config_properties_longTable.Columns.Add("value", valueColumn8);
            var pRIMARY36 = new UniqueConstraint("PRIMARY", config_properties_longTable, new[] { keyColumn2 });
            config_properties_longTable.PrimaryKey = pRIMARY36;
            var pRIMARY36Uc = RelationalModel.GetKey(this,
                "ACE.Database.Models.Shard.ConfigPropertiesLong",
                new[] { "Key" });
            pRIMARY36.MappedKeys.Add(pRIMARY36Uc);
            RelationalModel.GetOrCreateUniqueConstraints(pRIMARY36Uc).Add(pRIMARY36);
            config_properties_longTable.UniqueConstraints.Add("PRIMARY", pRIMARY36);
            relationalModel.Tables.Add(("config_properties_long", null), config_properties_longTable);
            var config_properties_longTableMapping = new TableMapping(configPropertiesLong, config_properties_longTable, true);
            config_properties_longTable.AddTypeMapping(config_properties_longTableMapping, false);
            tableMappings36.Add(config_properties_longTableMapping);
            RelationalModel.CreateColumnMapping(keyColumn2, configPropertiesLong.FindProperty("Key")!, config_properties_longTableMapping);
            RelationalModel.CreateColumnMapping(descriptionColumn1, configPropertiesLong.FindProperty("Description")!, config_properties_longTableMapping);
            RelationalModel.CreateColumnMapping(valueColumn8, configPropertiesLong.FindProperty("Value")!, config_properties_longTableMapping);

            var configPropertiesString = FindEntityType("ACE.Database.Models.Shard.ConfigPropertiesString")!;

            var defaultTableMappings37 = new List<TableMappingBase<ColumnMappingBase>>();
            configPropertiesString.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings37);
            var aCEDatabaseModelsShardConfigPropertiesStringTableBase = new TableBase("ACE.Database.Models.Shard.ConfigPropertiesString", null, relationalModel);
            var descriptionColumnBase2 = new ColumnBase<ColumnMappingBase>("description", "text", aCEDatabaseModelsShardConfigPropertiesStringTableBase)
            {
                IsNullable = true
            };
            aCEDatabaseModelsShardConfigPropertiesStringTableBase.Columns.Add("description", descriptionColumnBase2);
            var keyColumnBase3 = new ColumnBase<ColumnMappingBase>("key", "varchar(255)", aCEDatabaseModelsShardConfigPropertiesStringTableBase);
            aCEDatabaseModelsShardConfigPropertiesStringTableBase.Columns.Add("key", keyColumnBase3);
            var valueColumnBase9 = new ColumnBase<ColumnMappingBase>("value", "text", aCEDatabaseModelsShardConfigPropertiesStringTableBase);
            aCEDatabaseModelsShardConfigPropertiesStringTableBase.Columns.Add("value", valueColumnBase9);
            relationalModel.DefaultTables.Add("ACE.Database.Models.Shard.ConfigPropertiesString", aCEDatabaseModelsShardConfigPropertiesStringTableBase);
            var aCEDatabaseModelsShardConfigPropertiesStringMappingBase = new TableMappingBase<ColumnMappingBase>(configPropertiesString, aCEDatabaseModelsShardConfigPropertiesStringTableBase, true);
            aCEDatabaseModelsShardConfigPropertiesStringTableBase.AddTypeMapping(aCEDatabaseModelsShardConfigPropertiesStringMappingBase, false);
            defaultTableMappings37.Add(aCEDatabaseModelsShardConfigPropertiesStringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)keyColumnBase3, configPropertiesString.FindProperty("Key")!, aCEDatabaseModelsShardConfigPropertiesStringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)descriptionColumnBase2, configPropertiesString.FindProperty("Description")!, aCEDatabaseModelsShardConfigPropertiesStringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)valueColumnBase9, configPropertiesString.FindProperty("Value")!, aCEDatabaseModelsShardConfigPropertiesStringMappingBase);

            var tableMappings37 = new List<TableMapping>();
            configPropertiesString.SetRuntimeAnnotation("Relational:TableMappings", tableMappings37);
            var config_properties_stringTable = new Table("config_properties_string", null, relationalModel);
            var keyColumn3 = new Column("key", "varchar(255)", config_properties_stringTable);
            config_properties_stringTable.Columns.Add("key", keyColumn3);
            var descriptionColumn2 = new Column("description", "text", config_properties_stringTable)
            {
                IsNullable = true
            };
            config_properties_stringTable.Columns.Add("description", descriptionColumn2);
            var valueColumn9 = new Column("value", "text", config_properties_stringTable);
            config_properties_stringTable.Columns.Add("value", valueColumn9);
            var pRIMARY37 = new UniqueConstraint("PRIMARY", config_properties_stringTable, new[] { keyColumn3 });
            config_properties_stringTable.PrimaryKey = pRIMARY37;
            var pRIMARY37Uc = RelationalModel.GetKey(this,
                "ACE.Database.Models.Shard.ConfigPropertiesString",
                new[] { "Key" });
            pRIMARY37.MappedKeys.Add(pRIMARY37Uc);
            RelationalModel.GetOrCreateUniqueConstraints(pRIMARY37Uc).Add(pRIMARY37);
            config_properties_stringTable.UniqueConstraints.Add("PRIMARY", pRIMARY37);
            relationalModel.Tables.Add(("config_properties_string", null), config_properties_stringTable);
            var config_properties_stringTableMapping = new TableMapping(configPropertiesString, config_properties_stringTable, true);
            config_properties_stringTable.AddTypeMapping(config_properties_stringTableMapping, false);
            tableMappings37.Add(config_properties_stringTableMapping);
            RelationalModel.CreateColumnMapping(keyColumn3, configPropertiesString.FindProperty("Key")!, config_properties_stringTableMapping);
            RelationalModel.CreateColumnMapping(descriptionColumn2, configPropertiesString.FindProperty("Description")!, config_properties_stringTableMapping);
            RelationalModel.CreateColumnMapping(valueColumn9, configPropertiesString.FindProperty("Value")!, config_properties_stringTableMapping);

            var housePermission = FindEntityType("ACE.Database.Models.Shard.HousePermission")!;

            var defaultTableMappings38 = new List<TableMappingBase<ColumnMappingBase>>();
            housePermission.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings38);
            var aCEDatabaseModelsShardHousePermissionTableBase = new TableBase("ACE.Database.Models.Shard.HousePermission", null, relationalModel);
            var house_IdColumnBase = new ColumnBase<ColumnMappingBase>("house_Id", "bigint unsigned", aCEDatabaseModelsShardHousePermissionTableBase);
            aCEDatabaseModelsShardHousePermissionTableBase.Columns.Add("house_Id", house_IdColumnBase);
            var player_GuidColumnBase = new ColumnBase<ColumnMappingBase>("player_Guid", "bigint unsigned", aCEDatabaseModelsShardHousePermissionTableBase);
            aCEDatabaseModelsShardHousePermissionTableBase.Columns.Add("player_Guid", player_GuidColumnBase);
            var storageColumnBase = new ColumnBase<ColumnMappingBase>("storage", "bit(1)", aCEDatabaseModelsShardHousePermissionTableBase);
            aCEDatabaseModelsShardHousePermissionTableBase.Columns.Add("storage", storageColumnBase);
            relationalModel.DefaultTables.Add("ACE.Database.Models.Shard.HousePermission", aCEDatabaseModelsShardHousePermissionTableBase);
            var aCEDatabaseModelsShardHousePermissionMappingBase = new TableMappingBase<ColumnMappingBase>(housePermission, aCEDatabaseModelsShardHousePermissionTableBase, true);
            aCEDatabaseModelsShardHousePermissionTableBase.AddTypeMapping(aCEDatabaseModelsShardHousePermissionMappingBase, false);
            defaultTableMappings38.Add(aCEDatabaseModelsShardHousePermissionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)house_IdColumnBase, housePermission.FindProperty("HouseId")!, aCEDatabaseModelsShardHousePermissionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)player_GuidColumnBase, housePermission.FindProperty("PlayerGuid")!, aCEDatabaseModelsShardHousePermissionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)storageColumnBase, housePermission.FindProperty("Storage")!, aCEDatabaseModelsShardHousePermissionMappingBase);

            var tableMappings38 = new List<TableMapping>();
            housePermission.SetRuntimeAnnotation("Relational:TableMappings", tableMappings38);
            var house_permissionTable = new Table("house_permission", null, relationalModel);
            var house_IdColumn = new Column("house_Id", "bigint unsigned", house_permissionTable);
            house_permissionTable.Columns.Add("house_Id", house_IdColumn);
            var player_GuidColumn = new Column("player_Guid", "bigint unsigned", house_permissionTable);
            house_permissionTable.Columns.Add("player_Guid", player_GuidColumn);
            var storageColumn = new Column("storage", "bit(1)", house_permissionTable);
            house_permissionTable.Columns.Add("storage", storageColumn);
            var pRIMARY38 = new UniqueConstraint("PRIMARY", house_permissionTable, new[] { house_IdColumn, player_GuidColumn });
            house_permissionTable.PrimaryKey = pRIMARY38;
            pRIMARY38.AddAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });
            var pRIMARY38Uc = RelationalModel.GetKey(this,
                "ACE.Database.Models.Shard.HousePermission",
                new[] { "HouseId", "PlayerGuid" });
            pRIMARY38.MappedKeys.Add(pRIMARY38Uc);
            RelationalModel.GetOrCreateUniqueConstraints(pRIMARY38Uc).Add(pRIMARY38);
            house_permissionTable.UniqueConstraints.Add("PRIMARY", pRIMARY38);
            var biota_Id_house_Id_idx = new TableIndex(
            "biota_Id_house_Id_idx", house_permissionTable, new[] { house_IdColumn }, false);
            var biota_Id_house_Id_idxIx = RelationalModel.GetIndex(this,
                "ACE.Database.Models.Shard.HousePermission",
                "biota_Id_house_Id_idx");
            biota_Id_house_Id_idx.MappedIndexes.Add(biota_Id_house_Id_idxIx);
            RelationalModel.GetOrCreateTableIndexes(biota_Id_house_Id_idxIx).Add(biota_Id_house_Id_idx);
            house_permissionTable.Indexes.Add("biota_Id_house_Id_idx", biota_Id_house_Id_idx);
            relationalModel.Tables.Add(("house_permission", null), house_permissionTable);
            var house_permissionTableMapping = new TableMapping(housePermission, house_permissionTable, true);
            house_permissionTable.AddTypeMapping(house_permissionTableMapping, false);
            tableMappings38.Add(house_permissionTableMapping);
            RelationalModel.CreateColumnMapping(house_IdColumn, housePermission.FindProperty("HouseId")!, house_permissionTableMapping);
            RelationalModel.CreateColumnMapping(player_GuidColumn, housePermission.FindProperty("PlayerGuid")!, house_permissionTableMapping);
            RelationalModel.CreateColumnMapping(storageColumn, housePermission.FindProperty("Storage")!, house_permissionTableMapping);
            var fK_allegiance_biota_Id = new ForeignKeyConstraint(
                "FK_allegiance_biota_Id", biota_properties_allegianceTable, biotaTable,
                new[] { allegiance_IdColumn },
                biotaTable.FindUniqueConstraint("PRIMARY")!, ReferentialAction.Cascade);
            var fK_allegiance_biota_IdFk = RelationalModel.GetForeignKey(this,
                "ACE.Database.Models.Shard.BiotaPropertiesAllegiance",
                new[] { "AllegianceId" },
                "ACE.Database.Models.Shard.Biota",
                new[] { "Id" });
            fK_allegiance_biota_Id.MappedForeignKeys.Add(fK_allegiance_biota_IdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_allegiance_biota_IdFk).Add(fK_allegiance_biota_Id);
            biota_properties_allegianceTable.ForeignKeyConstraints.Add(fK_allegiance_biota_Id);
            biotaTable.ReferencingForeignKeyConstraints.Add(fK_allegiance_biota_Id);
            var fK_allegiance_character_Id0 = new ForeignKeyConstraint(
                "FK_allegiance_character_Id", biota_properties_allegianceTable, characterTable,
                new[] { character_IdColumn },
                characterTable.FindUniqueConstraint("PRIMARY")!, ReferentialAction.Cascade);
            var fK_allegiance_character_Id0Fk = RelationalModel.GetForeignKey(this,
                "ACE.Database.Models.Shard.BiotaPropertiesAllegiance",
                new[] { "CharacterId" },
                "ACE.Database.Models.Shard.Character",
                new[] { "Id" });
            fK_allegiance_character_Id0.MappedForeignKeys.Add(fK_allegiance_character_Id0Fk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_allegiance_character_Id0Fk).Add(fK_allegiance_character_Id0);
            biota_properties_allegianceTable.ForeignKeyConstraints.Add(fK_allegiance_character_Id0);
            characterTable.ReferencingForeignKeyConstraints.Add(fK_allegiance_character_Id0);
            var wcid_animpart = new ForeignKeyConstraint(
                "wcid_animpart", biota_properties_anim_partTable, biotaTable,
                new[] { object_IdColumn },
                biotaTable.FindUniqueConstraint("PRIMARY")!, ReferentialAction.Cascade);
            var wcid_animpartFk = RelationalModel.GetForeignKey(this,
                "ACE.Database.Models.Shard.BiotaPropertiesAnimPart",
                new[] { "ObjectId" },
                "ACE.Database.Models.Shard.Biota",
                new[] { "Id" });
            wcid_animpart.MappedForeignKeys.Add(wcid_animpartFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(wcid_animpartFk).Add(wcid_animpart);
            biota_properties_anim_partTable.ForeignKeyConstraints.Add(wcid_animpart);
            biotaTable.ReferencingForeignKeyConstraints.Add(wcid_animpart);
            var wcid_attribute = new ForeignKeyConstraint(
                "wcid_attribute", biota_properties_attributeTable, biotaTable,
                new[] { object_IdColumn0 },
                biotaTable.FindUniqueConstraint("PRIMARY")!, ReferentialAction.Cascade);
            var wcid_attributeFk = RelationalModel.GetForeignKey(this,
                "ACE.Database.Models.Shard.BiotaPropertiesAttribute",
                new[] { "ObjectId" },
                "ACE.Database.Models.Shard.Biota",
                new[] { "Id" });
            wcid_attribute.MappedForeignKeys.Add(wcid_attributeFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(wcid_attributeFk).Add(wcid_attribute);
            biota_properties_attributeTable.ForeignKeyConstraints.Add(wcid_attribute);
            biotaTable.ReferencingForeignKeyConstraints.Add(wcid_attribute);
            var wcid_attribute2nd = new ForeignKeyConstraint(
                "wcid_attribute2nd", biota_properties_attribute_2ndTable, biotaTable,
                new[] { object_IdColumn1 },
                biotaTable.FindUniqueConstraint("PRIMARY")!, ReferentialAction.Cascade);
            var wcid_attribute2ndFk = RelationalModel.GetForeignKey(this,
                "ACE.Database.Models.Shard.BiotaPropertiesAttribute2nd",
                new[] { "ObjectId" },
                "ACE.Database.Models.Shard.Biota",
                new[] { "Id" });
            wcid_attribute2nd.MappedForeignKeys.Add(wcid_attribute2ndFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(wcid_attribute2ndFk).Add(wcid_attribute2nd);
            biota_properties_attribute_2ndTable.ForeignKeyConstraints.Add(wcid_attribute2nd);
            biotaTable.ReferencingForeignKeyConstraints.Add(wcid_attribute2nd);
            var wcid_bodypart = new ForeignKeyConstraint(
                "wcid_bodypart", biota_properties_body_partTable, biotaTable,
                new[] { object_IdColumn2 },
                biotaTable.FindUniqueConstraint("PRIMARY")!, ReferentialAction.Cascade);
            var wcid_bodypartFk = RelationalModel.GetForeignKey(this,
                "ACE.Database.Models.Shard.BiotaPropertiesBodyPart",
                new[] { "ObjectId" },
                "ACE.Database.Models.Shard.Biota",
                new[] { "Id" });
            wcid_bodypart.MappedForeignKeys.Add(wcid_bodypartFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(wcid_bodypartFk).Add(wcid_bodypart);
            biota_properties_body_partTable.ForeignKeyConstraints.Add(wcid_bodypart);
            biotaTable.ReferencingForeignKeyConstraints.Add(wcid_bodypart);
            var wcid_bookdata = new ForeignKeyConstraint(
                "wcid_bookdata", biota_properties_bookTable, biotaTable,
                new[] { object_IdColumn3 },
                biotaTable.FindUniqueConstraint("PRIMARY")!, ReferentialAction.Cascade);
            var wcid_bookdataFk = RelationalModel.GetForeignKey(this,
                "ACE.Database.Models.Shard.BiotaPropertiesBook",
                new[] { "ObjectId" },
                "ACE.Database.Models.Shard.Biota",
                new[] { "Id" });
            wcid_bookdata.MappedForeignKeys.Add(wcid_bookdataFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(wcid_bookdataFk).Add(wcid_bookdata);
            biota_properties_bookTable.ForeignKeyConstraints.Add(wcid_bookdata);
            biotaTable.ReferencingForeignKeyConstraints.Add(wcid_bookdata);
            var wcid_pagedata = new ForeignKeyConstraint(
                "wcid_pagedata", biota_properties_book_page_dataTable, biotaTable,
                new[] { object_IdColumn4 },
                biotaTable.FindUniqueConstraint("PRIMARY")!, ReferentialAction.Cascade);
            var wcid_pagedataFk = RelationalModel.GetForeignKey(this,
                "ACE.Database.Models.Shard.BiotaPropertiesBookPageData",
                new[] { "ObjectId" },
                "ACE.Database.Models.Shard.Biota",
                new[] { "Id" });
            wcid_pagedata.MappedForeignKeys.Add(wcid_pagedataFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(wcid_pagedataFk).Add(wcid_pagedata);
            biota_properties_book_page_dataTable.ForeignKeyConstraints.Add(wcid_pagedata);
            biotaTable.ReferencingForeignKeyConstraints.Add(wcid_pagedata);
            var wcid_bool = new ForeignKeyConstraint(
                "wcid_bool", biota_properties_boolTable, biotaTable,
                new[] { object_IdColumn5 },
                biotaTable.FindUniqueConstraint("PRIMARY")!, ReferentialAction.Cascade);
            var wcid_boolFk = RelationalModel.GetForeignKey(this,
                "ACE.Database.Models.Shard.BiotaPropertiesBool",
                new[] { "ObjectId" },
                "ACE.Database.Models.Shard.Biota",
                new[] { "Id" });
            wcid_bool.MappedForeignKeys.Add(wcid_boolFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(wcid_boolFk).Add(wcid_bool);
            biota_properties_boolTable.ForeignKeyConstraints.Add(wcid_bool);
            biotaTable.ReferencingForeignKeyConstraints.Add(wcid_bool);
            var wcid_createlist0 = new ForeignKeyConstraint(
                "wcid_createlist", biota_properties_create_listTable, biotaTable,
                new[] { object_IdColumn6 },
                biotaTable.FindUniqueConstraint("PRIMARY")!, ReferentialAction.Cascade);
            var wcid_createlist0Fk = RelationalModel.GetForeignKey(this,
                "ACE.Database.Models.Shard.BiotaPropertiesCreateList",
                new[] { "ObjectId" },
                "ACE.Database.Models.Shard.Biota",
                new[] { "Id" });
            wcid_createlist0.MappedForeignKeys.Add(wcid_createlist0Fk);
            RelationalModel.GetOrCreateForeignKeyConstraints(wcid_createlist0Fk).Add(wcid_createlist0);
            biota_properties_create_listTable.ForeignKeyConstraints.Add(wcid_createlist0);
            biotaTable.ReferencingForeignKeyConstraints.Add(wcid_createlist0);
            var wcid_did = new ForeignKeyConstraint(
                "wcid_did", biota_properties_d_i_dTable, biotaTable,
                new[] { object_IdColumn7 },
                biotaTable.FindUniqueConstraint("PRIMARY")!, ReferentialAction.Cascade);
            var wcid_didFk = RelationalModel.GetForeignKey(this,
                "ACE.Database.Models.Shard.BiotaPropertiesDID",
                new[] { "ObjectId" },
                "ACE.Database.Models.Shard.Biota",
                new[] { "Id" });
            wcid_did.MappedForeignKeys.Add(wcid_didFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(wcid_didFk).Add(wcid_did);
            biota_properties_d_i_dTable.ForeignKeyConstraints.Add(wcid_did);
            biotaTable.ReferencingForeignKeyConstraints.Add(wcid_did);
            var wcid_emote0 = new ForeignKeyConstraint(
                "wcid_emote", biota_properties_emoteTable, biotaTable,
                new[] { object_IdColumn8 },
                biotaTable.FindUniqueConstraint("PRIMARY")!, ReferentialAction.Cascade);
            var wcid_emote0Fk = RelationalModel.GetForeignKey(this,
                "ACE.Database.Models.Shard.BiotaPropertiesEmote",
                new[] { "ObjectId" },
                "ACE.Database.Models.Shard.Biota",
                new[] { "Id" });
            wcid_emote0.MappedForeignKeys.Add(wcid_emote0Fk);
            RelationalModel.GetOrCreateForeignKeyConstraints(wcid_emote0Fk).Add(wcid_emote0);
            biota_properties_emoteTable.ForeignKeyConstraints.Add(wcid_emote0);
            biotaTable.ReferencingForeignKeyConstraints.Add(wcid_emote0);
            var emoteid_emoteaction = new ForeignKeyConstraint(
                "emoteid_emoteaction", biota_properties_emote_actionTable, biota_properties_emoteTable,
                new[] { emote_IdColumn },
                biota_properties_emoteTable.FindUniqueConstraint("PRIMARY")!, ReferentialAction.Cascade);
            var emoteid_emoteactionFk = RelationalModel.GetForeignKey(this,
                "ACE.Database.Models.Shard.BiotaPropertiesEmoteAction",
                new[] { "EmoteId" },
                "ACE.Database.Models.Shard.BiotaPropertiesEmote",
                new[] { "Id" });
            emoteid_emoteaction.MappedForeignKeys.Add(emoteid_emoteactionFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(emoteid_emoteactionFk).Add(emoteid_emoteaction);
            biota_properties_emote_actionTable.ForeignKeyConstraints.Add(emoteid_emoteaction);
            biota_properties_emoteTable.ReferencingForeignKeyConstraints.Add(emoteid_emoteaction);
            var wcid_enchantmentregistry = new ForeignKeyConstraint(
                "wcid_enchantmentregistry", biota_properties_enchantment_registryTable, biotaTable,
                new[] { object_IdColumn9 },
                biotaTable.FindUniqueConstraint("PRIMARY")!, ReferentialAction.Cascade);
            var wcid_enchantmentregistryFk = RelationalModel.GetForeignKey(this,
                "ACE.Database.Models.Shard.BiotaPropertiesEnchantmentRegistry",
                new[] { "ObjectId" },
                "ACE.Database.Models.Shard.Biota",
                new[] { "Id" });
            wcid_enchantmentregistry.MappedForeignKeys.Add(wcid_enchantmentregistryFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(wcid_enchantmentregistryFk).Add(wcid_enchantmentregistry);
            biota_properties_enchantment_registryTable.ForeignKeyConstraints.Add(wcid_enchantmentregistry);
            biotaTable.ReferencingForeignKeyConstraints.Add(wcid_enchantmentregistry);
            var wcid_eventfilter = new ForeignKeyConstraint(
                "wcid_eventfilter", biota_properties_event_filterTable, biotaTable,
                new[] { object_IdColumn10 },
                biotaTable.FindUniqueConstraint("PRIMARY")!, ReferentialAction.Cascade);
            var wcid_eventfilterFk = RelationalModel.GetForeignKey(this,
                "ACE.Database.Models.Shard.BiotaPropertiesEventFilter",
                new[] { "ObjectId" },
                "ACE.Database.Models.Shard.Biota",
                new[] { "Id" });
            wcid_eventfilter.MappedForeignKeys.Add(wcid_eventfilterFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(wcid_eventfilterFk).Add(wcid_eventfilter);
            biota_properties_event_filterTable.ForeignKeyConstraints.Add(wcid_eventfilter);
            biotaTable.ReferencingForeignKeyConstraints.Add(wcid_eventfilter);
            var wcid_float = new ForeignKeyConstraint(
                "wcid_float", biota_properties_floatTable, biotaTable,
                new[] { object_IdColumn11 },
                biotaTable.FindUniqueConstraint("PRIMARY")!, ReferentialAction.Cascade);
            var wcid_floatFk = RelationalModel.GetForeignKey(this,
                "ACE.Database.Models.Shard.BiotaPropertiesFloat",
                new[] { "ObjectId" },
                "ACE.Database.Models.Shard.Biota",
                new[] { "Id" });
            wcid_float.MappedForeignKeys.Add(wcid_floatFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(wcid_floatFk).Add(wcid_float);
            biota_properties_floatTable.ForeignKeyConstraints.Add(wcid_float);
            biotaTable.ReferencingForeignKeyConstraints.Add(wcid_float);
            var wcid_generator0 = new ForeignKeyConstraint(
                "wcid_generator", biota_properties_generatorTable, biotaTable,
                new[] { object_IdColumn12 },
                biotaTable.FindUniqueConstraint("PRIMARY")!, ReferentialAction.Cascade);
            var wcid_generator0Fk = RelationalModel.GetForeignKey(this,
                "ACE.Database.Models.Shard.BiotaPropertiesGenerator",
                new[] { "ObjectId" },
                "ACE.Database.Models.Shard.Biota",
                new[] { "Id" });
            wcid_generator0.MappedForeignKeys.Add(wcid_generator0Fk);
            RelationalModel.GetOrCreateForeignKeyConstraints(wcid_generator0Fk).Add(wcid_generator0);
            biota_properties_generatorTable.ForeignKeyConstraints.Add(wcid_generator0);
            biotaTable.ReferencingForeignKeyConstraints.Add(wcid_generator0);
            var wcid_iid = new ForeignKeyConstraint(
                "wcid_iid", biota_properties_i_i_dTable, biotaTable,
                new[] { object_IdColumn13 },
                biotaTable.FindUniqueConstraint("PRIMARY")!, ReferentialAction.Cascade);
            var wcid_iidFk = RelationalModel.GetForeignKey(this,
                "ACE.Database.Models.Shard.BiotaPropertiesIID",
                new[] { "ObjectId" },
                "ACE.Database.Models.Shard.Biota",
                new[] { "Id" });
            wcid_iid.MappedForeignKeys.Add(wcid_iidFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(wcid_iidFk).Add(wcid_iid);
            biota_properties_i_i_dTable.ForeignKeyConstraints.Add(wcid_iid);
            biotaTable.ReferencingForeignKeyConstraints.Add(wcid_iid);
            var wcid_int = new ForeignKeyConstraint(
                "wcid_int", biota_properties_intTable, biotaTable,
                new[] { object_IdColumn14 },
                biotaTable.FindUniqueConstraint("PRIMARY")!, ReferentialAction.Cascade);
            var wcid_intFk = RelationalModel.GetForeignKey(this,
                "ACE.Database.Models.Shard.BiotaPropertiesInt",
                new[] { "ObjectId" },
                "ACE.Database.Models.Shard.Biota",
                new[] { "Id" });
            wcid_int.MappedForeignKeys.Add(wcid_intFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(wcid_intFk).Add(wcid_int);
            biota_properties_intTable.ForeignKeyConstraints.Add(wcid_int);
            biotaTable.ReferencingForeignKeyConstraints.Add(wcid_int);
            var wcid_int64 = new ForeignKeyConstraint(
                "wcid_int64", biota_properties_int64Table, biotaTable,
                new[] { object_IdColumn15 },
                biotaTable.FindUniqueConstraint("PRIMARY")!, ReferentialAction.Cascade);
            var wcid_int64Fk = RelationalModel.GetForeignKey(this,
                "ACE.Database.Models.Shard.BiotaPropertiesInt64",
                new[] { "ObjectId" },
                "ACE.Database.Models.Shard.Biota",
                new[] { "Id" });
            wcid_int64.MappedForeignKeys.Add(wcid_int64Fk);
            RelationalModel.GetOrCreateForeignKeyConstraints(wcid_int64Fk).Add(wcid_int64);
            biota_properties_int64Table.ForeignKeyConstraints.Add(wcid_int64);
            biotaTable.ReferencingForeignKeyConstraints.Add(wcid_int64);
            var wcid_palette = new ForeignKeyConstraint(
                "wcid_palette", biota_properties_paletteTable, biotaTable,
                new[] { object_IdColumn16 },
                biotaTable.FindUniqueConstraint("PRIMARY")!, ReferentialAction.Cascade);
            var wcid_paletteFk = RelationalModel.GetForeignKey(this,
                "ACE.Database.Models.Shard.BiotaPropertiesPalette",
                new[] { "ObjectId" },
                "ACE.Database.Models.Shard.Biota",
                new[] { "Id" });
            wcid_palette.MappedForeignKeys.Add(wcid_paletteFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(wcid_paletteFk).Add(wcid_palette);
            biota_properties_paletteTable.ForeignKeyConstraints.Add(wcid_palette);
            biotaTable.ReferencingForeignKeyConstraints.Add(wcid_palette);
            var wcid_position = new ForeignKeyConstraint(
                "wcid_position", biota_properties_positionTable, biotaTable,
                new[] { object_IdColumn17 },
                biotaTable.FindUniqueConstraint("PRIMARY")!, ReferentialAction.Cascade);
            var wcid_positionFk = RelationalModel.GetForeignKey(this,
                "ACE.Database.Models.Shard.BiotaPropertiesPosition",
                new[] { "ObjectId" },
                "ACE.Database.Models.Shard.Biota",
                new[] { "Id" });
            wcid_position.MappedForeignKeys.Add(wcid_positionFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(wcid_positionFk).Add(wcid_position);
            biota_properties_positionTable.ForeignKeyConstraints.Add(wcid_position);
            biotaTable.ReferencingForeignKeyConstraints.Add(wcid_position);
            var wcid_skill = new ForeignKeyConstraint(
                "wcid_skill", biota_properties_skillTable, biotaTable,
                new[] { object_IdColumn18 },
                biotaTable.FindUniqueConstraint("PRIMARY")!, ReferentialAction.Cascade);
            var wcid_skillFk = RelationalModel.GetForeignKey(this,
                "ACE.Database.Models.Shard.BiotaPropertiesSkill",
                new[] { "ObjectId" },
                "ACE.Database.Models.Shard.Biota",
                new[] { "Id" });
            wcid_skill.MappedForeignKeys.Add(wcid_skillFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(wcid_skillFk).Add(wcid_skill);
            biota_properties_skillTable.ForeignKeyConstraints.Add(wcid_skill);
            biotaTable.ReferencingForeignKeyConstraints.Add(wcid_skill);
            var wcid_spellbook = new ForeignKeyConstraint(
                "wcid_spellbook", biota_properties_spell_bookTable, biotaTable,
                new[] { object_IdColumn19 },
                biotaTable.FindUniqueConstraint("PRIMARY")!, ReferentialAction.Cascade);
            var wcid_spellbookFk = RelationalModel.GetForeignKey(this,
                "ACE.Database.Models.Shard.BiotaPropertiesSpellBook",
                new[] { "ObjectId" },
                "ACE.Database.Models.Shard.Biota",
                new[] { "Id" });
            wcid_spellbook.MappedForeignKeys.Add(wcid_spellbookFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(wcid_spellbookFk).Add(wcid_spellbook);
            biota_properties_spell_bookTable.ForeignKeyConstraints.Add(wcid_spellbook);
            biotaTable.ReferencingForeignKeyConstraints.Add(wcid_spellbook);
            var wcid_string = new ForeignKeyConstraint(
                "wcid_string", biota_properties_stringTable, biotaTable,
                new[] { object_IdColumn20 },
                biotaTable.FindUniqueConstraint("PRIMARY")!, ReferentialAction.Cascade);
            var wcid_stringFk = RelationalModel.GetForeignKey(this,
                "ACE.Database.Models.Shard.BiotaPropertiesString",
                new[] { "ObjectId" },
                "ACE.Database.Models.Shard.Biota",
                new[] { "Id" });
            wcid_string.MappedForeignKeys.Add(wcid_stringFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(wcid_stringFk).Add(wcid_string);
            biota_properties_stringTable.ForeignKeyConstraints.Add(wcid_string);
            biotaTable.ReferencingForeignKeyConstraints.Add(wcid_string);
            var wcid_texturemap = new ForeignKeyConstraint(
                "wcid_texturemap", biota_properties_texture_mapTable, biotaTable,
                new[] { object_IdColumn21 },
                biotaTable.FindUniqueConstraint("PRIMARY")!, ReferentialAction.Cascade);
            var wcid_texturemapFk = RelationalModel.GetForeignKey(this,
                "ACE.Database.Models.Shard.BiotaPropertiesTextureMap",
                new[] { "ObjectId" },
                "ACE.Database.Models.Shard.Biota",
                new[] { "Id" });
            wcid_texturemap.MappedForeignKeys.Add(wcid_texturemapFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(wcid_texturemapFk).Add(wcid_texturemap);
            biota_properties_texture_mapTable.ForeignKeyConstraints.Add(wcid_texturemap);
            biotaTable.ReferencingForeignKeyConstraints.Add(wcid_texturemap);
            var wcid_contract = new ForeignKeyConstraint(
                "wcid_contract", character_properties_contract_registryTable, characterTable,
                new[] { character_IdColumn0 },
                characterTable.FindUniqueConstraint("PRIMARY")!, ReferentialAction.Cascade);
            var wcid_contractFk = RelationalModel.GetForeignKey(this,
                "ACE.Database.Models.Shard.CharacterPropertiesContractRegistry",
                new[] { "CharacterId" },
                "ACE.Database.Models.Shard.Character",
                new[] { "Id" });
            wcid_contract.MappedForeignKeys.Add(wcid_contractFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(wcid_contractFk).Add(wcid_contract);
            character_properties_contract_registryTable.ForeignKeyConstraints.Add(wcid_contract);
            characterTable.ReferencingForeignKeyConstraints.Add(wcid_contract);
            var wcid_fillcompbook = new ForeignKeyConstraint(
                "wcid_fillcompbook", character_properties_fill_comp_bookTable, characterTable,
                new[] { character_IdColumn1 },
                characterTable.FindUniqueConstraint("PRIMARY")!, ReferentialAction.Cascade);
            var wcid_fillcompbookFk = RelationalModel.GetForeignKey(this,
                "ACE.Database.Models.Shard.CharacterPropertiesFillCompBook",
                new[] { "CharacterId" },
                "ACE.Database.Models.Shard.Character",
                new[] { "Id" });
            wcid_fillcompbook.MappedForeignKeys.Add(wcid_fillcompbookFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(wcid_fillcompbookFk).Add(wcid_fillcompbook);
            character_properties_fill_comp_bookTable.ForeignKeyConstraints.Add(wcid_fillcompbook);
            characterTable.ReferencingForeignKeyConstraints.Add(wcid_fillcompbook);
            var wcid_friend = new ForeignKeyConstraint(
                "wcid_friend", character_properties_friend_listTable, characterTable,
                new[] { character_IdColumn2 },
                characterTable.FindUniqueConstraint("PRIMARY")!, ReferentialAction.Cascade);
            var wcid_friendFk = RelationalModel.GetForeignKey(this,
                "ACE.Database.Models.Shard.CharacterPropertiesFriendList",
                new[] { "CharacterId" },
                "ACE.Database.Models.Shard.Character",
                new[] { "Id" });
            wcid_friend.MappedForeignKeys.Add(wcid_friendFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(wcid_friendFk).Add(wcid_friend);
            character_properties_friend_listTable.ForeignKeyConstraints.Add(wcid_friend);
            characterTable.ReferencingForeignKeyConstraints.Add(wcid_friend);
            var wcid_questbook = new ForeignKeyConstraint(
                "wcid_questbook", character_properties_quest_registryTable, characterTable,
                new[] { character_IdColumn3 },
                characterTable.FindUniqueConstraint("PRIMARY")!, ReferentialAction.Cascade);
            var wcid_questbookFk = RelationalModel.GetForeignKey(this,
                "ACE.Database.Models.Shard.CharacterPropertiesQuestRegistry",
                new[] { "CharacterId" },
                "ACE.Database.Models.Shard.Character",
                new[] { "Id" });
            wcid_questbook.MappedForeignKeys.Add(wcid_questbookFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(wcid_questbookFk).Add(wcid_questbook);
            character_properties_quest_registryTable.ForeignKeyConstraints.Add(wcid_questbook);
            characterTable.ReferencingForeignKeyConstraints.Add(wcid_questbook);
            var wcid_shortcutbar = new ForeignKeyConstraint(
                "wcid_shortcutbar", character_properties_shortcut_barTable, characterTable,
                new[] { character_IdColumn4 },
                characterTable.FindUniqueConstraint("PRIMARY")!, ReferentialAction.Cascade);
            var wcid_shortcutbarFk = RelationalModel.GetForeignKey(this,
                "ACE.Database.Models.Shard.CharacterPropertiesShortcutBar",
                new[] { "CharacterId" },
                "ACE.Database.Models.Shard.Character",
                new[] { "Id" });
            wcid_shortcutbar.MappedForeignKeys.Add(wcid_shortcutbarFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(wcid_shortcutbarFk).Add(wcid_shortcutbar);
            character_properties_shortcut_barTable.ForeignKeyConstraints.Add(wcid_shortcutbar);
            characterTable.ReferencingForeignKeyConstraints.Add(wcid_shortcutbar);
            var characterId_spellbar = new ForeignKeyConstraint(
                "characterId_spellbar", character_properties_spell_barTable, characterTable,
                new[] { character_IdColumn5 },
                characterTable.FindUniqueConstraint("PRIMARY")!, ReferentialAction.Cascade);
            var characterId_spellbarFk = RelationalModel.GetForeignKey(this,
                "ACE.Database.Models.Shard.CharacterPropertiesSpellBar",
                new[] { "CharacterId" },
                "ACE.Database.Models.Shard.Character",
                new[] { "Id" });
            characterId_spellbar.MappedForeignKeys.Add(characterId_spellbarFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(characterId_spellbarFk).Add(characterId_spellbar);
            character_properties_spell_barTable.ForeignKeyConstraints.Add(characterId_spellbar);
            characterTable.ReferencingForeignKeyConstraints.Add(characterId_spellbar);
            var squelch_character_Id_constraint = new ForeignKeyConstraint(
                "squelch_character_Id_constraint", character_properties_squelchTable, characterTable,
                new[] { character_IdColumn6 },
                characterTable.FindUniqueConstraint("PRIMARY")!, ReferentialAction.Cascade);
            var squelch_character_Id_constraintFk = RelationalModel.GetForeignKey(this,
                "ACE.Database.Models.Shard.CharacterPropertiesSquelch",
                new[] { "CharacterId" },
                "ACE.Database.Models.Shard.Character",
                new[] { "Id" });
            squelch_character_Id_constraint.MappedForeignKeys.Add(squelch_character_Id_constraintFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(squelch_character_Id_constraintFk).Add(squelch_character_Id_constraint);
            character_properties_squelchTable.ForeignKeyConstraints.Add(squelch_character_Id_constraint);
            characterTable.ReferencingForeignKeyConstraints.Add(squelch_character_Id_constraint);
            var wcid_titlebook = new ForeignKeyConstraint(
                "wcid_titlebook", character_properties_title_bookTable, characterTable,
                new[] { character_IdColumn7 },
                characterTable.FindUniqueConstraint("PRIMARY")!, ReferentialAction.Cascade);
            var wcid_titlebookFk = RelationalModel.GetForeignKey(this,
                "ACE.Database.Models.Shard.CharacterPropertiesTitleBook",
                new[] { "CharacterId" },
                "ACE.Database.Models.Shard.Character",
                new[] { "Id" });
            wcid_titlebook.MappedForeignKeys.Add(wcid_titlebookFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(wcid_titlebookFk).Add(wcid_titlebook);
            character_properties_title_bookTable.ForeignKeyConstraints.Add(wcid_titlebook);
            characterTable.ReferencingForeignKeyConstraints.Add(wcid_titlebook);
            var biota_Id_house_Id = new ForeignKeyConstraint(
                "biota_Id_house_Id", house_permissionTable, biotaTable,
                new[] { house_IdColumn },
                biotaTable.FindUniqueConstraint("PRIMARY")!, ReferentialAction.Cascade);
            var biota_Id_house_IdFk = RelationalModel.GetForeignKey(this,
                "ACE.Database.Models.Shard.HousePermission",
                new[] { "HouseId" },
                "ACE.Database.Models.Shard.Biota",
                new[] { "Id" });
            biota_Id_house_Id.MappedForeignKeys.Add(biota_Id_house_IdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(biota_Id_house_IdFk).Add(biota_Id_house_Id);
            house_permissionTable.ForeignKeyConstraints.Add(biota_Id_house_Id);
            biotaTable.ReferencingForeignKeyConstraints.Add(biota_Id_house_Id);
            return relationalModel.MakeReadOnly();
        }
    }
}
