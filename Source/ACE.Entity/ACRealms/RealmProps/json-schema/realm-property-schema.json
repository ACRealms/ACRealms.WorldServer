{
  "$schema": "http://json-schema.org/draft/2019-09/schema",
  "$id": "https://realm.ac/schema/v1/realm-property-schema.json",
  "type": "object",
  "definitions": {
    "propName": {
      "type": "string",
      "minLength": 2,
      "maxLength": 60,
      "format": "Must be formatted as PascalCase",
      "pattern": "(^[A-Z][a-z0-9]+[A-Z]$)|(^[A-Z][a-z]+$)|(^[A-Z][a-z0-9]+([A-Z][a-z0-9]+)+$)|(^[A-Z][a-z0-9]+([A-Z][a-z0-9]+)+[A-Z]$)"
    },
    "valEnum": { "$ref": "#/definitions/propName" },
    "valInt": { "type": "integer", "minimum": -2147483648, "maximum": 2147483647, "default": 0 },
    "valLong": { "type": "integer", "minimum": -9223372036854775808, "maximum": 9223372036854775807, "default": 0 },
    "valFloat": { "type": "number", "minimum": -1.79769313486231E308, "maximum": 1.79769313486231E308, "default": 0 },
    "valBool": { "type": "boolean", "default": false },
    "valStringSimple": { "type": "string", "default": "", "maxLength": 64000 },
    "valStringArray": { "type": "array", "maxItems": 320,
      "description": "list of string fragments to be concatenated together to allow json string to be broken up into multiple lines in the editor",
      "items": { "type": "string", "minLength": 1, "maxLength": 200 }
    },
    "valString": { "oneOf": [
        { "$ref": "#/definitions/valStringSimple" },
        { "$ref": "#/definitions/valStringArray" }
      ]
    },
    "descriptionPattern": {
      "type": "string",
      "pattern": "^[A-Za-z0-9 ,.'?~=(){}!@#$^&*\\-+/_\\[\\]]+$"
    },
    "descriptionArray": {
      "$ref": "#/definitions/valStringArray",
      "items": { "type": "string", "minLength": 1, "maxLength": 200, "allOf": [ { "$ref": "#/definitions/descriptionPattern" } ] }
    },
    "valDescription": {
      "oneOf": [
        { "$ref": "#/definitions/descriptionPattern", "allOf": { "$ref": "#/definitions/valStringSimple" } },
        { "$ref": "#/definitions/descriptionArray" }
      ]
    },
    "objPropList": {
      "type": "object",
      "propertyNames": { "maxLength": 40, "allOf": [ { "$ref": "#/definitions/propName" } ] },
      "additionalProperties": { "$ref": "#/definitions/propDef" } },
    "arrayShortPropListForGroup": {
      "type": "array",
      "description": "A list of property names, all inheriting the parameters defined by the group",
      "items": { "$ref": "#/definitions/propName" } },
    "objPropListForGroup": { "oneOf": [
        { "$ref": "#/definitions/objPropList" },
        { "$ref": "#/definitions/arrayShortPropListForGroup" } ] },
    "objPropOrGroup": {
      "type": "object",
      "properties": {
        "type": { "$ref": "#/definitions/propertytype" },
        "enum": { "type": "string" },
        "default": { "description": "The hard default value for the realm property (ultimate fallback)" }
      },
      "allOf": [
        { "if": { "properties": { "enum": { "minLength": 1 } }, "required": [ "enum" ] },
          "then": { "properties": { "type": { "const": "enum" } } } },
        { "if": { "properties": { "type": { "const": "enum" } } },
          "then": {
            "required": [ "enum" ],
            "properties": {
              "enum": { "$ref": "#/definitions/propName", "description": "The exact name of the C# Enum class." },
              "default": { "$ref": "#/definitions/valEnum" } } } },
        { "if": { "properties": { "type": { "const": "integer" } } },
          "then": {
            "properties": {
              "default": { "$ref": "#/definitions/valInt" },
              "min_value": { "$ref": "#/definitions/valInt" },
              "max_value": { "$ref": "#/definitions/valInt" } } } },
        { "if": { "properties": { "type": { "const": "int64" } } },
          "then": { "properties": {
              "default": { "$ref": "#/definitions/valLong" },
              "min_value": { "$ref": "#/definitions/valLong" },
              "max_value": { "$ref": "#/definitions/valLong" } } } },
        { "if": { "properties": { "type": { "const": "float" } } },
          "then": { "properties": {
              "default": { "$ref": "#/definitions/valFloat" },
              "min_value": { "$ref": "#/definitions/valFloat" },
              "max_value": { "$ref": "#/definitions/valFloat" } } } },
        { "if": { "properties": { "type": { "const": "boolean" } } },
          "then": { "properties": { "default": { "$ref": "#/definitions/valBool" } } } },
        { "if": { "properties": { "type": { "const": "string" } } },
          "then": { "properties": { "default": { "$ref": "#/definitions/valString" } } } }
      ]
    },
    "objProp": {
      "properties": {
        "description": { "$ref": "#/definitions/valDescription" },
        "description_format": false
      },
      "allOf": [ { "$ref": "#/definitions/objPropOrGroup" } ],
      "unevaluatedProperties": false
    },
    "propDef": {
      "oneOf": [
        { "$ref": "#/definitions/objProp" },
        { "$ref": "#/definitions/valDescription",
          "description": "The description of the property, or the short description if contained in a group defining description_format" }
      ]
    },
    "propertytype": { "type": "string", "enum": [ "integer", "boolean", "float", "int64", "string", "enum" ] },
    "group": {
      "properties": {
        "description_format": { "$ref": "#/definitions/valDescription" },
        "key_prefix": {
          "maxLength": 30, "allOf": [ { "$ref": "#/definitions/propName" } ],
          "description": "Property names in this group will be prefixed with this value" },
        "key_suffix": {
          "maxLength": 30, "allOf": [ { "$ref": "#/definitions/propName" } ],
          "description": "Property names in this group will be suffixed with this value" },
        "properties": {
          "$ref": "#/definitions/objPropListForGroup"
        }
      },
      "allOf": [ { "$ref": "#/definitions/objPropOrGroup" } ],
      "unevaluatedProperties": false
    }
  },
  "properties": {
    "$schema_version": { "type": "integer", "const": 1 },
    "namespace": { "type": "string" },
    "groups": {
      "type": "array",
      "description": "A group of properties that can share the same set of defaults.",
      "items": { "$ref": "#/definitions/group" }
    },
    "properties": { "$ref": "#/definitions/objPropList" },
    "additionalProperties": false
  },
  "required": [
    "$schema_version",
    "namespace"
  ]
}
